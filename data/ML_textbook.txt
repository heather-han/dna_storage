machine learning                                                “An astonishing machine learning book: intuitive, full
                                                                 of examples, fun to read but still comprehensive,
                                                                 strong, and deep! A great starting point for any univer-
                                                                 sity student—and a must-have for anybody in the field.”
                                                                 Jan Peters, Darmstadt University of Technology;
                                                                 Max-Planck Institute for Intelligent Systems

                                                                “Kevin Murphy excels at unraveling the complexities
                                                                 of machine learning methods while motivating the
                                                                 reader with a stream of illustrated examples and
                                                                 real-world case studies. The accompanying software

Machine Learning                                                 package includes source code for many of the figures,
                                                                 making it both easy and very tempting to dive in and
A Probabilistic Perspective                                      explore these methods for yourself. A must-buy for
                                                                 anyone interested in machine learning or curious
Kevin P. Murphy                                                  about how to extract useful knowledge from big data.”
                                                                 John Winn, Microsoft Research

                                                                “This is a wonderful book that starts with basic topics
                                                                 in statistical modeling, culminating in the most ad-
Today’s Web-enabled deluge of electronic data calls for          vanced topics. It provides both the theoretical foun-
automated methods of data analysis. Machine learning             dations of probabilistic machine learning as well as
provides these, developing methods that can automatically        practical tools, in the form of MATLAB code. The book
detect patterns in data and use the uncovered patterns to        should be on the shelf of any student interested in the
predict future data. This textbook offers a comprehensive        topic, and any practitioner working in the field.”
and self-contained introduction to the field of machine          Yoram Singer, Google Research
learning, a unified, probabilistic approach.
     The coverage combines breadth and depth, offering          “This book will be an essential reference for practitio-
necessary background material on such topics as probabili-       ners of modern machine learning. It covers the basic
ty, optimization, and linear algebra as well as discussion of    concepts needed to understand the field as a whole,
recent developments in the field, including conditional ran-     and the powerful modern methods that build on those
dom fields, L1 regularization, and deep learning. The book       concepts. In Machine Learning, the language of prob-
is written in an informal, accessible style, complete with       ability and statistics reveals important connections be-
pseudo-code for the most important algorithms. All topics        tween seemingly disparate algorithms and strategies.
are copiously illustrated with color images and worked           Thus, its readers will become articulate in a holistic
examples drawn from such application domains as biology,         view of the state-of-the-art and poised to build the next
text processing, computer vision, and robotics. Rather than      generation of machine learning algorithms.”
providing a cookbook of different heuristic methods, the         David Blei, Princeton University
book stresses a principled model-based approach, often
using the language of graphical models to specify mod-
els in a concise and intuitive way. Almost all the models



                                                                                                                                     Machine Learning
described have been implemented in a MATLAB software
package—PMTK (probabilistic modeling toolkit)—that is                                                            978-0-262-01802-9
freely available online. The book is suitable for upper-level   The MIT Press
undergraduates with an introductory-level college math          Massachusetts Institute of Technology


                                                                                                                                     A Probabilistic Perspective
background and beginning graduate students.                     Cambridge, Massachusetts 02142
                                                                http://mitpress.mit.edu
Kevin P. Murphy is a Research Scientist at Google. Previ-
ously, he was Associate Professor of Computer Science
and Statistics at the University of British Columbia.
                                                                The cover image is based on sequential Bayesian updating
Adaptive Computation and Machine Learning series                of a 2D Gaussian distribution. See Figure 7.11 for details.                             Kevin P. Murphy
Machine Learning: A Probabilistic Perspective
                    Machine Learning
                    A Probabilistic Perspective


                   Kevin P. Murphy




The MIT Press
Cambridge, Massachusetts
London, England
© 2012 Massachusetts Institute of Technology




All rights reserved. No part of this book may be reproduced in any form by any electronic or mechanical
means (including photocopying, recording, or information storage and retrieval) without permission in
writing from the publisher.


For information about special quantity discounts, please email special_sales@mitpress.mit.edu


This book was set in the LATEX programming language by the author. Printed and bound in the United
States of America.


Library of Congress Cataloging-in-Publication Information

     Murphy, Kevin P.
     Machine learning : a probabilistic perspective / Kevin P. Murphy.
     p. cm. — (Adaptive computation and machine learning series)
     Includes bibliographical references and index.
     ISBN 978-0-262-01802-9 (hardcover : alk. paper)
     1. Machine learning. 2. Probabilities. I. Title.
     Q325.5.M87 2012
     006.3’1—dc23
     2012004558



10     9 8    7 6 5 4 3         2 1
This book is dedicated to Alessandro, Michael and Stefano,
and to the memory of Gerard Joseph Murphy.
Contents




Preface      xxvii

1   Introduction      1
    1.1   Machine learning: what and why?        1
          1.1.1    Types of machine learning         2
    1.2   Supervised learning      3
          1.2.1    Classiﬁcation      3
          1.2.2    Regression       8
    1.3   Unsupervised learning       9
          1.3.1    Discovering clusters      10
          1.3.2    Discovering latent factors      11
          1.3.3    Discovering graph structure         13
          1.3.4    Matrix completion       14
    1.4   Some basic concepts in machine learning         16
          1.4.1    Parametric vs non-parametric models       16
          1.4.2    A simple non-parametric classiﬁer: K-nearest neighbors    16
          1.4.3    The curse of dimensionality         18
          1.4.4    Parametric models for classiﬁcation and regression   19
          1.4.5    Linear regression      19
          1.4.6    Logistic regression     21
          1.4.7    Overﬁtting      22
          1.4.8    Model selection      22
          1.4.9    No free lunch theorem        24
2 Probability     27
  2.1  Introduction      27
  2.2  A brief review of probability theory   28
       2.2.1     Discrete random variables    28
       2.2.2     Fundamental rules       28
       2.2.3     Bayes rule    29
       2.2.4     Independence and conditional independence        30
       2.2.5     Continuous random variables     32
viii                                                                              CONTENTS


             2.2.6     Quantiles       33
             2.2.7     Mean and variance         33
       2.3   Some common discrete distributions            34
             2.3.1     The binomial and Bernoulli distributions      34
             2.3.2     The multinomial and multinoulli distributions      35
             2.3.3     The Poisson distribution        37
             2.3.4     The empirical distribution         37
       2.4   Some common continuous distributions             38
             2.4.1     Gaussian (normal) distribution         38
             2.4.2     Degenerate pdf        39
             2.4.3     The Laplace distribution        41
             2.4.4     The gamma distribution          41
             2.4.5     The beta distribution       42
             2.4.6     Pareto distribution      43
       2.5   Joint probability distributions      44
             2.5.1     Covariance and correlation          44
             2.5.2     The multivariate Gaussian         46
             2.5.3     Multivariate Student t distribution       46
             2.5.4     Dirichlet distribution      47
       2.6   Transformations of random variables           49
             2.6.1     Linear transformations        49
             2.6.2     General transformations         50
             2.6.3     Central limit theorem        51
       2.7   Monte Carlo approximation          52
             2.7.1     Example: change of variables, the MC way        53
             2.7.2     Example: estimating π by Monte Carlo integration      54
             2.7.3     Accuracy of Monte Carlo approximation        54
       2.8   Information theory        56
             2.8.1     Entropy       56
             2.8.2     KL divergence        57
             2.8.3     Mutual information        59
3      Generative models for discrete data         65
       3.1   Introduction      65
       3.2   Bayesian concept learning        65
             3.2.1     Likelihood      67
             3.2.2     Prior     67
             3.2.3     Posterior     68
             3.2.4     Posterior predictive distribution   71
             3.2.5     A more complex prior         72
       3.3   The beta-binomial model         72
             3.3.1     Likelihood      73
             3.3.2     Prior     74
             3.3.3     Posterior     75
             3.3.4     Posterior predictive distribution   77
CONTENTS                                                                              ix


    3.4    The Dirichlet-multinomial model      78
           3.4.1    Likelihood      79
           3.4.2    Prior     79
           3.4.3    Posterior     79
           3.4.4    Posterior predictive    81
    3.5    Naive Bayes classiﬁers      82
           3.5.1    Model ﬁtting       83
           3.5.2    Using the model for prediction      85
           3.5.3    The log-sum-exp trick      86
           3.5.4    Feature selection using mutual information             86
           3.5.5    Classifying documents using bag of words              87
4   Gaussian models         97
    4.1   Introduction      97
          4.1.1     Notation       97
          4.1.2     Basics      97
          4.1.3     MLE for an MVN          99
          4.1.4     Maximum entropy derivation of the Gaussian *                101
    4.2   Gaussian discriminant analysis          101
          4.2.1     Quadratic discriminant analysis (QDA)             102
          4.2.2     Linear discriminant analysis (LDA)           103
          4.2.3     Two-class LDA        104
          4.2.4     MLE for discriminant analysis            106
          4.2.5     Strategies for preventing overﬁtting          106
          4.2.6     Regularized LDA *         107
          4.2.7     Diagonal LDA        108
          4.2.8     Nearest shrunken centroids classiﬁer *             109
    4.3   Inference in jointly Gaussian distributions          110
          4.3.1     Statement of the result         111
          4.3.2     Examples        111
          4.3.3     Information form         115
          4.3.4     Proof of the result *       116
    4.4   Linear Gaussian systems         119
          4.4.1     Statement of the result         119
          4.4.2     Examples        120
          4.4.3     Proof of the result *       124
    4.5   Digression: The Wishart distribution *           125
          4.5.1     Inverse Wishart distribution          126
          4.5.2     Visualizing the Wishart distribution *           127
    4.6   Inferring the parameters of an MVN            127
          4.6.1     Posterior distribution of μ         128
          4.6.2     Posterior distribution of Σ *          128
          4.6.3     Posterior distribution of μ and Σ *            132
          4.6.4     Sensor fusion with unknown precisions *               138
x                                                                                CONTENTS


5 Bayesian statistics       149
  5.1   Introduction       149
  5.2   Summarizing posterior distributions            149
        5.2.1     MAP estimation           149
        5.2.2     Credible intervals         152
        5.2.3     Inference for a difference in proportions         154
  5.3   Bayesian model selection          155
        5.3.1     Bayesian Occam’s razor            156
        5.3.2     Computing the marginal likelihood (evidence)            158
        5.3.3     Bayes factors       163
        5.3.4     Jeffreys-Lindley paradox *          164
  5.4   Priors      165
        5.4.1     Uninformative priors           165
        5.4.2     Jeffreys priors *       166
        5.4.3     Robust priors        168
        5.4.4     Mixtures of conjugate priors           168
  5.5   Hierarchical Bayes        171
        5.5.1     Example: modeling related cancer rates           171
  5.6   Empirical Bayes        172
        5.6.1     Example: beta-binomial model             173
        5.6.2     Example: Gaussian-Gaussian model             173
  5.7   Bayesian decision theory          176
        5.7.1     Bayes estimators for common loss functions            177
        5.7.2     The false positive vs false negative tradeoff        180
        5.7.3     Other topics *        184
6 Frequentist statistics      191
  6.1   Introduction      191
  6.2   Sampling distribution of an estimator         191
        6.2.1     Bootstrap       192
        6.2.2     Large sample theory for the MLE *         193
  6.3   Frequentist decision theory        194
        6.3.1     Bayes risk       195
        6.3.2     Minimax risk         196
        6.3.3     Admissible estimators        197
  6.4   Desirable properties of estimators        200
        6.4.1     Consistent estimators        200
        6.4.2     Unbiased estimators         200
        6.4.3     Minimum variance estimators           201
        6.4.4     The bias-variance tradeoff        202
  6.5   Empirical risk minimization         204
        6.5.1     Regularized risk minimization         205
        6.5.2     Structural risk minimization        206
        6.5.3     Estimating the risk using cross validation     206
        6.5.4     Upper bounding the risk using statistical learning theory *   209
CONTENTS                                                                         xi


          6.5.5    Surrogate loss functions       210
    6.6   Pathologies of frequentist statistics *     211
          6.6.1    Counter-intuitive behavior of conﬁdence intervals       212
          6.6.2    p-values considered harmful          213
          6.6.3    The likelihood principle       214
          6.6.4    Why isn’t everyone a Bayesian?          215
7   Linear regression       217
    7.1   Introduction      217
    7.2   Model speciﬁcation        217
    7.3   Maximum likelihood estimation (least squares)        217
          7.3.1     Derivation of the MLE       219
          7.3.2     Geometric interpretation       220
          7.3.3     Convexity      221
    7.4   Robust linear regression *      223
    7.5   Ridge regression      225
          7.5.1     Basic idea      225
          7.5.2     Numerically stable computation *       227
          7.5.3     Connection with PCA *        228
          7.5.4     Regularization effects of big data    230
    7.6   Bayesian linear regression      231
          7.6.1     Computing the posterior        232
          7.6.2     Computing the posterior predictive      233
          7.6.3     Bayesian inference when σ 2 is unknown *       234
          7.6.4     EB for linear regression (evidence procedure)    238
8 Logistic regression         245
  8.1    Introduction       245
  8.2    Model speciﬁcation        245
  8.3    Model ﬁtting        245
         8.3.1     MLE        246
         8.3.2     Steepest descent       247
         8.3.3     Newton’s method         249
         8.3.4     Iteratively reweighted least squares (IRLS)     250
         8.3.5     Quasi-Newton (variable metric) methods         251
         8.3.6     2 regularization      252
         8.3.7     Multi-class logistic regression     252
  8.4    Bayesian logistic regression      254
         8.4.1     Laplace approximation         255
         8.4.2     Derivation of the BIC       255
         8.4.3     Gaussian approximation for logistic regression      256
         8.4.4     Approximating the posterior predictive       256
         8.4.5     Residual analysis (outlier detection) *     260
  8.5    Online learning and stochastic optimization        261
         8.5.1     Online learning and regret minimization        262
xii                                                                           CONTENTS


            8.5.2    Stochastic optimization and risk minimization     262
            8.5.3    The LMS algorithm         264
            8.5.4    The perceptron algorithm       265
            8.5.5    A Bayesian view        266
      8.6   Generative vs discriminative classiﬁers     267
            8.6.1    Pros and cons of each approach         268
            8.6.2    Dealing with missing data       269
            8.6.3    Fisher’s linear discriminant analysis (FLDA) *   271
9 Generalized linear models and the exponential family          281
  9.1   Introduction      281
  9.2   The exponential family        281
        9.2.1     Deﬁnition       282
        9.2.2     Examples       282
        9.2.3     Log partition function       284
        9.2.4     MLE for the exponential family         286
        9.2.5     Bayes for the exponential family *       287
        9.2.6     Maximum entropy derivation of the exponential family *    289
  9.3   Generalized linear models (GLMs)         290
        9.3.1     Basics      290
        9.3.2     ML and MAP estimation          292
        9.3.3     Bayesian inference      293
  9.4   Probit regression      293
        9.4.1     ML/MAP estimation using gradient-based optimization     294
        9.4.2     Latent variable interpretation       294
        9.4.3     Ordinal probit regression *       295
        9.4.4     Multinomial probit models *         295
  9.5   Multi-task learning      296
        9.5.1     Hierarchical Bayes for multi-task learning    296
        9.5.2     Application to personalized email spam ﬁltering   296
        9.5.3     Application to domain adaptation         297
        9.5.4     Other kinds of prior      297
  9.6   Generalized linear mixed models *         298
        9.6.1     Example: semi-parametric GLMMs for medical data       298
        9.6.2     Computational issues        300
  9.7   Learning to rank *      300
        9.7.1     The pointwise approach         301
        9.7.2     The pairwise approach         301
        9.7.3     The listwise approach       302
        9.7.4     Loss functions for ranking        303
10 Directed graphical models (Bayes nets)          307
   10.1 Introduction     307
         10.1.1   Chain rule     307
         10.1.2   Conditional independence          308
CONTENTS                                                                       xiii


          10.1.3    Graphical models       308
          10.1.4    Graph terminology       309
          10.1.5    Directed graphical models        310
   10.2   Examples        311
          10.2.1    Naive Bayes classiﬁers      311
          10.2.2    Markov and hidden Markov models          312
          10.2.3    Medical diagnosis      313
          10.2.4    Genetic linkage analysis *      315
          10.2.5    Directed Gaussian graphical models *        318
   10.3   Inference      319
   10.4   Learning       320
          10.4.1    Plate notation     320
          10.4.2    Learning from complete data         322
          10.4.3    Learning with missing and/or latent variables     323
   10.5   Conditional independence properties of DGMs          324
          10.5.1    d-separation and the Bayes Ball algorithm (global Markov
                    properties)    324
          10.5.2    Other Markov properties of DGMs         327
          10.5.3    Markov blanket and full conditionals      327
   10.6   Inﬂuence (decision) diagrams *       328
11 Mixture models and the EM algorithm           337
   11.1  Latent variable models      337
   11.2 Mixture models       337
         11.2.1   Mixtures of Gaussians       339
         11.2.2   Mixture of multinoullis      340
         11.2.3   Using mixture models for clustering      340
         11.2.4   Mixtures of experts      342
   11.3 Parameter estimation for mixture models        345
         11.3.1   Unidentiﬁability      346
         11.3.2   Computing a MAP estimate is non-convex         347
   11.4 The EM algorithm        348
         11.4.1   Basic idea     349
         11.4.2   EM for GMMs         350
         11.4.3   EM for mixture of experts       357
         11.4.4   EM for DGMs with hidden variables        358
         11.4.5   EM for the Student distribution *     359
         11.4.6   EM for probit regression *      362
         11.4.7   Theoretical basis for EM *      363
         11.4.8   Online EM       365
         11.4.9   Other EM variants *       367
   11.5 Model selection for latent variable models      370
         11.5.1   Model selection for probabilistic models     370
         11.5.2   Model selection for non-probabilistic methods      370
   11.6 Fitting models with missing data        372
xiv                                                                               CONTENTS


          11.6.1   EM for the MLE of an MVN with missing data        373
12 Latent linear models        381
   12.1 Factor analysis      381
         12.1.1   FA is a low rank parameterization of an MVN        381
         12.1.2   Inference of the latent factors      382
         12.1.3   Unidentiﬁability      383
         12.1.4   Mixtures of factor analysers       385
         12.1.5   EM for factor analysis models        386
         12.1.6   Fitting FA models with missing data        387
   12.2 Principal components analysis (PCA)         387
         12.2.1   Classical PCA: statement of the theorem        387
         12.2.2   Proof *      389
         12.2.3   Singular value decomposition (SVD)         392
         12.2.4   Probabilistic PCA      395
         12.2.5   EM algorithm for PCA        396
   12.3 Choosing the number of latent dimensions           398
         12.3.1   Model selection for FA/PPCA         398
         12.3.2   Model selection for PCA        399
   12.4 PCA for categorical data       402
   12.5 PCA for paired and multi-view data         404
         12.5.1   Supervised PCA (latent factor regression)      405
         12.5.2   Partial least squares     406
         12.5.3   Canonical correlation analysis       407
   12.6 Independent Component Analysis (ICA)           407
         12.6.1   Maximum likelihood estimation          410
         12.6.2   The FastICA algorithm        411
         12.6.3   Using EM        414
         12.6.4   Other estimation principles *       415
13 Sparse linear models       421
   13.1 Introduction      421
   13.2 Bayesian variable selection      422
         13.2.1   The spike and slab model        424
         13.2.2   From the Bernoulli-Gaussian model to 0 regularization       425
         13.2.3   Algorithms       426
   13.3 1 regularization: basics      429
         13.3.1   Why does 1 regularization yield sparse solutions?     430
         13.3.2   Optimality conditions for lasso     431
         13.3.3   Comparison of least squares, lasso, ridge and subset selection    435
         13.3.4   Regularization path       436
         13.3.5   Model selection       439
         13.3.6   Bayesian inference for linear models with Laplace priors      440
   13.4 1 regularization: algorithms      441
         13.4.1   Coordinate descent       441
CONTENTS                                                                                 xv


          13.4.2    LARS and other homotopy methods           441
          13.4.3    Proximal and gradient projection methods        442
          13.4.4    EM for lasso       447
   13.5   1 regularization: extensions      449
          13.5.1    Group Lasso        449
          13.5.2    Fused lasso       454
          13.5.3    Elastic net (ridge and lasso combined)      455
   13.6   Non-convex regularizers        457
          13.6.1    Bridge regression      458
          13.6.2    Hierarchical adaptive lasso      458
          13.6.3    Other hierarchical priors      462
   13.7   Automatic relevance determination (ARD)/sparse Bayesian learning (SBL)   463
          13.7.1    ARD for linear regression       463
          13.7.2    Whence sparsity?       465
          13.7.3    Connection to MAP estimation         465
          13.7.4    Algorithms for ARD *        466
          13.7.5    ARD for logistic regression      468
   13.8   Sparse coding *       468
          13.8.1    Learning a sparse coding dictionary       469
          13.8.2    Results of dictionary learning from image patches    470
          13.8.3    Compressed sensing         472
          13.8.4    Image inpainting and denoising        472
14 Kernels      479
   14.1 Introduction      479
   14.2 Kernel functions       479
         14.2.1   RBF kernels      480
         14.2.2   Kernels for comparing documents        480
         14.2.3   Mercer (positive deﬁnite) kernels     481
         14.2.4   Linear kernels     482
         14.2.5   Matern kernels       482
         14.2.6   String kernels     483
         14.2.7   Pyramid match kernels        484
         14.2.8   Kernels derived from probabilistic generative models     485
   14.3 Using kernels inside GLMs        486
         14.3.1   Kernel machines        486
         14.3.2   L1VMs, RVMs, and other sparse vector machines        487
   14.4 The kernel trick      488
         14.4.1   Kernelized nearest neighbor classiﬁcation     489
         14.4.2   Kernelized K-medoids clustering      489
         14.4.3   Kernelized ridge regression      492
         14.4.4   Kernel PCA       493
   14.5 Support vector machines (SVMs)         496
         14.5.1   SVMs for regression       497
         14.5.2   SVMs for classiﬁcation      498
xvi                                                                           CONTENTS


             14.5.3    Choosing C        504
             14.5.4    Summary of key points         504
             14.5.5    A probabilistic interpretation of SVMs     505
      14.6   Comparison of discriminative kernel methods         505
      14.7   Kernels for building generative models        507
             14.7.1    Smoothing kernels        507
             14.7.2    Kernel density estimation (KDE)       508
             14.7.3    From KDE to KNN          509
             14.7.4    Kernel regression      510
             14.7.5    Locally weighted regression       512
15 Gaussian processes       515
   15.1 Introduction      515
   15.2 GPs for regression      516
         15.2.1   Predictions using noise-free observations      517
         15.2.2   Predictions using noisy observations       518
         15.2.3   Effect of the kernel parameters     519
         15.2.4   Estimating the kernel parameters       521
         15.2.5   Computational and numerical issues *         524
         15.2.6   Semi-parametric GPs *       524
   15.3 GPs meet GLMs         525
         15.3.1   Binary classiﬁcation      525
         15.3.2   Multi-class classiﬁcation     528
         15.3.3   GPs for Poisson regression      531
   15.4 Connection with other methods         532
         15.4.1   Linear models compared to GPs        532
         15.4.2   Linear smoothers compared to GPs         533
         15.4.3   SVMs compared to GPs         534
         15.4.4   L1VM and RVMs compared to GPs           534
         15.4.5   Neural networks compared to GPs         535
         15.4.6   Smoothing splines compared to GPs *         536
         15.4.7   RKHS methods compared to GPs *          538
   15.5 GP latent variable model       540
   15.6 Approximation methods for large datasets        542
16 Adaptive basis function models        543
   16.1 Introduction     543
   16.2 Classiﬁcation and regression trees (CART)   544
         16.2.1   Basics     544
         16.2.2   Growing a tree      545
         16.2.3   Pruning a tree     549
         16.2.4   Pros and cons of trees      550
         16.2.5   Random forests       550
         16.2.6   CART compared to hierarchical mixture of experts *    551
   16.3 Generalized additive models       552
CONTENTS                                                                                  xvii


          16.3.1    Backﬁtting       552
          16.3.2    Computational efficiency       553
          16.3.3    Multivariate adaptive regression splines (MARS)      553
   16.4   Boosting      554
          16.4.1    Forward stagewise additive modeling         555
          16.4.2    L2boosting        557
          16.4.3    AdaBoost        558
          16.4.4    LogitBoost       559
          16.4.5    Boosting as functional gradient descent       560
          16.4.6    Sparse boosting       561
          16.4.7    Multivariate adaptive regression trees (MART)      562
          16.4.8    Why does boosting work so well?         562
          16.4.9    A Bayesian view        563
   16.5   Feedforward neural networks (multilayer perceptrons)        563
          16.5.1    Convolutional neural networks        564
          16.5.2    Other kinds of neural networks        568
          16.5.3    A brief history of the ﬁeld      568
          16.5.4    The backpropagation algorithm         569
          16.5.5    Identiﬁability      572
          16.5.6    Regularization       572
          16.5.7    Bayesian inference *       576
   16.6   Ensemble learning         580
          16.6.1    Stacking       580
          16.6.2    Error-correcting output codes       581
          16.6.3    Ensemble learning is not equivalent to Bayes model averaging    581
   16.7   Experimental comparison          582
          16.7.1    Low-dimensional features        582
          16.7.2    High-dimensional features        583
   16.8   Interpreting black-box models        585
17 Markov and hidden Markov models            589
   17.1 Introduction      589
   17.2 Markov models        589
        17.2.1    Transition matrix      589
        17.2.2    Application: Language modeling       591
        17.2.3    Stationary distribution of a Markov chain *     596
        17.2.4    Application: Google’s PageRank algorithm for web page ranking *     600
   17.3 Hidden Markov models          603
        17.3.1    Applications of HMMs        604
   17.4 Inference in HMMs        606
        17.4.1    Types of inference problems for temporal models     606
        17.4.2    The forwards algorithm       609
        17.4.3    The forwards-backwards algorithm       610
        17.4.4    The Viterbi algorithm      612
        17.4.5    Forwards ﬁltering, backwards sampling       616
xviii                                                                             CONTENTS


    17.5   Learning for HMMs       617
           17.5.1   Training with fully observed data  617
           17.5.2   EM for HMMs (the Baum-Welch algorithm)        618
           17.5.3   Bayesian methods for “ﬁtting” HMMs *     620
           17.5.4   Discriminative training      620
           17.5.5   Model selection      621
    17.6   Generalizations of HMMs       621
           17.6.1   Variable duration (semi-Markov) HMMs      622
           17.6.2   Hierarchical HMMs        624
           17.6.3   Input-output HMMs         625
           17.6.4   Auto-regressive and buried HMMs      626
           17.6.5   Factorial HMM       627
           17.6.6   Coupled HMM and the inﬂuence model         628
           17.6.7   Dynamic Bayesian networks (DBNs)      628
18 State space models      631
   18.1 Introduction      631
   18.2 Applications of SSMs       632
          18.2.1  SSMs for object tracking      632
          18.2.2  Robotic SLAM        633
          18.2.3  Online parameter learning using recursive least squares   636
          18.2.4  SSM for time series forecasting *      637
   18.3 Inference in LG-SSM        640
          18.3.1  The Kalman ﬁltering algorithm        640
          18.3.2  The Kalman smoothing algorithm          643
   18.4 Learning for LG-SSM        646
          18.4.1  Identiﬁability and numerical stability     646
          18.4.2  Training with fully observed data      647
          18.4.3  EM for LG-SSM        647
          18.4.4  Subspace methods        647
          18.4.5  Bayesian methods for “ﬁtting” LG-SSMs        647
   18.5 Approximate online inference for non-linear, non-Gaussian SSMs      647
          18.5.1  Extended Kalman ﬁlter (EKF)       648
          18.5.2  Unscented Kalman ﬁlter (UKF)        650
          18.5.3  Assumed density ﬁltering (ADF)        652
   18.6 Hybrid discrete/continuous SSMs        655
          18.6.1  Inference      656
          18.6.2  Application: data association and multi-target tracking   658
          18.6.3  Application: fault diagnosis     659
          18.6.4  Application: econometric forecasting       660
19 Undirected graphical models (Markov random ﬁelds)           661
   19.1 Introduction     661
   19.2 Conditional independence properties of UGMs         661
         19.2.1   Key properties   661
CONTENTS                                                                                  xix


          19.2.2    An undirected alternative to d-separation       663
          19.2.3    Comparing directed and undirected graphical models        664
   19.3   Parameterization of MRFs         665
          19.3.1    The Hammersley-Clifford theorem           665
          19.3.2    Representing potential functions        667
   19.4   Examples of MRFs         668
          19.4.1    Ising model       668
          19.4.2    Hopﬁeld networks         669
          19.4.3    Potts model       671
          19.4.4    Gaussian MRFs         672
          19.4.5    Markov logic networks *        674
   19.5   Learning       676
          19.5.1    Training maxent models using gradient methods         676
          19.5.2    Training partially observed maxent models         677
          19.5.3    Approximate methods for computing the MLEs of MRFs          678
          19.5.4    Pseudo likelihood       678
          19.5.5    Stochastic maximum likelihood          679
          19.5.6    Feature induction for maxent models *         680
          19.5.7    Iterative proportional ﬁtting (IPF) *     681
   19.6   Conditional random ﬁelds (CRFs)         684
          19.6.1    Chain-structured CRFs, MEMMs and the label-bias problem         684
          19.6.2    Applications of CRFs       686
          19.6.3    CRF training       692
   19.7   Structural SVMs        693
          19.7.1    SSVMs: a probabilistic view        693
          19.7.2    SSVMs: a non-probabilistic view         695
          19.7.3    Cutting plane methods for ﬁtting SSVMs         698
          19.7.4    Online algorithms for ﬁtting SSVMs         700
          19.7.5    Latent structural SVMs       701
20 Exact inference for graphical models         707
   20.1 Introduction       707
   20.2 Belief propagation for trees      707
         20.2.1   Serial protocol     707
         20.2.2   Parallel protocol     709
         20.2.3   Gaussian BP *      710
         20.2.4   Other BP variants *      712
   20.3 The variable elimination algorithm       714
         20.3.1   The generalized distributive law *  717
         20.3.2   Computational complexity of VE     717
         20.3.3   A weakness of VE        720
   20.4 The junction tree algorithm *       720
         20.4.1   Creating a junction tree      720
         20.4.2   Message passing on a junction tree    722
         20.4.3   Computational complexity of JTA    725
xx                                                                                    CONTENTS


            20.4.4  JTA generalizations *      726
     20.5   Computational intractability of exact inference in the worst case   726
            20.5.1  Approximate inference        727
21 Variational inference       731
   21.1 Introduction      731
   21.2 Variational inference      732
         21.2.1   Alternative interpretations of the variational objective  733
         21.2.2   Forward or reverse KL? *       733
   21.3 The mean ﬁeld method          735
         21.3.1   Derivation of the mean ﬁeld update equations          736
         21.3.2   Example: mean ﬁeld for the Ising model          737
   21.4 Structured mean ﬁeld *        739
         21.4.1   Example: factorial HMM         740
   21.5 Variational Bayes      742
         21.5.1   Example: VB for a univariate Gaussian         742
         21.5.2   Example: VB for linear regression        746
   21.6 Variational Bayes EM        749
         21.6.1   Example: VBEM for mixtures of Gaussians *           750
   21.7 Variational message passing and VIBES         756
   21.8 Local variational bounds *       756
         21.8.1   Motivating applications       756
         21.8.2   Bohning’s quadratic bound to the log-sum-exp function       758
         21.8.3   Bounds for the sigmoid function         760
         21.8.4   Other bounds and approximations to the log-sum-exp function *          762
         21.8.5   Variational inference based on upper bounds          763
22 More variational inference       767
   22.1 Introduction      767
   22.2 Loopy belief propagation: algorithmic issues       767
         22.2.1   A brief history     767
         22.2.2   LBP on pairwise models         768
         22.2.3   LBP on a factor graph       769
         22.2.4   Convergence       771
         22.2.5   Accuracy of LBP       774
         22.2.6   Other speedup tricks for LBP *       775
   22.3 Loopy belief propagation: theoretical issues *      776
         22.3.1   UGMs represented in exponential family form         776
         22.3.2   The marginal polytope        777
         22.3.3   Exact inference as a variational optimization problem      778
         22.3.4   Mean ﬁeld as a variational optimization problem        779
         22.3.5   LBP as a variational optimization problem       779
         22.3.6   Loopy BP vs mean ﬁeld         783
   22.4 Extensions of belief propagation *       783
         22.4.1   Generalized belief propagation      783
CONTENTS                                                                              xxi


          22.4.2   Convex belief propagation       785
   22.5   Expectation propagation       787
          22.5.1   EP as a variational inference problem     788
          22.5.2   Optimizing the EP objective using moment matching            789
          22.5.3   EP for the clutter problem      791
          22.5.4   LBP is a special case of EP      792
          22.5.5   Ranking players using TrueSkill      793
          22.5.6   Other applications of EP      799
   22.6   MAP state estimation      799
          22.6.1   Linear programming relaxation        799
          22.6.2   Max-product belief propagation        800
          22.6.3   Graphcuts       801
          22.6.4   Experimental comparison of graphcuts and BP     804
          22.6.5   Dual decomposition        806
23 Monte Carlo inference       815
   23.1 Introduction      815
   23.2 Sampling from standard distributions         815
        23.2.1    Using the cdf       815
        23.2.2    Sampling from a Gaussian (Box-Muller method)            817
   23.3 Rejection sampling       817
        23.3.1    Basic idea      817
        23.3.2    Example       818
        23.3.3    Application to Bayesian statistics       819
        23.3.4    Adaptive rejection sampling        819
        23.3.5    Rejection sampling in high dimensions           820
   23.4 Importance sampling         820
        23.4.1    Basic idea      820
        23.4.2    Handling unnormalized distributions          821
        23.4.3    Importance sampling for a DGM: likelihood weighting           822
        23.4.4    Sampling importance resampling (SIR)           822
   23.5 Particle ﬁltering     823
        23.5.1    Sequential importance sampling          824
        23.5.2    The degeneracy problem         825
        23.5.3    The resampling step       825
        23.5.4    The proposal distribution       827
        23.5.5    Application: robot localization      828
        23.5.6    Application: visual object tracking       828
        23.5.7    Application: time series forecasting        831
   23.6 Rao-Blackwellised particle ﬁltering (RBPF)        831
        23.6.1    RBPF for switching LG-SSMs          831
        23.6.2    Application: tracking a maneuvering target          832
        23.6.3    Application: Fast SLAM        834
24 Markov chain Monte Carlo (MCMC) inference             837
xxii                                                                                    CONTENTS


       24.1   Introduction       837
       24.2   Gibbs sampling         838
              24.2.1    Basic idea       838
              24.2.2    Example: Gibbs sampling for the Ising model         838
              24.2.3    Example: Gibbs sampling for inferring the parameters of a GMM      840
              24.2.4    Collapsed Gibbs sampling *         841
              24.2.5    Gibbs sampling for hierarchical GLMs         844
              24.2.6    BUGS and JAGS         846
              24.2.7    The Imputation Posterior (IP) algorithm       847
              24.2.8    Blocking Gibbs sampling         847
       24.3   Metropolis Hastings algorithm         848
              24.3.1    Basic idea       848
              24.3.2    Gibbs sampling is a special case of MH         849
              24.3.3    Proposal distributions       850
              24.3.4    Adaptive MCMC          853
              24.3.5    Initialization and mode hopping         854
              24.3.6    Why MH works *          854
              24.3.7    Reversible jump (trans-dimensional) MCMC *          855
       24.4   Speed and accuracy of MCMC            856
              24.4.1    The burn-in phase        856
              24.4.2    Mixing rates of Markov chains *         857
              24.4.3    Practical convergence diagnostics        858
              24.4.4    Accuracy of MCMC          860
              24.4.5    How many chains?          862
       24.5   Auxiliary variable MCMC *         863
              24.5.1    Auxiliary variable sampling for logistic regression     863
              24.5.2    Slice sampling       864
              24.5.3    Swendsen Wang          866
              24.5.4    Hybrid/Hamiltonian MCMC *            868
       24.6   Annealing methods          868
              24.6.1    Simulated annealing        869
              24.6.2    Annealed importance sampling           871
              24.6.3    Parallel tempering       871
       24.7   Approximating the marginal likelihood          872
              24.7.1    The candidate method          872
              24.7.2    Harmonic mean estimate           872
              24.7.3    Annealed importance sampling           873
25 Clustering     875
   25.1 Introduction      875
         25.1.1   Measuring (dis)similarity     875
         25.1.2   Evaluating the output of clustering methods *        876
   25.2 Dirichlet process mixture models       879
         25.2.1   From ﬁnite to inﬁnite mixture models      879
         25.2.2   The Dirichlet process     882
CONTENTS                                                                            xxiii


          25.2.3    Applying Dirichlet processes to mixture modeling   885
          25.2.4    Fitting a DP mixture model       886
   25.3   Affinity propagation      887
   25.4   Spectral clustering      890
          25.4.1    Graph Laplacian        891
          25.4.2    Normalized graph Laplacian         892
          25.4.3    Example       893
   25.5   Hierarchical clustering      893
          25.5.1    Agglomerative clustering      895
          25.5.2    Divisive clustering     898
          25.5.3    Choosing the number of clusters        899
          25.5.4    Bayesian hierarchical clustering      899
   25.6   Clustering datapoints and features       901
          25.6.1    Biclustering      903
          25.6.2    Multi-view clustering      903
26 Graphical model structure learning          907
   26.1 Introduction      907
   26.2 Structure learning for knowledge discovery          908
        26.2.1    Relevance networks         908
        26.2.2    Dependency networks          909
   26.3 Learning tree structures       910
        26.3.1    Directed or undirected tree?        911
        26.3.2    Chow-Liu algorithm for ﬁnding the ML tree structure         912
        26.3.3    Finding the MAP forest         912
        26.3.4    Mixtures of trees       914
   26.4 Learning DAG structures        914
        26.4.1    Markov equivalence         914
        26.4.2    Exact structural inference       916
        26.4.3    Scaling up to larger graphs        920
   26.5 Learning DAG structure with latent variables          922
        26.5.1    Approximating the marginal likelihood when we have missing data   922
        26.5.2    Structural EM       925
        26.5.3    Discovering hidden variables         926
        26.5.4    Case study: Google’s Rephil         928
        26.5.5    Structural equation models *         929
   26.6 Learning causal DAGs        931
        26.6.1    Causal interpretation of DAGs         931
        26.6.2    Using causal DAGs to resolve Simpson’s paradox          933
        26.6.3    Learning causal DAG structures          935
   26.7 Learning undirected Gaussian graphical models            938
        26.7.1    MLE for a GGM          938
        26.7.2    Graphical lasso       939
        26.7.3    Bayesian inference for GGM structure *          941
        26.7.4    Handling non-Gaussian data using copulas *          942
xxiv                                                                                  CONTENTS


   26.8   Learning undirected discrete graphical models       942
          26.8.1   Graphical lasso for MRFs/CRFs     942
          26.8.2   Thin junction trees     944
27 Latent variable models for discrete data        945
   27.1 Introduction      945
   27.2 Distributed state LVMs for discrete data       946
         27.2.1   Mixture models        946
         27.2.2   Exponential family PCA        947
         27.2.3   LDA and mPCA          948
         27.2.4   GaP model and non-negative matrix factorization           949
   27.3 Latent Dirichlet allocation (LDA)      950
         27.3.1   Basics      950
         27.3.2   Unsupervised discovery of topics        953
         27.3.3   Quantitatively evaluating LDA as a language model           953
         27.3.4   Fitting using (collapsed) Gibbs sampling       955
         27.3.5   Example        956
         27.3.6   Fitting using batch variational inference      957
         27.3.7   Fitting using online variational inference      959
         27.3.8   Determining the number of topics         960
   27.4 Extensions of LDA        961
         27.4.1   Correlated topic model       961
         27.4.2   Dynamic topic model         962
         27.4.3   LDA-HMM          963
         27.4.4   Supervised LDA         967
   27.5 LVMs for graph-structured data        970
         27.5.1   Stochastic block model       971
         27.5.2   Mixed membership stochastic block model            973
         27.5.3   Relational topic model       974
   27.6 LVMs for relational data       975
         27.6.1   Inﬁnite relational model       976
         27.6.2   Probabilistic matrix factorization for collaborative ﬁltering     979
   27.7 Restricted Boltzmann machines (RBMs)           983
         27.7.1   Varieties of RBMs       985
         27.7.2   Learning RBMs         987
         27.7.3   Applications of RBMs        991
28 Deep learning      995
   28.1 Introduction     995
   28.2 Deep generative models       995
         28.2.1   Deep directed networks      996
         28.2.2   Deep Boltzmann machines        996
         28.2.3   Deep belief networks      997
         28.2.4   Greedy layer-wise learning of DBNs         998
   28.3 Deep neural networks       999
CONTENTS                                                                                  xxv


           28.3.1    Deep multi-layer perceptrons       999
           28.3.2    Deep auto-encoders        1000
           28.3.3    Stacked denoising auto-encoders        1001
   28.4    Applications of deep networks        1001
           28.4.1    Handwritten digit classiﬁcation using DBNs      1001
           28.4.2    Data visualization and feature discovery using deep auto-encoders   1002
           28.4.3    Information retrieval using deep auto-encoders (semantic hashing)   1003
           28.4.4    Learning audio features using 1d convolutional DBNs      1004
           28.4.5    Learning image features using 2d convolutional DBNs       1005
   28.5    Discussion      1005
Notation       1009

Bibliography       1015

Indexes      1047
   Index to code     1047
   Index to keywords      1050
Preface




Introduction
With the ever increasing amounts of data in electronic form, the need for automated methods
for data analysis continues to grow. The goal of machine learning is to develop methods that
can automatically detect patterns in data, and then to use the uncovered patterns to predict
future data or other outcomes of interest. Machine learning is thus closely related to the ﬁelds
of statistics and data mining, but differs slightly in terms of its emphasis and terminology. This
book provides a detailed introduction to the ﬁeld, and includes worked examples drawn from
application domains such as molecular biology, text processing, computer vision, and robotics.

Target audience
This book is suitable for upper-level undergraduate students and beginning graduate students in
computer science, statistics, electrical engineering, econometrics, or any one else who has the
appropriate mathematical background. Speciﬁcally, the reader is assumed to already be familiar
with basic multivariate calculus, probability, linear algebra, and computer programming. Prior
exposure to statistics is helpful but not necessary.

A probabilistic approach
This books adopts the view that the best way to make machines that can learn from data is to
use the tools of probability theory, which has been the mainstay of statistics and engineering for
centuries. Probability theory can be applied to any problem involving uncertainty. In machine
learning, uncertainty comes in many forms: what is the best prediction (or decision) given some
data? what is the best model given some data? what measurement should I perform next? etc.
   The systematic application of probabilistic reasoning to all inferential problems, including
inferring parameters of statistical models, is sometimes called a Bayesian approach. However,
this term tends to elicit very strong reactions (either positive or negative, depending on who
you ask), so we prefer the more neutral term “probabilistic approach”. Besides, we will often
use techniques such as maximum likelihood estimation, which are not Bayesian methods, but
certainly fall within the probabilistic paradigm.
   Rather than describing a cookbook of different heuristic methods, this book stresses a princi-
pled model-based approach to machine learning. For any given model, a variety of algorithms
xxviii                                                                                      Preface


can often be applied. Conversely, any given algorithm can often be applied to a variety of
models. This kind of modularity, where we distinguish model from algorithm, is good pedagogy
and good engineering.
    We will often use the language of graphical models to specify our models in a concise and
intuitive way. In addition to aiding comprehension, the graph structure aids in developing
efficient algorithms, as we will see. However, this book is not primarily about graphical models;
it is about probabilistic modeling in general.

A practical approach
Nearly all of the methods described in this book have been implemented in a MATLAB software
package called PMTK, which stands for probabilistic modeling toolkit. This is freely available
from pmtk3.googlecode.com (the digit 3 refers to the third edition of the toolkit, which is the
one used in this version of the book). There are also a variety of supporting ﬁles, written by other
people, available at pmtksupport.googlecode.com. These will be downloaded automatically,
if you follow the setup instructions described on the PMTK website.
   MATLAB is a high-level, interactive scripting language ideally suited to numerical computation
and data visualization, and can be purchased from www.mathworks.com. Some of the code
requires the Statistics toolbox, which needs to be purchased separately. There is also a free
version of Matlab called Octave, available at http://www.gnu.org/software/octave/, which
supports most of the functionality of MATLAB. Some (but not all) of the code in this book also
works in Octave. See the PMTK website for details.
   PMTK was used to generate many of the ﬁgures in this book; the source code for these ﬁgures
is included on the PMTK website, allowing the reader to easily see the effects of changing the
data or algorithm or parameter settings. The book refers to ﬁles by name, e.g., naiveBayesFit.
In order to ﬁnd the corresponding ﬁle, you can use two methods: within Matlab you can type
which naiveBayesFit and it will return the full path to the ﬁle; or, if you do not have Matlab
but want to read the source code anyway, you can use your favorite search engine, which should
return the corresponding ﬁle from the pmtk3.googlecode.com website.
   Details on how to use PMTK can be found on the website, which will be udpated over time.
Details on the underlying theory behind these methods can be found in this book.

Acknowledgments
A book this large is obviously a team effort. I would especially like to thank the following people:
my wife Margaret, for keeping the home ﬁres burning as I toiled away in my office for the last six
years; Matt Dunham, who created many of the ﬁgures in this book, and who wrote much of the
code in PMTK; Baback Moghaddam, who gave extremely detailed feedback on every page of an
earlier draft of the book; Chris Williams, who also gave very detailed feedback; Cody Severinski
and Wei-Lwun Lu, who assisted with ﬁgures; generations of UBC students, who gave helpful
comments on earlier drafts; Daphne Koller, Nir Friedman, and Chris Manning, for letting me use
their latex style ﬁles; Stanford University, Google Research and Skyline College for hosting me
during part of my sabbatical; and various Canadian funding agencies (NSERC, CRC and CIFAR)
who have supported me ﬁnancially over the years.
  In addition, I would like to thank the following people for giving me helpful feedback on
Preface                                                                                     xxix


parts of the book, and/or for sharing ﬁgures, code, exercises or even (in some cases) text: David
Blei, Hannes Bretschneider, Greg Corrado, Arnaud Doucet, Mario Figueiredo, Nando de Freitas,
Mark Girolami, Gabriel Goh, Tom Griffiths, Katherine Heller, Geoff Hinton, Aapo Hyvarinen,
Tommi Jaakkola, Mike Jordan, Charles Kemp, Emtiyaz Khan, Bonnie Kirkpatrick, Daphne Koller,
Zico Kolter, Honglak Lee, Julien Mairal, Andrew McPherson, Tom Minka, Ian Nabney, Arthur
Pope, Carl Rassmussen, Ryan Rifkin, Ruslan Salakhutdinov, Mark Schmidt, Daniel Selsam, David
Sontag, Erik Sudderth, Josh Tenenbaum, Kai Yu, Martin Wainwright, Yair Weiss.




Kevin Patrick Murphy
Palo Alto, California
June 2012
1     Introduction



1.1   Machine learning: what and why?
         We are drowning in information and starving for knowledge. — John Naisbitt.

      We are entering the era of big data. For example, there are about 1 trillion web pages1 ; one
      hour of video is uploaded to YouTube every second, amounting to 10 years of content every
      day2 ; the genomes of 1000s of people, each of which has a length of 3.8 × 109 base pairs, have
      been sequenced by various labs; Walmart handles more than 1M transactions per hour and has
      databases containing more than 2.5 petabytes (2.5 × 1015 ) of information (Cukier 2010); and so
      on.
         This deluge of data calls for automated methods of data analysis, which is what machine
      learning provides. In particular, we deﬁne machine learning as a set of methods that can
      automatically detect patterns in data, and then use the uncovered patterns to predict future
      data, or to perform other kinds of decision making under uncertainty (such as planning how to
      collect more data!).
         This books adopts the view that the best way to solve such problems is to use the tools
      of probability theory. Probability theory can be applied to any problem involving uncertainty.
      In machine learning, uncertainty comes in many forms: what is the best prediction about the
      future given some past data? what is the best model to explain some data? what measurement
      should I perform next? etc. The probabilistic approach to machine learning is closely related to
      the ﬁeld of statistics, but differs slightly in terms of its emphasis and terminology3 .
         We will describe a wide variety of probabilistic models, suitable for a wide variety of data and
      tasks. We will also describe a wide variety of algorithms for learning and using such models.
      The goal is not to develop a cook book of ad hoc techiques, but instead to present a uniﬁed
      view of the ﬁeld through the lens of probabilistic modeling and inference. Although we will pay
      attention to computational efficiency, details on how to scale these methods to truly massive
      datasets are better described in other books, such as (Rajaraman and Ullman 2011; Bekkerman
      et al. 2011).
      1. http://googleblog.blogspot.com/2008/07/we-knew-web-was-big.html
      2. Source: http://www.youtube.com/t/press_statistics.
      3. Rob Tibshirani, a statistician at Stanford university, has created an amusing comparison between machine learning
      and statistics, available at http://www-stat.stanford.edu/~tibs/stat315a/glossary.pdf.
        2                                                                         Chapter 1. Introduction


           It should be noted, however, that even when one has an apparently massive data set, the
        effective number of data points for certain cases of interest might be quite small. In fact, data
        across a variety of domains exhibits a property known as the long tail, which means that a
        few things (e.g., words) are very common, but most things are quite rare (see Section 2.4.6 for
        details). For example, 20% of Google searches each day have never been seen before4 . This
        means that the core statistical issues that we discuss in this book, concerning generalizing from
        relatively small samples sizes, are still very relevant even in the big data era.

1.1.1   Types of machine learning
        Machine learning is usually divided into two main types. In the predictive or supervised
        learning approach, the goal is to learn a mapping from inputs x to outputs y, given a labeled
        set of input-output pairs D = {(xi , yi )}Ni=1 . Here D is called the training set, and N is the
        number of training examples.
           In the simplest setting, each training input xi is a D-dimensional vector of numbers, rep-
        resenting, say, the height and weight of a person. These are called features, attributes or
        covariates. In general, however, xi could be a complex structured object, such as an image, a
        sentence, an email message, a time series, a molecular shape, a graph, etc.
           Similarly the form of the output or response variable can in principle be anything, but
        most methods assume that yi is a categorical or nominal variable from some ﬁnite set,
        yi ∈ {1, . . . , C} (such as male or female), or that yi is a real-valued scalar (such as income
        level). When yi is categorical, the problem is known as classiﬁcation or pattern recognition,
        and when yi is real-valued, the problem is known as regression. Another variant, known as
        ordinal regression, occurs where label space Y has some natural ordering, such as grades A–F.
           The second main type of machine learning is the descriptive or unsupervised learning
        approach. Here we are only given inputs, D = {xi }N      i=1 , and the goal is to ﬁnd “interesting
        patterns” in the data. This is sometimes called knowledge discovery. This is a much less
        well-deﬁned problem, since we are not told what kinds of patterns to look for, and there is no
        obvious error metric to use (unlike supervised learning, where we can compare our prediction
        of y for a given x to the observed value).
           There is a third type of machine learning, known as reinforcement learning, which is
        somewhat less commonly used. This is useful for learning how to act or behave when given
        occasional reward or punishment signals. (For example, consider how a baby learns to walk.)
        Unfortunately, RL is beyond the scope of this book, although we do discuss decision theory
        in Section 5.7, which is the basis of RL. See e.g., (Kaelbling et al. 1996; Sutton and Barto 1998;
        Russell and Norvig 2010; Szepesvari 2010; Wiering and van Otterlo 2012) for more information
        on RL.
        4.
        http://certifiedknowledge.org/blog/are-search-queries-becoming-even-more-unique-statistic
        s-from-google.
          1.2. Supervised learning                                                                               3




                                (a)                                                 (b)

          Figure 1.1 Left: Some labeled training examples of colored shapes, along with 3 unlabeled test cases.
          Right: Representing the training data as an N × D design matrix. Row i represents the feature vector xi .
          The last column is the label, yi ∈ {0, 1}. Based on a ﬁgure by Leslie Kaelbling.



  1.2     Supervised learning
          We begin our investigation of machine learning by discussing supervised learning, which is the
          form of ML most widely used in practice.

 1.2.1    Classiﬁcation
          In this section, we discuss classiﬁcation. Here the goal is to learn a mapping from inputs x
          to outputs y, where y ∈ {1, . . . , C}, with C being the number of classes. If C = 2, this is
          called binary classiﬁcation (in which case we often assume y ∈ {0, 1}); if C > 2, this is called
          multiclass classiﬁcation. If the class labels are not mutually exclusive (e.g., somebody may be
          classiﬁed as tall and strong), we call it multi-label classiﬁcation, but this is best viewed as
          predicting multiple related binary class labels (a so-called multiple output model). When we
          use the term “classiﬁcation”, we will mean multiclass classiﬁcation with a single output, unless
          we state otherwise.
             One way to formalize the problem is as function approximation. We assume y = f (x) for
          some unknown function f , and the goal of learning is to estimate the function f given a labeled
          training set, and then to make predictions using ŷ = fˆ(x). (We use the hat symbol to denote
          an estimate.) Our main goal is to make predictions on novel inputs, meaning ones that we have
          not seen before (this is called generalization), since predicting the response on the training set
          is easy (we can just look up the answer).

1.2.1.1   Example
          As a simple toy example of classiﬁcation, consider the problem illustrated in Figure 1.1(a). We
          have two classes of object which correspond to labels 0 and 1. The inputs are colored shapes.
          These have been described by a set of D features or attributes, which are stored in an N × D
          design matrix X, shown in Figure 1.1(b). The input features x can be discrete, continuous or a
          combination of the two. In addition to the inputs, we have a vector of training labels y.
            In Figure 1.1, the test cases are a blue crescent, a yellow circle and a blue arrow. None of
          these have been seen before. Thus we are required to generalize beyond the training set. A
          4                                                                            Chapter 1. Introduction


          reasonable guess is that blue crescent should be y = 1, since all blue shapes are labeled 1 in the
          training set. The yellow circle is harder to classify, since some yellow things are labeled y = 1
          and some are labeled y = 0, and some circles are labeled y = 1 and some y = 0. Consequently
          it is not clear what the right label should be in the case of the yellow circle. Similarly, the correct
          label for the blue arrow is unclear.

1.2.1.2   The need for probabilistic predictions
          To handle ambiguous cases, such as the yellow circle above, it is desirable to return a probability.
          The reader is assumed to already have some familiarity with basic concepts in probability. If
          not, please consult Chapter 2 for a refresher, if necessary.
             We will denote the probability distribution over possible labels, given the input vector x and
          training set D by p(y|x, D). In general, this represents a vector of length C. (If there are just two
          classes, it is sufficient to return the single number p(y = 1|x, D), since p(y = 1|x, D) + p(y =
          0|x, D) = 1.) In our notation, we make explicit that the probability is conditional on the test
          input x, as well as the training set D, by putting these terms on the right hand side of the
          conditioning bar |. We are also implicitly conditioning on the form of model that we use to make
          predictions. When choosing between different models, we will make this assumption explicit by
          writing p(y|x, D, M ), where M denotes the model. However, if the model is clear from context,
          we will drop M from our notation for brevity.
             Given a probabilistic output, we can always compute our “best guess” as to the “true label”
          using

              ŷ = fˆ(x) = argmax p(y = c|x, D)
                              C
 MAP                                                                                                         (1.1)
                             c=1

          This corresponds to the most probable class label, and is called the mode of the distribution
          p(y|x, D); it is also known as a MAP estimate (MAP stands for maximum a posteriori). Using
          the most probable label makes intuitive sense, but we will give a more formal justiﬁcation for
          this procedure in Section 5.7.
             Now consider a case such as the yellow circle, where p(ŷ|x, D) is far from 1.0. In such a
          case we are not very conﬁdent of our answer, so it might be better to say “I don’t know” instead
          of returning an answer that we don’t really trust. This is particularly important in domains
          such as medicine and ﬁnance where we may be risk averse, as we explain in Section 5.7.
          Another application where it is important to assess risk is when playing TV game shows, such
          as Jeopardy. In this game, contestants have to solve various word puzzles and answer a variety
          of trivia questions, but if they answer incorrectly, they lose money. In 2011, IBM unveiled a
          computer system called Watson which beat the top human Jeopardy champion. Watson uses a
          variety of interesting techniques (Ferrucci et al. 2010), but the most pertinent one for our present
          purposes is that it contains a module that estimates how conﬁdent it is of its answer. The system
          only chooses to “buzz in” its answer if sufficiently conﬁdent it is correct. Similarly, Google has a
          system known as SmartASS (ad selection system) that predicts the probability you will click on
          an ad based on your search history and other user and ad-speciﬁc features (Metz 2010). This
          probability is known as the click-through rate or CTR, and can be used to maximize expected
          proﬁt. We will discuss some of the basic principles behind systems such as SmartASS later in
          this book.
          1.2. Supervised learning                                                                                 5


                                                 100

                                                 200

                                                 300

                                                 400




                                     documents
                                                 500

                                                 600

                                                 700

                                                 800

                                                 900

                                                 1000
                                                        10   20   30   40    50     60   70   80   90   100
                                                                            words



          Figure 1.2 Subset of size 16242 x 100 of the 20-newsgroups data. We only show 1000 rows, for clarity.
          Each row is a document (represented as a bag-of-words bit vector), each column is a word. The red
          lines separate the 4 classes, which are (in descending order) comp, rec, sci, talk (these are the titles of
          USENET groups). We can see that there are subsets of words whose presence or absence is indicative
          of the class. The data is available from http://cs.nyu.edu/~roweis/data.html. Figure generated by
          newsgroupsVisualize.



1.2.1.3   Real-world applications
          Classiﬁcation is probably the most widely used form of machine learning, and has been used
          to solve many interesting and often difficult real-world problems. We have already mentioned
          some important applciations. We give a few more examples below.

          Document classiﬁcation and email spam ﬁltering
          In document classiﬁcation, the goal is to classify a document, such as a web page or email
          message, into one of C classes, that is, to compute p(y = c|x, D), where x is some represen-
          tation of the text. A special case of this is email spam ﬁltering, where the classes are spam
          y = 1 or ham y = 0.
             Most classiﬁers assume that the input vector x has a ﬁxed size. A common way to represent
          variable-length documents in feature-vector format is to use a bag of words representation.
          This is explained in detail in Section 3.4.4.1, but the basic idea is to deﬁne xij = 1 iff word j
          occurs in document i. If we apply this transformation to every document in our data set, we get
          a binary document × word co-occurrence matrix: see Figure 1.2 for an example. Essentially the
          document classiﬁcation problem has been reduced to one that looks for subtle changes in the
          pattern of bits. For example, we may notice that most spam messages have a high probability of
          containing the words “buy”, “cheap”, “viagra”, etc. In Exercise 8.1 and Exercise 8.2, you will get
          hands-on experience applying various classiﬁcation techniques to the spam ﬁltering problem.
6                                                                                                       Chapter 1. Introduction




              (a)                                                    (b)                                       (c)

Figure 1.3 Three types of iris ﬂowers: setosa, versicolor and virginica. Source: http://www.statlab.u
ni-heidelberg.de/data/iris/ . Used with kind permission of Dennis Kramb and SIGNA.


                                        sepal length   sepal width         petal length   petal width
                         sepal length
                         sepal width
                         petal length
                         petal width




Figure 1.4 Visualization of the Iris data as a pairwise scatter plot. The diagonal plots the marginal
histograms of the 4 features. The off diagonals contain scatterplots of all possible pairs of features. Red
circle = setosa, green diamond = versicolor, blue star = virginica. Figure generated by fisheririsDemo.



Classifying ﬂowers
Figure 1.3 gives another example of classiﬁcation, due to the statistician Ronald Fisher. The goal
is to learn to distinguish three different kinds of iris ﬂower, called setosa, versicolor and virginica.
Fortunately, rather than working directly with images, a botanist has already extracted 4 useful
features or characteristics: sepal length and width, and petal length and width. (Such feature
extraction is an important, but difficult, task. Most machine learning methods use features
chosen by some human. Later we will discuss some methods that can learn good features from
the data.) If we make a scatter plot of the iris data, as in Figure 1.4, we see that it is easy to
distinguish setosas (red circles) from the other two classes by just checking if their petal length
1.2. Supervised learning                                                                                        7


        true class = 7   true class = 2   true class = 1     true class = 7   true class = 2   true class = 1




        true class = 0   true class = 4   true class = 1     true class = 0   true class = 4   true class = 1




        true class = 4   true class = 9   true class = 5     true class = 4   true class = 9   true class = 5




                             (a)                                                  (b)

Figure 1.5 (a) First 9 test MNIST gray-scale images. (b) Same as (a), but with the features permuted
randomly. Classiﬁcation performance is identical on both versions of the data (assuming the training data
is permuted in an identical way). Figure generated by shuffledDigitsDemo.



or width is below some threshold. However, distinguishing versicolor from virginica is slightly
harder; any decision will need to be based on at least two features. (It is always a good idea
to perform exploratory data analysis, such as plotting the data, before applying a machine
learning method.)

Image classiﬁcation and handwriting recognition
Now consider the harder problem of classifying images directly, where a human has not pre-
processed the data. We might want to classify the image as a whole, e.g., is it an indoors or
outdoors scene? is it a horizontal or vertical photo? does it contain a dog or not? This is called
image classiﬁcation.
   In the special case that the images consist of isolated handwritten letters and digits, for
example, in a postal or ZIP code on a letter, we can use classiﬁcation to perform handwriting
recognition. A standard dataset used in this area is known as MNIST, which stands for “Modiﬁed
National Institute of Standards”5 . (The term “modiﬁed” is used because the images have been
preprocessed to ensure the digits are mostly in the center of the image.) This dataset contains
60,000 training images and 10,000 test images of the digits 0 to 9, as written by various people.
The images are size 28 × 28 and have grayscale values in the range 0 : 255. See Figure 1.5(a) for
some example images.
   Many generic classiﬁcation methods ignore any structure in the input features, such as spatial
layout. Consequently, they can also just as easily handle data that looks like Figure 1.5(b), which
is the same data except we have randomly permuted the order of all the features. (You will
verify this in Exercise 1.1.) This ﬂexibility is both a blessing (since the methods are general
purpose) and a curse (since the methods ignore an obviously useful source of information). We
will discuss methods for exploiting structure in the input features later in the book.

5. Available from http://yann.lecun.com/exdb/mnist/.
        8                                                                                Chapter 1. Introduction




                                  (a)                                              (b)

        Figure 1.6 Example of face detection. (a) Input image (Murphy family, photo taken 5 August 2010). Used
        with kind permission of Bernard Diedrich of Sherwood Studios. (b) Output of classiﬁer, which detected 5
        faces at different poses. This was produced using the online demo at http://demo.pittpatt.com/. The
        classiﬁer was trained on 1000s of manually labeled images of faces and non-faces, and then was applied
        to a dense set of overlapping patches in the test image. Only the patches whose probability of containing
        a face was sufficiently high were returned. Used with kind permission of Pittpatt.com



        Face detection and recognition
        A harder problem is to ﬁnd objects within an image; this is called object detection or object
        localization. An important special case of this is face detection. One approach to this problem
        is to divide the image into many small overlapping patches at different locations, scales and
        orientations, and to classify each such patch based on whether it contains face-like texture or
        not. This is called a sliding window detector. The system then returns those locations where
        the probability of face is sufficiently high. See Figure 1.6 for an example. Such face detection
        systems are built-in to most modern digital cameras; the locations of the detected faces are
        used to determine the center of the auto-focus. Another application is automatically blurring
        out faces in Google’s StreetView system.
           Having found the faces, one can then proceed to perform face recognition, which means
        estimating the identity of the person (see Figure 1.10(a)). In this case, the number of class labels
        might be very large. Also, the features one should use are likely to be different than in the face
        detection problem: for recognition, subtle differences between faces such as hairstyle may be
        important for determining identity, but for detection, it is important to be invariant to such
        details, and to just focus on the differences between faces and non-faces. For more information
        about visual object detection, see e.g., (Szeliski 2010).

1.2.2   Regression
        Regression is just like classiﬁcation except the response variable is continuous. Figure 1.7 shows
        a simple example: we have a single real-valued input xi ∈ R, and a single real-valued response
        yi ∈ R. We consider ﬁtting two models to the data: a straight line and a quadratic function.
        (We explain how to ﬁt such models below.) Various extensions of this basic problem can arise,
        such as having high-dimensional inputs, outliers, non-smooth responses, etc. We will discuss
        ways to handle such problems later in the book.
      1.3. Unsupervised learning                                                                          9

                                degree 1                                      degree 2
                  15                                            15



                  10                                            10



                   5                                             5



                   0                                             0



                  −5                                           −5



                 −10                                           −10
                       0   5       10      15   20                   0   5      10       15   20




                                (a)                                           (b)

      Figure 1.7 (a) Linear regression on some 1d data. (b) Same data with polynomial regression (degree 2).
      Figure generated by linregPolyVsDegree.



        Here are some examples of real-world regression problems.

      • Predict tomorrow’s stock market price given current market conditions and other possible
        side information.

      • Predict the age of a viewer watching a given video on YouTube.

      • Predict the location in 3d space of a robot arm end effector, given control signals (torques)
        sent to its various motors.

      • Predict the amount of prostate speciﬁc antigen (PSA) in the body as a function of a number
        of different clinical measurements.
      • Predict the temperature at any location inside a building using weather data, time, door
        sensors, etc.

1.3   Unsupervised learning
      We now consider unsupervised learning, where we are just given output data, without any
      inputs. The goal is to discover “interesting structure” in the data; this is sometimes called
      knowledge discovery. Unlike supervised learning, we are not told what the desired output is
      for each input. Instead, we will formalize our task as one of density estimation, that is, we
      want to build models of the form p(xi |θ). There are two differences from the supervised case.
      First, we have written p(xi |θ) instead of p(yi |xi , θ); that is, supervised learning is conditional
      density estimation, whereas unsupervised learning is unconditional density estimation. Second,
      xi is a vector of features, so we need to create multivariate probability models. By contrast,
      in supervised learning, yi is usually just a single variable that we are trying to predict. This
      means that for most supervised learning problems, we can use univariate probability models
      (with input-dependent parameters), which signiﬁcantly simpliﬁes the problem. (We will discuss
      multi-output classiﬁcation in Chapter 19, where we will see that it also involves multivariate
      probability models.)
         Unsupervised learning is arguably more typical of human and animal learning. It is also
      more widely applicable than supervised learning, since it does not require a human expert to
        10                                                                                                       Chapter 1. Introduction


                                                                                                    K=2
                            280                                                  280

                            260                                                  260

                            240                                                  240

                            220                                                  220

                            200                                                  200




                   weight




                                                                        weight
                            180                                                  180

                            160                                                  160

                            140                                                  140

                            120                                                  120

                            100                                                  100

                             80                                                   80
                               55   60   65            70   75   80                 55   60   65            70     75    80
                                              height                                               height



                                                (a)                                                  (b)

        Figure 1.8 (a) The height and weight of some people. (b) A possible clustering using K = 2 clusters.
        Figure generated by kmeansHeightWeight.


        manually label the data. Labeled data is not only expensive to acquire6 , but it also contains
        relatively little information, certainly not enough to reliably estimate the parameters of complex
        models. Geoff Hinton, who is a famous professor of ML at the University of Toronto, has said:
             When we’re learning to see, nobody’s telling us what the right answers are — we just
             look. Every so often, your mother says “that’s a dog”, but that’s very little information.
             You’d be lucky if you got a few bits of information — even one bit per second — that
             way. The brain’s visual system has 1014 neural connections. And you only live for 109
             seconds. So it’s no use learning one bit per second. You need more like 105 bits per
             second. And there’s only one place you can get that much information: from the input
             itself. — Geoffrey Hinton, 1996 (quoted in (Gorder 2006)).
             Below we describe some canonical examples of unsupervised learning.

1.3.1   Discovering clusters
        As a canonical example of unsupervised learning, consider the problem of clustering data into
        groups. For example, Figure 1.8(a) plots some 2d data, representing the height and weight of
        a group of 210 people. It seems that there might be various clusters, or subgroups, although
        it is not clear how many. Let K denote the number of clusters. Our ﬁrst goal is to estimate
        the distribution over the number of clusters, p(K|D); this tells us if there are subpopulations
        within the data. For simplicity, we often approximate the distribution p(K|D) by its mode,
        K ∗ = arg maxK p(K|D). In the supervised case, we were told that there are two classes (male
        and female), but in the unsupervised case, we are free to choose as many or few clusters as we
        like. Picking a model of the “right” complexity is called model selection, and will be discussed
        in detail below.
           Our second goal is to estimate which cluster each point belongs to. Let zi ∈ {1, . . . , K}
        represent the cluster to which data point i is assigned. (zi is an example of a hidden or

        6. The advent of crowd sourcing web sites such as Mechanical Turk, (https://www.mturk.com/mturk/welcome),
        which outsource data processing tasks to humans all over the world, has reduced the cost of labeling data. Nevertheless,
        the amount of unlabeled data is still orders of magnitude larger than the amount of labeled data.
        1.3. Unsupervised learning                                                                                11


         2


         0
                                                                   4
        −2                                                             2
         4                                                                 0
             2                                                                                                5
                 0                                                             −2
                                                               8
                  −2                               2   4   6
                                                                                    −4              0
                    −4                    −2   0
                         −8   −6   −4                                                    −5

                                        (a)                                                   (b)

        Figure 1.9 (a) A set of points that live on a 2d linear subspace embedded in 3d. The solid red line is the
        ﬁrst principal component direction. The dotted black line is the second PC direction. (b) 2D representation
        of the data. Figure generated by pcaDemo3d.



        latent variable, since it is never observed in the training set.) We can infer which cluster each
        data point belongs to by computing zi∗ = argmaxk p(zi = k|xi , D). This is illustrated in
        Figure 1.8(b), where we use different colors to indicate the assignments, assuming K = 2.
           In this book, we focus on model based clustering, which means we ﬁt a probabilistic model
        to the data, rather than running some ad hoc algorithm. The advantages of the model-based
        approach are that one can compare different kinds of models in an objective way (in terms of
        the likelihood they assign to the data), we can combine them together into larger systems, etc.
           Here are some real world applications of clustering.

        • In astronomy, the autoclass system (Cheeseman et al. 1988) discovered a new type of star,
          based on clustering astrophysical measurements.

        • In e-commerce, it is common to cluster users into groups, based on their purchasing or
          web-surﬁng behavior, and then to send customized targeted advertising to each group (see
          e.g., (Berkhin 2006)).
        • In biology, it is common to cluster ﬂow-cytometry data into groups, to discover different
          sub-populations of cells (see e.g., (Lo et al. 2009)).

1.3.2   Discovering latent factors
        When dealing with high dimensional data, it is often useful to reduce the dimensionality by
        projecting the data to a lower dimensional subspace which captures the “essence” of the data.
        This is called dimensionality reduction. A simple example is shown in Figure 1.9, where we
        project some 3d data down to a 2d plane. The 2d approximation is quite good, since most points
        lie close to this subspace. Reducing to 1d would involve projecting points onto the red line in
        Figure 1.9(a); this would be a rather poor approximation. (We will make this notion precise in
        Chapter 12.)
            The motivation behind this technique is that although the data may appear high dimensional,
        there may only be a small number of degrees of variability, corresponding to latent factors. For
        example, when modeling the appearance of face images, there may only be a few underlying
        latent factors which describe most of the variability, such as lighting, pose, identity, etc, as
        illustrated in Figure 1.10.
12                                                                         Chapter 1. Introduction




                      (a)                                                  (b)

Figure 1.10 a) 25 randomly chosen 64 × 64 pixel images from the Olivetti face database. (b) The mean
and the ﬁrst three principal component basis vectors (eigenfaces). Figure generated by pcaImageDemo.



   When used as input to other statistical models, such low dimensional representations often
result in better predictive accuracy, because they focus on the “essence” of the object, ﬁltering
out inessential features. Also, low dimensional representations are useful for enabling fast
nearest neighbor searches and two dimensional projections are very useful for visualizing high
dimensional data.
   The most common approach to dimensionality reduction is called principal components
analysis or PCA. This can be thought of as an unsupervised version of (multi-output) linear
regression, where we observe the high-dimensional response y, but not the low-dimensional
“cause” z. Thus the model has the form z → y; we have to “invert the arrow”, and infer the
latent low-dimensional z from the observed high-dimensional y. See Section 12.1 for details.
   Dimensionality reduction, and PCA in particular, has been applied in many different areas.
Some examples include the following:

• In biology, it is common to use PCA to interpret gene microarray data, to account for the
  fact that each measurement is usually the result of many genes which are correlated in their
  behavior by the fact that they belong to different biological pathways.

• In natural language processing, it is common to use a variant of PCA called latent semantic
  analysis for document retrieval (see Section 27.2.2).

• In signal processing (e.g., of acoustic or neural signals), it is common to use ICA (which is a
  variant of PCA) to separate signals into their different sources (see Section 12.6).

• In computer graphics, it is common to project motion capture data to a low dimensional
  space, and use it to create animations. See Section 15.5 for one way to tackle such problems.
        1.3. Unsupervised learning                                                                           13




        Figure 1.11 A sparse undirected Gaussian graphical model learned using graphical lasso (Section 26.7.2)
        applied to some ﬂow cytometry data (from (Sachs et al. 2005)), which measures the phosphorylation status
        of 11 proteins. Figure generated by ggmLassoDemo.



1.3.3   Discovering graph structure
        Sometimes we measure a set of correlated variables, and we would like to discover which ones
        are most correlated with which others. This can be represented by a graph G, in which nodes
        represent variables, and edges represent direct dependence between variables (we will make
        this precise in Chapter 10, when we discuss graphical models). We can then learn this graph
        structure from data, i.e., we compute Ĝ = argmax p(G|D).
           As with unsupervised learning in general, there are two main applications for learning sparse
        graphs: to discover new knowledge, and to get better joint probability density estimators. We
        now give somes example of each.

        • Much of the motivation for learning sparse graphical models comes from the systems biology
          community. For example, suppose we measure the phosphorylation status of some proteins
          in a cell (Sachs et al. 2005). Figure 1.11 gives an example of a graph structure that was learned
          from this data (using methods discussed in Section 26.7.2). As another example, Smith et al.
          (2006) showed that one can recover the neural “wiring diagram” of a certain kind of bird
          from time-series EEG data. The recovered structure closely matched the known functional
          connectivity of this part of the bird brain.

        • In some cases, we are not interested in interpreting the graph structure, we just want to
          use it to model correlations and to make predictions. One example of this is in ﬁnancial
          portfolio management, where accurate models of the covariance between large numbers of
          different stocks is important. Carvalho and West (2007) show that by learning a sparse graph,
          and then using this as the basis of a trading strategy, it is possible to outperform (i.e., make
          more money than) methods that do not exploit sparse graphs. Another example is predicting
          traffic jams on the freeway. Horvitz et al. (2005) describe a deployed system called JamBayes
          for predicting traffic ﬂow in the Seattle area; predictions are made using a graphical model
          whose structure was learned from data.
          14                                                                              Chapter 1. Introduction




                                            (a)                               (b)

          Figure 1.12 (a) A noisy image with an occluder. (b) An estimate of the underlying pixel intensities, based
          on a pairwise MRF model. Source: Figure 8 of (Felzenszwalb and Huttenlocher 2006). Used with kind
          permission of Pedro Felzenszwalb.



 1.3.4    Matrix completion
          Sometimes we have missing data, that is, variables whose values are unknown. For example, we
          might have conducted a survey, and some people might not have answered certain questions.
          Or we might have various sensors, some of which fail. The corresponding design matrix will
          then have “holes” in it; these missing entries are often represented by NaN, which stands for
          “not a number”. The goal of imputation is to infer plausible values for the missing entries. This
          is sometimes called matrix completion. Below we give some example applications.

1.3.4.1   Image inpainting
          An interesting example of an imputation-like task is known as image inpainting. The goal is
          to “ﬁll in” holes (e.g., due to scratches or occlusions) in an image with realistic texture. This is
          illustrated in Figure 1.12, where we denoise the image, as well as impute the pixels hidden behind
          the occlusion. This can be tackled by building a joint probability model of the pixels, given a
          set of clean images, and then inferring the unknown variables (pixels) given the known variables
          (pixels). This is somewhat like masket basket analysis, except the data is real-valued and spatially
          structured, so the kinds of probability models we use are quite different. See Sections 19.6.2.7
          and 13.8.4 for some possible choices.

1.3.4.2   Collaborative ﬁltering
          Another interesting example of an imputation-like task is known as collaborative ﬁltering. A
          common example of this concerns predicting which movies people will want to watch based
          on how they, and other people, have rated movies which they have already seen. The key idea
          is that the prediction is not based on features of the movie or user (although it could be), but
          merely on a ratings matrix. More precisely, we have a matrix X where X(m, u) is the rating
          1.3. Unsupervised learning                                                                            15


                                                             XVHUV
                                                           "            "
                                           PRYLHV   "                   
                                                                       "


          Figure 1.13 Example of movie-rating data. Training data is in red, test data is denoted by ?, empty cells
          are unknown.


          (say an integer between 1 and 5, where 1 is dislike and 5 is like) by user u of movie m. Note
          that most of the entries in X will be missing or unknown, since most users will not have rated
          most movies. Hence we only observe a tiny subset of the X matrix, and we want to predict
          a different subset. In particular, for any given user u, we might want to predict which of the
          unrated movies he/she is most likely to want to watch.
             In order to encourage research in this area, the DVD rental company Netﬂix created a com-
          petition, launched in 2006, with a $1M USD prize (see http://netflixprize.com/). In
          particular, they provided a large matrix of ratings, on a scale of 1 to 5, for ∼ 18k movies
          created by ∼ 500k users. The full matrix would have ∼ 9 × 109 entries, but only about 1%
          of the entries are observed, so the matrix is extremely sparse. A subset of these are used for
          training, and the rest for testing, as shown in Figure 1.13. The goal of the competition was to
          predict more accurately than Netﬂix’s existing system. On 21 September 2009, the prize was
          awarded to a team of researchers known as “BellKor’s Pragmatic Chaos”. Section 27.6.2 discusses
          some of their methodology. Further details on the teams and their methods can be found at
          http://www.netflixprize.com/community/viewtopic.php?id=1537.

1.3.4.3   Market basket analysis
          In commercial data mining, there is much interest in a task called market basket analysis. The
          data consists of a (typically very large but sparse) binary matrix, where each column represents
          an item or product, and each row represents a transaction. We set xij = 1 if item j was
          purchased on the i’th transaction. Many items are purchased together (e.g., bread and butter),
          so there will be correlations amongst the bits. Given a new partially observed bit vector,
          representing a subset of items that the consumer has bought, the goal is to predict which other
          bits are likely to turn on, representing other items the consumer might be likely to buy. (Unlike
          collaborative ﬁltering, we often assume there is no missing data in the training data, since we
          know the past shopping behavior of each customer.)
             This task arises in other domains besides modeling purchasing patterns. For example, similar
          techniques can be used to model dependencies between ﬁles in complex software systems. In
          this case, the task is to predict, given a subset of ﬁles that have been changed, which other ones
          need to be updated to ensure consistency (see e.g., (Hu et al. 2010)).
             It is common to solve such tasks using frequent itemset mining, which create association
          rules (see e.g., (Hastie et al. 2009, sec 14.2) for details). Alternatively, we can adopt a probabilistic
          approach, and ﬁt a joint density model p(x1 , . . . , xD ) to the bit vectors, see e.g., (Hu et al.
        16                                                                                  Chapter 1. Introduction




                                   (a)                                                (b)

        Figure 1.14 (a) Illustration of a K-nearest neighbors classiﬁer in 2d for K = 3. The 3 nearest neighbors
        of test point x1 have labels 1, 1 and 0, so we predict p(y = 1|x1 , D, K = 3) = 2/3. The 3 nearest
        neighbors of test point x2 have labels 0, 0, and 0, so we predict p(y = 1|x2 , D, K = 3) = 0/3. (b)
        Illustration of the Voronoi tesselation induced by 1-NN. Based on Figure 4.13 of (Duda et al. 2001). Figure
        generated by knnVoronoi.



        2010). Such models often have better predictive acccuracy than association rules, although they
        may be less interpretible. This is typical of the difference between data mining and machine
        learning: in data mining, there is more emphasis on interpretable models, whereas in machine
        learning, there is more emphasis on accurate models.

 1.4    Some basic concepts in machine learning
        In this Section, we provide an introduction to some key ideas in machine learning. We will
        expand on these concepts later in the book, but we introduce them brieﬂy here, to give a ﬂavor
        of things to come.

1.4.1   Parametric vs non-parametric models
        In this book, we will be focussing on probabilistic models of the form p(y|x) or p(x), depending
        on whether we are interested in supervised or unsupervised learning respectively. There are
        many ways to deﬁne such models, but the most important distinction is this: does the model
        have a ﬁxed number of parameters, or does the number of parameters grow with the amount
        of training data? The former is called a parametric model, and the latter is called a non-
        parametric model. Parametric models have the advantage of often being faster to use, but the
        disadvantage of making stronger assumptions about the nature of the data distributions. Non-
        parametric models are more ﬂexible, but often computationally intractable for large datasets.
        We will give examples of both kinds of models in the sections below. We focus on supervised
        learning for simplicity, although much of our discussion also applies to unsupervised learning.

1.4.2   A simple non-parametric classiﬁer: K-nearest neighbors
        A simple example of a non-parametric classiﬁer is the K nearest neighbor (KNN) classiﬁer.
        This simply “looks at” the K points in the training set that are nearest to the test input x,
1.4. Some basic concepts in machine learning                                                                              17


                                 train                                           p(y=1|data,K=10)
                                                                                                                    1
  5                                                             120
                                                                                                                    0.9

  4                                                             100                                                 0.8

                                                                                                                    0.7
  3
                                                                 80
                                                                                                                    0.6
  2
                                                                                                                    0.5
                                                                 60
  1                                                                                                                 0.4

                                                                 40                                                 0.3
  0

                                                                                                                    0.2
 −1                                                              20
                                                                                                                    0.1

 −2                                                                                                                 0
  −3     −2     −1           0           1    2       3                20    40          60         80    100

                                 (a)                                                         (b)
                     p(y=2|data,K=10)                                             predicted label, K=10
                                                          1
 120                                                             5
                                                          0.9

 100                                                      0.8    4

                                                          0.7
                                                                 3
  80
                                                          0.6
                                                                 2
                                                          0.5
  60

                                                          0.4    1

  40                                                      0.3
                                                                 0

                                                          0.2
  20                                                            −1    c1
                                                          0.1         c2
                                                                      c3
                                                          0     −2
          20    40           60          80   100                −3   −2    −1           0          1     2     3

                                 (c)                                                         (d)

Figure 1.15 (a) Some synthetic 3-class training data in 2d. (b) Probability of class 1 for KNN with K = 10.
(c) Probability of class 2. (d) MAP estimate of class label. Figure generated by knnClassifyDemo.



counts how many members of each class are in this set, and returns that empirical fraction as
the estimate, as illustrated in Figure 1.14. More formally,
                           1     
   p(y = c|x, D, K) =                    I(yi = c)                                       (1.2)
                           K
                                         i∈NK (x,D)

where NK (x, D)         are the (indices of the) K nearest points to x in D and I(e) is the indicator
function deﬁned         as follows:
          
            1            if e is true
   I(e) =                                                                                                               (1.3)
            0            if e is false
This method is an example of memory-based learning or instance-based learning. It can
be derived from a probabilistic framework as explained in Section 14.7.3. The most common
        18                                                                                                            Chapter 1. Introduction

                                                                                  1

                                                                                 0.9              d=10
                                                                                                  d=7
                                                                                 0.8              d=5
                   1
                                                                                 0.7
                                                                                                  d=3




                                                           Edge length of cube
                                                                                 0.6

                                                                                 0.5

                                                                                 0.4

                                                                                 0.3              d=1
                                                                                 0.2
               0
                   s                                                             0.1

                                                                                  0
                                      1                                                0   0.2          0.4             0.6         0.8   1
                                                                                                 Fraction of data in neighborhood

                               (a)                                                                         (b)

        Figure 1.16 Illustration of the curse of dimensionality. (a) We embed a small cube of side s inside a larger
        unit cube. (b) We plot the edge length of a cube needed to cover a given volume of the unit cube as a
        function of the number of dimensions. Based on Figure 2.6 from (Hastie et al. 2009). Figure generated by
        curseDimensionality.



        distance metric to use is Euclidean distance (which limits the applicability of the technique to
        data which is real-valued), although other metrics can be used.
           Figure 1.15 gives an example of the method in action, where the input is two dimensional, we
        have three classes, and K = 10. (We discuss the effect of K below.) Panel (a) plots the training
        data. Panel (b) plots p(y = 1|x, D) where x is evaluated on a grid of points. Panel (c) plots
        p(y = 2|x, D). We do not need to plot p(y = 3|x, D), since probabilities sum to one. Panel (d)
        plots the MAP estimate ŷ(x) = argmaxc (y = c|x, D).
           A KNN classiﬁer with K = 1 induces a Voronoi tessellation of the points (see Figure 1.14(b)).
        This is a partition of space which associates a region V (xi ) with each point xi in such a way
        that all points in V (xi ) are closer to xi than to any other point. Within each cell, the predicted
        label is the label of the corresponding training point.

1.4.3   The curse of dimensionality
        The KNN classiﬁer is simple and can work quite well, provided it is given a good distance metric
        and has enough labeled training data. In fact, it can be shown that the KNN classiﬁer can come
        within a factor of 2 of the best possible performance if N → ∞ (Cover and Hart 1967).
           However, the main problem with KNN classiﬁers is that they do not work well with high
        dimensional inputs. The poor performance in high dimensional settings is due to the curse of
        dimensionality.
           To explain the curse, we give some examples from (Hastie et al. 2009, p22). Consider applying
        a KNN classiﬁer to data where the inputs are uniformly distributed in the D-dimensional unit
        cube. Suppose we estimate the density of class labels around a test point x by “growing” a
        hyper-cube around x until it contains a desired fraction f of the data points. The expected edge
        length of this cube will be eD (f ) = f 1/D . If D = 10, and we want to base our estimate on 10%
        1.4. Some basic concepts in machine learning                                                         19

                                         PDF
                  0.4

                 0.35

                  0.3

                 0.25

                  0.2

                 0.15

                  0.1

                 0.05

                   0
                   −3     −2     −1       0        1       2    3



                                        (a)                                          (b)

        Figure 1.17 (a) A Gaussian pdf with mean 0 and variance 1. Figure generated by gaussPlotDemo. (b)
        Visualization of the conditional density model p(y|x, θ) = N (y|w0 + w1 x, σ 2 ). The density falls off
        exponentially fast as we move away from the regression line. Figure generated by linregWedgeDemo2.



        of the data, we have e10 (0.1) = 0.8, so we need to extend the cube 80% along each dimension
        around x. Even if we only use 1% of the data, we ﬁnd e10 (0.01) = 0.63: see Figure 1.16. Since
        the entire range of the data is only 1 along each dimension, we see that the method is no longer
        very local, despite the name “nearest neighbor”. The trouble with looking at neighbors that are
        so far away is that they may not be good predictors about the behavior of the input-output
        function at a given point.

1.4.4   Parametric models for classiﬁcation and regression
        The main way to combat the curse of dimensionality is to make some assumptions about
        the nature of the data distribution (either p(y|x) for a supervised problem or p(x) for an
        unsupervised problem). These assumptions, known as inductive bias, are often embodied in
        the form of a parametric model, which is a statistical model with a ﬁxed number of parameters.
        Below we brieﬂy describe two widely used examples; we will revisit these and other models in
        much greater depth later in the book.

1.4.5   Linear regression
        One of the most widely used models for regression is known as linear regression. This asserts
        that the response is a linear function of the inputs. This can be written as follows:

                                      
                                      D
            y(x) = wT x +  =                 w j xj +                                                    (1.4)
                                      j=1

        where wT x represents the inner or scalar product between the input vector x and the model’s
        weight vector w7 , and  is the residual error between our linear predictions and the true
        response.

        7. In statistics, it is more common to denote the regression weights by β.
20                                                                                          Chapter 1. Introduction

                             degree 14                                          degree 20
              15                                                 15



              10                                                 10



               5                                                  5



               0                                                  0



             −5                                                  −5



             −10                                                −10
                   0    5       10       15    20                     0    5       10          15    20




                              (a)                                               (b)

Figure 1.18 Polynomial of degrees 14 and 20 ﬁt by least squares to 21 data points. Figure generated by
linregPolyVsDegree.



   We often assume that  has a Gaussian8 or normal distribution. We denote this by  ∼
N (μ, σ 2 ), where μ is the mean and σ 2 is the variance (see Chapter 2 for details). When we plot
this distribution, we get the well-known bell curve shown in Figure 1.17(a).
   To make the connection between linear regression and Gaussians more explicit, we can rewrite
the model in the following form:

     p(y|x, θ) = N (y|μ(x), σ 2 (x))                                                                           (1.5)

This makes it clear that the model is a conditional probability density. In the simplest case, we
assume μ is a linear function of x, so μ = wT x, and that the noise is ﬁxed, σ 2 (x) = σ 2 . In
this case, θ = (w, σ 2 ) are the parameters of the model.
   For example, suppose the input is 1 dimensional. We can represent the expected response as
follows:

     μ(x) = w0 + w1 x = wT x                                                                                   (1.6)

where w0 is the intercept or bias term, w1 is the slope, and where we have deﬁned the vector
x = (1, x). (Prepending a constant 1 term to an input vector is a common notational trick which
allows us to combine the intercept term with the other terms in the model.) If w1 is positive,
it means we expect the output to increase as the input increases. This is illustrated in 1d in
Figure 1.17(b); a more conventional plot, of the mean response vs x, is shown in Figure 1.7(a).
   Linear regression can be made to model non-linear relationships by replacing x with some
non-linear function of the inputs, φ(x). That is, we use

     p(y|x, θ) = N (y|wT φ(x), σ 2 )                                                                           (1.7)

This is known as basis function expansion. For example, Figure 1.18 illustrates the case where
φ(x) = [1, x, x2 , . . . , xd ], for d = 14 and d = 20; this is known as polynomial regression.
We will consider other kinds of basis functions later in the book. In fact, many popular
machine learning methods — such as support vector machines, neural networks, classiﬁcation
and regression trees, etc. — can be seen as just different ways of estimating basis functions
from data, as we discuss in Chapters 14 and 16.

8. Carl Friedrich Gauss (1777–1855) was a German mathematician and physicist.
        1.4. Some basic concepts in machine learning                                                                                        21

                     1
                                                                      1
                    0.9
                                                                     0.9
                    0.8
                                                                     0.8

                    0.7                                              0.7

                    0.6                                              0.6

                    0.5                                              0.5

                    0.4                                              0.4

                                                                     0.3
                    0.3
                                                                     0.2
                    0.2
                                                                     0.1
                    0.1
                                                                      0
                     0
                     −10       −5        0         5        10             460   480   500   520   540     560   580   600   620   640


                                        (a)                                                              (b)

        Figure 1.19 (a) The sigmoid or logistic function. We have sigm(−∞) = 0, sigm(0) = 0.5, and
        sigm(∞) = 1. Figure generated by sigmoidPlot. (b) Logistic regression for SAT scores. Solid black dots
        are the data. The open red circles are the predicted probabilities. The green crosses denote two students
        with the same SAT score of 525 (and hence same input representation x) but with different training labels
        (one student passed, y = 1, the other failed, y = 0). Hence this data is not perfectly separable using just
        the SAT feature. Figure generated by logregSATdemo.



1.4.6   Logistic regression
        We can generalize linear regression to the (binary) classiﬁcation setting by making two changes.
        First we replace the Gaussian distribution for y with a Bernoulli distribution9 ,which is more
        appropriate for the case when the response is binary, y ∈ {0, 1}. That is, we use
           p(y|x, w) = Ber(y|μ(x))                                                                                                        (1.8)

        where μ(x) = E [y|x] = p(y = 1|x). Second, we compute a linear combination of the inputs,
        as before, but then we pass this through a function that ensures 0 ≤ μ(x) ≤ 1 by deﬁning
           μ(x) = sigm(wT x)                                                                                                              (1.9)

        where sigm(η) refers to the sigmoid function, also known as the logistic or logit function.
        This is deﬁned as
                                1         eη
           sigm(η)                    = η                                                                                               (1.10)
                           1 + exp(−η)  e +1
        The term “sigmoid” means S-shaped: see Figure 1.19(a) for a plot. It is also known as a squashing
        function, since it maps the whole real line to [0, 1], which is necessary for the output to be
        interpreted as a probability.
           Putting these two steps together we get

           p(y|x, w) = Ber(y|sigm(wT x))                                                                                                 (1.11)

        This is called logistic regression due to its similarity to linear regression (although it is a form
        of classiﬁcation, not regression!).

        9. Daniel Bernoulli (1700–1782) was a Dutch-Swiss mathematician and physicist.
        22                                                                                          Chapter 1. Introduction


             A simple example of logistic regression is shown in Figure 1.19(b), where we plot

             p(yi = 1|xi , w) = sigm(w0 + w1 xi )                                                                            (1.12)

        where xi is the SAT10 score of student i and yi is whether they passed or failed a class. The
        solid black dots show the training data, and the red circles plot p(y = 1|xi , ŵ), where ŵ are
        the parameters estimated from the training data (we discuss how to compute these estimates in
        Section 8.3.4).
           If we threshold the output probability at 0.5, we can induce a decision rule of the form

             ŷ(x) = 1 ⇐⇒ p(y = 1|x) > 0.5                                                                                   (1.13)
        By looking at Figure 1.19(b), we see that sigm(w0 + w1 x) = 0.5 for x ≈ 545 = x∗ . We can
        imagine drawing a vertical line at x = x∗ ; this is known as a decision boundary. Everything to
        the left of this line is classiﬁed as a 0, and everything to the right of the line is classiﬁed as a 1.
           We notice that this decision rule has a non-zero error rate even on the training set. This
        is because the data is not linearly separable, i.e., there is no straight line we can draw to
        separate the 0s from the 1s. We can create models with non-linear decision boundaries using
        basis function expansion, just as we did with non-linear regression. We will see many examples
        of this later in the book.

1.4.7   Overﬁtting
        When we ﬁt highly ﬂexible models, we need to be careful that we do not overﬁt the data, that
        is, we should avoid trying to model every minor variation in the input, since this is more likely
        to be noise than true signal. This is illustrated in Figure 1.18(b), where we see that using a high
        degree polynomial results in a curve that is very “wiggly”. It is unlikely that the true function
        has such extreme oscillations. Thus using such a model might result in accurate predictions of
        future outputs.
            As another example, consider the KNN classiﬁer. The value of K can have a large effect on
        the behavior of this model. When K = 1, the method makes no errors on the training set (since
        we just return the labels of the original training points), but the resulting prediction surface is
        very “wiggly” (see Figure 1.20(a)). Therefore the method may not work well at predicting future
        data. In Figure 1.20(b), we see that using K = 5 results in a smoother prediction surface,
        because we are averaging over a larger neighborhood. As K increases, the predictions becomes
        smoother until, in the limit of K = N , we end up predicting the majority label of the whole
        data set. Below we discuss how to pick the “right” value of K.

1.4.8   Model selection
        When we have a variety of models of different complexity (e.g., linear or logistic regression
        models with different degree polynomials, or KNN classiﬁers with different values of K), how
        should we pick the right one? A natural approach is to compute the misclassiﬁcation rate on

        10. SAT stands for “Scholastic Aptitude Test”. This is a standardized test for college admissions used in the United States
        (the data in this example is from (Johnson and Albert 1999, p87)).
1.4. Some basic concepts in machine learning                                                                         23

                                predicted label, K=1                            predicted label, K=5

                5                                               5


                4                                               4


                3                                               3


                2                                               2


                1                                               1


                0                                               0


               −1     c1                                       −1    c1
                      c2                                             c2
                      c3                                             c3
               −2                                              −2
                −3    −2   −1         0          1     2   3    −3   −2    −1         0          1     2   3


                                       (a)                                             (b)

Figure 1.20 Prediction surface for KNN on the data in Figure 1.15(a). (a) K=1. (b) K=5. Figure generated by
knnClassifyDemo.



the training set for each method. This is deﬁned as follows:

                     1 
                        N
    err(f, D) =            I(f (xi ) = yi )                                                                       (1.14)
                     N i=1

where f (x) is our classiﬁer. In Figure 1.21(a), we plot this error rate vs K for a KNN classiﬁer
(dotted blue line). We see that increasing K increases our error rate on the training set, because
we are over-smoothing. As we said above, we can get minimal error on the training set by using
K = 1, since this model is just memorizing the data.
   However, what we care about is generalization error, which is the expected value of the
misclassiﬁcation rate when averaged over future data (see Section 6.3 for details). This can be
approximated by computing the misclassiﬁcation rate on a large independent test set, not used
during model training. We plot the test error vs K in Figure 1.21(a) in solid red (upper curve).
Now we see a U-shaped curve: for complex models (small K), the method overﬁts, and for
simple models (big K), the method underﬁts. Therefore, an obvious way to pick K is to pick
the value with the minimum error on the test set (in this example, any value between 10 and
100 should be ﬁne).
   Unfortunately, when training the model, we don’t have access to the test set (by assumption),
so we cannot use the test set to pick the model of the right complexity.11 However, we can create
a test set by partitioning the training set into two: the part used for training the model, and a
second part, called the validation set, used for selecting the model complexity. We then ﬁt all
the models on the training set, and evaluate their performance on the validation set, and pick
the best. Once we have picked the best, we can reﬁt it to all the available data. If we have a
separate test set, we can evaluate performance on this, in order to estimate the accuracy of our
method. (We discuss this in more detail in Section 6.5.3.)
   Often we use about 80% of the data for the training set, and 20% for the validation set. But
if the number of training cases is small, this technique runs into problems, because the model

11. In academic settings, we usually do have access to the test set, but we should not use it for model ﬁtting or model
selection, otherwise we will get an unrealistically optimistic estimate of performance of our method. This is one of the
“golden rules” of machine learning research.
        24                                                                                 Chapter 1. Introduction


                                       0.35
                                                                         train
                                                                         test
                                        0.3

                                       0.25




              misclassification rate
                                        0.2

                                       0.15

                                        0.1

                                       0.05

                                         0
                                          0   20   40    60   80   100      120
                                                         K


                                                        (a)                                (b)

        Figure 1.21 (a) Misclassiﬁcation rate vs K in a K-nearest neighbor classiﬁer. On the left, where K is
        small, the model is complex and hence we overﬁt. On the right, where K is large, the model is simple
        and we underﬁt. Dotted blue line: training set (size 200). Solid red line: test set (size 500). (b) Schematic
        of 5-fold cross validation. Figure generated by knnClassifyDemo.



        won’t have enough data to train on, and we won’t have enough data to make a reliable estimate
        of the future performance.
           A simple but popular solution to this is to use cross validation (CV). The idea is simple: we
        split the training data into K folds; then, for each fold k ∈ {1, . . . , K}, we train on all the
        folds but the k’th, and test on the k’th, in a round-robin fashion, as sketched in Figure 1.21(b).
        We then compute the error averaged over all the folds, and use this as a proxy for the test error.
        (Note that each point gets predicted only once, although it will be used for training K −1 times.)
        It is common to use K = 5; this is called 5-fold CV. If we set K = N , then we get a method
        called leave-one out cross validation, or LOOCV, since in fold i, we train on all the data cases
        except for i, and then test on i. Exercise 1.3 asks you to compute the 5-fold CV estimate of the
        test error vs K, and to compare it to the empirical test error in Figure 1.21(a).
           Choosing K for a KNN classiﬁer is a special case of a more general problem known as model
        selection, where we have to choose between models with different degrees of ﬂexibility. Cross-
        validation is widely used for solving such problems, although we will discuss other approaches
        later in the book.

1.4.9   No free lunch theorem
             All models are wrong, but some models are useful. — George Box (Box and Draper 1987,
             p424).12

        Much of machine learning is concerned with devising different models, and different algorithms
        to ﬁt them. We can use methods such as cross validation to empirically choose the best method
        for our particular problem. However, there is no universally best model — this is sometimes
        called the no free lunch theorem (Wolpert 1996). The reason for this is that a set of assumptions
        that works well in one domain may work poorly in another.

        12. George Box is a retired statistics professor at the University of Wisconsin.
1.4. Some basic concepts in machine learning                                                               25


  As a consequence of the no free lunch theorem, we need to develop many different types of
models, to cover the wide variety of data that occurs in the real world. And for each model,
there may be many different algorithms we can use to train the model, which make different
speed-accuracy-complexity tradeoffs. It is this combination of data, models and algorithms that
we will be studying in the subsequent chapters.

Exercises
Exercise 1.1 KNN classiﬁer on shuffled MNIST data
Run mnist1NNdemo and verify that the misclassiﬁcation rate (on the ﬁrst 1000 test cases) of MNIST of a
1-NN classiﬁer is 3.8%. (If you run it all on all 10,000 test cases, the error rate is 3.09%.) Modify the code
so that you ﬁrst randomly permute the features (columns of the training and test design matrices), as in
shuffledDigitsDemo, and then apply the classiﬁer. Verify that the error rate is not changed.
Exercise 1.2 Approximate KNN classiﬁers
Use the Matlab/C++ code at http://people.cs.ubc.ca/~mariusm/index.php/FLANN/FLANN to per-
form approximate nearest neighbor search, and combine it with mnist1NNdemo to classify the MNIST data
set. How much speedup do you get, and what is the drop (if any) in accuracy?
Exercise 1.3 CV for KNN
Use knnClassifyDemo to plot the CV estimate of the misclassiﬁcation rate on the test set. Compare this
to Figure 1.21(a). Discuss the similarities and differences to the test error rate.
2     Probability



2.1   Introduction
          Probability theory is nothing but common sense reduced to calculation. — Pierre Laplace,
          1812

      In the previous chapter, we saw how probability can play a useful role in machine learning. In
      this chapter, we discuss probability theory in more detail. We do not have to space to go into
      great detail — for that, you are better off consulting some of the excellent textbooks available
      on this topic, such as (Jaynes 2003; Bertsekas and Tsitsiklis 2008; Wasserman 2004). But we will
      brieﬂy review many of the key ideas you will need in later chapters.
         Before we start with the more technical material, let us pause and ask: what is probability?
      We are all familiar with the phrase “the probability that a coin will land heads is 0.5”. But what
      does this mean? There are actually at least two different interpretations of probability. One is
      called the frequentist interpretation. In this view, probabilities represent long run frequencies
      of events. For example, the above statement means that, if we ﬂip the coin many times, we
      expect it to land heads about half the time.1
         The other interpretation is called the Bayesian interpretation of probability. In this view,
      probability is used to quantify our uncertainty about something; hence it is fundamentally
      related to information rather than repeated trials (Jaynes 2003). In the Bayesian view, the above
      statement means we believe the coin is equally likely to land heads or tails on the next toss.
         One big advantage of the Bayesian interpretation is that it can be used to model our uncer-
      tainty about events that do not have long term frequencies. For example, we might want to
      compute the probability that the polar ice cap will melt by 2020 CE. This event will happen zero
      or one times, but cannot happen repeatedly. Nevertheless, we ought to be able to quantify our
      uncertainty about this event; based on how probable we think this event is, we will (hopefully!)
      take appropriate actions (see Section 5.7 for a discussion of optimal decision making under
      uncertainty). To give some more machine learning oriented examples, we might have received
      a speciﬁc email message, and want to compute the probability it is spam. Or we might have
      observed a “blip” on our radar screen, and want to compute the probability distribution over
      the location of the corresponding target (be it a bird, plane, or missile). In all these cases, the
      idea of repeated trials does not make sense, but the Bayesian interpretation is valid and indeed

      1. Actually, the Stanford statistician (and former professional magician) Persi Diaconis has shown that a coin is about
      51% likely to land facing the same way up as it started, due to the physics of the problem (Diaconis et al. 2007).
        28                                                                                   Chapter 2. Probability

             1                                                    1




         0.75                                                   0.75




          0.5                                                    0.5




         0.25                                                   0.25




             0                                                    0
              0     1       2         3       4       5            0      1        2           3       4       5


                                (a)                                                    (b)

        Figure 2.1 (A) a uniform distribution on {1, 2, 3, 4}, with p(x = k) = 1/4. (b) a degenerate distribution
        p(x) = 1 if x = 1 and p(x) = 0 if x ∈ {2, 3, 4}. Figure generated by discreteProbDistFig.



        quite natural. We shall therefore adopt the Bayesian interpretation in this book. Fortunately, the
        basic rules of probability theory are the same, no matter which interpretation is adopted.

 2.2    A brief review of probability theory
        This section is a very brief review of the basics of probability theory, and is merely meant as
        a refresher for readers who may be “rusty”. Readers who are already familiar with these basics
        may safely skip this section.

2.2.1   Discrete random variables
        The expression p(A) denotes the probability that the event A is true. For example, A might
        be the logical expression “it will rain tomorrow”. We require that 0 ≤ p(A) ≤ 1, where
        p(A) = 0 means the event deﬁnitely will not happen, and p(A) = 1 means the event deﬁnitely
        will happen. We write p(A) to denote the probability of the event not A; this is deﬁned to
        p(A) = 1 − p(A). We will often write A = 1 to mean the event A is true, and A = 0 to mean
        the event A is false.
           We can extend the notion of binary events by deﬁning a discrete random variable X, which
        can take on any value from a ﬁnite or countably inﬁnite set X . We denote the probability of
        the event that X = x by p(X = x), or just p(x) for short. Here p() is called   a probability
        mass function or pmf. This satisﬁes the properties 0 ≤ p(x) ≤ 1 and            x∈X p(x) = 1.
        Figure 2.1 shows two pmf’s deﬁned on the ﬁnite state space X = {1, 2, 3, 4, 5}. On the left we
        have a uniform distribution, p(x) = 1/5, and on the right, we have a degenerate distribution,
        p(x) = I(x = 1), where I() is the binary indicator function. This distribution represents the
        fact that X is always equal to the value 1, in other words, it is a constant.

2.2.2   Fundamental rules
        In this section, we review the basic rules of probability.
          2.2. A brief review of probability theory                                                    29


2.2.2.1   Probability of a union of two events
          Given two events, A and B, we deﬁne the probability of A or B as follows:
             p(A ∨ B)        = p(A) + p(B) − p(A ∧ B)                                                 (2.1)
                             = p(A) + p(B) if A and B are mutually exclusive                         (2.2)

2.2.2.2   Joint probabilities
          We deﬁne the probability of the joint event A and B as follows:
             p(A, B) = p(A ∧ B) = p(A|B)p(B)                                                         (2.3)
          This is sometimes called the product rule. Given a joint distribution on two events p(A, B),
          we deﬁne the marginal distribution as follows:
                                    
             p(A) =      p(A, B) =      p(A|B = b)p(B = b)                                        (2.4)
                         b                  b

          where we are summing over all possible states of B. We can deﬁne p(B) similarly. This is
          sometimes called the sum rule or the rule of total probability.
            The product rule can be applied multiple times to yield the chain rule of probability:
             p(X1:D ) = p(X1 )p(X2 |X1 )p(X3 |X2 , X1 )p(X4 |X1 , X2 , X3 ) . . . p(XD |X1:D−1 )     (2.5)
          where we introduce the Matlab-like notation 1 : D to denote the set {1, 2, . . . , D}.

2.2.2.3   Conditional probability
          We deﬁne the conditional probability of event A, given that event B is true, as follows:
                             p(A, B)
             p(A|B) =                if p(B) > 0                                                     (2.6)
                              p(B)

 2.2.3    Bayes rule
          Combining the deﬁnition of conditional probability with the product and sum rules yields Bayes
          rule, also called Bayes Theorem2 :
                                       p(X = x, Y = y)    p(X = x)p(Y = y|X = x)
             p(X = x|Y = y) =                          =                         
                                                                                                     (2.7)
                                          p(Y = y)        x p(X = x )p(Y = y|X = x )


2.2.3.1   Example: medical diagnosis
          As an example of how to use this rule, consider the following medical diagonsis problem.
          Suppose you are a woman in your 40s, and you decide to have a medical test for breast cancer
          called a mammogram. If the test is positive, what is the probability you have cancer? That
          obviously depends on how reliable the test is. Suppose you are told the test has a sensitivity

          2. Thomas Bayes (1702–1761) was an English mathematician and Presbyterian minister.
          30                                                                         Chapter 2. Probability


          of 80%, which means, if you have cancer, the test will be positive with probability 0.8. In other
          words,

               p(x = 1|y = 1) = 0.8                                                                    (2.8)

          where x = 1 is the event the mammogram is positive, and y = 1 is the event you have breast
          cancer. Many people conclude they are therefore 80% likely to have cancer. But this is false! It
          ignores the prior probability of having breast cancer, which fortunately is quite low:

               p(y = 1) = 0.004                                                                         (2.9)
          Ignoring this prior is called the base rate fallacy. We also need to take into account the fact
          that the test may be a false positive or false alarm. Unfortunately, such false positives are
          quite likely (with current screening technology):
               p(x = 1|y = 0) = 0.1                                                                    (2.10)

          Combining these three terms using Bayes rule, we can compute the correct answer as follows:
                                                   p(x = 1|y = 1)p(y = 1)
               p(y = 1|x = 1)     =                                                                    (2.11)
                                      p(x = 1|y = 1)p(y = 1) + p(x = 1|y = 0)p(y = 0)
                                             0.8 × 0.004
                                  =                             = 0.031                                (2.12)
                                      0.8 × 0.004 + 0.1 × 0.996
          where p(y = 0) = 1 − p(y = 1) = 0.996. In other words, if you test positive, you only have
          about a 3% chance of actually having breast cancer!3

2.2.3.2   Example: Generative classiﬁers
          We can generalize the medical diagonosis example to classify feature vectors x of arbitrary type
          as follows:
                                   p(y = c|θ)p(x|y = c, θ)
               p(y = c|x, θ) =                          
                                                                                                       (2.13)
                                   c p(y = c |θ)p(x|y = c , θ)

          This is called a generative classiﬁer, since it speciﬁes how to generate the data using the class-
          conditional density p(x|y = c) and the class prior p(y = c). We discuss such models in detail
          in Chapters 3 and 4. An alternative approach is to directly ﬁt the class posterior, p(y = c|x);
          this is known as a discriminative classiﬁer. We discuss the pros and cons of the two approaches
          in Section 8.6.

 2.2.4    Independence and conditional independence
          We say X and Y are unconditionally independent or marginally independent, denoted
          X ⊥ Y , if we can represent the joint as the product of the two marginals (see Figure 2.2), i.e.,

               X ⊥ Y ⇐⇒ p(X, Y ) = p(X)p(Y )                                                           (2.14)
2.2. A brief review of probability theory                                                                        31


                                                                                 
                                     




                                                     




                                                         


Figure 2.2 Computing p(x, y) = p(x)p(y), where X ⊥ Y . Here X and Y are discrete random variables;
X has 6 possible states (values) and Y has 5 possible states. A general joint distribution on two such
variables would require (6 × 5) − 1 = 29 parameters to deﬁne it (we subtract 1 because of the sum-to-one
constraint). By assuming (unconditional) independence, we only need (6 − 1) + (5 − 1) = 9 parameters
to deﬁne p(x, y).



In general, we say a set of variables is mutually independent if the joint can be written as a
product of marginals.
   Unfortunately, unconditional independence is rare, because most variables can inﬂuence most
other variables. However, usually this inﬂuence is mediated via other variables rather than being
direct. We therefore say X and Y are conditionally independent (CI) given Z iff the conditional
joint can be written as a product of conditional marginals:
   X ⊥ Y |Z ⇐⇒ p(X, Y |Z) = p(X|Z)p(Y |Z)                                                                     (2.15)
When we discuss graphical models in Chapter 10, we will see that we can write this assumption
as a graph X −Z −Y , which captures the intuition that all the dependencies between X and Y
are mediated via Z. For example, the probability it will rain tomorrow (event X) is independent
of whether the ground is wet today (event Y ), given knowledge of whether it is raining today
(event Z). Intuitively, this is because Z “causes” both X and Y , so if we know Z, we do not
need to know about Y in order to predict X or vice versa. We shall expand on this concept in
Chapter 10.
   Another characterization of CI is this:
Theorem 2.2.1. X ⊥ Y |Z iff there exist function g and h such that
   p(x, y|z) = g(x, z)h(y, z)                                                                                 (2.16)
for all x, y, z such that p(z) > 0.

3. These numbers are from (McGrayne 2011, p257). Based on this analysis, the US government decided not to recommend
annual mammogram screening to women in their 40s: the number of false alarms would cause needless worry and
stress amongst women, and result in unnecesssary, expensive, and potentially harmful followup tests. See Section 5.7
for the optimal way to trade off risk reverse reward in the face of uncertainty.
        32                                                                        Chapter 2. Probability


           See Exercise 2.8 for the proof.
           CI assumptions allow us to build large probabilistic models from small pieces. We will see
        many examples of this throughout the book. In particular, in Section 3.5, we discuss naive Bayes
        classiﬁers, in Section 17.2, we discuss Markov models, and in Chapter 10 we discuss graphical
        models; all of these models heavily exploit CI properties.

2.2.5   Continuous random variables
        So far, we have only considered reasoning about uncertain discrete quantities. We will now show
        (following (Jaynes 2003, p107)) how to extend probability to reason about uncertain continuous
        quantities.
           Suppose X is some uncertain continuous quantity. The probability that X lies in any interval
        a ≤ X ≤ b can be computed as follows. Deﬁne the events A = (X ≤ a), B = (X ≤ b) and
        W = (a < X ≤ b). We have that B = A ∨ W , and since A and W are mutually exclusive, the
        sum rules gives

             p(B) = p(A) + p(W )                                                                    (2.17)
        and hence

             p(W ) = p(B) − p(A)                                                                    (2.18)

        Deﬁne the function F (q)  p(X ≤ q). This is called the cumulative distribution function
        or cdf of X. This is obviously a monotonically increasing function. See Figure 2.3(a) for an
        example. Using this notation we have

             p(a < X ≤ b) = F (b) − F (a)                                                           (2.19)
                               d
        Now deﬁne f (x) = dx     F (x) (we assume this derivative exists); this is called the probability
        density function or pdf. See Figure 2.3(b) for an example. Given a pdf, we can compute the
        probability of a continuous variable being in a ﬁnite interval as follows:
                                b
           P (a < X ≤ b) =         f (x)dx                                                         (2.20)
                                 a

        As the size of the interval gets smaller, we can write
             P (x ≤ X ≤ x + dx) ≈ p(x)dx                                                            (2.21)
           We require p(x) ≥ 0, but it is possible for p(x) > 1 for any given x, so long as the density
        integrates to 1. As an example, consider the uniform distribution Unif(a, b):
                               1
             Unif(x|a, b) =       I(a ≤ x ≤ b)                                                     (2.22)
                              b−a
        If we set a = 0 and b = 12 , we have p(x) = 2 for any x ∈ [0, 12 ].
        2.2. A brief review of probability theory                                                                  33

                                       CDF
                    100



                    80



                    60



                    40

                                                                           α/2                     α/2
                    20



                     0
                     −3    −2    −1     0    1     2     3                Φ−1(α/2)      0        Φ−1(1−α/2)


                                      (a)                                              (b)

        Figure 2.3 (a) Plot of the cdf for the standard normal, N (0, 1). (b) Corresponding pdf. The shaded
        regions each contain α/2 of the probability mass. Therefore the nonshaded region contains 1 − α of the
        probability mass. If the distribution is Gaussian N (0, 1), then the leftmost cutoff point is Φ−1 (α/2), where
        Φ is the cdf of the Gaussian. By symmetry, the rightost cutoff point is Φ−1 (1 − α/2) = −Φ−1 (α/2). If
        α = 0.05, the central interval is 95%, and the left cutoff is -1.96 and the right is 1.96. Figure generated by
        quantileDemo.



2.2.6   Quantiles
        Since the cdf F is a monotonically increasing function, it has an inverse; let us denote this by
        F −1 . If F is the cdf of X, then F −1 (α) is the value of xα such that P (X ≤ xα ) = α; this is
        called the α quantile of F . The value F −1 (0.5) is the median of the distribution, with half of
        the probability mass on the left, and half on the right. The values F −1 (0.25) and F −1 (0.75)
        are the lower and upper quartiles.
           We can also use the inverse cdf to compute tail area probabilities. For example, if Φ is
        the cdf of the Gaussian distribution N (0, 1), then points to the left of Φ−1 (α)/2) contain α/2
        probability mass, as illustrated in Figure 2.3(b). By symmetry, points to the right of Φ−1 (1−α/2)
        also contain α/2 of the mass. Hence the central interval (Φ−1 (α/2), Φ−1 (1 − α/2)) contains
        1 − α of the mass. If we set α = 0.05, the central 95% interval is covered by the range

           (Φ−1 (0.025), Φ−1 (0.975)) = (−1.96, 1.96)                                                           (2.23)

        If the distribution is N (μ, σ 2 ), then the 95% interval becomes (μ − 1.96σ, μ + 1.96σ). This is
        sometimes approximated by writing μ ± 2σ.

2.2.7   Mean and variance

                                                is its mean, or expected value, denoted by μ. For
        The most familiar property of a distribution
        discrete rv’s, it is deﬁned as E [X]  x∈X x p(x), and for continuous rv’s, it is deﬁned as
                  
        E [X]  X x p(x)dx. If this integral is not ﬁnite, the mean is not deﬁned (we will see some
        examples of this later).
           The variance is a measure of the “spread” of a distribution, denoted by σ 2 . This is deﬁned
        34                                                                        Chapter 2. Probability


        as follows:
                                             
                                       
             var [X]        E (X − μ)2 = (x − μ)2 p(x)dx                                          (2.24)
                                                          
                                 2           2
                                                                         
                        =       x p(x)dx + μ     p(x)dx − 2μ xp(x)dx = E X 2 − μ2                  (2.25)

        from which we derive the useful result
              
           E X 2 = μ2 + σ 2                                                                        (2.26)
        The standard deviation is deﬁned as
                    
           std [X]  var [X]                                                                       (2.27)
        This is useful since it has the same units as X itself.

 2.3    Some common discrete distributions
        In this section, we review some commonly used parametric distributions deﬁned on discrete
        state spaces, both ﬁnite and countably inﬁnite.

2.3.1   The binomial and Bernoulli distributions
        Suppose we toss a coin n times. Let X ∈ {0, . . . , n} be the number of heads. If the probability
        of heads is θ, then we say X has a binomial distribution, written as X ∼ Bin(n, θ). The pmf
        is given by
                               n k
             Bin(k|n, θ)        θ (1 − θ)n−k                                                      (2.28)
                               k
        where
              n            n!
                                                                                                  (2.29)
              k        (n − k)!k!
        is the number of ways to choose k items from n (this is known as the binomial coefficient,
        and is pronounced “n choose k”). See Figure 2.4 for some examples of the binomial distribution.
        This distribution has the following mean and variance:
             mean = θ, var = nθ(1 − θ)                                                             (2.30)
          Now suppose we toss a coin only once. Let X ∈ {0, 1} be a binary random variable, with
        probability of “success” or “heads” of θ. We say that X has a Bernoulli distribution. This is
        written as X ∼ Ber(θ), where the pmf is deﬁned as
             Ber(x|θ) = θI(x=1) (1 − θ)I(x=0)                                                       (2.31)
        In other words,
                             θ      if x = 1
             Ber(x|θ) =                                                                            (2.32)
                             1−θ    if x = 0
        This is obviously just a special case of a Binomial distribution with n = 1.
        2.3. Some common discrete distributions                                                                                                      35

                                                   θ=0.250                                                         θ=0.900
                      0.35                                                               0.4


                       0.3                                                              0.35


                                                                                         0.3
                      0.25

                                                                                        0.25
                       0.2
                                                                                         0.2
                      0.15
                                                                                        0.15

                       0.1
                                                                                         0.1

                      0.05                                                              0.05


                        0                                                                 0
                             0   1    2    3   4     5       6    7    8       9   10          0   1   2   3   4     5       6   7   8   9   10


                                                   (a)                                                             (b)

        Figure 2.4 Illustration of the binomial distribution with n = 10 and θ ∈ {0.25, 0.9}. Figure generated
        by binomDistPlot.



2.3.2   The multinomial and multinoulli distributions
        The binomial distribution can be used to model the outcomes of coin tosses. To model the
        outcomes of tossing a K-sided die, we can use the multinomial distribution. This is deﬁned as
        follows: let x = (x1 , . . . , xK ) be a random vector, where xj is the number of times side j of
        the die occurs. Then x has the following pmf:
                                                                 K
                                          n                                x
           Mu(x|n, θ)                                                 θj j                                                                       (2.33)
                                     x1 . . . xK                 j=1

        where θj is the probability that side j shows up, and
                   n                        n!
                                                                                                                                                 (2.34)
             x 1 . . . xK            x1 !x2 ! · · · xK !
                                                                                            K
        is the multinomial coefficient (the number of ways to divide a set of size n = k=1 xk into
        subsets with sizes x1 up to xK ).
           Now suppose n = 1. This is like rolling a K-sided dice once, so x will be a vector of 0s
        and 1s (a bit vector), in which only one bit can be turned on. Speciﬁcally, if the dice shows
        up as face k, then the k’th bit will be on. In this case, we can think of x as being a scalar
        categorical random variable with K states (values), and x is its dummy encoding, that is,
        x = [I(x = 1), . . . , I(x = K)]. For example, if K = 3, we encode the states 1, 2 and 3 as
        (1, 0, 0), (0, 1, 0), and (0, 0, 1). This is also called a one-hot encoding, since we imagine that
        only one of the K “wires” is “hot” or on. In this case, the pmf becomes
                                 K
                                           I(xj =1)
           Mu(x|1, θ) =                   θj                                                                                                      (2.35)
                                 j=1

        See Figure 2.1(b-c) for an example. This very common special case is known as a categorical
        or discrete distribution. (Gustavo Lacerda suggested we call it the multinoulli distribution, by
        analogy with the Binomial/ Bernoulli distinction, a term which we shall adopt in this book.) We
          36                                                                                                                             Chapter 2. Probability


                          Name                        n         K       x
                                                                                                K
                          Multinomial                 -         -       x ∈ {0, 1, . . . , n}K , k=1 xk = n
                                                                                         K
                          Multinoulli                 1         -       x ∈ {0, 1}K , k=1 xk = 1 (1-of-K encoding)
                          Binomial                    -         1       x ∈ {0, 1, . . . , n}
                          Bernoulli                   1         1       x ∈ {0, 1}

                                      Table 2.1         Summary of the multinomial and related distributions.

                          a   t   a   g   c   c   g   g     t   a   c   g   g   c   a
                                                                                                     2


                          t   t   a   g   c   t   g   c     a   a   c   c   g   c   a
                          t   c   a   g   c   c   a   c     t   a   g   a   g   c   a
                          a   t   a   a   c   c   g   c     g   a   c   c   g   c   a
                          t   t   a   g   c   c   g   c     t   a   a   g   g   t   a




                                                                                              Bits
                                                                                                     1

                          t   a   a   g   c   c   t   c     g   t   a   c   g   t   a
                          t   t   a   g   c   c   g   t     t   a   c   g   g   c   c
                          a   t   a   t   c   c   g   g     t   a   c   a   g   t   a
                          a   t   a   g   c   a   g   g     t   a   c   c   g   a   a
                          a   c   a   t   c   c   g   t     g   a   c   g   g   a   a                0
                                                                                                         1   2   3   4   5    6 7 8 9 10 11 12 13 14 15
                                                                                                                              Sequence Position


                                                      (a)                                                                       (b)

          Figure 2.5 (a) Some aligned DNA sequences. (b) The corresponding sequence logo. Figure generated by
          seqlogoDemo.


          will use the following notation for this case:
               Cat(x|θ)  Mu(x|1, θ)                                                                                                                      (2.36)
          In otherwords, if x ∼ Cat(θ), then p(x = j|θ) = θj . See Table 2.1 for a summary.

2.3.2.1   Application: DNA sequence motifs
          An interesting application of multinomial models arises in biosequence analysis. Suppose
          we have a set of (aligned) DNA sequences, such as in Figure 2.5(a), where there are 10 rows
          (sequences) and 15 columns (locations along the genome). We see that several locations are con-
          served by evolution (e.g., because they are part of a gene coding region), since the corresponding
          columns tend to be “pure”. For example, column 7 is all G’s.
             One way to visually summarize the data is by using a sequence logo: see Figure 2.5(b). We
          plot the letters A, C, G and T with a fontsize proportional to their empirical probability, and with
          the most probable letter on the top. The empirical probability distribution at location t, θ̂ t , is
          gotten by normalizing the vector of counts (see Equation 3.48 ):
                                                                                             
                           N              N               N               N
             Nt =              I(Xit = 1),     I(Xit = 2),      I(Xit = 3),      I(Xit = 4)              (2.37)
                                  i=1                           i=1                     i=1                                  i=1

               θ̂ t   =       Nt /N                                                                                                                       (2.38)
          This distribution is known as a motif. We can also compute the most probable letter in each
          location; this is called the consensus sequence.
        2.3. Some common discrete distributions                                                                                    37

                                               Poi(λ=1.000)                                      Poi(λ=10.000)
                      0.4                                                    0.14


                     0.35                                                    0.12

                      0.3
                                                                              0.1

                     0.25
                                                                             0.08
                      0.2
                                                                             0.06
                     0.15

                                                                             0.04
                      0.1


                     0.05                                                    0.02


                       0                                                       0
                            0       5     10       15         20   25   30          0   5   10        15         20   25   30


                                                 (a)                                               (b)

        Figure 2.6 Illustration of some Poisson distributions for λ ∈ {1, 10}. We have truncated the x-axis to
        25 for clarity, but the support of the distribution is over all the non-negative integers. Figure generated by
        poissonPlotDemo.


2.3.3   The Poisson distribution
        We say that X ∈ {0, 1, 2, . . .} has a Poisson distribution with parameter λ > 0, written
        X ∼ Poi(λ), if its pmf is
                             λx
           Poi(x|λ) = e−λ                                                                          (2.39)
                              x!
        The ﬁrst term is just the normalization constant, required to ensure the distribution sums to 1.
          The Poisson distribution is often used as a model for counts of rare events like radioactive
        decay and traffic accidents. See Figure 2.6 for some plots.

2.3.4   The empirical distribution
        Given a set of data, D = {x1 , . . . , xN }, we deﬁne the empirical distribution, also called the
        empirical measure, as follows:

                                1 
                                   N
           pemp (A)                 δx (A)                                                                                     (2.40)
                                N i=1 i

        where δx (A) is the Dirac measure, deﬁned by
                                0       if x ∈ A
           δx (A) =                                                                                                             (2.41)
                                1       if x ∈ A
        In general, we can associate “weights” with each sample:
                    
                    N
           p(x) =               wi δxi (x)                                                                                      (2.42)
                     i=1
                                             N
        where we require 0 ≤ wi ≤ 1 and i=1 wi = 1. We can think of this as a histogram, with
        “spikes” at the data points xi , where wi determines the height of spike i. This distribution
        assigns 0 probability to any point not in the data set.
        38                                                                                           Chapter 2. Probability


 2.4    Some common continuous distributions
        In this section we present some commonly used univariate (one-dimensional) continuous prob-
        ability distributions.

2.4.1   Gaussian (normal) distribution
        The most widely used distribution in statistics and machine learning is the Gaussian or normal
        distribution. Its pdf is given by
                                        1           1          2
             N (x|μ, σ 2 )         √           e− 2σ2 (x−μ)                                                               (2.43)
                                        2πσ 2
                                                                                          √
        Here μ = E [X] is the mean (and mode), and σ 2 = var [X] is the variance.           2πσ 2 is the
        normalization constant needed to ensure the density integrates to 1 (see Exercise 2.11).
          We write X ∼ N (μ, σ 2 ) to denote that p(X = x) = N (x|μ, σ 2 ). If X ∼ N (0, 1), we
        say X follows a standard normal distribution. See Figure 2.3(b) for a plot of this pdf; this is
        sometimes called the bell curve.
          We will often talk about the precision of a Gaussian, by which we mean the inverse variance:
        λ = 1/σ 2 . A high precision means a narrow distribution (low variance) centered on μ.4
          Note that, since this is a pdf, we can have p(x) > 1. √ To see this, consider √ evaluating the
        density at its center, x = μ. We have N (μ|μ, σ 2 ) = (σ 2π)−1 e0 , so if σ < 1/ 2π, we have
        p(x) > 1.
          The cumulative distribution function or cdf of the Gaussian is deﬁned as
                            x
           Φ(x; μ, σ 2 )        N (z|μ, σ 2 )dz                                                   (2.44)
                                  −∞

        See Figure 2.3(a) for a plot of this cdf when μ = 0, σ 2 = 1. This integral has no closed form
        expression, but is built in to most software packages. In particular, we can compute it in terms
        of the error function (erf):
                          1            √
            Φ(x; μ, σ) = [1 + erf(z/ 2)]                                                            (2.45)
                          2
        where z = (x − μ)/σ and
                        x
                     2        2
          erf(x)  √       e−t dt                                                                                          (2.46)
                      π 0
           The Gaussian distribution is the most widely used distribution in statistics. There are several
        reasons for this. First, it has two parameters which are easy to interpret, and which capture
        some of the most basic properties of a distribution, namely its mean and variance. Second,
        the central limit theorem (Section 2.6.3) tells us that sums of independent random variables
        have an approximately Gaussian distribution, making it a good choice for modeling residual
        errors or “noise”. Third, the Gaussian distribution makes the least number of assumptions (has

        4. The symbol λ will have many different meanings in this book, in order to be consistent with the rest of the literature.
        The intended meaning should be clear from context.
        2.4. Some common continuous distributions                                                                             39


        maximum entropy), subject to the constraint of having a speciﬁed mean and variance, as we
        show in Section 9.2.6; this makes it a good default choice in many cases. Finally, it has a simple
        mathematical form, which results in easy to implement, but often highly effective, methods, as
        we will see. See (Jaynes 2003, ch 7) for a more extensive discussion of why Gaussians are so
        widely used.

2.4.2   Degenerate pdf
        In the limit that σ 2 → 0, the Gaussian becomes an inﬁnitely tall and inﬁnitely thin “spike”
        centered at μ:
             lim N (x|μ, σ 2 ) = δ(x − μ)                                                                                 (2.47)
            σ 2 →0

        where δ is called a Dirac delta function, and is deﬁned as
                           ∞     if x = 0
            δ(x) =                                                                                                        (2.48)
                           0     if x = 0
        such that
            ∞
                δ(x)dx = 1                                                                                                (2.49)
             −∞

           A useful property of delta functions is the sifting property, which selects out a single term
        from a sum or integral:
             ∞
                 f (x)δ(x − μ)dx = f (μ)                                                           (2.50)
             −∞

        since the integrand is only non-zero if x − μ = 0.
           One problem with the Gaussian distribution is that it is sensitive to outliers, since the log-
        probability only decays quadratically with distance from the center. A more robust distribution
        is the Student t distribution5 Its pdf is as follows:
                                                              ν+1
                                                             2 −( 2 )
                       2                     1     x−μ
            T (x|μ, σ , ν)      ∝         1+                                                                               (2.51)
                                             ν      σ

        where μ is the mean, σ 2 > 0 is the scale parameter, and ν > 0 is called the degrees of
        freedom. See Figure 2.7 for some plots. For later reference, we note that the distribution has
        the following properties:
                                                    νσ 2
            mean = μ, mode = μ, var =                                                                                     (2.52)
                                                  (ν − 2)

        5. This distribution has a colourful etymology. It was ﬁrst published in 1908 by William Sealy Gosset, who worked at the
        Guinness brewery in Dublin. Since his employer would not allow him to use his own name, he called it the “Student”
        distribution. The origin of the term t seems to have arisen in the context of Tables of the Student distribution, used by
        Fisher when developing the basis of classical statistical inference. See http://jeff560.tripod.com/s.html for more
        historical details.
40                                                                                                                Chapter 2. Probability

            0.8                                                             0
                                                             Gauss                                                          Gauss
                                                             Student                                                        Student
                                                             Laplace       −1                                               Laplace
            0.7


                                                                           −2
            0.6

                                                                           −3
            0.5

                                                                           −4
            0.4
                                                                           −5

            0.3
                                                                           −6

            0.2
                                                                           −7


            0.1                                                            −8


             0                                                             −9
             −4   −3   −2       −1     0   1       2     3             4    −4   −3   −2       −1    0    1        2    3             4



                                     (a)                                                            (b)

                                                                       √
Figure 2.7 (a) The pdf’s for a N (0, 1), T (0, 1, 1) and Lap(0, 1/ 2). The mean is 0 and the variance
is 1 for both the Gaussian and Laplace. The mean and variance of the Student is undeﬁned when ν = 1.
(b) Log of these pdf’s. Note that the Student distribution is not log-concave for any parameter value, unlike
the Laplace distribution, which is always log-concave (and log-convex...) Nevertheless, both are unimodal.
Figure generated by studentLaplacePdfPlot.

            0.5                                                            0.5
                                                       gaussian                                                        gaussian
                                                       student T                                                       student T
                                                       laplace                                                         laplace
            0.4                                                            0.4




            0.3                                                            0.3




            0.2                                                            0.2




            0.1                                                            0.1




             0                                                              0
             −5             0                  5                   10       −5             0                  5                       10


                                     (a)                                                            (b)

Figure 2.8 Illustration of the effect of outliers on ﬁtting Gaussian, Student and Laplace distributions. (a)
No outliers (the Gaussian and Student curves are on top of each other). (b) With outliers. We see that the
Gaussian is more affected by outliers than the Student and Laplace distributions. Based on Figure 2.16 of
(Bishop 2006a). Figure generated by robustDemo.



The variance is only deﬁned if ν > 2. The mean is only deﬁned if ν > 1.
   As an illustration of the robustness of the Student distribution, consider Figure 2.8. On the
left, we show a Gaussian and a Student ﬁt to some data with no outliers. On the right, we
add some outliers. We see that the Gaussian is affected a lot, whereas the Student distribution
hardly changes. This is because the Student has heavier tails, at least for small ν (see Figure 2.7).
   If ν = 1, this distribution is known as the Cauchy or Lorentz distribution. This is notable
for having such heavy tails that the integral that deﬁnes the mean does not converge.
   To ensure ﬁnite variance, we require ν > 2. It is common to use ν = 4, which gives good
performance in a range of problems (Lange et al. 1989). For ν  5, the Student distribution
rapidly approaches a Gaussian distribution and loses its robustness properties.
        2.4. Some common continuous distributions                                                                             41

                            Gamma distributions                         3.5
        0.9
                                                      a=1.0,b=1.0
        0.8                                                              3
                                                      a=1.5,b=1.0
                                                      a=2.0,b=1.0
        0.7
                                                                        2.5

        0.6
                                                                         2
        0.5

        0.4                                                             1.5

        0.3
                                                                         1
        0.2
                                                                        0.5
        0.1

                                                                         0
                 1      2      3         4        5       6         7         0   0.5        1         1.5        2         2.5

                                   (a)                                                           (b)

        Figure 2.9 (a) Some Ga(a, b = 1) distributions. If a ≤ 1, the mode is at 0, otherwise it is > 0. As
        we increase the rate b, we reduce the horizontal scale, thus squeezing everything leftwards and upwards.
        Figure generated by gammaPlotDemo. (b) An empirical pdf of some rainfall data, with a ﬁtted Gamma
        distribution superimposed. Figure generated by gammaRainfallDemo.


2.4.3   The Laplace distribution
        Another distribution with heavy tails is the Laplace distribution6 , also known as the double
        sided exponential distribution. This has the following pdf:
                                     1        |x − μ|
              Lap(x|μ, b)              exp −                                                                            (2.53)
                                     2b          b
        Here μ is a location parameter and b > 0 is a scale parameter. See Figure 2.7 for a plot. This
        distribution has the following properties:
              mean = μ, mode = μ, var = 2b2                                                                              (2.54)
        Its robustness to outliers is illustrated in Figure 2.8. It also put mores probability density at 0
        than the Gaussian. This property is a useful way to encourage sparsity in a model, as we will
        see in Section 13.3.

2.4.4   The gamma distribution
        The gamma distribution is a ﬂexible distribution for positive real valued rv’s, x > 0. It is
        deﬁned in terms of two parameters, called the shape a > 0 and the rate b > 0:7
                                                               ba a−1 −T b
              Ga(T |shape = a, rate = b)                          T e                                                   (2.55)
                                                              Γ(a)
        6. Pierre-Simon Laplace (1749–1827) was a French mathematician, who played a key role in creating the ﬁeld of Bayesian
        statistics.
        7. There is an alternative parameterization, where we use the scale parameter instead of the rate: Gas (T |a, b) 
        Ga(T |a, 1/b). This version is the one used by Matlab’s gampdf, although in this book will use the rate parameterization
        unless otherwise speciﬁed.
        42                                                                          Chapter 2. Probability


        where Γ(a) is the gamma function:
                   ∞
          Γ(x)         ux−1 e−u du                                                                   (2.56)
                      0

        See Figure 2.9 for some plots. For later reference, we note that the distribution has the following
        properties:
                   a             a−1           a
             mean =   , mode =         , var = 2                                                (2.57)
                    b               b          b
          There are several distributions which are just special cases of the Gamma, which we discuss
        below.

        • Exponential distribution This is deﬁned by Expon(x|λ)  Ga(x|1, λ), where λ is the rate
          parameter. This distribution describes the times between events in a Poisson process, i.e. a
          process in which events occur continuously and independently at a constant average rate λ.
        • Erlang distribution This is the same as the Gamma distribution where a is an integer. It
          is common to ﬁx a = 2, yielding the one-parameter Erlang distribution, Erlang(x|λ) =
          Ga(x|2, λ), where λ is the rate parameter.
        • Chi-squared distribution This is deﬁned by χ2 (x|ν)  Ga(x| ν2 , 12 ). This is the distribution
          of thesum of squared Gaussian random variables. More precisely, if Zi ∼ N (0, 1), and
          S = i=1 Zi2 , then S ∼ χ2ν .
                 ν


          Another useful result is the following: If X ∼ Ga(a, b), then one can show (Exercise 2.10)
        that X1 ∼ IG(a, b), where IG is the inverse gamma distribution deﬁned by
                                                 ba −(a+1) −b/x
             IG(x|shape = a, scale = b)             x    e                                           (2.58)
                                                Γ(a)
        The distribution has these properties
                       b            b                b2
             mean =       , mode =     , var =                  ,                                     (2.59)
                      a−1          a+1         (a − 1)2 (a − 2)
        The mean only exists if a > 1. The variance only exists if a > 2.
          We will see applications of these distributions later on.

2.4.5   The beta distribution
        The beta distribution has support over the interval [0, 1] and is deﬁned as follows:
                                1
             Beta(x|a, b) =           xa−1 (1 − x)b−1                                                 (2.60)
                              B(a, b)
        Here B(p, q) is the beta function,
                          Γ(a)Γ(b)
             B(a, b)                                                                                 (2.61)
                          Γ(a + b)
        See Figure 2.10 for plots of some beta distributions. We require a, b > 0 to ensure the distribution
        is integrable (i.e., to ensure B(a, b) exists). If a = b = 1, we get the uniform distirbution. If
        2.4. Some common continuous distributions                                                                43


                                                              beta distributions
                                      3
                                               a=0.1, b=0.1
                                               a=1.0, b=1.0
                                     2.5       a=2.0, b=3.0
                                               a=8.0, b=4.0

                                      2



                                     1.5



                                      1



                                     0.5



                                      0
                                           0      0.2         0.4           0.6    0.8   1



                      Figure 2.10 Some beta distributions. Figure generated by betaPlotDemo.


        a and b are both less than 1, we get a bimodal distribution with “spikes” at 0 and 1; if a and
        b are both greater than 1, the distribution is unimodal. For later reference, we note that the
        distribution has the following properties (Exercise 2.16):
                      a            a−1                   ab
           mean =        , mode =       , var =                                                               (2.62)
                     a+b          a+b−2         (a + b)2 (a + b + 1)

2.4.6   Pareto distribution
        The Pareto distribution is used to model the distribution of quantities that exhibit long tails,
        also called heavy tails. For example, it has been observed that the most frequent word in
        English (“the”) occurs approximately twice as often as the second most frequent word (“of”),
        which occurs twice as often as the fourth most frequent word, etc. If we plot the frequency of
        words vs their rank, we will get a power law; this is known as Zipf’s law. Wealth has a similarly
        skewed distribution, especially in plutocracies such as the USA.8
           The Pareto pdf is deﬁned as follow:
           Pareto(x|k, m) = kmk x−(k+1) I(x ≥ m)                                                              (2.63)
        This density asserts that x must be greater than some constant m, but not too much greater,
        where k controls what is “too much”. As k → ∞, the distribution approaches δ(x − m). See
        Figure 2.11(a) for some plots. If we plot the distibution on a log-log scale, it forms a straight
        line, of the form log p(x) = a log x + c for some constants a and c. See Figure 2.11(b) for an
        illustration (this is known as a power law). This distribution has the following properties
                      km                                 m2 k
           mean =        if k > 1 , mode = m, var =                  if k > 2                                 (2.64)
                     k−1                            (k − 1)2 (k − 2)

        8. In the USA, 400 Americans have more wealth than half of all Americans combined.                  (Source:
        http://www.politifact.com/wisconsin/statements/2011/mar/10/michael-moore/michael-moore-s
        ays-400-americans-have-more-wealth-.) See (Hacker and Pierson 2010) for a political analysis of how such an
        extreme distribution of income has arisen in a democratic country.
        44                                                                                                          Chapter 2. Probability


                                     Pareto distribution                                   1
                                                                                                    Pareto(m=1, k) on log scale
                                                                                          10
             2                                                       m=0.01, k=0.10                                                k=1.0
                                                                     m=0.00, k=0.50                                                k=2.0
                                                                     m=1.00, k=1.00                                                k=3.0
         1.8


         1.6                                                                               0
                                                                                          10

         1.4


         1.2

                                                                                           −1
             1                                                                            10


         0.8


         0.6
                                                                                           −2
                                                                                          10
         0.4


         0.2


             0
                                                                                           −3
                                                                                          10
                                                                                                0
                 0   0.5   1   1.5       2     2.5   3     3.5   4        4.5         5        10


                                              (a)                                                             (b)

        Figure 2.11 (a) The Pareto distribution Pareto(x|m, k) for m = 1. (b) The pdf on a log-log scale. Figure
        generated by paretoPlot.



 2.5    Joint probability distributions
        So far, we have been mostly focusing on modeling univariate probability distributions. In this
        section, we start our discussion of the more challenging problem of building joint probability
        distributions on multiple related random variables; this will be a central topic in this book.
           A joint probability distribution has the form p(x1 , . . . , xD ) for a set of D > 1 variables,
        and models the (stochastic) relationships between the variables. If all the variables are discrete,
        we can represent the joint distribution as a big multi-dimensional array, with one variable per
        dimension. However, the number of parameters needed to deﬁne such a model is O(K D ),
        where K is the number of states for each variable.
           We can deﬁne high dimensional joint distributions using fewer parameters by making con-
        ditional independence assumptions, as we explain in Chapter 10. In the case of continuous
        distributions, an alternative approach is to restrict the form of the pdf to certain functional
        forms, some of which we will examine below.

2.5.1   Covariance and correlation
        The covariance between two rv’s X and Y measures the degree to which X and Y are (linearly)
        related. Covariance is deﬁned as
                 cov [X, Y ]                E [(X − E [X])(Y − E [Y ])] = E [XY ] − E [X] E [Y ]                                   (2.65)
2.5. Joint probability distributions                                                                       45




Figure 2.12 Several sets of (x, y) points, with the correlation coefficient of x and y for each set. Note
that the correlation reﬂects the noisiness and direction of a linear relationship (top row), but not the slope
of that relationship (middle), nor many aspects of nonlinear relationships (bottom). N.B.: the ﬁgure in the
center has a slope of 0 but in that case the correlation coefficient is undeﬁned because the variance of Y
is zero. Source: http://en.wikipedia.org/wiki/File:Correlation_examples.png



If x is a d-dimensional random vector, its covariance matrix is deﬁned to be the following
symmetric, positive deﬁnite matrix:
                                            
                                           T
    cov [x]  E (x − E [x])(x − E [x])                                                (2.66)
                 ⎛                                                    ⎞
                     var [X1 ]    cov [X1 , X2 ] · · · cov [X1 , Xd ]
                 ⎜cov [X2 , X1 ]    var [X2 ]    · · · cov [X2 , Xd ]⎟
                 ⎜                                                    ⎟
             = ⎜         ..             ..        ..         ..       ⎟               (2.67)
                 ⎝        .              .           .        .       ⎠
                      cov [Xd , X1 ]   cov [Xd , X2 ]     ···      var [Xd ]
  Covariances can be between 0 and inﬁnity. Sometimes it is more convenient to work with a
normalized measure, with a ﬁnite upper bound. The (Pearson) correlation coefficient between
X and Y is deﬁned as
                        cov [X, Y ]
   corr [X, Y ]                                                                                      (2.68)
                       var [X] var [Y ]
A correlation matrix has the form
        ⎛                                                                ⎞
           corr [X1 , X1 ] corr [X1 , X2 ]       ···     corr [X1 , Xd ]
        ⎜         ..              ..              ..            ..       ⎟
   R=⎝             .               .                 .           .       ⎠                             (2.69)
           corr [Xd , X1 ] corr [Xd , X2 ]       ···     corr [Xd , Xd ]
  One can show (Exercise 4.3) that −1 ≤ corr [X, Y ] ≤ 1. Hence in a correlation matrix, each
entry on the diagonal is 1, and the other entries are between -1 and 1.
  One can also show that corr [X, Y ] = 1 if and only if Y = aX + b for some parameters a
and b, i.e., if there is a linear relationship between X and Y (see Exercise 4.4). Intuitively one
        46                                                                           Chapter 2. Probability


        might expect the correlation coefficient to be related to the slope of the regression line, i.e., the
        coefficient a in the expression Y = aX + b. However, as we show in Equation 7.99 later, the
        regression coefficient is in fact given by a = cov [X, Y ] /var [X]. A better way to think of the
        correlation coefficient is as a degree of linearity: see Figure 2.12.
           If X and Y are independent, meaning p(X, Y ) = p(X)p(Y ) (see Section 2.2.4), then
        cov [X, Y ] = 0, and hence corr [X, Y ] = 0 so they are uncorrelated. However, the con-
        verse is not true: uncorrelated does not imply independent. For example, let X ∼ U (−1, 1) and
        Y = X 2 . Clearly Y is dependent on X (in fact, Y is uniquely determined by X), yet one
        can show (Exercise 4.1) that corr [X, Y ] = 0. Some striking examples of this fact are shown in
        Figure 2.12. This shows several data sets where there is clear dependendence between X and Y ,
        and yet the correlation coefficient is 0. A more general measure of dependence between random
        variables is mutual information, discussed in Section 2.8.3. This is only zero if the variables truly
        are independent.

2.5.2   The multivariate Gaussian
        The multivariate Gaussian or multivariate normal (MVN) is the most widely used joint prob-
        ability density function for continuous variables. We discuss MVNs in detail in Chapter 4; here
        we just give some deﬁnitions and plots.
          The pdf of the MVN in D dimensions is deﬁned by the following:
                                                                            
                                      1                1         T −1
           N (x|μ, Σ)                         exp − (x − μ) Σ (x − μ)                            (2.70)
                               (2π)D/2 |Σ|1/2          2

        where μ = E [x] ∈ RD is the mean vector, and Σ = cov [x] is the D × D covariance
        matrix. Sometimes we will work in terms of the precision matrix or concentration matrix
        instead. This is just the inverse covariance matrix, Λ = Σ−1 . The normalization constant
        (2π)−D/2 |Λ|1/2 just ensures that the pdf integrates to 1 (see Exercise 4.5).
           Figure 2.13 plots some MVN densities in 2d for three different kinds of covariance matrices.
        A full covariance matrix has D(D + 1)/2 parameters (we divide by 2 since Σ is symmetric). A
        diagonal covariance matrix has D parameters, and has 0s in the off-diagonal terms. A spherical
        or isotropic covariance, Σ = σ 2 ID , has one free parameter.

2.5.3   Multivariate Student t distribution
        A more robust alternative to the MVN is the multivariate Student t distribution, whose pdf is
        given by
                                                                                         −( ν+D
                                                                                               2 )
                                 Γ(ν/2 + D/2) |Σ|−1/2              1         T −1
             T (x|μ, Σ, ν)   =                            ×    1 +   (x − μ)  Σ   (x − μ)        (2.71)
                                    Γ(ν/2)    ν D/2 π D/2          ν
                                 Γ(ν/2 + D/2)                                        −( ν+D
                                                                                           2 )
                             =                |πV|−1/2 × 1 + (x − μ)T V−1 (x − μ)               (2.72)
                                    Γ(ν/2)
        where Σ is called the scale matrix (since it is not exactly the covariance matrix) and V = νΣ.
        This has fatter tails than a Gaussian. The smaller ν is, the fatter the tails. As ν → ∞, the
        2.5. Joint probability distributions                                                                                                                        47

                                                       full                                                              diagonal
                       6                                                                      10

                                                                                               8
                       4
                                                                                               6

                                                                                               4
                       2
                                                                                               2

                       0                                                                       0

                                                                                               −2
                      −2
                                                                                               −4

                                                                                               −6
                      −4
                                                                                               −8

                      −6                                                                      −10
                       −6        −4        −2           0           2       4       6           −5   −4   −3   −2   −1         0     1   2       3   4   5




                                                    (a)                                                                  (b)
                                                    spherical                                                            spherical
                       5

                       4

                       3                                                                     0.2


                       2
                                                                                            0.15

                       1
                                                                                             0.1
                       0

                      −1                                                                    0.05

                      −2
                                                                                              0
                                                                                              5
                      −3
                                                                                                                                                             5
                      −4                                                                                  0
                                                                                                                                             0
                      −5
                            −4        −2        0               2       4       6                                   −5    −5




                                                    (c)                                                                  (d)

        Figure 2.13 We show the level sets for 2d Gaussians. (a) A full covariance matrix has elliptical contours.
        (b) A diagonal covariance matrix is an axis aligned ellipse. (c) A spherical covariance matrix has a circular
        shape. (d) Surface plot for the spherical Gaussian in (c). Figure generated by gaussPlot2Ddemo.



        distribution tends towards a Gaussian. The distribution has the following properties
                                                                                     ν
           mean = μ, mode = μ, Cov =                                                    Σ                                                                        (2.73)
                                                                                    ν−2

2.5.4   Dirichlet distribution
        A multivariate generalization of the beta distribution is the Dirichlet distribution9 , which has
        support over the probability simplex, deﬁned by

                                                              
                                                              K
           SK = {x : 0 ≤ xk ≤ 1,                                    xk = 1}                                                                                      (2.74)
                                                              k=1

        The pdf is deﬁned as follows:
                                                              K
                                       1                               k −1
           Dir(x|α)                                                xα
                                                                     k      I(x ∈ SK )                                                                           (2.75)
                                      B(α)
                                                          k=1

        9. Johann Dirichlet was a German mathematician, 1805–1859.
48                                                                                                     Chapter 2. Probability




                             (a)                                                    (b)
                                                                                               α=0.10




                                                                     15



                                                                     10




                                                                 p
                                                                      5



                                                                     0
                                                                     1
                                                                                                                       1
                                                                              0.5
                                                                                                            0.5

                                                                                           0   0


                                    (c)                                                        (d)


                                                                                            which
Figure 2.14 (a) The Dirichlet distribution when K = 3 deﬁnes a distribution over the simplex,
can be represented by the triangular surface. Points on this surface satisfy 0 ≤ θk ≤ 1 and 3k=1 θk =
1. (b) Plot of the Dirichlet density when α = (2, 2, 2). (c) α = (20, 2, 2). Figure generated by
visDirichletGui, by Jonathan Huang. (d) α = (0.1, 0.1, 0.1). (The comb-like structure on the edges is
a plotting artifact.) Figure generated by dirichlet3dPlot.

                  Samples from Dir (alpha=0.1)                                      Samples from Dir (alpha=1)
     1                                                      1
 0.5                                                       0.5
     0                                                      0
           1       2           3           4     5                        1          2             3        4      5
     1                                                      1
 0.5                                                       0.5
     0                                                      0
           1       2           3           4     5                        1          2             3        4      5
     1                                                      1
 0.5                                                       0.5
     0                                                      0
           1       2           3           4     5                        1          2             3        4      5
     1                                                      1
 0.5                                                       0.5
     0                                                      0
           1       2           3           4     5                        1          2             3        4      5
     1                                                      1
 0.5                                                       0.5
     0                                                      0
           1       2           3           4     5                        1          2             3        4      5

                            (a)                                                                (b)

Figure 2.15 Samples from a 5-dimensional symmetric Dirichlet distribution for different parameter values.
(a) α = (0.1, . . . , 0.1). This results in very sparse distributions, with many 0s. (b) α = (1, . . . , 1). This
results in more uniform (and dense) distributions. Figure generated by dirichletHistogramDemo.
        2.6. Transformations of random variables                                                         49


        where B(α1 , . . . , αK ) is the natural generalization of the beta function to K variables:
                      K
                              Γ(αk )
            B(α)  k=1                                                                                (2.76)
                         Γ(α0 )
                      K
        where α0  k=1 αk .
           Figure 2.14 shows some plots of the Dirichlet when K = 3, and Figure 2.15 for some sampled
                                                   K
        probability vectors. We see that α0 = k=1 αk controls the strength of the distribution (how
        peaked it is), and the αk control where the peak occurs. For example, Dir(1, 1, 1) is a uniform
        distribution, Dir(2, 2, 2) is a broad distribution centered at (1/3, 1/3, 1/3), and Dir(20, 20, 20)
        is a narrow distribution centered at (1/3, 1/3, 1/3). If αk < 1 for all k, we get “spikes” at the
        corner of the simplex.
           For future reference, the distribution has these properties
                     αk                  αk − 1                αk (α0 − αk )
           E [xk ] =    , mode [xk ] =           , var [xk ] = 2                                 (2.77)
                     α0                 α0 − K                  α0 (α0 + 1)
                     
        where α0 = k αk . Often we use a symmetric Dirichlet prior of the form αk = α/K. In this
        case, the mean becomes 1/K, and the variance becomes var [xk ] = K 2K−1
                                                                              (α+1) . So increasing α
        increases the precision (decreases the variance) of the distribution.

 2.6    Transformations of random variables
        If x ∼ p() is some random variable, and y = f (x), what is the distribution of y? This is the
        question we address in this section.

2.6.1   Linear transformations
        Suppose f () is a linear function:
           y = f (x) = Ax + b                                                                         (2.78)
        In this case, we can easily derive the mean and covariance of y as follows. First, for the mean,
        we have
           E [y] = E [Ax + b] = Aμ + b                                                                (2.79)
        where μ = E [x]. This is called the linearity of expectation. If f () is a scalar-valued function,
        f (x) = aT x + b, the corresponding result is
                     
            E aT x + b = aT μ + b                                                                   (2.80)
          For the covariance, we have
           cov [y] = cov [Ax + b] = AΣAT                                                              (2.81)
        where Σ = cov [x]. We leave the proof of this as an exercise. If f () is scalar valued, the result
        becomes
                                
           var [y] = var aT x + b = aT Σa                                                           (2.82)
          50                                                                          Chapter 2. Probability


            We will use both of these results extensively in later chapters. Note, however, that the mean
          and covariance only completely deﬁne the distribution of y if x is Gaussian. In general we must
          use the techniques described below to derive the full distribution of y, as opposed to just its
          ﬁrst two moments.

 2.6.2    General transformations
          If X is a discrete rv, we can derive the pmf for y by simply summing up the probability mass
          for all the x’s such that f (x) = y:
                          
              py (y) =          px (x)                                                            (2.83)
                          x:f (x)=y

          For example, if f (X) = 1 if X is even and f (X) = 0 otherwise, and px (X) is uniform on the
          set {1, . . . , 10}, then py (1) = x∈{2,4,6,8,10} px (x) = 0.5, and py (0) = 0.5 similarly. Note
          that in this example, f is a many-to-one function.
             If X is continuous, we cannot use Equation 2.83 since px (x) is a density, not a pmf, and we
          cannot sum up densities. Instead, we work with cdf’s, and write
               Py (y)  P (Y ≤ y) = P (f (X) ≤ y) = P (X ∈ {x|f (x) ≤ y})                              (2.84)
          We can derive the pdf of y by differentiating the cdf.
           In the case of monotonic and hence invertible functions, we can write
               Py (y) = P (f (X) ≤ y) = P (X ≤ f −1 (y)) = Px (f −1 (y))                               (2.85)
          Taking derivatives we get
                           d           d                 dx d           dx
               py (y)       Py (y) =    Px (f −1 (y)) =       Px (x) =    px (x)                      (2.86)
                          dy          dy                 dy dx          dy
          where x = f −1 (y). We can think of dx as a measure of volume in the x-space; similarly dy
          measures volume in y space. Thus dx dy measures the change in volume. Since the sign of this
          change is not important, we take the absolute value to get the general expression:
                             dx 
             py (y) = px (x)                                                                  (2.87)
                              dy
          This is called change of variables formula. We can understand this result more intuitively as
          follows. Observations falling in the range (x, x + δx) will get transformed into (y, y + δy), where
          px (x)δx ≈ py (y)δy . Hence py (y) ≈ px (x)| δx  δy |. For example, suppose X ∼ U (−1, 1), and
                                          1
          Y = X 2 . Then py (y) = 12 y − 2 . See also Exercise 2.10.

2.6.2.1   Multivariate change of variables *
          We can extend the previous results to multivariate distributions as follows. Let f be a function
          that maps Rn to Rn , and let y = f (x). Then its Jacobian matrix J is given by
                                            ⎛ ∂y1       ∂y1 ⎞
                                              ∂x1 · · · ∂x n
                      ∂(y1 , . . . , yn )   ⎜            .. ⎟
             Jx→y                         ⎝ ...  ..
                                                      .   . ⎠                                        (2.88)
                     ∂(x1 , . . . , xn )      ∂yn
                                              ∂x1 · · · ∂xn
                                                        ∂yn
        2.6. Transformations of random variables                                                          51


        | det J| measures how much a unit cube changes in volume when we apply f .
           If f is an invertible mapping, we can deﬁne the pdf of the transformed variables using the
        Jacobian of the inverse mapping y → x:
                                 ∂x 
            py (y) = px (x) det         = px (x)| det Jy→x |                                   (2.89)
                                  ∂y
        In Exercise 4.5 you will use this formula to derive the normalization constant for a multivariate
        Gaussian.
           As a simple example, consider transforming a density from Cartesian coordinates x = (x1 , x2 )
        to polar coordinates y = (r, θ), where x1 = r cos θ and x2 = r sin θ. Then
                             ∂x1       ∂x1
                                                   cos θ   −r sin θ
           Jy→x      =       ∂r
                             ∂x2
                                       ∂θ
                                       ∂x2    =                                                        (2.90)
                             ∂r        ∂θ
                                                   sin θ   r cos θ
        and
           | det J| = |r cos2 θ + r sin2 θ| = |r|                                                      (2.91)
        Hence
              py (y)     =   px (x)| det J|                                                            (2.92)
           pr,θ (r, θ)   =   px1 ,x2 (x1 , x2 )r = px1 ,x2 (r cos θ, r sin θ)r                         (2.93)
        To see this geometrically, notice that the area of the shaded patch in Figure 2.16 is given by
           P (r ≤ R ≤ r + dr, θ ≤ Θ ≤ θ + dθ)               =     pr,θ (r, θ)drdθ                      (2.94)
        In the limit, this is equal to the density at the center of the patch, p(r, θ), times the size of the
        patch, r dr dθ. Hence
           pr,θ (r, θ)drdθ    =        px1 ,x2 (r cos θ, r sin θ)r dr dθ                               (2.95)


2.6.3   Central limit theorem
        Now consider N random variables with pdf’s (not necessarily Gaussian) p(xi ), each with mean
        μ and variance σ 2 . We assume each variable is independent and identically distributed
                                      N
        or iid for short. Let SN =      i=1 Xi be the sum of the rv’s. This is a simple but widely
        used transformation of rv’s. One can show that, as N increases, the distribution of this sum
        approaches
                                   1                 (s − N μ)2
           p(SN = s) = √                     exp −                                                     (2.96)
                            2πN σ 2                     2N σ 2
        Hence the distribution of the quantity
                   SN − N μ   X −μ
           ZN        √     =   √                                                                      (2.97)
                    σ N       σ/ N
                                                           N
        converges to the standard normal, where X = N1 i=1 xi is the sample mean. This is called
        the central limit theorem. See e.g., (Jaynes 2003, p222) or (Rice 1995, p169) for a proof.
           In Figure 2.17 we give an example in which we compute the mean of rv’s drawn from a beta
        distribution. We see that the sampling distribution of the mean value rapidly converges to a
        Gaussian distribution.
      52                                                                             Chapter 2. Probability




      Figure 2.16 Change of variables from polar to Cartesian. The area of the shaded patch is r dr dθ. Based
      on (Rice 1995) Figure 3.16.

                                   N=1                                      N=5
                   3                                        3




                   2                                        2




                   1                                        1




                   0                                        0
                       0            0.5              1          0           0.5              1



                                   (a)                                      (b)

                                                                                   N
      Figure 2.17 The central limit theorem in pictures. We plot a histogram of N1  i=1 xij , where xij ∼
      Beta(1, 5), for j = 1 : 10000. As N → ∞, the distribution tends towards a Gaussian. (a) N = 1. (b)
      N = 5. Based on Figure 2.6 of (Bishop 2006a). Figure generated by centralLimitDemo.



2.7   Monte Carlo approximation
      In general, computing the distribution of a function of an rv using the change of variables
      formula can be difficult. One simple but powerful alternative is as follows. First we generate
      S samples from the distribution, call them x1 , . . . , xS . (There are many ways to generate such
      samples; one popular method, for high dimensional distributions, is called Markov chain Monte
      Carlo or MCMC; this will be explained in Chapter 24.) Given the samples, we can approximate
      the distribution of f (X) by using the empirical distribution of {f (xs )}Ss=1 . This is called a
      Monte Carlo approximation, named after a city in Europe known for its plush gambling casinos.
      Monte Carlo techniques were ﬁrst developed in the area of statistical physics — in particular,
      during development of the atomic bomb — but are now widely used in statistics and machine
      learning as well.
         We can use Monte Carlo to approximate the expected value of any function of a random
        2.7. Monte Carlo approximation                                                                        53



                   1.5                              6                           0.25

                                                                                 0.2
                      1
                                                    4
                                                                                0.15
                   0.5
                                                                                 0.1
                                                    2
                      0
                                                                                0.05

                 −0.5                               0                             0
                    −1            0           1         0      0.5          1          0     0.5          1

        Figure 2.18 Computing the distribution of y = x2 , where p(x) is uniform (left). The analytic result is
        shown in the middle, and the Monte Carlo approximation is shown on the right. Figure generated by
        changeOfVarsDemo1d.



        variable. We simply draw samples, and then compute the arithmetic mean of the function
        applied to the samples. This can be written as follows:
                          
                                              1
                                                 S
            E [f (X)] =       f (x)p(x)dx ≈         f (xs )                                              (2.98)
                                              S s=1

        where xs ∼ p(X). This is called Monte Carlo integration, and has the advantage over numerical
        integration (which is based on evaluating the function at a ﬁxed grid of points) that the function
        is only evaluated in places where there is non-negligible probability.
           By varying the function f (), we can approximate many quantities of interest, such as
                S
        • x = S1 s=1 xs → E [X]
            S
        • S1 s=1 (xs − x)2 → var [X]
             1
        •    S #{xs   ≤ c} → P (X ≤ c)
        • median{x1 , . . . , xS } → median(X)

            We give some examples below, and will see many more in later chapters.

2.7.1   Example: change of variables, the MC way
        In Section 2.6.2, we discussed how to analytically compute the distribution of a function of a
        random variable, y = f (x). A much simpler approach is to use a Monte Carlo approximation.
        For example, suppose x ∼ Unif(−1, 1) and y = x2 . We can approximate p(y) by drawing
        many samples from p(x), squaring them, and computing the resulting empirical distribution.
        See Figure 2.18 for an illustration. We will use this technique extensively in later chapters. See
        also Figure 5.2.
        54                                                                             Chapter 2. Probability


                                                 2

                                                1.5

                                                 1

                                                0.5

                                                 0

                                               −0.5

                                                −1

                                               −1.5

                                                −2
                                                 −2   −1    0      1       2




        Figure 2.19 Estimating π by Monte Carlo integration. Blue points are inside the circle, red crosses are
        outside. Figure generated by mcEstimatePi.



2.7.2   Example: estimating π by Monte Carlo integration
        MC approximation can be used for many applications, not just statistical ones. Suppose we want
        to estimate π. We know that the area of a circle with radius r is πr2 , but it is also equal to the
        following deﬁnite integral:
                 r  r
            I=           I(x2 + y 2 ≤ r2 )dxdy                                                        (2.99)
                   −r   −r

        Hence π = I/(r2 ). Let us approximate this by Monte Carlo integration. Let f (x, y) =
        I(x2 + y 2 ≤ r2 ) be an indicator function that is 1 for points inside the circle, and 0 outside,
        and let p(x) and p(y) be uniform distributions on [−r, r], so p(x) = p(y) = 1/(2r). Then
                             
           I = (2r)(2r)            f (x, y)p(x)p(y)dxdy                                           (2.100)
                        
               = 4r2         f (x, y)p(x)p(y)dxdy                                                  (2.101)

                          1
                             S
               ≈    4r2         f (xs , ys )                                                            (2.102)
                          S s=1

        We ﬁnd π̂ = 3.1416 with standard error 0.09 (see Section 2.7.3 for a discussion of standard
        errors). We can plot the points that are accepted/ rejected as in Figure 2.19.

2.7.3   Accuracy of Monte Carlo approximation
        The accuracy of an MC approximation increases with sample size. This is illustrated in Fig-
        ure 2.20, On the top line, we plot a histogram of samples from a Gaussian distribution. On
        the bottom line, we plot a smoothed version of these samples, created using a kernel density
        estimate (Section 14.7.2). This smoothed distribution is then evaluated on a dense grid of points
2.7. Monte Carlo approximation                                                                          55

                                10 samples                             100 samples
                  6                                         2

                                                           1.8
                  5
                                                           1.6

                                                           1.4
                  4
                                                           1.2

                  3                                         1

                                                           0.8
                  2
                                                           0.6

                                                           0.4
                  1
                                                           0.2

                  0                                         0
                  0.5      1       1.5       2   2.5        0.5    1       1.5       2   2.5


                                  (a)                                    (b)
                                10 samples                             100 samples
                  2.5                                      1.8

                                                           1.6

                   2
                                                           1.4

                                                           1.2
                  1.5
                                                             1

                                                           0.8
                   1
                                                           0.6

                                                           0.4
                  0.5

                                                           0.2

                   0                                         0
                   0.5     1        1.5      2   2.5         0.5   1        1.5      2   2.5


                                   (c)                                    (d)


Figure 2.20 10 and 100 samples from a Gaussian distribution, N (μ = 1.5, σ 2 = 0.25). Solid red
line is true pdf. Top line: histogram of samples. Bottom line: kernel density estimate derived from
samples in dotted blue, solid red line is true pdf. Based on Figure 4.1 of (Hoff 2009). Figure generated by
mcAccuracyDemo.



and plotted. Note that this smoothing is just for the purposes of plotting, it is not used for the
Monte Carlo estimate itself.
  If we denote the exact mean by μ = E [f (X)], and the MC approximation by μ̂, one can
show that, with independent samples,
                         σ2
   (μ̂ − μ) → N (0,         )                                                                       (2.103)
                         S
where
                                          2
   σ 2 = var [f (X)] = E f (X)2 − E [f (X)]                                                         (2.104)

This is a consequence of the central-limit theorem. Of course, σ 2 is unknown in the above
expression, but it can also be estimated by MC:

              1
                 S
   σ̂ 2   =         (f (xs ) − μ̂)2                                                                 (2.105)
              S s=1

Then we have
                                                 
                    σ̂                σ̂
   P      μ − 1.96 √ ≤ μ̂ ≤ μ + 1.96 √                 ≈ 0.95                                       (2.106)
                     S                 S
        56                                                                          Chapter 2. Probability

                   
                       2
        The term σ̂S is called the (numerical or empirical) standard error, and is an estimate of our
        uncertainty about our estimate of μ. (See Section 6.2 for more discussion on standard errors.)
          If we want to report an answer which is accurate to within± with probability at least 95%,
        we need to use a number of samples S which satisﬁes 1.96 σ̂ 2 /S ≤ . We can approximate
                                               2
        the 1.96 factor by 2, yielding S ≥ 4σ̂2 .

 2.8    Information theory
        information theory is concerned with representing data in a compact fashion (a task known as
        data compression or source coding), as well as with transmitting and storing it in a way that
        is robust to errors (a task known as error correction or channel coding). At ﬁrst, this seems
        far removed from the concerns of probability theory and machine learning, but in fact there is
        an intimate connection. To see this, note that compactly representing data requires allocating
        short codewords to highly probable bit strings, and reserving longer codewords to less probable
        bit strings. This is similar to the situation in natural language, where common words (such as
        “a”, “the”, “and”) are generally much shorter than rare words. Also, decoding messages sent over
        noisy channels requires having a good probability model of the kinds of messages that people
        tend to send. In both cases, we need a model that can predict which kinds of data are likely
        and which unlikely, which is also a central problem in machine learning (see (MacKay 2003) for
        more details on the connection between information theory and machine learning).
           Obviously we cannot go into the details of information theory here (see e.g., (Cover and
        Thomas 2006) if you are interested to learn more). However, we will introduce a few basic
        concepts that we will need later in the book.

2.8.1   Entropy
        The entropy of a random variable X with distribution p, denoted by H (X) or sometimes
        H (p), is a measure of its uncertainty. In particular, for a discrete variable with K states, it is
        deﬁned by

                         
                         K
             H (X)  −         p(X = k) log2 p(X = k)                                               (2.107)
                         k=1

        Usually we use log base 2, in which case the units are called bits (short for binary digits). If
        we use log base e, the units are called nats. For example, if X ∈ {1, . . . , 5} with histogram
        distribution p = [0.25, 0.25, 0.2, 0.15, 0.15], we ﬁnd H = 2.2855. The discrete distribution with
        maximum entropy is the uniform distribution (see Section 9.2.6 for a proof). Hence for a K-ary
        random variable, the entropy is maximized if p(x = k) = 1/K; in this case, H (X) = log2 K.
        Conversely, the distribution with minimum entropy (which is zero) is any delta-function that
        puts all its mass on one state. Such a distribution has no uncertainty. In Figure 2.5(b), where
        we plotted a DNA sequence logo, the height of each bar is deﬁned to be 2 − H, where H is
        the entropy of that distribution, and 2 is the maximum possible entropy. Thus a bar of height 0
        corresponds to a uniform distribution, whereas a bar of height 2 corresponds to a deterministic
        distribution.
        2.8. Information theory                                                                                        57


                                          1




                                  H(X)
                                         0.5




                                          0
                                               0                 0.5                         1
                                                               p(X = 1)



        Figure 2.21 Entropy of a Bernoulli random variable as a function of θ. The maximum entropy is
        log2 2 = 1. Figure generated by bernoulliEntropyFig.


          For the special case of binary random variables, X ∈ {0, 1}, we can write p(X = 1) = θ
        and p(X = 0) = 1 − θ. Hence the entropy becomes
           H (X)      =    −[p(X = 1) log2 p(X = 1) + p(X = 0) log2 p(X = 0)]                                     (2.108)
                      =    −[θ log2 θ + (1 − θ) log2 (1 − θ)]                                                     (2.109)
        This is called the binary entropy function, and is also written H (θ). We plot this in Figure 2.21.
        We see that the maximum value of 1 occurs when the distribution is uniform, θ = 0.5.

2.8.2   KL divergence
        One way to measure the dissimilarity of two probability distributions, p and q, is known as the
        Kullback-Leibler divergence (KL divergence) or relative entropy. This is deﬁned as follows:
                           
                           K
                                                   pk
           KL (p||q)            pk log                                                                            (2.110)
                                                   qk
                           k=1

        where the sum gets replaced by an integral for pdfs.10 We can rewrite this as
                                      
          KL (p||q) =      pk log pk −     pk log qk = −H (p) + H (p, q)                                           (2.111)
                            k                           k

        where H (p, q) is called the cross entropy,
                         
          H (p, q)  −       pk log qk                                                                             (2.112)
                             k

        One can show (Cover and Thomas 2006) that the cross entropy is the average number of bits
        needed to encode data coming from a source with distribution p when we use model q to

        10. The KL divergence is not a distance, since it is asymmetric. One symmetric version of the KL divergence is the
        Jensen-Shannon divergence, deﬁned as JS(p1 , p2 ) = 0.5KL (p1 ||q) + 0.5KL (p2 ||q), where q = 0.5p1 + 0.5p2 .
58                                                                            Chapter 2. Probability


deﬁne our codebook. Hence the “regular” entropy H (p) = H (p, p), deﬁned in Section 2.8.1, is
the expected number of bits if we use the true model, so the KL divergence is the difference
between these. In other words, the KL divergence is the average number of extra bits needed to
encode the data, due to the fact that we used distribution q to encode the data instead of the
true distribution p.
   The “extra number of bits” interpretation should make it clear that KL (p||q) ≥ 0, and that
the KL is only equal to zero iff q = p. We now give a proof of this important result.
Theorem 2.8.1. (Information inequality) KL (p||q) ≥ 0 with equality iff p = q.
Proof. To prove the theorem, we need to use Jensen’s inequality. This states that, for any
convex function f , we have that
                 
       n            n
   f       λi x i ≤      λi f (xi )                                                  (2.113)
       i=1             i=1
                     n
where λi ≥ 0 and i=1 λi = 1. This is clearly true for n = 2 (by deﬁnition of convexity), and
can be proved by induction for n > 2.
  Let us now prove the main theorem, following (Cover and Thomas 2006, p28). Let A = {x :
p(x) > 0} be the support of p(x). Then
                                   p(x)               q(x)
   −KL (p||q) = −          p(x) log      =     p(x) log                               (2.114)
                                    q(x)                p(x)
                           x∈A                      x∈A
                                        q(x)       
                   ≤    log         p(x)      = log   q(x)                                    (2.115)
                                         p(x)
                              x∈A                   x∈A
                              
                   ≤    log         q(x) = log 1 = 0                                          (2.116)
                              x∈X

where the ﬁrst inequality follows from Jensen’s. Since log(x) is a strictly concave function, we
   equality in Equation
have                     2.115 iff p(x) = cq(x) for some c. We have equality in Equation 2.116
iff x∈A q(x) = x∈X q(x) = 1, which implies c = 1. Hence KL (p||q) = 0 iff p(x) = q(x)
for all x.
   One important consequence of this result is that the discrete distribution with the maximum
entropy is the uniform distribution. More precisely, H (X) ≤ log |X |, where |X | is the number
of states for X, with equality iff p(x) is uniform. To see this, let u(x) = 1/|X |. Then
                                            p(x)
     0 ≤     KL (p||u) =          p(x) log                                                    (2.117)
                              x
                                             u(x)
                                    
       =          p(x) log p(x) −         p(x) log u(x) = −H (X) + log |X |                   (2.118)
              x                       x

This is a formulation of Laplace’s principle of insufficient reason, which argues in favor of
using uniform distributions when there are no other reasons to favor one distribution over
another. See Section 9.2.6 for a discussion of how to create distributions that satisfy certain
constraints, but otherwise are as least-commital as possible. (For example, the Gaussian satisﬁes
ﬁrst and second moment constraints, but otherwise has maximum entropy.)
          2.8. Information theory                                                                            59


 2.8.3    Mutual information
          Consider two random variables, X and Y . Suppose we want to know how much knowing one
          variable tells us about the other. We could compute the correlation coefficient, but this is only
          deﬁned for real-valued random variables, and furthermore, this is a very limited measure of
          dependence, as we saw in Figure 2.12. A more general approach is to determine how similar the
          joint distribution p(X, Y ) is to the factored distribution p(X)p(Y ). This is called the mutual
          information or MI, and is deﬁned as follows:
                                                                            p(x, y)
              I (X; Y )  KL (p(X, Y )||p(X)p(Y )) =             p(x, y) log                          (2.119)
                                                          x    y
                                                                             p(x)p(y)

          We have I (X; Y ) ≥ 0 with equality iff p(X, Y ) = p(X)p(Y ). That is, the MI is zero iff the
          variables are independent.
            To gain insight into the meaning of MI, it helps to re-express it in terms of joint and conditional
          entropies. One can show (Exercise 2.12) that the above expression is equivalent to the following:
             I (X; Y ) = H (X) − H (X|Y ) = H (Y ) − H (Y |X)                                           (2.120)
                                                                                      
          where H (Y |X) is the conditional entropy, deﬁned as H (Y |X) = x p(x)H (Y |X = x).
          Thus we can interpret the MI between X and Y as the reduction in uncertainty about X after
          observing Y , or, by symmetry, the reduction in uncertainty about Y after observing X. We will
          encounter several applications of MI later in the book. See also Exercises 2.13 and 2.14 for the
          connection between MI and correlation coefficients.
            A quantity which is closely related to MI is the pointwise mutual information or PMI. For
          two events (not random variables) x and y, this is deﬁned as
                                p(x, y)       p(x|y)       p(y|x)
             PMI(x, y)  log            = log        = log                                               (2.121)
                               p(x)p(y)        p(x)         p(y)
          This measures the discrepancy between these events occuring together compared to what would
          be expected by chance. Clearly the MI of X and Y is just the expected value of the PMI.
          Interestingly, we can rewrite the PMI as follows:
                               p(x|y)       p(y|x)
             PMI(x, y) = log          = log                                                             (2.122)
                                p(x)         p(y)
          This is the amount we learn from updating the prior p(x) into the posterior p(x|y), or equiva-
          lently, updating the prior p(y) into the posterior p(y|x).

2.8.3.1   Mutual information for continuous random variables *
          The above formula for MI is deﬁned for discrete random variables. For continuous random
          variables, it is common to ﬁrst discretize or quantize them, by dividing the ranges of each
          variable into bins, and computing how many values fall in each histogram bin (Scott 1979). We
          can then easily compute the MI using the formula above (see mutualInfoAllPairsMixed for
          some code, and miMixedDemo for a demo).
            Unfortunately, the number of bins used, and the location of the bin boundaries, can have
          a signiﬁcant effect on the results. One way around this is to try to estimate the MI directly,
60                                                                                                                                                                                                                     Chapter 2. Probability


                                                                              "                                                                    #                                                                       
                                                                                                                                                                                                                                                    




                                                                                                                                                        ., $% $9 %
                                                                               




                                                                                                                                                                                                                           %#& '()* +
                                                                                                            



                                                                                                                                                                                 
                                                                                                                                                                                                                                                         
                  /




     
                                                                                                            



                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                             ,     ,         ,
                     "                                                                                                                                          3#-&    " = %                                                     ! "#$% 
                   

                                                                                                                                                                                
                                                                                                           4                                                                                                             




                                                                            %- <! 




                                                                                                                                                      / %
                                                                                                                                                                                                                                                         
 




                                                                                                                                                                                                                          ' %-#.,/)"   1
                            &*
                            &'
                             )                                                                              
              5/                                                                                                                                                                                                                                      
                             (


                             %
                                                                                                            
                                                                                                                                                                                                                                                         




                                                                                                                                                      2 %- 
                                                             #




                                                                            *&-6
                                                                                                                                                                                  
                             $
                   5                                                                                                                                                                                                                                      
                                /         /             /4                                                                                                                                                                                          
                                          23+$                                                                    $      )"   1                                           ' %-#.,/)"  0+1                                           >%?- $)"   1




Figure 2.22 Left: Correlation coefficient vs maximal information criterion (MIC) for all pairwise relation-
ships in the WHO data. Right: scatter plots of certain pairs of variables. The red lines are non-parametric
smoothing regressions (Section 15.4.6) ﬁt separately to each trend. Source: Figure 4 of (Reshed et al. 2011) .
Used with kind permission of David Reshef and the American Association for the Advancement of Science.


without ﬁrst performing density estimation (Learned-Miller 2004). Another approach is to try
many different bin sizes and locations, and to compute the maximum MI achieved. This
statistic, appropriately normalized, is known as the maximal information coefficient (MIC)
(Reshed et al. 2011). More precisely, deﬁne
                                         maxG∈G(x,y) I (X(G); Y (G))
                   m(x, y) =                                                                                                                                                                                                                                                            (2.123)
                                               log min(x, y)
where G(x, y) is the set of 2d grids of size x×y, and X(G), Y (G) represents a discretization of
the variables onto this grid. (The maximization over bin locations can be performed efficiently
using dynamic programming (Reshed et al. 2011).) Now deﬁne the MIC as
                   MIC                 max m(x, y)                                                                                                                                                                                                                                     (2.124)
                                 x,y:xy<B

where B is some sample-size dependent bound on the number of bins we can use and still
reliably estimate the distribution ((Reshed et al. 2011) suggest B = N 0.6 ). It can be shown that
the MIC lies in the range [0, 1], where 0 represents no relationship between the variables, and 1
represents a noise-free relationship of any form, not just linear.
   Figure 2.22 gives an example of this statistic in action. The data consists of 357 variables
measuring a variety of social, economic, health and political indicators, collected by the World
Health Organization (WHO). On the left of the ﬁgure, we see the correlation coefficient (CC)
plotted against the MIC for all 63,566 variable pairs. On the right of the ﬁgure, we see scatter
plots for particular pairs of variables, which we now discuss:

• The point marked C has a low CC and a low MIC. The corresponding scatter plot makes it
2.8. Information theory                                                                                      61


   clear that there is no relationship between these two variables (percentage of lives lost to
   injury and density of dentists in the population).
• The points marked D and H have high CC (in absolute value) and high MIC, because they
  represent nearly linear relationships.
• The points marked E, F, and G have low CC but high MIC. This is because they correspond
  to non-linear (and sometimes, as in the case of E and F, non-functional, i.e., one-to-many)
  relationships between the variables.
   In summary, we see that statistics (such as MIC) based on mutual information can be used
to discover interesting relationships between variables in a way that simpler measures, such as
correlation coefficients, cannot. For this reason, the MIC has been called “a correlation for the
21st century” (Speed 2011).

Exercises
Exercise 2.1 Probabilities are sensitive to the form of the question that was used to generate the answer

(Source: Minka.) My neighbor has two children. Assuming that the gender of a child is like a coin ﬂip,
it is most likely, a priori, that my neighbor has one boy and one girl, with probability 1/2. The other
possibilities—two boys or two girls—have probabilities 1/4 and 1/4.

a. Suppose I ask him whether he has any boys, and he says yes. What is the probability that one child is
   a girl?
b. Suppose instead that I happen to see one of his children run by, and it is a boy. What is the probability
   that the other child is a girl?

Exercise 2.2 Legal reasoning
(Source: Peter Lee.) Suppose a crime has been committed. Blood is found at the scene for which there is
no innocent explanation. It is of a type which is present in 1% of the population.

a. The prosecutor claims: “There is a 1% chance that the defendant would have the crime blood type if he
   were innocent. Thus there is a 99% chance that he guilty”. This is known as the prosecutor’s fallacy.
   What is wrong with this argument?
b. The defender claims: “The crime occurred in a city of 800,000 people. The blood type would be
   found in approximately 8000 people. The evidence has provided a probability of just 1 in 8000 that
   the defendant is guilty, and thus has no relevance.” This is known as the defender’s fallacy. What is
   wrong with this argument?

Exercise 2.3 Variance of a sum
Show that the variance of a sum is var [X + Y ] = var [X] + var [Y ] + 2cov [X, Y ] , where cov [X, Y ]
is the covariance between X and Y
Exercise 2.4 Bayes rule for medical diagnosis
(Source: Koller.) After your yearly checkup, the doctor has bad news and good news. The bad news is that
you tested positive for a serious disease, and that the test is 99% accurate (i.e., the probability of testing
positive given that you have the disease is 0.99, as is the probability of tetsing negative given that you don’t
have the disease). The good news is that this is a rare disease, striking only one in 10,000 people. What are
the chances that you actually have the disease? (Show your calculations as well as giving the ﬁnal result.)
62                                                                                  Chapter 2. Probability


Exercise 2.5 The Monty Hall problem
(Source: Mackay.) On a game show, a contestant is told the rules as follows:
     There are three doors, labelled 1, 2, 3. A single prize has been hidden behind one of them. You
     get to select one door. Initially your chosen door will not be opened. Instead, the gameshow host
     will open one of the other two doors, and he will do so in such a way as not to reveal the prize. For
     example, if you ﬁrst choose door 1, he will then open one of doors 2 and 3, and it is guaranteed
     that he will choose which one to open so that the prize will not be revealed.
     At this point, you will be given a fresh choice of door: you can either stick with your ﬁrst choice,
     or you can switch to the other closed door. All the doors will then be opened and you will receive
     whatever is behind your ﬁnal choice of door.
Imagine that the contestant chooses door 1 ﬁrst; then the gameshow host opens door 3, revealing nothing
behind the door, as promised. Should the contestant (a) stick with door 1, or (b) switch to door 2, or (c)
does it make no difference? You may assume that initially, the prize is equally likely to be behind any of
the 3 doors. Hint: use Bayes rule.
Exercise 2.6 Conditional independence
(Source: Koller.)
a. Let H ∈ {1, . . . , K} be a discrete random variable, and let e1 and e2 be the observed values of two
   other random variables E1 and E2 . Suppose we wish to calculate the vector
         (H|e1 , e2 ) = (P (H = 1|e1 , e2 ), . . . , P (H = K|e1 , e2 ))
        P
   Which of the following sets of numbers are sufficient for the calculation?
     i. P (e1 , e2 ), P (H), P (e1 |H), P (e2 |H)
    ii. P (e1 , e2 ), P (H), P (e1 , e2 |H)
   iii. P (e1 |H), P (e2 |H), P (H)
b. Now suppose we now assume E1 ⊥ E2 |H (i.e., E1 and E2 are conditionally independent given H).
   Which of the above 3 sets are sufficent now?
Show your calculations as well as giving the ﬁnal result. Hint: use Bayes rule.
Exercise 2.7 Pairwise independence does not imply mutual independence
We say that two random variables are pairwise independent if
     p(X2 |X1 ) = p(X2 )                                                                               (2.125)
and hence
     p(X2 , X1 ) = p(X1 )p(X2 |X1 ) = p(X1 )p(X2 )                                                     (2.126)
We say that n random variables are mutually independent if
     p(Xi |XS ) = p(Xi ) ∀S ⊆ {1, . . . , n} \ {i}                                                     (2.127)
and hence
                    
                    n
     p(X1:n ) =           p(Xi )                                                                       (2.128)
                    i=1

Show that pairwise independence between all pairs of variables does not necessarily imply mutual inde-
pendence. It suffices to give a counter example.
2.8. Information theory                                                                                 63


Exercise 2.8 Conditional independence iff joint factorizes
In the text we said X ⊥ Y |Z iff
   p(x, y|z) = p(x|z)p(y|z)                                                                          (2.129)
for all x, y, z such that p(z) > 0. Now prove the following alternative deﬁnition: X ⊥ Y |Z iff there exist
function g and h such that
   p(x, y|z) = g(x, z)h(y, z)                                                                       (2.130)
for all x, y, z such that p(z) > 0.
Exercise 2.9 Conditional independence
(Source: Koller.) Are the following properties true? Prove or disprove. Note that we are not restricting
attention to distributions that can be represented by a graphical model.

a. True or false? (X ⊥ W |Z, Y ) ∧ (X ⊥ Y |Z) ⇒ (X ⊥ Y, W |Z)
b. True or false? (X ⊥ Y |Z) ∧ (X ⊥ Y |W ) ⇒ (X ⊥ Y |Z, W )

Exercise 2.10 Deriving the inverse gamma density
Let X ∼ Ga(a, b), i.e.
                        ba a−1 −xb
   Ga(x|a, b)     =         x e                                                                      (2.131)
                       Γ(a)
Let Y = 1/X. Show that Y ∼ IG(a, b), i.e.,
                                        ba −(a+1) −b/x
   IG(x|shape = a, scale = b)      =        x    e                                                   (2.132)
                                       Γ(a)
Hint: use the change of variables formula.
Exercise 2.11 Normalization constant for a 1D Gaussian
The normalization constant for a zero-mean Gaussian is given by
         b             
                     x2
   Z=        exp − 2 dx                                                                              (2.133)
          a         2σ
where a = −∞ and b = ∞. To compute this, consider its square
          b b               
                      x2 + y 2
   Z2 =         exp −            dxdy                                                                (2.134)
          a  a          2σ 2

Let us change variables from cartesian (x, y) to polar (r, θ) using x = r cos θ and y = r sin θ. Since
dxdy = rdrdθ, and cos2 θ + sin2 θ = 1, we have
           2π  ∞                    
                                    r2
    Z2 =              r exp − 2 drdθ                                                              (2.135)
           0     0                 2σ
                                                    
Evaluate this integral and hence show Z = σ (2π). Hint 1: separate the integral into a product of
                                                                                           2    2
two terms, the ﬁrst of which (involving dθ) is constant, so is easy. Hint 2: if u = e−r /2σ then
             1    −r 2 /2σ 2
                                                                          
du/dr = − σ2 re              , so the second integral is also easy (since u (r)dr = u(r)).
64                                                                              Chapter 2. Probability


Exercise 2.12 Expressing mutual information in terms of entropies
Show that
     I(X, Y ) = H(X) − H(X|Y ) = H(Y ) − H(Y |X)                                                   (2.136)

Exercise 2.13 Mutual information for correlated normals
(Source: (Cover and Thomas 1991, Q9.3).) Find the mutual information I(X1 , X2 ) where X has a bivariate
normal distribution:
                 2           
     X1                σ    ρσ 2
            ∼ N 0,                                                                                (2.137)
     X2               ρσ 2 σ 2

Evaluate I(X1 , X2 ) for ρ = 1, ρ = 0 and ρ = −1 and comment. Hint: The (differential) entropy of a
d-dimensional Gaussian is
              1
     h(X) =     log2 (2πe)d det Σ                                                                  (2.138)
              2
In the 1d case, this becomes
              1
     h(X) =     log2 2πeσ 2                                                                        (2.139)
              2
Hint: log(0) = ∞.
Exercise 2.14 A measure of correlation (normalized mutual information)
(Source: (Cover and Thomas 1991, Q2.20).) Let X and Y be discrete random variables which are identically
distributed (so H(X) = H(Y )) but not necessarily independent. Deﬁne

              H(Y |X)
     r =1−                                                                                         (2.140)
               H(X)
               I(X,Y )
a. Show r =     H(X)

b. Show 0 ≤ r ≤ 1
c. When is r = 0?
d. When is r = 1?
Exercise 2.15 MLE minimizes KL divergence to the empirical distribution
Let pemp (x) be the empirical distribution, and let q(x|θ) be some model. Show that argminq KL (pemp ||q)
is obtained by q(x) = q(x; θ̂), where θ̂ is the MLE. Hint: use non-negativity of the KL divergence.
Exercise 2.16 Mean, mode, variance for the beta distribution
Suppose θ ∼ Beta(a, b). Derive the mean, mode and variance.
Exercise 2.17 Expected value of the minimum
Suppose X, Y are two points sampled independently and uniformly at random from the interval [0, 1].
What is the expected location of the left most point?
3     Generative models for discrete data



3.1   Introduction
      In Section 2.2.3.2, we discussed how to classify a feature vector x by applying Bayes rule to a
      generative classiﬁer of the form
         p(y = c|x, θ) ∝ p(x|y = c, θ)p(y = c|θ)                                                    (3.1)
      The key to using such models is specifying a suitable form for the class-conditional density
      p(x|y = c, θ), which deﬁnes what kind of data we expect to see in each class. In this chapter,
      we focus on the case where the observed data are discrete symbols. We also discuss how to
      infer the unknown parameters θ of such models.

3.2   Bayesian concept learning
      Consider how a child learns to understand the meaning of a word, such as “dog”. Presumably
      the child’s parents point out positive examples of this concept, saying such things as, “look at
      the cute dog!”, or “mind the doggy”, etc. However, it is very unlikely that they provide negative
      examples, by saying “look at that non-dog”. Certainly, negative examples may be obtained during
      an active learning process — the child says “look at the dog” and the parent says “that’s a cat,
      dear, not a dog” — but psychological research has shown that people can learn concepts from
      positive examples alone (Xu and Tenenbaum 2007).
         We can think of learning the meaning of a word as equivalent to concept learning, which in
      turn is equivalent to binary classiﬁcation. To see this, deﬁne f (x) = 1 if x is an example of the
      concept C, and f (x) = 0 otherwise. Then the goal is to learn the indicator function f , which
      just deﬁnes which elements are in the set C. By allowing for uncertainty about the deﬁnition
      of f , or equivalently the elements of C, we can emulate fuzzy set theory, but using standard
      probability calculus. Note that standard binary classiﬁcation techniques require positive and
      negative examples. By contrast, we will devise a way to learn from positive examples alone.
         For pedagogical purposes, we will consider a very simple example of concept learning called
      the number game, based on part of Josh Tenenbaum’s PhD thesis (Tenenbaum 1999). The game
      proceeds as follows. I choose some simple arithmetical concept C, such as “prime number” or
      “a number between 1 and 10”. I then give you a series of randomly chosen positive examples
      D = {x1 , . . . , xN } drawn from C, and ask you whether some new test case x̃ belongs to C,
      i.e., I ask you to classify x̃.
66                                                      Chapter 3. Generative models for discrete data


     Examples

     16           1
                 0.5
                  0

                       4   8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100

     60           1
                 0.5
                  0

                       4   8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100

     16 8 2 64    1
                 0.5
                  0

                       4   8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100

     16 23 19 20 1
               0.5
                  0

                       4   8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100


Figure 3.1 Empirical predictive distribution averaged over 8 humans in the number game. First two
rows: after seeing D = {16} and D = {60}. This illustrates diffuse similarity. Third row: after
seeing D = {16, 8, 2, 64}. This illustrates rule-like behavior (powers of 2). Bottom row: after seeing
D = {16, 23, 19, 20}. This illustrates focussed similarity (numbers near 20).     Source: Figure 5.5 of
(Tenenbaum 1999). Used with kind permission of Josh Tenenbaum.



   Suppose, for simplicity, that all numbers are integers between 1 and 100. Now suppose I tell
you “16” is a positive example of the concept. What other numbers do you think are positive?
17? 6? 32? 99? It’s hard to tell with only one example, so your predictions will be quite vague.
Presumably numbers that are similar in some sense to 16 are more likely. But similar in what
way? 17 is similar, because it is “close by”, 6 is similar because it has a digit in common,
32 is similar because it is also even and a power of 2, but 99 does not seem similar. Thus
some numbers are more likely than others. We can represent this as a probability distribution,
p(x̃|D), which is the probability that x̃ ∈ C given the data D for any x̃ ∈ {1, . . . , 100}. This
is called the posterior predictive distribution. Figure 3.1(top) shows the predictive distribution
of people derived from a lab experiment. We see that people predict numbers that are similar
to 16, under a variety of kinds of similarity.
   Now suppose I tell you that 8, 2 and 64 are also positive examples. Now you may guess that
the hidden concept is “powers of two”. This is an example of induction. Given this hypothesis,
the predictive distribution is quite speciﬁc, and puts most of its mass on powers of 2, as shown
in Figure 3.1(third row). If instead I tell you the data is D = {16, 23, 19, 20}, you will get a
different kind of generalization gradient, as shown in Figure 3.1(bottom).
   How can we explain this behavior and emulate it in a machine? The classic approach to
induction is to suppose we have a hypothesis space of concepts, H, such as: odd numbers,
even numbers, all numbers between 1 and 100, powers of two, all numbers ending in j (for
        3.2. Bayesian concept learning                                                                   67


        0 ≤ j ≤ 9), etc. The subset of H that is consistent with the data D is called the version space.
        As we see more examples, the version space shrinks and we become increasingly certain about
        the concept (Mitchell 1997).
          However, the version space is not the whole story. After seeing D = {16}, there are many
        consistent rules; how do you combine them to predict if x̃ ∈ C? Also, after seeing D =
        {16, 8, 2, 64}, why did you choose the rule “powers of two” and not, say, “all even numbers”, or
        “powers of two except for 32”, both of which are equally consistent with the evidence? We will
        now provide a Bayesian explanation for this.

3.2.1   Likelihood
        We must explain why we chose htwo “powers of two”, and not, say, heven  “even numbers”
        after seeing D = {16, 8, 2, 64}, given that both hypotheses are consistent with the evidence.
        The key intuition is that we want to avoid suspicious coincidences. If the true concept was
        even numbers, how come we only saw numbers that happened to be powers of two?
           To formalize this, let us assume that examples are sampled uniformly at random from the
        extension of a concept. (The extension of a concept is just the set of numbers that belong
        to it, e.g., the extension of heven is {2, 4, 6, . . . , 98, 100}; the extension of “numbers ending
        in 9” is {9, 19, . . . , 99}.) Tenenbaum calls this the strong sampling assumption. Given this
        assumption, the probability of independently sampling N items (with replacement) from h is
        given by
                                  N  N
                              1             1
            p(D|h) =                   =                                                               (3.2)
                          size(h)          |h|
        This crucial equation embodies what Tenenbaum calls the size principle, which means the
        model favors the simplest (smallest) hypothesis consistent with the data. This is more commonly
        known as Occam’s razor.1
           To see how it works, let D = {16}. Then p(D|htwo ) = 1/6, since there are only 6 powers
        of two less than 100, but p(D|heven ) = 1/50, since there are 50 even numbers. So the
        likelihood that h = htwo is higher than if h = heven . After 4 examples, the likelihood of htwo
        is (1/6)4 = 7.7 × 10−4 , whereas the likelihood of heven is (1/50)4 = 1.6 × 10−7 . This is
        a likelihood ratio of almost 5000:1 in favor of htwo . This quantiﬁes our earlier intuition that
        D = {16, 8, 2, 64} would be a very suspicious coincidence if generated by heven .

3.2.2   Prior
        Suppose D = {16, 8, 2, 64}. Given this data, the concept h =“powers of two except 32” is
        more likely than h =“powers of two”, since h does not need to explain the coincidence that 32
        is missing from the set of examples.
           However, the hypothesis h =“powers of two except 32” seems “conceptually unnatural”. We
        can capture such intution by assigning low prior probability to unnatural concepts. Of course,
        your prior might be different than mine. This subjective aspect of Bayesian reasoning is a
        source of much controversy, since it means, for example, that a child and a math professor

        1. William of Occam (also spelt Ockham) was an English monk and philosopher, 1288–1348.
        68                                                   Chapter 3. Generative models for discrete data


        will reach different answers. In fact, they presumably not only have different priors, but also
        different hypothesis spaces. However, we can ﬁnesse that by deﬁning the hypothesis space of
        the child and the math professor to be the same, and then setting the child’s prior weight to be
        zero on certain “advanced” concepts. Thus there is no sharp distinction between the prior and
        the hypothesis space.
           Although the subjectivity of the prior is controversial, it is actually quite useful. If you are
        told the numbers are from some arithmetic rule, then given 1200, 1500, 900 and 1400, you may
        think 400 is likely but 1183 is unlikely. But if you are told that the numbers are examples of
        healthy cholesterol levels, you would probably think 400 is unlikely and 1183 is likely. Thus we
        see that the prior is the mechanism by which background knowledge can be brought to bear on
        a problem. Without this, rapid learning (i.e., from small samples sizes) is impossible.
           So, what prior should we use? For illustration purposes, let us use a simple prior which
        puts uniform probability on 30 simple arithmetical concepts, such as “even numbers”, “odd
        numbers”, “prime numbers”, “numbers ending in 9”, etc. To make things more interesting, we
        make the concepts even and odd more likely apriori. We also include two “unnatural” concepts,
        namely “powers of 2, plus 37” and “powers of 2, except 32”, but give them low prior weight. See
        Figure 3.2(a) for a plot of this prior. We will consider a slightly more sophisticated prior later on.

3.2.3   Posterior
        The posterior is simply the likelihood times the prior, normalized. In this context we have
                           p(D|h)p(h)             p(h)I(D ∈ h)/|h|N
             p(h|D)   =                
                                           =                        N
                                                                                                         (3.3)
                            h ∈H p(D, h )     h ∈H p(h )I(D ∈ h )/|h |

        where I(D ∈ h) is 1 iff (iff and only if) all the data are in the extension of the hypothesis
        h. Figure 3.2 plots the prior, likelihood and posterior after seeing D = {16}. We see that the
        posterior is a combination of prior and likelihood. In the case of most of the concepts, the prior
        is uniform, so the posterior is proportional to the likelihood. However, the “unnatural” concepts
        of “powers of 2, plus 37” and “powers of 2, except 32” have low posterior support, despite having
        high likelihood, due to the low prior. Conversely, the concept of odd numbers has low posterior
        support, despite having a high prior, due to the low likelihood.
           Figure 3.3 plots the prior, likelihood and posterior after seeing D = {16, 8, 2, 64}. Now the
        likelihood is much more peaked on the powers of two concept, so this dominates the posterior.
        Essentially the learner has an aha moment, and ﬁgures out the true concept. (Here we see the
        need for the low prior on the unnatural concepts, otherwise we would have overﬁt the data and
        picked “powers of 2, except for 32”.)
           In general, when we have enough data, the posterior p(h|D) becomes peaked on a single
        concept, namely the MAP estimate, i.e.,
             p(h|D) → δĥM AP (h)                                                                        (3.4)

        where ĥM AP = argmaxh p(h|D) is the posterior mode, and where δ is the Dirac measure
        deﬁned by
                    
                      1 if x ∈ A
           δx (A) =                                                                       (3.5)
                      0 if x ∈ A
3.2. Bayesian concept learning                                                                   69



                                                      data = 16
                                                 35                35



                            even
                             odd
                        squares                  30                30
                       mult of 3
                       mult of 4
                       mult of 5
                       mult of 6
                       mult of 7                 25                25
                       mult of 8
                       mult of 9
                      mult of 10
                       ends in 1
                       ends in 2                 20                20
                       ends in 3
                       ends in 4
                       ends in 5
                       ends in 6
                       ends in 7                 15                15
                       ends in 8
                       ends in 9
                    powers of 2
                    powers of 3
                    powers of 4                  10                10
                    powers of 5
                    powers of 6
                    powers of 7
                    powers of 8
                    powers of 9                  5                  5
                   powers of 10
                               all
               powers of 2 + {37}
                powers of 2 − {32}
                                                0                    0
                                0     0.1    0.2 0       0.2      0.4 0    0.2   0.4
                                     prior               lik              post




Figure 3.2 Prior, likelihood and posterior for D = {16}. Based on (Tenenbaum 1999). Figure generated
by numbersGame.


Note that the MAP estimate can be written as
   ĥM AP = argmax p(D|h)p(h) = argmax [log p(D|h) + log p(h)]                                 (3.6)
                   h                         h

Since the likelihood term depends exponentially on N , and the prior stays constant, as we get
more and more data, the MAP estimate converges towards the maximum likelihood estimate
or MLE:
   ĥmle  argmax p(D|h) = argmax log p(D|h)                                                   (3.7)
               h                       h

In other words, if we have enough data, we see that the data overwhelms the prior. In this
70                                                          Chapter 3. Generative models for discrete data



                                                     data = 16 8 2 64
                                              35                         35



                            even
                             odd
                        squares               30                         30
                       mult of 3
                       mult of 4
                       mult of 5
                       mult of 6
                       mult of 7              25                         25
                       mult of 8
                       mult of 9
                      mult of 10
                       ends in 1
                       ends in 2              20                         20
                       ends in 3
                       ends in 4
                       ends in 5
                       ends in 6
                       ends in 7              15                         15
                       ends in 8
                       ends in 9
                    powers of 2
                    powers of 3
                    powers of 4               10                         10
                    powers of 5
                    powers of 6
                    powers of 7
                    powers of 8
                    powers of 9                5                             5
                   powers of 10
                               all
               powers of 2 + {37}
                powers of 2 − {32}
                                                0                         0
                                0     0.1    0.2 0            1          2 0      0.5   1
                                     prior                  lik         −3       post
                                                                  x 10




Figure 3.3 Prior, likelihood and posterior for D = {16, 8, 2, 64}. Based on (Tenenbaum 1999). Figure
generated by numbersGame.



case, the MAP estimate converges towards the MLE.
   If the true hypothesis is in the hypothesis space, then the MAP/ ML estimate will converge
upon this hypothesis. Thus we say that Bayesian inference (and ML estimation) are consistent
estimators (see Section 6.4.1 for details). We also say that the hypothesis space is identiﬁable in
the limit, meaning we can recover the truth in the limit of inﬁnite data. If our hypothesis class
is not rich enough to represent the “truth” (which will usually be the case), we will converge
on the hypothesis that is as close as possible to the truth. However, formalizing this notion of
“closeness” is beyond the scope of this chapter.
        3.2. Bayesian concept learning                                                                                                                                          71

                          1




                        0.5




                          0
                               4   8   12   16   20   24   28   32   36   40   44   48   52   56   60   64   68   72   76   80   84   88   92   96   100

                powers of 4


                powers of 2


                  ends in 6


                    squares


                       even


                   mult of 8


                   mult of 4


                         all


          powers of 2 − {32}


          powers of 2 + {37}
                                                                                                                                                           0      0.5       1
                                                                                                                                                               p(h | 16 )




        Figure 3.4 Posterior over hypotheses and the corresponding predictive distribution after seeing one
        example, D = {16}. A dot means this number is consistent with this hypothesis. The graph p(h|D) on
        the right is the weight given to hypothesis h. By taking a weighed sum of dots, we get p(x̃ ∈ C|D) (top).
        Based on Figure 2.9 of (Tenenbaum 1999). Figure generated by numbersGame.



3.2.4   Posterior predictive distribution
        The posterior is our internal belief state about the world. The way to test if our beliefs are
        justiﬁed is to use them to predict objectively observable quantities (this is the basis of the
        scientiﬁc method). Speciﬁcally, the posterior predictive distribution in this context is given by
                           
            p(x̃ ∈ C|D) =      p(y = 1|x̃, h)p(h|D)                                                    (3.8)
                                            h

        This is just a weighted average of the predictions of each individual hypothesis and is called
        Bayes model averaging (Hoeting et al. 1999). This is illustrated in Figure 3.4. The dots at the
        bottom show the predictions from each hypothesis; the vertical curve on the right shows the
        weight associated with each hypothesis. If we multiply each row by its weight and add up, we
        get the distribution at the top.
          When we have a small and/or ambiguous dataset, the posterior p(h|D) is vague, which
        induces a broad predictive distribution. However, once we have “ﬁgured things out”, the posterior
        becomes a delta function centered at the MAP estimate. In this case, the predictive distribution
        72                                                    Chapter 3. Generative models for discrete data


        becomes
                             
             p(x̃ ∈ C|D) =        p(x̃|h)δĥ (h) = p(x̃|ĥ)                                             (3.9)
                              h

        This is called a plug-in approximation to the predictive density and is very widely used, due
        to its simplicity. However, in general, this under-represents our uncertainty, and our predictions
        will not be as “smooth” as when using BMA. We will see more examples of this later in the book.
           Although MAP learning is simple, it cannot explain the gradual shift from similarity-based
        reasoning (with uncertain posteriors) to rule-based reasoning (with certain posteriors). For
        example, suppose we observe D = {16}. If we use the simple prior above, the minimal
        consistent hypothesis is “all powers of 4”, so only 4 and 16 get a non-zero probability of being
        predicted. This is of course an example of overﬁtting. Given D = {16, 8, 2, 64}, the MAP
        hypothesis is “all powers of two”. Thus the plug-in predictive distribution gets broader (or stays
        the same) as we see more data: it starts narrow, but is forced to broaden as it seems more data.
        In contrast, in the Bayesian approach, we start broad and then narrow down as we learn more,
        which makes more intuitive sense. In particular, given D = {16}, there are many hypotheses
        with non-negligible posterior support, so the predictive distribution is broad. However, when we
        see D = {16, 8, 2, 64}, the posterior concentrates its mass on one hypothesis, so the predictive
        distribution becomes narrower. So the predictions made by a plug-in approach and a Bayesian
        approach are quite different in the small sample regime, although they converge to the same
        answer as we see more data.

3.2.5   A more complex prior
        To model human behavior, Tenenbaum used a slightly more sophisticated prior which was de-
        rived by analysing some experimental data of how people measure similarity between numbers;
        see (Tenenbaum 1999, p208) for details. The result is a set of arithmetical concepts similar to
        those mentioned above, plus all intervals between n and m for 1 ≤ n, m ≤ 100. (Note that
        these hypotheses are not mutually exclusive.) Thus the prior is a mixture of two priors, one
        over arithmetical rules, and one over intervals:
             p(h) = π0 prules (h) + (1 − π0 )pinterval (h)                                             (3.10)
        The only free parameter in the model is the relative weight, π0 , given to these two parts of the
        prior. The results are not very sensitive to this value, so long as π0 > 0.5, reﬂecting the fact
        that people are more likely to think of concepts deﬁned by rules. The predictive distribution
        of the model, using this larger hypothesis space, is shown in Figure 3.5. It is strikingly similar
        to the human predictive distribution, shown in Figure 3.1, even though it was not ﬁt to human
        data (modulo the choice of hypothesis space).

 3.3    The beta-binomial model
        The number game involved inferring a distribution over a discrete variable drawn from a ﬁnite
        hypothesis space, h ∈ H, given a series of discrete observations. This made the computations
        particularly simple: we just needed to sum, multiply and divide. However, in many applications,
        the unknown parameters are continuous, so the hypothesis space is (some subset) of RK , where
        3.3. The beta-binomial model                                                                            73


              Examples

              16           1
                          0.5
                           0

                                4   8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100

              60           1
                          0.5
                           0

                                4   8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100

              16 8 2 64    1
                          0.5
                           0

                                4   8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100

              16 23 19 20 1
                        0.5
                           0

                                4   8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100



        Figure 3.5 Predictive distributions for the model using the full hypothesis space. Compare to Figure 3.1.
        The predictions of the Bayesian model are only plotted for those values of x̃ for which human data is
        available; this is why the top line looks sparser than Figure 3.4. Source: Figure 5.6 of (Tenenbaum 1999).
        Used with kind permission of Josh Tenenbaum.



        K is the number of parameters. This complicates the mathematics, since we have to replace
        sums with integrals. However, the basic ideas are the same.
           We will illustrate this by considering the problem of inferring the probability that a coin shows
        up heads, given a series of observed coin tosses. Although this might seem trivial, it turns out
        that this model forms the basis of many of the methods we will consider later in this book,
        including naive Bayes classiﬁers, Markov models, etc. It is historically important, since it was the
        example which was analyzed in Bayes’ original paper of 1763. (Bayes’ analysis was subsequently
        generalized by Pierre-Simon Laplace, creating what we now call “Bayes rule” — see (Stigler 1986)
        for further historical details.)
           We will follow our now-familiar recipe of specifying the likelihood and prior, and deriving the
        posterior and posterior predictive.

3.3.1   Likelihood
        Suppose Xi ∼ Ber(θ), where Xi = 1 represents “heads”, Xi = 0 represents “tails”, and
        θ ∈ [0, 1] is the rate parameter (probability of heads). If the data are iid, the likelihood has the
        form

           p(D|θ) = θN1 (1 − θ)N0                                                                             (3.11)
        74                                                  Chapter 3. Generative models for discrete data

                                N                                   N
        where we have N1 = i=1 I(xi = 1) heads and N0 = i=1 I(xi = 0) tails. These two counts
        are called the sufficient statistics of the data, since this is all we need to know about D to
        infer θ. (An alternative set of sufficient statistics are N1 and N = N0 + N1 .)
           More formally, we say s(D) is a sufficient statistic for data D if p(θ|D) = p(θ|s(data)). If
        we use a uniform prior, this is equivalent to saying p(D|θ ∝ p(s(D)|θ). Consequently, if we
        have two datasets with the same sufficient statistics, we will infer the same value for θ.
           Now suppose the data consists of the count of the number of heads N1 observed in a ﬁxed
        number N = N1 + N0 of trials. In this case, we have N1 ∼ Bin(N, θ), where Bin represents
        the binomial distribution, which has the following pmf:
                            
                              n k
            Bin(k|n, θ)          θ (1 − θ)n−k                                                        (3.12)
                              k
               
                 n
        Since       is a constant independent of θ, the likelihood for the binomial sampling model is the
                 k
        same as the likelihood for the Bernoulli model. So any inferences we make about θ will be the
        same whether we observe the counts, D = (N1 , N ), or a sequence of trials, D = {x1 , . . . , xN }.

3.3.2   Prior
        We need a prior which has support over the interval [0, 1]. To make the math easier, it would
        convenient if the prior had the same form as the likelihood, i.e., if the prior looked like
             p(θ) ∝ θγ1 (1 − θ)γ2                                                                      (3.13)

        for some prior parameters γ1 and γ2 . If this were the case, then we could easily evaluate the
        posterior by simply adding up the exponents:
             p(θ) ∝ p(D|θ)p(θ) = θN1 (1 − θ)N0 θγ1 (1 − θ)γ2 = θN1 +γ1 (1 − θ)N0 +γ2                   (3.14)

        When the prior and the posterior have the same form, we say that the prior is a conjugate
        prior for the corresponding likelihood. Conjugate priors are widely used because they simplify
        computation, and are easy to interpret, as we see below.
           In the case of the Bernoulli, the conjugate prior is the beta distribution, which we encountered
        in Section 2.4.5:
             Beta(θ|a, b) ∝ θa−1 (1 − θ)b−1                                                            (3.15)

        The parameters of the prior are called hyper-parameters. We can set them in order to encode
        our prior beliefs. For example, to encode our beliefs that θ has mean 0.7 and standard deviation
        0.2, we set a = 2.975 and b = 1.275 (Exercise 3.15). Or to encode our beliefs that θ has mean
        0.15 and that we think it lives in the interval (0.05, 0.30) with probability, then we ﬁnd a = 4.5
        and b = 25.5 (Exercise 3.16).
           If we know “nothing” about θ, except that it lies in the interval [0, 1], we can use a uni-
        form prior, which is a kind of uninformative prior (see Section 5.4.2 for details). The uniform
        distribution can be represented by a beta distribution with a = b = 1.
        3.3. The beta-binomial model                                                                                                                                    75

                    6                                                                       4.5
                                                                   prior Be(2.0, 2.0)                                                      prior Be(5.0, 2.0)
                                                                   lik Be(4.0, 18.0)         4                                             lik Be(12.0, 14.0)
                    5                                              post Be(5.0, 19.0)                                                      post Be(16.0, 15.0)
                                                                                            3.5


                    4                                                                        3


                                                                                            2.5
                    3
                                                                                             2


                    2                                                                       1.5


                                                                                             1
                    1
                                                                                            0.5


                    0                                                                        0
                        0   0.1   0.2   0.3    0.4   0.5   0.6   0.7    0.8   0.9       1         0   0.1   0.2   0.3   0.4    0.5   0.6   0.7   0.8   0.9       1



                                                     (a)                                                                      (b)

        Figure 3.6 (a) Updating a Beta(2, 2) prior with a Binomial likelihood with sufficient statistics N1 =
        3, N0 = 17 to yield a Beta(5,19) posterior. (b) Updating a Beta(5, 2) prior with a Binomial likeli-
        hood with sufficient statistics N1 = 11,N0 = 13 to yield a Beta(16, 15) posterior. Figure generated by
        binomialBetaPosteriorDemo.


3.3.3   Posterior
        If we multiply the likelihood by the beta prior we get the following posterior (following Equa-
        tion 3.14):
           p(θ|D)           ∝     Bin(N1 |θ, N0 + N1 )Beta(θ|a, b)Beta(θ|N1 + a, N0 + b)                                                                             (3.16)

        In particular, the posterior is obtained by adding the prior hyper-parameters to the empirical
        counts. For this reason, the hyper-parameters are known as pseudo counts. The strength of the
        prior, also known as the effective sample size of the prior, is the sum of the pseudo counts,
        a + b; this plays a role analogous to the data set size, N1 + N0 = N .
           Figure 3.6(a) gives an example where we update a weak Beta(2,2) prior with a peaked likelihood
        function, corresponding to a large sample size; we see that the posterior is essentially identical
        to the likelihood: since the data has overwhelmed the prior. Figure 3.6(b) gives an example
        where we update a strong Beta(5,2) prior with a peaked likelihood function; now we see that the
        posterior is a “compromise” between the prior and likelihood.
           Note that updating the posterior sequentially is equivalent to updating in a single batch.
        To see this, suppose we have two data sets Da and Db with sufficient statistics N1a , N0a and
        N1b , N0b . Let N1 = N1a + N1b and N0 = N0a + N0b be the sufficient statistics of the combined
        datasets. In batch mode we have

           p(θ|Da , Db )           ∝          Bin(N1 |θ, N1 + N0 )Beta(θ|a, b) ∝ Beta(θ|N1 + a, N0 + b)                                                              (3.17)

        In sequential mode, we have

           p(θ|Da , Db )           ∝          p(Db |θ)p(θ|Da )                                                                                                       (3.18)
                                   ∝          Bin(N1b |θ, N1b + N0b )Beta(θ|N1a + a, N0a + b)                                                                        (3.19)
                                   ∝          Beta(θ| N1a + N1b + a, N0a + N0b + b)                                                                                  (3.20)

        This makes Bayesian inference particularly well-suited to online learning, as we will see later.
          76                                                  Chapter 3. Generative models for discrete data


3.3.3.1   Posterior mean and mode
          From Equation 2.62, the MAP estimate is given by
                             a + N1 − 1
               θ̂M AP    =                                                                           (3.21)
                            a+b+N −2
          If we use a uniform prior, then the MAP estimate reduces to the MLE, which is just the empirical
          fraction of heads:
                        N1
              θ̂M LE =                                                                              (3.22)
                        N
          This makes intuitive sense, but it can also be derived by applying elementary calculus to
          maximize the likelihood function in Equation 3.11. (Exercise 3.1).
             By contrast, the posterior mean is given by,
                        a + N1
               θ   =                                                                               (3.23)
                       a+b+N
          This difference between the mode and the mean will prove important later.
             We will now show that the posterior mean is convex combination of the prior mean and the
          MLE, which captures the notion that the posterior is a compromise between what we previously
          believed and what the data is telling us.
             Let α0 = a + b be the equivalent sample size of the prior, which controls its strength, and
          let the prior mean be m1 = a/α0 . Then the posterior mean is given by
                               α0 m1 + N1     α0          N    N1
               E [θ|D]    =               =        m1 +           = λm1 + (1 − λ)θ̂M LE                 (3.24)
                                N + α0      N + α0      N + α0 N
          where λ = Nα+α  0
                            0
                              is the ratio of the prior to posterior equivalent sample size. So the weaker the
          prior, the smaller is λ, and hence the closer the posterior mean is to the MLE. One can show
          similarly that the posterior mode is a convex combination of the prior mode and the MLE, and
          that it too converges to the MLE.

3.3.3.2   Posterior variance
          The mean and mode are point estimates, but it is useful to know how much we can trust them.
          The variance of the posterior is one way to measure this. The variance of the Beta posterior is
          given by
                                          (a + N1 )(b + N0 )
               var [θ|D] =                                                                              (3.25)
                              (a + N1 + b + N0 )2 (a + N1 + b + N0 + 1)
          We can simplify this formidable expression in the case that N  a, b, to get
                              N1 N0   θ̂(1 − θ̂)
               var [θ|D] ≈          =                                                                   (3.26)
                              NNN         N
          where θ̂ is the MLE. Hence the “error bar” in our estimate (i.e., the posterior standard deviation),
          is given by

                                       θ̂(1 − θ̂)
               σ=       var [θ|D] ≈                                                                     (3.27)
                                           N
          3.3. The beta-binomial model                                                                   77

                                                                   √
          We see that the uncertainty goes down at a rate of 1/ N . Note, however, that the uncertainty
          (variance) is maximized when θ̂ = 0.5, and is minimized when θ̂ is close to 0 or 1. This means
          it is easier to be sure that a coin is biased than to be sure that it is fair.

 3.3.4    Posterior predictive distribution
          So far, we have been focusing on inference of the unknown parameter(s). Let us now turn our
          attention to prediction of future observable data.
             Consider predicting the probability of heads in a single future trial under a Beta(a, b) poste-
          rior. We have
                                     1
             p(x̃ = 1|D)    =            p(x = 1|θ)p(θ|D)dθ                                           (3.28)
                                 0
                                     1
                                                                         a
                            =            θ Beta(θ|a, b)dθ = E [θ|D] =                                 (3.29)
                                 0                                      a+b
          Thus we see that the mean of the posterior predictive distribution is equivalent (in this case) to
          plugging in the posterior mean parameters: p(x̃|D) = Ber(x̃|E [θ|D]).

3.3.4.1   Overﬁtting and the black swan paradox
          Suppose instead that we plug-in the MLE, i.e., we use p(x̃|D) ≈ Ber(x̃|θ̂M LE ). Unfortunately,
          this approximation can perform quite poorly when the sample size is small. For example,
          suppose we have seen N = 3 tails in a row. The MLE is θ̂ = 0/3 = 0, since this makes the
          observed data as probable as possible. However, using this estimate, we predict that heads are
          impossible. This is called the zero count problem or the sparse data problem, and frequently
          occurs when estimating counts from small amounts of data. One might think that in the era
          of “big data”, such concerns are irrelevant, but note that once we partition the data based on
          certain criteria — such as the number of times a speciﬁc person has engaged in a speciﬁc activity
          — the sample sizes can become much smaller. This problem arises, for example, when trying
          to perform personalized recommendation of web pages. Thus Bayesian methods are still useful,
          even in the big data regime (Jordan 2011).
             The zero-count problem is analogous to a problem in philosophy called the black swan
          paradox. This is based on the ancient Western conception that all swans were white. In
          that context, a black swan was a metaphor for something that could not exist. (Black swans
          were discovered in Australia by European explorers in the 17th Century.) The term “black swan
          paradox” was ﬁrst coined by the famous philosopher of science Karl Popper; the term has also
          been used as the title of a recent popular book (Taleb 2007). This paradox was used to illustrate
          the problem of induction, which is the problem of how to draw general conclusions about the
          future from speciﬁc observations from the past.
             Let us now derive a simple Bayesian solution to the problem. We will use a uniform prior, so
          a = b = 1. In this case, plugging in the posterior mean gives Laplace’s rule of succession
                               N1 + 1
             p(x̃ = 1|D) =                                                                      (3.30)
                             N1 + N0 + 2
          This justiﬁes the common practice of adding 1 to the empirical counts, normalizing and then
          plugging them in, a technique known as add-one smoothing. (Note that plugging in the MAP
          78                                                    Chapter 3. Generative models for discrete data

                                                                                                    N1 +a−1
          parameters would not have this smoothing effect, since the mode has the form θ̂ =        N +a+b−2 ,
          which becomes the MLE if a = b = 1.)

3.3.4.2   Predicting the outcome of multiple future trials
          Suppose now we were interested in predicting the number of heads, x, in M future trials. This
          is given by
                                          1
               p(x|D, M )       =      Bin(x|θ, M )Beta(θ|a, b)dθ                                        (3.31)
                                      0
                                                 1
                                      M     1
                                =                    θx (1 − θ)M −x θa−1 (1 − θ)b−1 dθ                  (3.32)
                                      x B(a, b) 0

          We recognize the integral as the normalization constant for a Beta(a+x, M −x+b) distribution.
          Hence
                    1
                        θx (1 − θ)M −x θa−1 (1 − θ)b−1 dθ = B(x + a, M − x + b)                         (3.33)
                0

          Thus we ﬁnd that the posterior predictive is given by the following, known as the (compound)
          beta-binomial distribution:
                                   
                                   M B(x + a, M − x + b)
             Bb(x|a, b, M )                                                                     (3.34)
                                    x          B(a, b)
          This distribution has the following mean and variance
                               a                M ab (a + b + M )
               E [x] = M          , var [x] =                                                           (3.35)
                              a+b             (a + b)2 a + b + 1
          If M = 1, and hence x ∈ {0, 1}, we see that the mean becomes E [x|D] = p(x = 1|D) = a+b      a
                                                                                                         ,
          which is consistent with Equation 3.29.
             This process is illustrated in Figure 3.7(a). We start with a Beta(2,2) prior, and plot the
          posterior predictive density after seeing N1 = 3 heads and N0 = 17 tails. Figure 3.7(b) plots
          a plug-in approximation using a MAP estimate. We see that the Bayesian prediction has longer
          tails, spreading its probablity mass more widely, and is therefore less prone to overﬁtting and
          blackswan type paradoxes.

   3.4    The Dirichlet-multinomial model
          In the previous section, we discussed how to infer the probability that a coin comes up heads.
          In this section, we generalize these results to infer the probability that a dice with K sides
          comes up as face k. This might seem like another toy exercise, but the methods we will study
          are widely used to analyse text data, biosequence data, etc., as we will see later.
        3.4. The Dirichlet-multinomial model                                                                                                                79

                                              posterior predictive                                                  plugin predictive
                     0.35                                                                    0.35


                      0.3                                                                     0.3


                     0.25                                                                    0.25


                      0.2                                                                     0.2


                     0.15                                                                    0.15


                      0.1                                                                     0.1


                     0.05                                                                    0.05


                       0                                                                       0
                            0    1    2   3     4      5     6       7   8     9   10               0   1   2   3    4     5      6     7   8   9   10


                                                    (a)                                                                  (b)

        Figure 3.7 (a) Posterior predictive distributions after seeing N1 = 3, N0 = 17. (b) Plugin approximation.
        Figure generated by betaBinomPostPredDemo.



3.4.1   Likelihood
        Suppose we observe N dice rolls, D = {x1 , . . . , xN }, where xi ∈ {1, . . . , K}. If we assume
        the data is iid, the likelihood has the form
                                K
           p(D|θ)      =              θkNk                                                                                                               (3.36)
                                k=1
                        N
        where Nk = i=1 I(yi = k) is the number of times event k occured (these are the sufficient
        statistics for this model). The likelihood for the multinomial model has the same form, up to an
        irrelevant constant factor.

3.4.2   Prior
        Since the parameter vector lives in the K-dimensional probability simplex, we need a prior that
        has support over this simplex. Ideally it would also be conjugate. Fortunately, the Dirichlet
        distribution (Section 2.5.4) satisﬁes both criteria. So we will use the following prior:
                                                     K
                                      1
           Dir(θ|α)         =                                θkαk −1 I(x ∈ SK )                                                                          (3.37)
                                     B(α)
                                                    k=1


3.4.3   Posterior
        Multiplying the likelihood by the prior, we ﬁnd that the posterior is also Dirichlet:

           p(θ|D)      ∝        p(D|θ)p(θ)                                                                                                               (3.38)
                                K                                        K
                       ∝              θkNk θkαk −1 =                           θkαk +Nk −1                                                               (3.39)
                                k=1                                      k=1
                       =        Dir(θ|α1 + N1 , . . . , αK + NK )                                                                                        (3.40)
80                                                           Chapter 3. Generative models for discrete data


We see that the posterior is obtained by adding the prior hyper-parameters (pseudo-counts) αk
to the empirical counts Nk .
                                        (i.e., the2MAP estimate) by using calculus. However,
   We can derive the mode of this posterior
we must enforce the constraint that       k θk = 1. . We can do this by using a Lagrange
multiplier. The constrained objective function, or Lagrangian, is given by the log likelihood
plus log prior plus the constraint:
                                                                      
                                                             
     (θ, λ) =         Nk log θk +     (αk − 1) log θk + λ 1 −      θk                    (3.41)
                      k                    k                                    k

To simplify notation, we deﬁne Nk  Nk + αk − 1. Taking derivatives with respect to λ yields
the original constraint:
                           
    ∂                
          =     1−       θk = 0                                                         (3.42)
    ∂λ
                          k

Taking derivatives with respect to θk yields
     ∂            Nk
             =        −λ=0                                                                                     (3.43)
     ∂θk          θk
      Nk    =    λθk                                                                                          (3.44)

We can solve for λ using the sum-to-one constraint:
                        
            Nk = λ          θk                                                                                (3.45)
              k                 k
   N + α0 − K = λ                                                               (3.46)
           K
where α0  k=1 αk is the equivalent sample size of the prior. Thus the MAP estimate is
given by
             Nk + α k − 1
     θ̂k =                                                                                                     (3.47)
             N + α0 − K
which is consistent with Equation 2.77. If we use a uniform prior, αk = 1, we recover the MLE:

     θ̂k = Nk /N                                                                                               (3.48)

This is just the empirical fraction of times face k shows up.

2. We do not need to explicitly enforce the constraint that θk ≥ 0 since the gradient of the objective has the form
Nk /θk − λ; so negative values would reduce the objective, rather than maximize it. (Of course, this does not preclude
setting θk = 0, and indeed this is the optimal solution if Nk = 0 and αk = 1.)
          3.4. The Dirichlet-multinomial model                                                          81


 3.4.4    Posterior predictive
          The posterior predictive distribution for a single multinoulli trial is given by the following
          expression:

             p(X = j|D)     =      p(X = j|θ)p(θ|D)dθ                                               (3.49)
                                                                     
                            =      p(X = j|θj )   p(θ −j , θj |D)dθ −j dθj                          (3.50)

                                                                    α j + Nj         αj + Nj
                            =      θj p(θj |D)dθj = E [θj |D] =                   =                 (3.51)
                                                                    k (α k + N k )   α0 + N
          where θ −j are all the components of θ except θj . See also Exercise 3.13.
             The above expression avoids the zero-count problem, just as we saw in Section 3.3.4.1. In
          fact, this form of Bayesian smoothing is even more important in the multinomial case than the
          binary case, since the likelihood of data sparsity increases once we start partitioning the data
          into many categories.

3.4.4.1   Worked example: language models using bag of words
          One application of Bayesian smoothing using the Dirichlet-multinomial model is to language
          modeling, which means predicting which words might occur next in a sequence. Here we
          will take a very simple-minded approach, and assume that the i’th word, Xi ∈ {1, . . . , K}, is
          sampled independently from all the other words using a Cat(θ) distribution. This is called the
          bag of words model. Given a past sequence of words, how can we predict which one is likely
          to come next?
             For example, suppose we observe the following sequence (part of a children’s nursery rhyme):
          Mary had a little lamb, little lamb, little lamb,
          Mary had a little lamb, its fleece as white as snow
          Furthermore, suppose our vocabulary consists of the following words:
          mary lamb little big fleece white black snow rain unk
          1    2    3      4   5      6     7     8    9    10
          Here unk stands for unknown, and represents all other words that do not appear elsewhere on
          the list. To encode each line of the nursery rhyme, we ﬁrst strip off punctuation, and remove
          any stop words such as “a”, “as”, “the”, etc. We can also perform stemming, which means
          reducing words to their base form, such as stripping off the ﬁnal s in plural words, or the ing
          from verbs (e.g., running becomes run). In this example, no words need stemming. Finally, we
          replace each word by its index into the vocabulary to get:

          1 10 3 2 3 2 3 2
          1 10 3 2 10 5 10 6 8

             We now ignore the word order, and count how often each word occurred, resulting in a
          histogram of word counts:
      82                                                         Chapter 3. Generative models for discrete data


           Token    1        2          3          4     5       6          7       8      9      10
           Word     mary     lamb       little     big   ﬂeece   white      black   snow   rain   unk
           Count    2        4          4          0     1       1          0       1      0      4

         Denote the above counts by Nj . If we use a Dir(α) prior for θ, the posterior predictive is
      just
                                                  αj + Nj         1 + Nj
           p(X̃ = j|D) = E[θj |D] =                            =                                        (3.52)
                                                 j  α j + Nj     10 + 17
                                                             


      If we set αj = 1, we get
           p(X̃ = j|D) = (3/27, 5/27, 5/27, 1/27, 2/27, 2/27, 1/27, 2/27, 1/27, 5/27)                    (3.53)
      The modes of the predictive distribution are X = 2 (“lamb”) and X = 10 (“unk”). Note that the
      words “big”, “black” and “rain” are predicted to occur with non-zero probability in the future,
      even though they have never been seen before. Later on we will see more sophisticated language
      models.

3.5   Naive Bayes classiﬁers
      In this section, we discuss how to classify vectors of discrete-valued features, x ∈ {1, . . . , K}D ,
      where K is the number of values for each feature, and D is the number of features. We will use
      a generative approach. This requires us to specify the class conditional distribution, p(x|y = c).
      The simplest approach is to assume the features are conditionally independent given the class
      label. This allows us to write the class conditional density as a product of one dimensional
      densities:
                             D
           p(x|y = c, θ) =         p(xj |y = c, θ jc )                                                   (3.54)
                             j=1

      The resulting model is called a naive Bayes classiﬁer (NBC).
          The model is called “naive” since we do not expect the features to be independent, even
      conditional on the class label. However, even if the naive Bayes assumption is not true, it often
      results in classiﬁers that work well (Domingos and Pazzani 1997). One reason for this is that the
      model is quite simple (it only has O(CD) parameters, for C classes and D features), and hence
      it is relatively immune to overﬁtting.
          The form of the class-conditional density depends on the type of each feature. We give some
      possibilities below:
      • In the case of real-valued features, we can use the Gaussian distribution: p(x|y = c, θ) =
        D                  2                                                                    2
          j=1 N (xj |μjc , σjc ), where μjc is the mean of feature j in objects of class c, and σjc is its
        variance.
      • In the case of binary features, xj ∈ {0, 1}, we can use the Bernoulli distribution: p(x|y =
                 D
        c, θ) = j=1 Ber(xj |μjc ), where μjc is the probability that feature j occurs in class c.
        This is sometimes called the multivariate Bernoulli naive Bayes model. We will see an
        application of this below.
          3.5. Naive Bayes classiﬁers                                                                             83


          • In the case of categorical features, xj ∈ {1, . . . , K}, we can model use the multinoulli
                                              D
            distribution: p(x|y = c, θ) = j=1 Cat(xj |μjc ), where μjc is a histogram over the K
            possible values for xj in class c.

          Obviously we can handle other kinds of features, or use different distributional assumptions.
          Also, it is easy to mix and match features of different types.

 3.5.1    Model ﬁtting
          We now discuss how to “train” a naive Bayes classiﬁer. This usually means computing the MLE
          or the MAP estimate for the parameters. However, we will also discuss how to compute the full
          posterior, p(θ|D).

3.5.1.1   MLE for NBC
          The probability for a single data case is given by

             p(xi , yi |θ) = p(yi |π)        p(xij |θ j ) =       πcI(yi =c)           p(xij |θ jc )I(yi =c)   (3.55)
                                         j                    c                j   c

          Hence the log-likelihood is given by
                                 
                                 C                    D 
                                                       C 
             log p(D|θ)      =          Nc log πc +                      log p(xij |θ jc )                     (3.56)
                                 c=1                  j=1 c=1 i:yi =c

          We see that this expression decomposes into a series of terms, one concerning π, and DC
          terms containing the θ jc ’s. Hence we can optimize all these parameters separately.
             From Equation 3.48, the MLE for the class prior is given by
                        Nc
             π̂c   =                                                                                           (3.57)
                        N
                        
          where Nc  i I(yi = c) is the number of examples in class c.
             The MLE for the likelihood depends on the type of distribution we choose to use for each
          feature. For simplicity, let us suppose all features are binary, so xj |y = c ∼ Ber(θjc ). In this
          case, the MLE becomes
                      Njc
             θ̂jc =                                                                                            (3.58)
                      Nc
             It is extremely simple to implement this model ﬁtting procedure: See Algorithm 8 for some
          pseudo-code (and naiveBayesFit for some Matlab code). This algorithm obviously takes
          O(N D) time. The method is easily generalized to handle features of mixed type. This simplicity
          is one reason the method is so widely used.
             Figure 3.8 gives an example where we have 2 classes and 600 binary features, representing the
          presence or absence of words in a bag-of-words model. The plot visualizes the θ c vectors for the
          two classes. The big spike at index 107 corresponds to the word “subject”, which occurs in both
          classes with probability 1. (In Section 3.5.4, we discuss how to “ﬁlter out” such uninformative
          features.)
          84                                                                        Chapter 3. Generative models for discrete data


           Algorithm 3.1: Fitting a naive Bayes classiﬁer to binary features
          1       Nc = 0, Njc = 0;
          2       for i = 1 : N do
          3           c = yi // Class label of i’th example;
          4           Nc := Nc + 1 ;
          5           for j = 1 : D do
          6               if xij = 1 then
          7                   Njc := Njc + 1
                                            Njc
          8       π̂c =      Nc
                             N ,   θ̂jc =   N


                                             p(xj=1|y=1)                                                   p(xj=1|y=2)
              1                                                                      1

          0.9                                                                       0.9

          0.8                                                                       0.8

          0.7                                                                       0.7

          0.6                                                                       0.6

          0.5                                                                       0.5

          0.4                                                                       0.4

          0.3                                                                       0.3

          0.2                                                                       0.2

          0.1                                                                       0.1

              0                                                                      0
                  0      100       200      300         400     500     600   700         0   100   200   300         400   500   600    700

                                                  (a)                                                           (b)

          Figure 3.8 Class conditional densities p(xj = 1|y = c) for two document classes, corresponding to “X
          windows” and “MS windows”. Figure generated by naiveBayesBowDemo.



3.5.1.2   Bayesian naive Bayes
          The trouble with maximum likelihood is that it can overﬁt. For example, consider the example
          in Figure 3.8: the feature corresponding to the word “subject” (call it feature j) always occurs
          in both classes, so we estimate θ̂jc = 1. What will happen if we encounter a new email which
          does not have this word in it? Our algorithm will crash and burn, since we will ﬁnd that
          p(y = c|x, θ̂) = 0 for both classes! This is another manifestation of the black swan paradox
          discussed in Section 3.3.4.1.
             A simple solution to overﬁtting is to be Bayesian. For simplicity, we will use a factored prior:
                                                  D     C
                      p(θ)     =     p(π)                     p(θjc )                                                                   (3.59)
                                             j=1 c=1

          We will use a Dir(α) prior for π and a Beta(β0 , β1 ) prior for each θjc . Often we just take
          α = 1 and β = 1, corresponding to add-one or Laplace smoothing.
        3.5. Naive Bayes classiﬁers                                                                     85


           Combining the factored likelihood in Equation 3.56 with the factored prior above gives the
        following factored posterior:
                                        D      C
             p(θ|D)    =     p(π|D)                p(θjc |D)                                        (3.60)
                                        j=1 c=
            p(π|D)     =     Dir(N1 + α1 . . . , NC + αC )                                           (3.61)
           p(θjc |D)   =     Beta((Nc − Njc ) + β0 , Njc + β1 )                                     (3.62)
        In other words, to compute the posterior, we just update the prior counts with the empirical
        counts from the likelihood. It is straightforward to modify algorithm 8 to handle this version of
        model “ﬁtting”.

3.5.2   Using the model for prediction
        At test time, the goal is to compute
                                                      D
           p(y = c|x, D)     ∝    p(y = c|D)               p(xj |y = c, D)                          (3.63)
                                                     j=1

        The correct Bayesian procedure is to integrate out the unknown parameters:
                                                             
           p(y = c|x, D) ∝         Cat(y = c|π)p(π|D)dπ                                             (3.64)
                                   D                                               
                                                Ber(xj |y = c, θjc )p(θ jc |D)                      (3.65)
                                  j=1

        Fortunately, this is easy to do, at least if the posterior is Dirichlet. In particular, from Equa-
        tion 3.51, we know the posterior predictive density can be obtained by simply plugging in the
        posterior mean parameters θ. Hence
                                        D
           p(y = c|x, D)     ∝    πc          (θjc )I(xj =1) (1 − θjc )I(xj =0)                     (3.66)
                                        j=1
                                   Njc + β1
                       θjk   =                                                                      (3.67)
                                  Nc + β0 + β1
                                  Nc + α c
                       πc    =                                                                      (3.68)
                                  N + α0
                    
        where α0 = c αc .
          If we have approximated the posterior by a single point, p(θ|D) ≈ δθ̂ (θ), where θ̂ may be
        the ML or MAP estimate, then the posterior predictive density is obtained by simply plugging in
        the parameters, to yield a virtually identical rule:
                                        D
           p(y = c|x, D)     ∝    π̂c         (θ̂jc )I(xj =1) (1 − θ̂jc )I(xj =0)                   (3.69)
                                        j=1
        86                                                          Chapter 3. Generative models for discrete data


        The only difference is we replaced the posterior mean θ with the posterior mode or MLE θ̂.
        However, this small difference can be important in practice, since the posterior mean will result
        in less overﬁtting (see Section 3.4.4.1).

3.5.3   The log-sum-exp trick
        We now discuss one important practical detail that arises when using generative classiﬁers of any
        kind. We can compute the posterior over class labels using Equation 2.13, using the appropriate
        class-conditional density (and a plug-in approximation). Unfortunately a naive implementation
        of Equation 2.13 can fail due to numerical underﬂow. The problem is that p(x|y = c) is often
             small number, especially if x is a high-dimensional vector. This is because we require
        a very
        that x p(x|y) = 1, so the probability of observing any particular high-dimensional vector is
        small. The obvious solution is to take logs when applying Bayes rule, as follows:
                                           C         
                                            
           log p(y = c|x) = bc − log             ebc                                               (3.70)
                                                    c =1

                               bc       log p(x|y = c) + log p(y = c)                                       (3.71)
        However, this requires evaluating the following expression
                               
          log[     ebc ] = log    p(y = c , x) = log p(x)                                                 (3.72)
                   c                   c

        and we can’t add up in the log domain. Fortunately, we can factor out the largest term, and just
        represent the remaining numbers relative to that. For example,
                                                      
           log(e−120 + e−121 ) = log e−120 (e0 + e−1 ) = log(e0 + e−1 ) − 120                     (3.73)
        In general, we have
                                                                             
                                                                   
             log        e bc   =    log (        ebc −B )eB = log(        ebc −B ) + B                      (3.74)
                   c                         c                        c

        where B = maxc bc . This is called the log-sum-exp trick, and is widely used. (See the function
        logsumexp for an implementation.)
           This trick is used in Algorithm 1 which gives pseudo-code for using an NBC to compute
        p(yi |xi , θ̂). See naiveBayesPredict for the Matlab code. Note that we do not need the
        log-sum-exp trick if we only want to compute ŷi , since we can just maximize the unnormalized
        quantity log p(yi = c) + log p(xi |y = c).

3.5.4   Feature selection using mutual information
        Since an NBC is ﬁtting a joint distribution over potentially many features, it can suffer from
        overﬁtting. In addition, the run-time cost is O(D), which may be too high for some applications.
           One common approach to tackling both of these problems is to perform feature selection, to
        remove “irrelevant” features that do not help much with the classiﬁcation problem. The simplest
        approach to feature selection is to evaluate the relevance of each feature separately, and then
        3.5. Naive Bayes classiﬁers                                                                        87


         Algorithm 3.2: Predicting with a naive bayes classiﬁer for binary features
        1   for i = 1 : N do
        2       for c = 1 : C do
        3           Lic = log π̂c ;
        4           for j = 1 : D do
        5               if xij = 1 then Lic := Lic + log θ̂jc else Lic := Lic + log(1 − θ̂jc )
        6      pic = exp(Lic − logsumexp(Li,: ));
        7      ŷi = argmaxc pic ;



        take the top K, where K is chosen based on some tradeoff between accuracy and complexity.
        This approach is known as variable ranking, ﬁltering, or screening.
           One way to measure relevance is to use mutual information (Section 2.8.3) between feature
        Xj and the class label Y :
                                                  p(xj , y)
            I(X, Y ) =             p(xj , y) log                                                        (3.75)
                         xj   y
                                                   p(xj )p(y)

        The mutual information can be thought of as the reduction in entropy on the label distribution
        once we observe the value of feature j. If the features are binary, it is easy to show (Exercise 3.21)
        that the MI can be computed as follows
                                     θjc                    1 − θjc
                                                                      
            Ij =            θjc πc log     + (1 − θjc )πc log                                           (3.76)
                        c
                                       θj                     1 − θj
                                                                                     
        where πc = p(y = c), θjc = p(xj = 1|y = c), and θj = p(xj = 1) = c πc θjc . (All of these
        quantities can be computed as a by-product of ﬁtting a naive Bayes classiﬁer.)
           Figure 3.1 illustrates what happens if we apply this to the binary bag of words dataset used in
        Figure 3.8. We see that the words with highest mutual information are much more discriminative
        than the words which are most probable. For example, the most probable word in both classes
        is “subject”, which always occurs because this is newsgroup data, which always has a subject
        line. But obviously this is not very discriminative. The words with highest MI with the class
        label are (in decreasing order) “windows”, “microsoft”, “DOS” and “motif”, which makes sense,
        since the classes correspond to Microsoft Windows and X Windows.

3.5.5   Classifying documents using bag of words
        Document classiﬁcation is the problem of classifying text documents into different categories.
        One simple approach is to represent each document as a binary vector, which records whether
        each word is present or not, so xij = 1 iff word j occurs in document i, otherwise xij = 0.
        We can then use the following class conditional density:
                                  D                        D
                                                                  I(xij )
            p(xi |yi = c, θ) =          Ber(xij |θjc ) =         θjc        (1 − θjc )I(1−xij )         (3.77)
                                  j=1                      j=1
88                                                           Chapter 3. Generative models for discrete data


                       class 1     prob       class 2      prob       highest MI        MI
                       subject     0.998      subject      0.998       windows         0.215
                         this      0.628     windows       0.639      microsoft        0.095
                        with       0.535        this       0.540         dos           0.092
                         but       0.471       with        0.538         motif         0.078
                         you       0.431        but        0.518       window          0.067

Table 3.1 We list the 5 most likely words for class 1 (X windows) and class 2 (MS windows). We also show
the 5 words with highest mutual information with class label. Produced by naiveBayesBowDemo



This is called the Bernoulli product model, or the binary independence model.
   However, ignoring the number of times each word occurs in a document loses some in-
formation (McCallum and Nigam 1998). A more accurate representation counts the number
of occurrences of each word. Speciﬁcally, let xi be a vector of counts for document i, so
                                                                            D
xij ∈ {0, 1, . . . , Ni }, where Ni is the number of terms in document i (so j=1 xij = Ni ). For
the class conditional densities, we can use a multinomial distribution:
                                                               D
                                              Ni !       x
     p(xi |yi = c, θ) = Mu(xi |Ni , θ c ) = D          θjcij                                                 (3.78)
                                                 x !
                                             j=1 ij j=1

where we have implicitly assumed that the document length Ni is independent of the class.
Here θjc is the probability of generating word j in documents of class c; these parameters satisfy
                     D
the constraint that j=1 θjc = 1 for each class c.3
   Although the multinomial classiﬁer is easy to train and easy to use at test time, it does not
work particularly well for document classiﬁcation. One reason for this is that it does not take
into account the burstiness of word usage. This refers to the phenomenon that most words
never appear in any given document, but if they do appear once, they are likely to appear more
than once, i.e., words occur in bursts.
   The multinomial model cannot capture the burstiness phenomenon. To see why, note that
                                N
Equation 3.78 has the form θjcij , and since θjc       1 for rare words, it becomes increasingly
unlikely to generate many of them. For more frequent words, the decay rate is not as fast. To
see why intuitively, note that the most frequent words are function words which are not speciﬁc
to the class, such as “and”, “the”, and “but”; the chance of the word “and” occuring is pretty
much the same no matter how many time it has previously occurred (modulo document length),
so the independence assumption is more reasonable for common words. However, since rare
words are the ones that matter most for classiﬁcation purposes, these are the ones we want to
model the most carefully.
   Various ad hoc heuristics have been proposed to improve the performance of the multinomial
document classiﬁer (Rennie et al. 2003). We now present an alternative class conditional density
that performs as well as these ad hoc methods, yet is probabilistically sound (Madsen et al.
2005).
3. Since Equation 3.78 models each word independently, this model is often  called a naive Bayes classiﬁer, although
technically the features xij are not independent, because of the constraint j xij = Ni .
3.5. Naive Bayes classiﬁers                                                                              89


  Suppose we simply replace the multinomial class conditional density with the Dirichlet
Compound Multinomial or DCM density, deﬁned as follows:
                                                                         Ni !     B(xi + αc )
   p(xi |yi = c, α)      =        Mu(xi |Ni , θ c )Dir(θ c |αc )dθ c = D                             (3.79)
                                                                        j=1 xij !
                                                                                    B(αc )

(This equation is derived in Equation 5.24.) Surprisingly this simple change is all that is needed
to capture the burstiness phenomenon. The intuitive reason for this is as follows: After seeing
one occurence of a word, say word j, the posterior counts on θj gets updated, making another
occurence of word j more likely. By contrast, if θj is ﬁxed, then the occurences of each word are
independent. The multinomial model corresponds to drawing a ball from an urn with K colors
of ball, recording its color, and then replacing it. By contrast, the DCM model corresponds to
drawing a ball, recording its color, and then replacing it with one additional copy; this is called
the Polya urn.
   Using the DCM as the class conditional density gives much better results than using the
multinomial, and has performance comparable to state of the art methods, as described in
(Madsen et al. 2005). The only disadvantage is that ﬁtting the DCM model is more complex; see
(Minka 2000e; Elkan 2006) for the details.

Exercises
Exercise 3.1 MLE for the Bernoulli/ binomial model
Derive Equation 3.22 by optimizing the log of the likelihood in Equation 3.11.
Exercise 3.2 Marginal likelihood for the Beta-Bernoulli model
In Equation 5.23, we showed that the marginal likelihood is the ratio of the normalizing constants:
                 Z(α1 + N1 , α0 + N0 )   Γ(α1 + N1 )Γ(α0 + N0 ) Γ(α1 + α0 )
   p(D)     =                          =                                                              (3.80)
                      Z(α1 , α0 )           Γ(α1 + α0 + N )     Γ(α1 )Γ(α0 )
We will now derive an alternative derivation of this fact. By the chain rule of probability,
   p(x1:N ) = p(x1 )p(x2 |x1 )p(x3 |x1:2 ) . . .                                                      (3.81)
In Section 3.3.4, we showed that the posterior predictive distribution is
                     N k + αk       Nk + α k
   p(X = k|D1:N ) =                                                                                 (3.82)
                      i N i + α i    N +α

where k ∈ {0, 1} and D1:N is the data seen so far. Now suppose D = H, T, T, H, H or D = 1, 0, 0, 1, 1.
Then
                 α1       α0      α 0 + 1 α 1 + 1 α1 + 2
   p(D)     =        ·          ·          ·        ·                                                 (3.83)
                  α α+1 α+2 α+3 α+4
                 [α1 (α1 + 1)(α1 + 2)] [α0 (α0 + 1)]
            =                                                                                         (3.84)
                           α(α + 1) · · · (α + 4)
                 [(α1 ) · · · (α1 + N1 − 1)] [(α0 ) · · · (α0 + N0 − 1)]
            =                                                                                         (3.85)
                                   (α) · · · (α + N − 1)

Show how this reduces to Equation 3.80 by using the fact that, for integers, (α − 1)! = Γ(α).
90                                                            Chapter 3. Generative models for discrete data


Exercise 3.3 Posterior predictive for Beta-Binomial model
Recall from Equation 3.32 that the posterior predictive for the Beta-Binomial is given by

      p(x|n, D)      =      Bb(x|α0 , α1 , n)                                                        (3.86)
                                                         
                            B(x + α1 , n − x + α0 )    n
                     =                                                                                 (3.87)
                                 B(α1 , α0 )           x

Prove that this reduces to
                               α1
      p(x̃ = 1|D) =                                                                                    (3.88)
                         α0   + α1

when n = 1 (and hence x ∈ {0, 1}). i.e., show that

                                         α1
      Bb(1|α1 , α0 , 1)      =                                                                       (3.89)
                                   α1   + α0
Hint: use the fact that
      Γ(α0 + α1 + 1) = (α0 + α1 + 1)Γ(α0 + α1 )                                                        (3.90)

Exercise 3.4 Beta updating from censored likelihood
(Source: Gelman.) Suppose we toss a coin n = 5 times. Let X be the number of heads. We observe that
there are fewer than 3 heads, but we don’t know exactly how many. Let the prior probability of heads be
p(θ) = Beta(θ|1, 1). Compute the posterior p(θ|X < 3) up to normalization constants, i.e., derive an
expression proportional to p(θ, X < 3). Hint: the answer is a mixture distribution.
Exercise 3.5 Uninformative prior for log-odds ratio
Let
                                 θ
      φ = logit(θ) = log                                                                               (3.91)
                                1−θ
Show that if p(φ) ∝ 1, then p(θ) ∝ Beta(θ|0, 0). Hint: use the change of variables formula.
Exercise 3.6 MLE for the Poisson distribution
                                              x
The Poisson pmf is deﬁned as Poi(x|λ) = e−λ λx! , for x ∈ {0, 1, 2, . . .} where λ > 0 is the rate
parameter. Derive the MLE.
Exercise 3.7 Bayesian analysis of the Poisson distribution
In Exercise 3.6, we deﬁned the Poisson distribution with rate λ and derived its MLE. Here we perform a
conjugate Bayesian analysis.

a. Derive the posterior p(λ|D) assuming a conjugate prior p(λ) = Ga(λ|a, b) ∝ λa−1 e−λb . Hint: the
   posterior is also a Gamma distribution.
b. What does the posterior mean tend to as a → 0 and b → 0? (Recall that the mean of a Ga(a, b)
   distribution is a/b.)
Exercise 3.8 MLE for the uniform distribution
(Source: Kaelbling.) Consider a uniform distribution centered on 0 with width 2a. The density function is
given by
                1
      p(x) =      I(x ∈ [−a, a])                                                                       (3.92)
               2a
3.5. Naive Bayes classiﬁers                                                                              91


a. Given a data set x1 , . . . , xn , what is the maximum likelihood estimate of a (call it â)?
b. What probability would the model assign to a new data point xn+1 using â?
c. Do you see any problem with the above approach? Brieﬂy suggest (in words) a better approach.

Exercise 3.9 Bayesian analysis of the uniform distribution
Consider the uniform distribution Unif(0, θ). The maximum likelihood estimate is θ̂ = max(D), as we
saw in Exercise 3.8, but this is unsuitable for predicting future data since it puts zero probability mass
outside the training data. In this exercise, we will perform a Bayesian analysis of the uniform distribution
(following (Minka 2001a)). The conjugate prior is the Pareto distribution, p(θ) = Pareto(θ|b, K), deﬁned in
Section 2.4.6. Given a Pareto prior, the joint distribution of θ and D = (x1 , . . . , xN ) is

                 KbK
   p(D, θ) =             I(θ ≥ max(D))                                                                (3.93)
               θN +K+1
Let m = max(D). The evidence (the probability that all N samples came from the same uniform
distribution) is
                  ∞
                        KbK
    p(D) =                    dθ                                                      (3.94)
                  m θ
                       N +K+1
                       K
                    (N +K)bN
                                 if m ≤ b
            =           KbK                                                           (3.95)
                    (N +K)mN +K
                                 if m > b

Derive the posterior p(θ|D), and show that if can be expressed as a Pareto distribution.
Exercise 3.10 Taxicab (tramcar) problem
Suppose you arrive in a new city and see a taxi numbered 100. How many taxis are there in this city? Let
us assume taxis are numbered sequentially as integers starting from 0, up to some unknown upper bound
θ. (We number taxis from 0 for simplicity; we can also count from 1 without changing the analysis.) Hence
the likelihood function is p(x) = U (0, θ), the uniform distribution. The goal is to estimate θ. We will use
the Bayesian analysis from Exercise 3.9.

a. Suppose we see one taxi numbered 100, so D = {100}, m = 100, N = 1. Using an (improper)
   non-informative prior on θ of the form p(θ) = P a(θ|0, 0) ∝ 1/θ, what is the posterior p(θ|D)?
b. Compute the posterior mean, mode and median number of taxis in the city, if such quantities exist.
c. Rather than trying to compute a point estimate of the number of taxis, we can compute the predictive
   density over the next taxicab number using
                      
      p(D |D, α) = p(D |θ)p(θ|D, α)dθ = p(D |β)                                               (3.96)

   where α = (b, K) are the hyper-parameters, β = (c, N + K) are the updated hyper-parameters. Now
   consider the case D = {m}, and D = {x}. Using Equation 3.95, write down an expression for
       p(x|D, α)                                                                                      (3.97)
   As above, use a non-informative prior b = K = 0.
d. Use the predictive density formula to compute the probability that the next taxi you will see (say,
   the next day) has number 100, 50 or 150, i.e., compute p(x = 100|D, α), p(x = 50|D, α), p(x =
   150|D, α).
e. Brieﬂy describe (1-2 sentences) some ways we might make the model more accurate at prediction.
92                                                         Chapter 3. Generative models for discrete data


Exercise 3.11 Bayesian analysis of the exponential distribution
A lifetime X of a machine is modeled by an exponential distribution with unknown parameter θ. The
likelihood is p(x|θ) = θe−θx for x ≥ 0, θ > 0.
                                                N
 a. Show that the MLE is θ̂ = 1/x, where x = N1  i=1 xi .
b. Suppose we observe X1 = 5, X2 = 6, X3 = 4 (the lifetimes (in years) of 3 different iid machines).
   What is the MLE given this data?
c. Assume that an expert believes θ should have a prior distribution that is also exponential
        p(θ) = Expon(θ|λ)                                                                                  (3.98)
     Choose the prior parameter, call it λ̂, such that E [θ] = 1/3. Hint: recall that the Gamma distribution
     has the form
        Ga(θ|a, b)    ∝     θa−1 e−θb                                                                      (3.99)
     and its mean is a/b.
d. What is the posterior, p(θ|D, λ̂)?
e. Is the exponential prior conjugate to the exponential likelihood?
                                          
f. What is the posterior mean, E θ|D, λ̂ ?
g. Explain why the MLE and posterior mean differ. Which is more reasonable in this example?
Exercise 3.12 MAP estimation for the Bernoulli with non-conjugate priors
(Source: Jaakkola.) In the book, we discussed Bayesian inference of a Bernoulli rate parameter with the
prior p(θ) = Beta(θ|α, β). We know that, with this prior, the MAP estimate is given by
             N1 + α − 1
     θ̂ =                                                                                                 (3.100)
            N +α+β−2
where N1 is the number of heads, N0 is the number of tails, and N = N0 + N1 is the total number of
trials.

a. Now consider the following prior, that believes the coin is fair, or is slightly biased towards tails:
                 ⎧
                 ⎨ 0.5 if θ = 0.5
     p(θ) =          0.5 if θ = 0.4                                                                       (3.101)
                 ⎩
                     0     otherwise
   Derive the MAP estimate under this prior as a function of N1 and N .
b. Suppose the true parameter is θ = 0.41. Which prior leads to a better estimate when N is small?
   Which prior leads to a better estimate when N is large?

Exercise 3.13 Posterior predictive distribution for a batch of data with the dirichlet-multinomial model
In Equation 3.51, we gave the the posterior predictive distribution for a single multinomial trial using a
dirichlet prior. Now consider predicting a batch of new data, D̃ = (X1 , . . . , Xm ), consisting of m single
multinomial trials (think of predicting the next m words in a sentence, assuming they are drawn iid).
Derive an expression for

     p(D̃|D, α)                                                                                           (3.102)
3.5. Naive Bayes classiﬁers                                                                            93


Your answer should be a function of α, and the old and new counts (sufficient statistics), deﬁned as

    Nkold    =            I(xi = k)                                                                (3.103)
                   i∈D

   Nknew     =            I(xi = k)                                                                (3.104)
                   i∈D̃

Hint: recall that, for a vector of counts, N1:K , the marginal likelihood (evidence) is given by
                   Γ(α)            Γ(Nk + αk )
   p(D|α) =                                                                                        (3.105)
                 Γ(N + α)            Γ(αk )
                               k
                                  
where α =      k   αk and N =          k   Nk .
Exercise 3.14 Posterior predictive for Dirichlet-multinomial
(Source: Koller.).
a. Suppose we compute the empirical distribution over letters of the Roman alphabet plus the space
   character (a distribution over 27 values) from 2000 samples. Suppose we see the letter “e” 260 times.
   What is p(x2001 = e|D), if we assume θ ∼ Dir(α1 , . . . , α27 ), where αk = 10 for all k?
b. Suppose, in the 2000 samples, we saw “e” 260 times, “a” 100 times, and “p” 87 times. What is
   p(x2001 = p, x2002 = a|D), if we assume θ ∼ Dir(α1 , . . . , α27 ), where αk = 10 for all k? Show
   your work.
Exercise 3.15 Setting the beta hyper-parameters
Suppose θ ∼ β(α1 , α2 ) and we believe that E [θ] = m and var [θ] = v. Using Equation 2.62, solve for
α1 and α2 in terms of m and v. What values do you get if m = 0.7 and v = 0.22 ?
Exercise 3.16 Setting the beta hyper-parameters II
(Source: Draper.) Suppose θ ∼ β(α1 , α2 ) and we believe that E [θ] = m and p( < θ < u) = 0.95.
Write a program that can solve for α1 and α2 in terms of m,  and u. Hint: write α2 as a function of α1
and m, so the pdf only has one unknown; then write down the probability mass contained in the interval
as an integral, and minimize its squared discrepancy from 0.95. What values do you get if m = 0.15,
 = 0.05 and u = 0.3? What is the equivalent sample size of this prior?
Exercise 3.17 Marginal likelihood for beta-binomial under uniform prior
Suppose we toss a coin N times and observe N1 heads. Let N1 ∼ Bin(N, θ) and θ ∼ Beta(1, 1). Show
that the marginal likelihood is p(N1 |N ) = 1/(N + 1). Hint: Γ(x + 1) = x! if x is an integer.
Exercise 3.18 Bayes factor for coin tossing
Suppose we toss a coin N = 10 times and observe N1 = 9 heads. Let the null hypothesis be that the
coin is fair, and the alternative be that the coin can have any bias, so p(θ) = Unif(0, 1). Derive the
Bayes factor BF1,0 in favor of the biased coin hypothesis. What if N = 100 and N1 = 90? Hint: see
Exercise 3.17.
Exercise 3.19 Irrelevant features with naive Bayes
(Source: Jaakkola.) Let xiw = 1 if word w occurs in document i and xiw = 0 otherwise. Let θcw be the
estimated probability that word w occurs in documents of class c. Then the log-likelihood that document
94                                                                Chapter 3. Generative models for discrete data


x belongs to class c is
                                     W
                                            xiw
     log p(xi |c, θ)    =      log         θcw  (1 − θcw )1−xiw                                           (3.106)
                                     w=1
                                W
                        =            xiw log θcw + (1 − xiw ) log(1 − θcw )                               (3.107)
                               w=1
                                W
                                                 θcw
                        =            xiw log           +        log(1 − θcw )                             (3.108)
                               w=1
                                               1 − θcw      w

where W is the number of words in the vocabulary. We can write this more succintly as

     log p(xi |c, θ)    =      φ(xi )T β c                                                                (3.109)
where xi = (xi1 , . . . , xiW ) is a bit vector, φ(xi ) = (xi , 1), and
                    θc1                   θcW
     β c = (log           , . . . , log         ,        log(1 − θcw ))T                                  (3.110)
                  1 − θc1               1 − θcW      w

We see that this is a linear classiﬁer, since the class-conditional density is a linear function (an inner
product) of the parameters β c .

a. Assuming p(C = 1) = p(C = 2) = 0.5, write down an expression for the log posterior odds ratio,
   log2 p(c=1|x i)
        p(c=2|xi )
                   , in terms of the features φ(xi ) and the parameters β 1 and β 2 .
b. Intuitively, words that occur in both classes are not very “discriminative”, and therefore should not
   affect our beliefs about the class label. Consider a particular word w. State the conditions on θ1,w and
   θ2,w (or equivalently the conditions on β1,w , β2,w ) under which the presence or absence of w in a
   test document will have no effect on the class posterior (such a word will be ignored by the classiﬁer).
   Hint: using your previous result, ﬁgure out when the posterior odds ratio is 0.5/0.5.
c. The posterior mean estimate of θ, using a Beta(1,1) prior, is given by
                  
              1 + i∈c xiw
      θ̂cw =                                                                                               (3.111)
                 2 + nc
     where the sum is over the nc documents in class c. Consider a particular word w, and suppose it
     always occurs in every document (regardless of class). Let there be n1 documents of class 1 and n2 be
     the number of documents in class 2, where n1 = n2 (since e.g., we get much more non-spam than
     spam; this is an example of class imbalance). If we use the above estimate for θcw , will word w be
     ignored by our classiﬁer? Explain why or why not.
d. What other ways can you think of which encourage “irrelevant” words to be ignored?

Exercise 3.20 Class conditional densities for binary data
Consider a generative classiﬁer for C classes with class conditional density p(x|y) and uniform class prior
p(y). Suppose all the D features are binary, xj ∈ {0, 1}. If we assume all the features are conditionally
independent (the naive Bayes assumption), we can write
                       D
     p(x|y = c) =            Ber(xj |θjc )                                                                (3.112)
                       j=1

This requires DC parameters.
3.5. Naive Bayes classiﬁers                                                                                   95


a. Now consider a different model, which we will call the “full” model, in which all the features are fully
   dependent (i.e., we make no factorization assumptions). How might we represent p(x|y = c) in this
   case? How many parameters are needed to represent p(x|y = c)?
b. Assume the number of features D is ﬁxed. Let there be N training cases. If the sample size N is very
   small, which model (naive Bayes or full) is likely to give lower test set error, and why?
c. If the sample size N is very large, which model (naive Bayes or full) is likely to give lower test set error,
   and why?
d. What is the computational complexity of ﬁtting the full and naive Bayes models as a function of N
   and D? Use big-Oh notation. (Fitting the model here means computing the MLE or MAP parameter
   estimates. You may assume you can convert a D-bit vector to an array index in O(D) time.)
e. What is the computational complexity of applying the full and naive Bayes models at test time to a
   single test case?
f. Suppose the test case has missing data. Let xv be the visible features of size v, and xh be the hidden
   (missing) features of size h, where v + h = D. What is the computational complexity of computing
   p(y|xv , θ̂) for the full and naive Bayes models, as a function of v and h?

Exercise 3.21 Mutual information for naive Bayes classiﬁers with binary features
Derive Equation 3.76.
Exercise 3.22 Fitting a naive bayes spam ﬁlter by hand
(Source: Daphne Koller.). Consider a Naive Bayes model (multivariate Bernoulli version) for spam classiﬁca-
tion with the vocabulary V="secret", "offer", "low", "price", "valued", "customer", "today", "dollar", "million",
"sports", "is", "for", "play", "healthy", "pizza". We have the following example spam messages "million dollar
offer", "secret offer today", "secret is secret" and normal messages, "low price for valued customer", "play
secret sports today", "sports is healthy", "low price pizza". Give the MLEs for the following parameters:
θspam , θsecret|spam , θsecret|non-spam , θsports|non-spam , θdollar|spam .
4       Gaussian models



 4.1    Introduction
        In this chapter, we discuss the multivariate Gaussian or multivariate normal (MVN), which
        is the most widely used joint probability density function for continuous variables. It will form
        the basis for many of the models we will encounter in later chapters.
           Unfortunately, the level of mathematics in this chapter is higher than in many other chapters.
        In particular, we rely heavily on linear algebra and matrix calculus. This is the price one must
        pay in order to deal with high-dimensional data. Beginners may choose to skip sections marked
        with a *. In addition, since there are so many equations in this chapter, we have put a box
        around those that are particularly important.

4.1.1   Notation
        Let us brieﬂy say a few words about notation. We denote vectors by boldface lower case letters,
        such as x. We denote matrices by boldface upper case letters, such as X. We denote entries in
        a matrix by non-bold upper case letters, such as Xij .
          All vectors are assumed to be column vectors unless noted otherwise. We use [x1 , . . . , xD ] to
        denote a column vector created by stacking D scalars. Similarly, if we write x = [x1 , . . . , xD ],
        where the left hand side is a tall column vector, we mean to stack the xi along the rows; this is
        usually written as x = (xT1 , . . . , xTD )T , but that is rather ugly. If we write X = [x1 , . . . , xD ],
        where the left hand side is a matrix, we mean to stack the xi along the columns, creating a
        matrix.

4.1.2   Basics
        Recall from Section 2.5.2 that the pdf for an MVN in D dimensions is deﬁned by the following:


                                                                             
                                        1               1
               N (x|μ, Σ)                         exp − (x − μ)T Σ−1 (x − μ)                                  (4.1)
                                (2π)D/2 |Σ|1/2          2
98                                                                          Chapter 4. Gaussian models


                                                         u2
                                                                u1




                                                     μ




                             x2
                                                                     λ1/2
                                                                      1
                                   λ1/2
                                    2




                                                    x1



Figure 4.1 Visualization of a 2 dimensional Gaussian density. The major and minor axes of the ellipse
are deﬁned by the ﬁrst two eigenvectors of the covariance matrix, namely u1 and u2 . Based on Figure 2.7
of (Bishop 2006a).



   The expression inside the exponent is the Mahalanobis distance between a data vector x
and the mean vector μ, We can gain a better understanding of this quantity by performing an
eigendecomposition of Σ. That is, we write Σ = UΛUT , where U is an orthonormal matrix
of eigenvectors satsifying UT U = I, and Λ is a diagonal matrix of eigenvalues.
   Using the eigendecomposition, we have that

                                               D
                                                   1
     Σ−1 = U−T Λ−1 U−1 = UΛ−1 UT =                     ui uTi                                      (4.2)
                                               i=1
                                                   λ i

where ui is the i’th column of U, containing the i’th eigenvector. Hence we can rewrite the
Mahalanobis distance as follows:
                                                        
                                           D
                                               1
           T −1
  (x − μ) Σ (x − μ) = (x − μ)          T
                                                 ui ui (x − μ)
                                                      T
                                                                                       (4.3)
                                               λ
                                           i=1 i
                                   D
                                       1                         D
                                                                    yi2
                               =         (x − μ) ui ui (x − μ) =
                                                T    T
                                                                                                   (4.4)
                                      λ
                                   i=1 i
                                                                    λ
                                                                 i=1 i

where yi  uTi (x − μ). Recall that the equation for an ellipse in 2d is
     y12  y2
         + 2 =1                                                                                    (4.5)
     λ1   λ2
Hence we see that the contours of equal probability density of a Gaussian lie along ellipses.
This is illustrated in Figure 4.1. The eigenvectors determine the orientation of the ellipse, and
the eigenvalues determine how elogonated it is.
   In general, we see that the Mahalanobis distance corresponds to Euclidean distance in a
transformed coordinate system, where we shift by μ and rotate by U.
          4.1. Introduction                                                                              99


 4.1.3    MLE for an MVN
          We now describe one way to estimate the parameters of an MVN, using MLE. In later sections,
          we will discuss Bayesian inference for the parameters, which can mitigate overﬁtting, and can
          provide a measure of conﬁdence in our estimates.
          Theorem 4.1.1 (MLE for a Gaussian). If we have N iid samples xi ∼ N (μ, Σ), then the MLE for
          the parameters is given by

                          1 
                             N
             μ̂mle   =          xi  x                                                                (4.6)
                          N i=1

                          1                       1 
                             N                        N
             Σ̂mle   =          (xi − x)(xi − x)T = (    xi xTi ) − x xT                               (4.7)
                          N i=1                    N i=1

          That is, the MLE is just the empirical mean and empirical covariance. In the univariate case, we
          get the following familiar results:
                         1 
                μ̂ =           xi = x                                                                 (4.8)
                        N i
                                                       
                         1                    1 
              σ̂ 2 =           (xi − x)2 =          x2 − (x)2                                         (4.9)
                        N i                   N i i

4.1.3.1   Proof *
          To prove this result, we will need several results from matrix algebra, which we summarize
          below. In the equations, a and b are vectors, and A and B are matrices. Also,    the notation
          tr(A) refers to the trace of a matrix, which is the sum of its diagonals: tr(A) = i Aii .



                             ∂(bT a)
                                      =b
                                ∂a
                           ∂(aT Aa)
                                      = (A + AT )a
                               ∂a
                          ∂                                                                           (4.10)
                             tr(BA) = BT
                         ∂A
                           ∂
                              log |A| = A−T  (A−1 )T
                          ∂A
                 tr(ABC) = tr(CAB) = tr(BCA)


             The last equation is called the cyclic permutation property of the trace operator. Using this,
          we can derive the widely used trace trick, which reorders the scalar inner product xT Ax as
          follows
             xT Ax = tr(xT Ax) = tr(xxT A) = tr(AxxT )                                                (4.11)
100                                                                       Chapter 4. Gaussian models


Proof. We can now begin with the proof. The log-likelihood is

                                                          1
                                                            N
                                              N
      (μ, Σ) = log p(D|μ, Σ)          =         log |Λ| −       (xi − μ)T Λ(xi − μ)            (4.12)
                                              2           2 i=1

where Λ = Σ−1 is the precision matrix.
  Using the substitution yi = xi − μ and the chain rule of calculus, we have
       ∂                                         ∂ T −1 ∂yi
         (xi − μ)T Σ−1 (xi − μ)           =        y Σ yi                                      (4.13)
      ∂μ                                        ∂yi i     ∂μ
                                          =     −1(Σ−1 + Σ−T )yi                               (4.14)
Hence
                                1                         
                                   N                        N
       ∂
         (μ, Σ)         =   −         −2Σ−1 (xi − μ) = Σ−1     (xi − μ) = 0                    (4.15)
      ∂μ                        2 i=1                      i=1

                             1 
                                N
                  μ̂    =          xi = x                                                      (4.16)
                             N i=1

So the MLE of μ is just the empirical mean.
  Now we can use the trace-trick to rewrite the log-likelihood for Λ as follows:
              N             1
    (Λ) =        log |Λ| −        tr[(xi − μ)(xi − μ)T Λ]                                      (4.17)
               2            2 i
                       N          1
              =          log |Λ| − tr [Sμ Λ]                                                   (4.18)
                       2          2
                                                                                               (4.19)
where
            
            N
     Sμ          (xi − μ)(xi − μ)T                                                            (4.20)
            i=1

is the scatter matrix centered on μ. Taking derivatives of this expression with respect to Λ
yields
      ∂ (Λ)             N −T    1
                  =       Λ − STμ = 0                                                          (4.21)
       ∂Λ               2       2
                                  1
       Λ−T        =     Λ−1 = Σ = Sμ                                                           (4.22)
                                  N
so
            1 
               N
     Σ̂ =         (xi − μ)(xi − μ)T                                                            (4.23)
            N i=1

which is just the empirical covariance matrix centered on μ. If we plug-in the MLE μ = x
(since both parameters must be simultaneously optimized), we get the standard equation for the
MLE of a covariance matrix.
        4.2. Gaussian discriminant analysis                                                               101


4.1.4   Maximum entropy derivation of the Gaussian *
        In this section, we show that the multivariate Gaussian is the distribution with maximum entropy
        subject to having a speciﬁed mean and covariance (see also Section 9.2.6). This is one reason the
        Gaussian is so widely used: the ﬁrst two moments are usually all that we can reliably estimate
        from data, so we want a distribution that captures these properties, but otherwise makes as few
        addtional assumptions as possible.
           To simplify notation, we will assume the mean is zero. The pdf has the form
                    1      1
           p(x) =     exp(− xT Σ−1 x)                                                                  (4.24)
                    Z      2
        If we deﬁne fij (x) = xi xj and λij = 12 (Σ−1 )ij , for i, j ∈ {1, . . . , D}, we see that this is in
        the same form as Equation 9.74. The (differential) entropy of this distribution (using log base e)
        is given by
                            1              
           h(N (μ, Σ)) =      ln (2πe)D |Σ|                                                            (4.25)
                            2
        We now show the MVN has maximum entropy amongst all distributions with a speciﬁed co-
        variance Σ.
                                                         
        Theorem 4.1.2. Let q(x) be any density satisfying q(x)xi xj = Σij . Let p = N (0, Σ). Then
        h(q) ≤ h(p).
        Proof. (From (Cover and Thomas 1991, p234).) We have
                                                 q(x)
           0   ≤     KL (q||p) =      q(x) log        dx                                               (4.26)
                                                 p(x)

               =     −h(q) −       q(x) log p(x)dx                                                     (4.27)

               =∗    −h(q) −       p(x) log p(x)dx                                                     (4.28)

               =     −h(q) + h(p)                                                                      (4.29)
        where the key step in Equation 4.28 (marked with a *) follows since q and p yield the same
        moments for the quadratic form encoded by log p(x).

 4.2    Gaussian discriminant analysis
        One important application of MVNs is to deﬁne the the class conditional densities in a generative
        classiﬁer, i.e.,

           p(x|y = c, θ) = N (x|μc , Σc )                                                              (4.30)
        The resulting technique is called (Gaussian) discriminant analysis or GDA (even though it is a
        generative, not discriminative, classiﬁer — see Section 8.6 for more on this distinction). If Σc is
        diagonal, this is equivalent to naive Bayes.
        102                                                                                                       Chapter 4. Gaussian models


                                             red = female, blue=male                                   red = female, blue=male
                            280                                                           280

                            260                                                           260

                            240                                                           240

                            220                                                           220

                            200                                                           200




                   weight




                                                                                 weight
                            180                                                           180

                            160                                                           160

                            140                                                           140

                            120                                                           120

                            100                                                           100

                             80                                                            80
                               55       60      65            70       75   80               55   60      65            70       75   80
                                                     height                                                    height



                                                        (a)                                                       (b)

        Figure 4.2 (a) Height/weight data. (b) Visualization of 2d Gaussians ﬁt to each class. 95% of the probability
        mass is inside the ellipse. Figure generated by gaussHeightWeight.



          We can classify a feature vector using the following decision rule, derived from Equation 2.13:

              ŷ(x) = argmax [log p(y = c|π) + log p(x|θ c )]                                                                              (4.31)
                                    c

        When we compute the probability of x under each class conditional density, we are measuring
        the distance from x to the center of each class, μc , using Mahalanobis distance. This can be
        thought of as a nearest centroids classiﬁer.
           As an example, Figure 4.2 shows two Gaussian class-conditional densities in 2d, representing
        the height and weight of men and women. We can see that the features are correlated, as is
        to be expected (tall people tend to weigh more). The ellipses for each class contain 95% of the
        probability mass. If we have a uniform prior over classes, we can classify a new test vector as
        follows:

              ŷ(x) = argmin(x − μc )T Σ−1
                                        c (x − μc )                                                                                        (4.32)
                                    c


4.2.1   Quadratic discriminant analysis (QDA)
        The posterior over class labels is given by Equation 2.13. We can gain further insight into this
        model by plugging in the deﬁnition of the Gaussian density, as follows:
                                                 1                                 
                                    πc |2πΣc |− 2 exp − 12 (x − μc )T Σ−1
                                                                        c (x − μc )
           p(y = c|x, θ) =                                
                                                  − 12 exp − 1 (x − μ )T Σ−1 (x − μ )
                                                                                                  (4.33)
                                   c πc |2πΣc |
                                              
                                                             2       c   c          c

        Thresholding this results in a quadratic function of x. The result is known as quadratic
        discriminant analysis (QDA). Figure 4.3 gives some examples of what the decision boundaries
        look like in 2D.
        4.2. Gaussian discriminant analysis                                                                                                     103


                                   Parabolic Boundary                                                 Some Linear, Some Quadratic
                                                                                  8
           2

                                                                                  6



                                                                                  4
           0


                                                                                  2



          −2                                                                      0



                                                                                 −2


                    −2                      0                     2                       −2           0            2             4       6

                                          (a)                                                                     (b)

        Figure 4.3 Quadratic decision boundaries in 2D for the 2 and 3 class case.                                           Figure generated by
        discrimAnalysisDboundariesDemo.

                                   T=100                              T=1                 T=0.1                             T=0.01
                         0.4                             1                       1                            1

                         0.3

                         0.2                            0.5                     0.5                         0.5

                         0.1

                          0                              0                       0                            0
                               1      2     3                 1        2    3         1    2      3                     1     2       3


        Figure 4.4 Softmax distribution S(η/T ), where η = (3, 0, 1), at different temperatures T . When the
        temperature is high (left), the distribution is uniform, whereas when the temperature is low (right), the
        distribution is “spiky”, with all its mass on the largest element. Figure generated by softmaxDemo2.



4.2.2   Linear discriminant analysis (LDA)
        We now consider a special case in which the covariance matrices are tied or shared across
        classes, Σc = Σ. In this case, we can simplify Equation 4.33 as follows:
                                                                               
                                                     1             1
           p(y = c|x, θ) ∝ πc exp μTc Σ−1 x − xT Σ−1 x − μTc Σ−1 μc                         (4.34)
                                                     2             2
                                                                      
                                                 1                               1
                           = exp μTc Σ−1 x − μTc Σ−1 μc + log πc exp[− xT Σ−1 x]            (4.35)
                                                 2                               2

        Since the quadratic term xT Σ−1 x is independent of c, it will cancel out in the numerator and
        denominator. If we deﬁne
                            1
               γc   =      − μTc Σ−1 μc + log πc                                                                                              (4.36)
                            2
           βc       =      Σ−1 μc                                                                                                             (4.37)
        104                                                                                 Chapter 4. Gaussian models


        then we can write
                                         T
                                     eβc x+γc
              p(y = c|x, θ) =               T        = S(η)c                                                           (4.38)
                                    c   eβc x+γc
        where η = [β T1 x + γ1 , . . . , β TC x + γC ], and S is the softmax function, deﬁned as follows:
                          e ηc
          S(η)c = C                                                                                   (4.39)
                                ηc
                        c =1 e
        The softmax function is so-called since it acts a bit like the max function. To see this, let us
        divide each ηc by a constant T called the temperature. Then as T → 0, we ﬁnd
                       
                           1.0 if c = argmaxc ηc
           S(η/T )c =                                                                              (4.40)
                           0.0 otherwise
        In other words, at low temperatures, the distribution spends essentially all of its time in the
        most probable state, whereas at high temperatures, it visits all states uniformly. See Figure 4.4
        for an illustration. Note that this terminology comes from the area of statistical physics, where
        it is common to use the Boltzmann distribution, which has the same form as the softmax
        function.
           An interesting property of Equation 4.38 is that, if we take logs, we end up with a linear
        function of x. (The reason it is linear is because the xT Σ−1 x cancels from the numerator
        and denominator.) Thus the decision boundary between any two classes, say c and c , will be
        a straight line. Hence this technique is called linear discriminant analysis or LDA. 1 We can
        derive the form of this line as follows:
              p(y = c|x, θ) = p(y = c |x, θ)                                                                            (4.41)
                 β Tc x + γc = β Tc x + γc                                                                            (4.42)
              xT (β c − β) = γc − γc                                                                                  (4.43)
        See Figure 4.5 for some examples.
           An alternative to ﬁtting an LDA model and then deriving the class posterior is to directly
        ﬁt p(y|x, W) = Cat(y|Wx) for some C × D weight matrix W. This is called multi-class
        logistic regression, or multinomial logistic regression.2 We will discuss this model in detail
        in Section 8.2. The difference between the two approaches is explained in Section 8.6.

4.2.3   Two-class LDA
        To gain further insight into the meaning of these equations, let us consider the binary case. In
        this case, the posterior is given by
                                                 T
                                             eβ1 x+γ1
              p(y = 1|x, θ)     =      β T x+γ           T                                                              (4.44)
                                      e 1      1 + eβ 0 x+γ0

                                                    1                                                 
                                =           (β   −β   ) T x+(γ −γ ) = sigm (β 1 − β 0 ) x + (γ1 − γ0 )
                                                                                       T
                                                                                                                        (4.45)
                                      1+e      0    1         0  1


        1. The abbreviation “LDA”, could either stand for “linear discriminant analysis” or “latent Dirichlet allocation” (Sec-
        tion 27.3). We hope the meaning is clear from text.
        2. In the language modeling community, this model is called a maximum entropy model, for reasons explained in
        Section 9.2.6.
4.2. Gaussian discriminant analysis                                                                              105


                          Linear Boundary                                     All Linear Boundaries



                                                               6

   2

                                                               4



   0                                                           2




                                                               0
  −2


                                                              −2
               −2                    0               2         −2       0           2                 4    6

                              (a)                                                    (b)

Figure 4.5 Linear decision boundaries in 2D for the 2 and 3 class case.                         Figure generated by
discrimAnalysisDboundariesDemo.




                     Figure 4.6       Geometry of LDA in the 2 class case where Σ1 = Σ2 = I.



where sigm(η) refers to the sigmoid function (Equation 1.10).
  Now
                         1            1
   γ1 − γ0          =   − μT1 Σ−1 μ1 + μT0 Σ−1 μ0 + log(π1 /π0 )                                               (4.46)
                         2            2
                         1          T −1
                    =   − (μ1 − μ0 ) Σ (μ1 + μ0 ) + log(π1 /π0 )                                               (4.47)
                         2
So if we deﬁne

       w   =        β 1 − β 0 = Σ−1 (μ1 − μ0 )                                                                 (4.48)
                    1                               log(π1 /π0 )
   x0      =          (μ + μ0 ) − (μ1 − μ0 )                                                                   (4.49)
                    2 1                      (μ1 − μ0 )T Σ−1 (μ1 − μ0 )
        106                                                                       Chapter 4. Gaussian models


        then we have wT x0 = −(γ1 − γ0 ), and hence
              p(y = 1|x, θ)   =    sigm(wT (x − x0 ))                                                      (4.50)
        (This is closely related to logistic regression, which we will discuss in Section 8.2.) So the ﬁnal
        decision rule is as follows: shift x by x0 , project onto the line w, and see if the result is positive
        or negative.
           If Σ = σ 2 I, then w is in the direction of μ1 − μ0 . So we classify the point based on whether
        its projection is closer to μ0 or μ1 . This is illustrated in Figure 4.6. Furthemore, if π1 = π0 , then
        x0 = 12 (μ1 + μ0 ), which is half way between the means. If we make π1 > π0 , then x0 gets
        closer to μ0 , so more of the line belongs to class 1 a priori. Conversely if π1 < π0 , the boundary
        shifts right. Thus we see that the class prior, πc , just changes the decision threshold, and not
        the overall geometry, as we claimed above. (A similar argument applies in the multi-class case.)
           The magnitude of w determines the steepness of the logistic function, and depends on
        how well-separated the means are, relative to the variance. In psychology and signal detection
        theory, it is common to deﬁne the discriminability of a signal from the background noise using
        a quantity called d-prime:
                  μ 1 − μ0
            d                                                                                            (4.51)
                      σ
        where μ1 is the mean of the signal and μ0 is the mean of the noise, and σ is the standard
        deviation of the noise. If d is large, the signal will be easier to discriminate from the noise.

4.2.4   MLE for discriminant analysis
        We now discuss how to ﬁt a discriminant analysis model. The simplest way is to use maximum
        likelihood. The log-likelihood function is as follows:
                               N C                             ⎡                     ⎤
                                                            C   
            log p(D|θ) =                I(yi = c) log πc +       ⎣   log N (x|μc , Σc )⎦       (4.52)
                                  i=1 c=1                       c=1   i:yi =c

        We see that this factorizes into a term for π, and C terms for each μc and Σc . Hence we
        can estimate these parameters separately. For the class prior, we have π̂c = NNc , as with naive
        Bayes. For the class-conditional densities, we just partition the data based on its class label, and
        compute the MLE for each Gaussian:
                  1                      1 
           μ̂c =            xi , Σ̂c =             (xi − μ̂c )(xi − μ̂c )T                             (4.53)
                 Nc i:y =c               Nc i:y =c
                         i                       i


        See discrimAnalysisFit for a Matlab implementation. Once the model has been ﬁt, you can
        make predictions using discrimAnalysisPredict, which uses a plug-in approximation.

4.2.5   Strategies for preventing overﬁtting
        The speed and simplicity of the MLE method is one of its greatest appeals. However, the MLE
        can badly overﬁt in high dimensions. In particular, the MLE for a full covariance matrix is
        singular if Nc < D. And even when Nc > D, the MLE can be ill-conditioned, meaning it is
        close to singular. There are several possible solutions to this problem:
        4.2. Gaussian discriminant analysis                                                          107


        • Use a diagonal covariance matrix for each class, which assumes the features are conditionally
          independent; this is equivalent to using a naive Bayes classiﬁer (Section 3.5).

        • Use a full covariance matrix, but force it to be the same for all classes, Σc = Σ. This is an
          example of parameter tying or parameter sharing, and is equivalent to LDA (Section 4.2.2).

        • Use a diagonal covariance matrix and forced it to be shared. This is called diagonal covariance
          LDA, and is discussed in Section 4.2.7.

        • Use a full covariance matrix, but impose a prior and then integrate it out. If we use a
          conjugate prior, this can be done in closed form, using the results from Section 4.6.3; this
          is analogous to the “Bayesian naive Bayes” method in Section 3.5.1.2. See (Minka 2000f) for
          details.
        • Fit a full or diagonal covariance matrix by MAP estimation. We discuss two different kinds
          of prior below.

        • Project the data into a low dimensional subspace and ﬁt the Gaussians there. See Sec-
          tion 8.6.3.3 for a way to ﬁnd the best (most discriminative) linear projection.

          We discuss some of these options below.

4.2.6   Regularized LDA *
        Suppose we tie the covariance matrices, so Σc = Σ, as in LDA, and furthermore we perform
        MAP estimation of Σ using an inverse Wishart prior of the form IW(diag(Σ̂mle ), ν0 ) (see
        Section 4.5.1). Then we have
           Σ̂ = λdiag(Σ̂mle ) + (1 − λ)Σ̂mle                                                       (4.54)

        where λ controls the amount of regularization, which is related to the strength of the prior, ν0
        (see Section 4.6.2.1 for details). This technique is known as regularized discriminant analysis
        or RDA (Hastie et al. 2009, p656).
                                                                                    −1              −1
           When we evaluate the class conditional densities, we need to compute Σ̂ , and hence Σ̂mle ,
        which is impossible to compute if D > N . However, we can use the SVD of X (Section 12.2.3)
        to get around this, as we show below. (Note that this trick cannot be applied to QDA, which is
        a nonlinear function of x.)
           Let X = UDVT be the SVD of the design matrix, where V is D × N , U is an N × N
        orthogonal matrix, and D is a diagonal matrix of size N . Furthermore, deﬁne the N × N
        matrix Z = UD; this is like a design matrix in a lower dimensional space (since we assume
        N < D). Also, deﬁne μz = VT μ as the mean of the data in this reduced space; we can recover
        the original mean using μ = Vμz , since VT V = VVT = I. With these deﬁnitions, we can
        108                                                                     Chapter 4. Gaussian models


        rewrite the MLE as follows:
                        1 T
           Σ̂mle =        X X − μμT                                                                  (4.55)
                       N
                        1
                    =     (ZVT )T (ZVT ) − (Vμz )(Vμz )T                                             (4.56)
                       N
                        1
                    =     VZT ZVT − Vμz μTz VT                                                       (4.57)
                       N
                           1
                    = V( ZT Z − μz μTz )VT                                                           (4.58)
                           N
                    = VΣ̂z VT                                                                        (4.59)
        where Σ̂z is the empirical covariance of Z. Hence we can rewrite the MAP estimate as
              Σ̂map   =    VΣ̃z VT                                                                   (4.60)
                Σ̃z   =    λdiag(Σ̂z ) + (1 − λ)Σ̂z                                                  (4.61)

        Note, however, that we never need to actually compute the D ×D matrix Σ̂map . This is because
        Equation 4.38 tells us that to classify using LDA, all we need to compute is p(y = c|x, θ) ∝
        exp(δc ), where
                                             −1            1
              δc = −xT β c + γc , β c = Σ̂        μc , γc − μTc β c + log πc                         (4.62)
                                                           2
        We can compute the crucial β c term for RDA without inverting the D × D matrix as follows:
                      −1                                   −1              −1
              β c = Σ̂map μc = (VΣ̃z VT )−1 μc = VΣ̃z VT μc = VΣ̃z μz,c                              (4.63)

        where μz,c = VT μc is the mean of the Z matrix for data belonging to class c. See rdaFit for
        the code.

4.2.7   Diagonal LDA
        A simple alternative to RDA is to tie the covariance matrices, so Σc = Σ as in LDA, and then to
        use a diagonal covariance matrix for each class. This is called the diagonal LDA model, and is
        equivalent to RDA with λ = 1. The corresponding discriminant function is as follows (compare
        to Equation 4.33):
                                             D
                                                 (xj − μcj )2
              δc (x) = log p(x, y = c|θ) = −                  + log πc                               (4.64)
                                             j=1
                                                     2σj2

        Typically we set μ̂cj = xcj and σ̂j2 = s2j , which is the pooled empirical variance of feature j
        (pooled across classes) deﬁned by
                  C                           2
            2       c=1    i:yi =c (xij − xcj )
           sj =                                                                                    (4.65)
                            N −C
        In high dimensional settings, this model can work much better than LDA and RDA (Bickel and
        Levina 2004).
        4.2. Gaussian discriminant analysis                                                                                           109

                                                                                      Number of Genes
                                                              2308   1355       352       106         36       12       5       0
                                                              1
                                                                                          Test
                                                             0.9
                                                                                          Train
                                                             0.8                          CV


                                                             0.7




                                   Misclassification Error
                                                             0.6

                                                             0.5

                                                             0.4

                                                             0.3

                                                             0.2

                                                             0.1

                                                              0
                                                                     1      2         3           4        5        6       7   8
                                                                                                  λ




        Figure 4.7 Error versus amount of shrinkage for nearest shrunken centroid classiﬁer applied to the
        SRBCT gene expression data. Based on Figure 18.4 of (Hastie et al. 2009). Figure generated by
        shrunkenCentroidsSRBCTdemo.


4.2.8   Nearest shrunken centroids classiﬁer *
        One drawback of diagonal LDA is that it depends on all of the features. In high dimensional
        problems, we might prefer a method that only depends on a subset of the features, for reasons
        of accuracy and interpretability. One approach is to use a screening method, perhaps based
        on mutual information, as in Section 3.5.4. We now discuss another approach to this problem
        known as the nearest shrunken centroids classiﬁer (Hastie et al. 2009, p652).
           The basic idea is to perform MAP estimation for diagonal LDA with a sparsity-promoting
        (Laplace) prior (see Section 13.3). More precisely, deﬁne the class-speciﬁc feature mean, μcj , in
        terms of the class-independent feature mean, mj , and a class-speciﬁc offset, Δcj . Thus we have
           μcj = mj + Δcj                                                                                                           (4.66)
        We will then put a prior on the Δcj terms to encourage them to be strictly zero and compute
        a MAP estimate. If, for feature j, we ﬁnd that Δcj = 0 for all c, then feature j will play no role
        in the classiﬁcation decision (since μcj will be independent of c). Thus features that are not
        discriminative are automatically ignored. The details can be found in (Hastie et al. 2009, p652)
        and (Greenshtein and Park 2009). See shrunkenCentroidsFit for some code.
           Let us give an example of the method in action, based on (Hastie et al. 2009, p652). Consider
        the problem of classifying a gene expression dataset, which 2308 genes, 4 classes, 63 training
        samples and 20 test samples. Using a diagonal LDA classiﬁer produces 5 errors on the test set.
        Using the nearest shrunken centroids classiﬁer produced 0 errors on the test set, for a range of
        λ values: see Figure 4.7. More importantly, the model is sparse and hence more interpretable:
        Figure 4.8 plots an unpenalized estimate of the difference, dcj , in gray, as well as the shrunken
        estimates Δcj in blue. (These estimates are computed using the value of λ estimated by CV.)
        We see that only 39 genes are used, out of the original 2308.
           Now consider an even harder problem, with 16,603 genes, a training set of 144 patients, a
        test set of 54 patients, and 14 different types of cancer (Ramaswamy et al. 2001). Hastie et al.
        (Hastie et al. 2009, p656) report that nearest shrunken centroids produced 17 errors on the test
      110                                                                    Chapter 4. Gaussian models


                              Class 1                                              Class 2
       6                                                      8


                                                              6
       4

                                                              4

       2
                                                              2


       0                                                      0


                                                             −2
      −2

                                                             −4

      −4
                                                             −6


      −6                                                     −8
           0   500     1000             1500   2000   2500        0   500   1000             1500   2000   2500

                               (a)                                                  (b)
                              Class 3                                              Class 4
       6                                                      8



       4                                                      6



       2                                                      4



       0                                                      2



      −2                                                      0



      −4                                                     −2



      −6                                                     −4
           0   500     1000             1500   2000   2500        0   500   1000             1500   2000   2500

                                (c)                                                 (d)

      Figure 4.8 Proﬁle of the shrunken centroids corresponding to λ = 4.4 (CV optimal in Fig-
      ure 4.7). This selects 39 genes. Based on Figure 18.4 of (Hastie et al. 2009). Figure generated by
      shrunkenCentroidsSRBCTdemo.


      set, using 6,520 genes, and that RDA (Section 4.2.6) produced 12 errors on the test set, using
      all 16,603 genes. The PMTK function cancerHighDimClassifDemo can be used to reproduce
      these numbers.

4.3   Inference in jointly Gaussian distributions
      Given a joint distribution, p(x1 , x2 ), it is useful to be able to compute marginals p(x1 ) and
      conditionals p(x1 |x2 ). We discuss how to do this below, and then give some applications. These
      operations take O(D3 ) time in the worst case. See Section 20.4.3 for faster methods.
          4.3. Inference in jointly Gaussian distributions                                               111


 4.3.1    Statement of the result
          Theorem 4.3.1 (Marginals and conditionals of an MVN). Suppose x = (x1 , x2 ) is jointly Gaussian
          with parameters
                                                                     
                   μ1             Σ11 Σ12                       Λ11 Λ12
             μ=          , Σ=                  , Λ = Σ−1 =                                           (4.67)
                   μ2             Σ21 Σ22                       Λ21 Λ22
          Then the marginals are given by
             p(x1 )   =    N (x1 |μ1 , Σ11 )
             p(x2 )   =    N (x2 |μ2 , Σ22 )                                                          (4.68)
          and the posterior conditional is given by


                 p(x1 |x2 ) = N (x1 |μ1|2 , Σ1|2 )
                      μ1|2 = μ1 + Σ12 Σ−1
                                       22 (x2 − μ2 )

                            = μ1 − Λ−1
                                    11 Λ12 (x2 − μ2 )
                                                                                                      (4.69)
                            = Σ1|2 (Λ11 μ1 − Λ12 (x2 − μ2 ))
                      Σ1|2 = Σ11 − Σ12 Σ−1        −1
                                        22 Σ21 = Λ11



             Equation 4.69 is of such crucial importance in this book that we have put a box around it, so
          you can easily ﬁnd it. For the proof, see Section 4.3.4.
             We see that both the marginal and conditional distributions are themselves Gaussian. For the
          marginals, we just extract the rows and columns corresponding to x1 or x2 . For the conditional,
          we have to do a bit more work. However, it is not that complicated: the conditional mean is
          just a linear function of x2 , and the conditional covariance is just a constant matrix that is
          independent of x2 . We give three different (but equivalent) expressions for the posterior mean,
          and two different (but equivalent) expressions for the posterior covariance; each one is useful in
          different circumstances.

 4.3.2    Examples
          Below we give some examples of these equations in action, which will make them seem more
          intuitive.

4.3.2.1   Marginals and conditionals of a 2d Gaussian
          Let us consider a 2d example. The covariance matrix is
                    2              
                      σ1     ρσ1 σ2
             Σ=                                                                                       (4.70)
                    ρσ1 σ2     σ22
          The marginal p(x1 ) is a 1D Gaussian, obtained by projecting the joint distribution onto the x1
          line:
             p(x1 ) = N (x1 |μ1 , σ12 )                                                                (4.71)
          112                                                                                                                                                Chapter 4. Gaussian models

                                                    p(x1,x2)                                                          p(x1)                                                     p(x1|x2=1)
                                                                                          0.08                                                         7



                           3                                                              0.07
                                                                                                                                                       6


                           2                                                              0.06
                                                                                                                                                       5

                           1                                                              0.05
                                                                                                                                                       4




                     x2




                                                                                     x2




                                                                                                                                                  x2
                           0                                                              0.04

                                                                                                                                                       3
                          −1                                                              0.03


                                                                                                                                                       2
                          −2                                                              0.02


                                                                                                                                                       1
                          −3                                                              0.01



                                                                                            0                                                          0
                          −5   −4   −3   −2   −1       0       1   2   3   4   5            −5   −4   −3   −2   −1      0     1   2   3   4   5        −5   −4   −3   −2   −1       0        1   2   3   4   5
                                                      x1                                                               x1                                                          x1




                                                   (a)                                                               (b)                                                        (c)

          Figure 4.9 (a) A joint Gaussian distribution p(x1 , x2 ) with a correlation coefficient of 0.8. We plot the
          95% contour and the principal axes. (b) The unconditional marginal p(x1 ). (c) The conditional p(x1 |x2 ) =
          N (x1 |0.8, 0.36), obtained by slicing (a) at height x2 = 1. Figure generated by gaussCondition2Ddemo2.



          Suppose we observe X2 = x2 ; the conditional p(x1 |x2 ) is obtained by “slicing” the joint
          distribution through the X2 = x2 line (see Figure 4.9):
                                                                            
                                         ρσ1 σ2                2  (ρσ1 σ2 )2
              p(x1 |x2 ) = N x1 |μ1 +            (x2 − μ2 ), σ1 −                              (4.72)
                                           σ22                       σ22
          If σ1 = σ2 = σ, we get
                                                                
              p(x1 |x2 ) = N x1 |μ1 + ρ(x2 − μ2 ), σ 2 (1 − ρ2 )                                                                                                                                                 (4.73)

          In Figure 4.9 we show an example where ρ = 0.8, σ1 = σ2 = 1, μ = 0 and x2 = 1. We
          see that E [x1 |x2 = 1] = 0.8, which makes sense, since ρ = 0.8 means that we believe that if
          x2 increases by 1 (beyond its mean), then x1 increases by 0.8. We also see var [x1 |x2 = 1] =
          1 − 0.82 = 0.36. This also makes sense: our uncertainty about x1 has gone down, since we
          have
              learned something
                                  about x1 (indirectly) by observing x2 . If ρ = 0, we get p(x1 |x2 ) =
          N x1 |μ1 , σ12 , since x2 conveys no information about x1 if they are uncorrelated (and hence
          independent).

4.3.2.2   Interpolating noise-free data
          Suppose we want to estimate a 1d function, deﬁned on the interval [0, T ], such that yi = f (ti )
          for N observed points ti . We assume for now that the data is noise-free, so we want to
          interpolate it, that is, ﬁt a function that goes exactly through the data. (See Section 4.4.2.3 for
          the noisy data case.) The question is: how does the function behave in between the observed
          data points? It is often reasonable to assume that the unknown function is smooth. In Chapter 15,
          we shall see how to encode priors over functions, and how to update such a prior with observed
          values to get a posterior over functions. But in this section, we take a simpler approach, which
          is adequate for MAP estimation of functions deﬁned on 1d inputs. We follow the presentation
          of (Calvetti and Somersalo 2007, p135).
             We start by discretizing the problem. First we divide the support of the function into D equal
          subintervals. We then deﬁne
                                                                                   T
                xj = f (sj ), sj = jh, h =                                           , 1≤j≤D                                                                                                                     (4.74)
                                                                                   D
4.3. Inference in jointly Gaussian distributions                                                                                                  113

                                  λ=30                                                                          λ=0p1
 5                                                                              5


 4                                                                              4


 3                                                                              3


 2                                                                              2


 1                                                                              1


 0                                                                              0


−1                                                                             −1


−2                                                                             −2


−3                                                                             −3


−4                                                                             −4


−5                                                                             −5
     0    0.1   0.2   0.3   0.4   0.5        0.6   0.7     0.8   0.9       1        0   0.1   0.2   0.3   0.4    0.5    0.6   0.7   0.8   0.9     1


                                  (a)                                                                           (b)

Figure 4.10 Interpolating noise-free data using a Gaussian with prior precision λ. (a) λ = 30. (b)
λ = 0.01. See also Figure 4.15. Based on Figure 7.1 of (Calvetti and Somersalo 2007). Figure generated by
gaussInterpDemo.



We can encode our smoothness prior by assuming that xj is an average of its neighbors, xj−1
and xj+1 , plus some Gaussian noise:
                1
         xj =     (xj−1 + xj+1 ) + j , 2 ≤ j ≤ D − 2                                                                                           (4.75)
                2
where  ∼ N (0, (1/λ)I). The precision term λ controls how much we think the function will
vary: a large λ corresponds to a belief that the function is very smooth, a small λ corresponds
to a belief that the function is quite “wiggly”. In vector form, the above equation can be written
as follows:
         Lx =                                                                                                                                  (4.76)
where L is the (D − 2) × D second order ﬁnite difference matrix
          ⎛                           ⎞
            −1 2 −1
       1⎜ ⎜      −1 2 −1              ⎟
                                      ⎟
  L= ⎜                 ..             ⎟                                                                                                         (4.77)
       2⎝                 .           ⎠
                            −1 2 −1
The corresponding prior has the form
                                                                                       
                                  2                −1             λ2
         p(x) = N (x|0, (λ L L)          T
                                                         ) ∝ exp − ||Lx||22                                                                     (4.78)
                                                                  2
We will henceforth assume we have scaled L by λ so we can ignore the λ term, and just write
Λ = LT L for the precision matrix.
   Note that although x is D-dimensional, the precision matrix Λ only has rank D − 2. Thus
this is an improper prior, known as an intrinsic Gaussian random ﬁeld (see Section 19.4.4 for
          114                                                                     Chapter 4. Gaussian models


          more information). However, providing we observe N ≥ 2 data points, the posterior will be
          proper.
            Now let x2 be the N noise-free observations of the function, and x1 be the D − N unknown
          function values. Without loss of generality, assume that the unknown variables are ordered ﬁrst,
          then the known variables. Then we can partition the L matrix as follows:
                L = [L1 , L2 ], L1 ∈ R(D−2)×(D−N ) , L2 ∈ R(D−2)×(N )                                   (4.79)
          We can also partition the precision matrix of the joint distribution:
                                        T                  
                             Λ11 Λ12          L1 L1 LT1 L2
            Λ=L L= T
                                          =                                                             (4.80)
                             Λ21 Λ22          LT2 L1 LT2 L2
          Using Equation 4.69, we can write the conditional distribution as follows:
                p(x1 |x2 )   =   N (μ1|2 , Σ1|2 )                                                        (4.81)
                     μ1|2    =   −Λ−1
                                   11 Λ12 x2 = −L1 L2 x2
                                                 T
                                                                                                        (4.82)
                     Σ1|2    =   Λ−1
                                  11                                                                    (4.83)
          Note that we can compute the mean by solving the following system of linear equations:
                L1 μ1|2 = −L2 x2                                                                        (4.84)
          This is efficient since L1 is tridiagonal. Figure 4.10 gives an illustration of these equations. We
          see that the posterior mean μ1|2 equals the observed data at the speciﬁed points, and smoothly
          interpolates in between, as desired.
             It is also interesting to plot the 95% pointwise marginal credibility intervals, μj ±
          2 Σ1|2,jj , shown in grey. We see that the variance goes up as we move away from the
          data. We also see that the variance goes up as we decrease the precision of the prior, λ. In-
          terestingly, λ has no effect on the posterior mean, since it cancels out when multiplying Λ11
          and Λ12 . By contrast, when we consider noisy data in Section 4.4.2.3, we will see that the prior
          precision affects the smoothness of posterior mean estimate.
             The marginal credibility intervals do not capture the fact that neighboring locations are
          correlated. We can represent that by drawing complete functions (i.e., vectors x) from the
          posterior, and plotting them. These are shown by the thin lines in Figure 4.10. These are not
          quite as smooth as the posterior mean itself. This is because the prior only penalizes ﬁrst-order
          differences. See Section 4.4.2.3 for further discussion of this point.

4.3.2.3   Data imputation
          Suppose we are missing some entries in a design matrix. If the columns are correlated, we can
          use the observed entries to predict the missing entries. Figure 4.11 shows a simple example. We
          sampled some data from a 20 dimensional Gaussian, and then deliberately “hid” 50% of the data
          in each row. We then inferred the missing entries given the observed entries, using the true
          (generating) model. More precisely, for each row i, we compute p(xhi |xvi , θ), where hi and vi
          are the indices of the hidden and visible entries in case i. From this, we compute the marginal
          distribution of each missing variable, p(xhij |xvi , θ). We then plot the mean of this distribution,
          x̂ij = E [xj |xvi , θ]; this represents our “best guess” about the true value of that entry, in the
        4.3. Inference in jointly Gaussian distributions                                                        115


                        observed                               imputed                           truth
           10                                    10                                 10

            5                                     5                                  5

            0                                     0                                  0

           −5                                    −5                                 −5

         −10                                   −10                                 −10
                0   5      10      15     20          0   5      10      15   20         0   5    10     15      20



        Figure 4.11 Illustration of data imputation. Left column: visualization of three rows of the data matrix
        with missing entries. Middle column: mean of the posterior predictive, based on partially observed
        data in that row, but the true model parameters. Right column: true values. Figure generated by
        gaussImputationDemo.


        sense that it minimizes our expected squared error (see Section 5.7 for details). Figure 4.11 shows
        that the estimates are quite close to the truth. (Of course, if j ∈ vi , the expected value is equal
                            x̂ij = xij .)
        to the observed value,
           We can use var xhij |xvi , θ as a measure of conﬁdence in this guess, although this is not
        shown. Alternatively, we could draw multiple samples from p(xhi |xvi , θ); this is called multiple
        imputation.
           In addition to imputing the missing entries, we may be interested in computing the like-
        lihood of each partially observed row in the table, p(xvi |θ), which can be computed using
        Equation 4.68. This is useful for detecting outliers (atypical observations).

4.3.3   Information form
        Suppose x ∼ N (μ, Σ). One can show that E [x] = μ is the mean vector, and cov [x] = Σ is
        the covariance matrix. These are called the moment parameters of the distribution. However,
        it is sometimes useful to use the canonical parameters or natural parameters, deﬁned as
           Λ  Σ−1 , ξ  Σ−1 μ                                                                                (4.85)
        We can convert back to the moment parameters using
           μ = Λ−1 ξ, Σ = Λ−1                                                                                 (4.86)
        Using the canonical parameters, we can write the MVN in information form (i.e., in exponential
        family form, deﬁned in Section 9.2):
                                                                               
                                            1        1
           Nc (x|ξ, Λ) = (2π)−D/2 |Λ| 2 exp − (xT Λx + ξ T Λ−1 ξ − 2xT ξ)                       (4.87)
                                                     2
        where we use the notation Nc () to distinguish from the moment parameterization N ().
           It is also possible to derive the marginalization and conditioning formulas in information
        form. We ﬁnd
              p(x2 )     =      Nc (x2 |ξ 2 − Λ21 Λ−1                  −1
                                                   11 ξ 1 , Λ22 − Λ21 Λ11 Λ12 )                               (4.88)
           p(x1 |x2 )    =      Nc (x1 |ξ 1 − Λ12 x2 , Λ11 )                                                  (4.89)
          116                                                                     Chapter 4. Gaussian models


          Thus we see that marginalization is easier in moment form, and conditioning is easier in
          information form.
             Another operation that is signiﬁcantly easier in information form is multiplying two Gaussians.
          One can show that

                Nc (ξf , λf )Nc (ξg , λg )   =    Nc (ξf + ξg , λf + λg )                              (4.90)

          However, in moment form, things are much messier:
                                                                              
                                                   μf σg2 + μg σf2 σf2 σg2
                N (μf , σf2 )N (μg , σg2 )   =N                   , 2                                  (4.91)
                                                      σg2 + σg2    σg + σg2

 4.3.4    Proof of the result *
          We now prove Theorem 4.3.1. Readers who are intimidated by heavy matrix algebra can safely
          skip this section. We ﬁrst derive some results that we will need here and elsewhere in the book.
          We will return to the proof at the end.

4.3.4.1   Inverse of a partitioned matrix using Schur complements
          The key tool we need is a way to invert a partitioned matrix. This can be done using the
          following result.
          Theorem 4.3.2 (Inverse of a partitioned matrix). Consider a general partitioned matrix
                          
                   E F
             M=                                                                                        (4.92)
                   G H
          where we assume E and H are invertible. We have
                                                                     
                             (M/H)−1                  −(M/H)−1 FH−1
            M−1 =                                                                                      (4.93)
                          −H−1 G(M/H)−1 H−1 + H−1 G(M/H)−1 FH−1
                         −1                                        
                          E + E−1 F(M/E)−1 GE−1 −E−1 F(M/E)−1
                    =                                                                                  (4.94)
                              −(M/E)−1 GE−1                (M/E)−1
          where

                M/H           E − FH−1 G                                                              (4.95)
                M/E           H − GE−1 F                                                              (4.96)

          We say that M/H is the Schur complement of M wrt H. Equation 4.93 is called the partitioned
          inverse formula.

          Proof. If we could block diagonalize M, it would be easier to invert. To zero out the top right
          block of M we can pre-multiply as follows
                                                          
                I −FH−1         E F          E − FH−1 G 0
                                         =                                                         (4.97)
               0       I        G H               G         H
          4.3. Inference in jointly Gaussian distributions                                              117


          Similarly, to zero out the bottom left we can post-multiply as follows
                                                                         
               E − FH−1 G 0                I       0      E − FH−1 G 0
                                                      =                                              (4.98)
                      G          H     −H−1 G I                 0           H
          Putting it all together we get
                                                                                  
               I −FH−1            E F         I           0                E − FH−1 G   0
                                                              =                                       (4.99)
               0         I        G H       −H−1 G        I                     0       H
             !       "#       $ ! "# $ !        "#          $            !        "#        $
                      X             M               Z                              W

            Taking the inverse of both sides yields
             Z−1 M−1 X−1        =   W−1                                                              (4.100)
          and hence
             M−1      =    ZW−1 X                                                                    (4.101)
          Substituting in the deﬁnitions we get
                     −1                                              
               E F                      I      0   (M/H)−1     0    I −FH−1
                              =                                                                      (4.102)
               G H                  −H−1 G I          0     H−1    0      I
                                               −1
                                                                   −1
                                                                        
                                        (M/H)           0     I −FH
                              =                                                                      (4.103)
                                    −H−1 G(M/H)−1 H−1        0     I
                                               −1
                                                                              
                                         (M/H)                     −1
                                                           −(M/H) FH−1
                              =                                                                      (4.104)
                                    −H−1 G(M/H)−1 H−1 + H−1 G(M/H)−1 FH−1
          Alternatively, we could have decomposed the matrix M in terms of E and M/E = (H −
          GE−1 F), yielding
                      −1        −1                                          
                E F                E + E−1 F(M/E)−1 GE−1 −E−1 F(M/E)−1
                             =                                                         (4.105)
               G H                      −(M/E)−1 GE−1              (M/E)−1



4.3.4.2   The matrix inversion lemma
          We now derive some useful corollaries of the above result.
                                                                                                       
                                                                                                 E    F
          Corollary 4.3.1 (Matrix inversion lemma). Consider a general partitioned matrix M =             ,
                                                                                                 G    H
          where we assume E and H are invertible. We have

                    (E − FH−1 G)−1        =    E−1 + E−1 F(H − GE−1 F)−1 GE−1                        (4.106)
                          −1   −1    −1            −1               −1        −1
             (E − FH        G) FH         =    E        F(H − GE         F)                          (4.107)
                          |E − FH−1 G|    =    |H − GE       −1      −1
                                                                  F||H    ||E|                       (4.108)
          118                                                                  Chapter 4. Gaussian models


            The ﬁrst two equations are s known as the matrix inversion lemma or the Sherman-
          Morrison-Woodbury formula. The third equation is known as the matrix determinant
          lemma. A typical application in machine learning/ statistics is the following. Let E = Σ
          be a N × N diagonal matrix, let F = GT = X of size N × D, where N  D, and let
          H−1 = −I. Then we have
                (Σ + XXT )−1 = Σ−1 − Σ−1 X(I + XT Σ−1 X)−1 XT Σ−1                                    (4.109)

          The LHS takes O(N 3 ) time to compute, the RHS takes time O(D3 ) to compute.
            Another application concerns computing a rank one update of an inverse matrix. Let
          H = −1 (a scalar), F = u (a column vector), and G = vT (a row vector). Then we have
                (E + uvT )−1    =    E−1 + E−1 u(−1 − vT E−1 u)−1 vT E−1                              (4.110)
                                           E−1 uvT E−1
                                =    E−1 −                                                            (4.111)
                                           1 + vT E−1 u
          This is useful when we incrementally add a data vector to a design matrix, and want to update
          our sufficient statistics. (One can derive an analogous formula for removing a data vector.)
          Proof. To prove Equation 4.106, we simply equate the top left block of Equation 4.93 and Equa-
          tion 4.94. To prove Equation 4.107, we simple equate the top right blocks of Equations 4.93 and
          4.94. The proof of Equation 4.108 is left as an exercise.

4.3.4.3   Proof of Gaussian conditioning formulas
          We can now return to our original goal, which is to derive Equation 4.69. Let us factor the joint
          p(x1 , x2 ) as p(x2 )p(x1 |x2 ) as follows:
                            %                T           −1          &
                                1 x1 − μ 1          Σ11 Σ12       x1 − μ1
             E = exp −                                                                               (4.112)
                                2 x2 − μ2           Σ21 Σ22       x2 − μ2

          Using Equation 4.102 the above exponent becomes
                          %              T                                  
                              1 x1 − μ 1            I      0     (Σ/Σ22 )−1   0
             E = exp −                                                                                (4.113)
                              2 x2 − μ2        −Σ−122 Σ21  I         0       Σ−1
                                                                              22
                                     −1
                                                   '
                          I −Σ12 Σ22        x1 − μ 1
                      ×                                                                               (4.114)
                          0        I        x2 − μ2
                          
                              1
                 = exp − (x1 − μ1 − Σ12 Σ−1      22 (x2 − μ2 )) (Σ/Σ22 )
                                                               T         −1
                                                                                                      (4.115)
                              2
                                                                                      '
                                        −1
                                                      (           1         T −1
                      (x1 − μ1 − Σ12 Σ22 (x2 − μ2 )) × exp − (x2 − μ2 ) Σ22 (x2 − μ2 )                (4.116)
                                                                  2
          This is of the form

                exp(quadratic form in x1 , x2 ) × exp(quadratic form in x2 )                          (4.117)
        4.4. Linear Gaussian systems                                                                119


        Hence we have successfully factorized the joint as
           p(x1 , x2 )   =   p(x1 |x2 )p(x2 )                                                    (4.118)
                         =   N (x1 |μ1|2 , Σ1|2 )N (x2 |μ2 , Σ22 )                               (4.119)
        where the parameters of the conditional distribution can be read off from the above equations
        using
           μ1|2    =     μ1 + Σ12 Σ−1
                                   22 (x2 − μ2 )                                                 (4.120)
           Σ1|2    =     Σ/Σ22 = Σ11 −       Σ12 Σ−1
                                                  22 Σ21                                         (4.121)
          We can also use the fact that |M| = |M/H||H| to check the normalization constants are
        correct:
                               1                                                 1
           (2π)(d1 +d2 )/2 |Σ| 2   =    (2π)(d1 +d2 )/2 (|Σ/Σ22 | |Σ22 |) 2                      (4.122)
                                                              1                         1
                                   =    (2π)   d1 /2
                                                       |Σ/Σ22 | (2π)
                                                              2        d2 /2
                                                                               |Σ22 |   2        (4.123)
        where d1 = dim(x1 ) and d2 = dim(x2 ).
          We leave the proof of the other forms of the result in Equation 4.69 as an exercise.

 4.4    Linear Gaussian systems
        Suppose we have two variables, x and y. Let x ∈ RDx be a hidden variable, and y ∈ RDy be
        a noisy observation of x. Let us assume we have the following prior and likelihood:



                  p(x) = N (x|μx , Σx )
                                                                                                 (4.124)
               p(y|x) = N (y|Ax + b, Σy )


           where A is a matrix of size Dy × Dx . This is an example of a linear Gaussian system. We
        can represent this schematically as x → y, meaning x generates y. In this section, we show
        how to “invert the arrow”, that is, how to infer x from y. We state the result below, then give
        several examples, and ﬁnally we derive the result. We will see many more applications of these
        results in later chapters.

4.4.1   Statement of the result
        Theorem 4.4.1 (Bayes rule for linear Gaussian systems). Given a linear Gaussian system, as in
        Equation 4.124, the posterior p(x|y) is given by the following:


               p(x|y) = N (x|μx|y , Σx|y )
                  Σ−1     −1   T −1
                   x|y = Σx + A Σy A                                                             (4.125)
                  μx|y = Σx|y [A   T
                                       Σ−1
                                        y    (y − b) +     Σ−1
                                                            x μx ]
          120                                                                     Chapter 4. Gaussian models


          In addition, the normalization constant p(y) is given by


                    p(y) = N (y|Aμx + b, Σy + AΣx AT )                                                (4.126)


            For the proof, see Section 4.4.3.

 4.4.2    Examples
          In this section, we give some example applications of the above result.

4.4.2.1   Inferring an unknown scalar from noisy measurements
          Suppose we make N noisy measurements yi of some underlying quantity x; let us assume the
          measurement noise has ﬁxed precision λy = 1/σ 2 , so the likelihood is

                p(yi |x)     =     N (yi |x, λ−1
                                              y )                                                      (4.127)

          Now let us use a Gaussian prior for the value of the unknown source:

                p(x)     =       N (x|μ0 , λ−1
                                            0 )                                                       (4.128)

          We want to compute p(x|y1 , . . . , yN , σ 2 ). We can convert this to a form that lets us apply
          Bayes rule for Gaussians by deﬁning y = (y1 , . . . , yN ), A = 1TN (an 1 × N row vector of 1’s),
          and Σ−1
                y = diag(λy I). Then we get

                p(x|y)       =     N (x|μN , λ−1
                                              N )                                                     (4.129)
                   λN        =     λ0 + N λ y                                                         (4.130)
                                   N λy y + λ 0 μ 0     N λy          λ0
                   μN        =                      =           y+           μ0                        (4.131)
                                         λN           N λy + λ0    N λy + λ0
          These equations are quite intuitive: the posterior precision λN is the prior precision λ0 plus N
          units of measurement precision λy . Also, the posterior mean μN is a convex combination of
          the MLE y and the prior mean μ0 . This makes it clear that the posterior mean is a compromise
          between the MLE and the prior. If the prior is weak relative to the signal strength (λ0 is
          small relative to λy ), we put more weight on the MLE. If the prior is strong relative to the
          signal strength (λ0 is large relative to λy ), we put more weight on the prior. This is illustrated
          in Figure 4.12, which is very similar to the analogous results for the beta-binomial model in
          Figure 3.6.
             Note that the posterior mean is written in terms of N λy y, so having N measurements each
          of precision λy is like having one measurement with value y and precision N λy .
             We can rewrite the results in terms of the posterior variance, rather than posterior precision,
4.4. Linear Gaussian systems                                                                               121


                       prior variance = 1.00                                    prior variance = 5.00

           prior                                                        prior
           lik                                                          lik
  0.6      post                                                0.6      post


  0.5                                                          0.5


  0.4                                                          0.4


  0.3                                                          0.3


  0.2                                                          0.2


  0.1                                                          0.1


   0                                                            0
   −5                           0                   5           −5                       0                 5


Figure 4.12 Inference about x given a noisy observation y = 3. (a) Strong prior N (0, 1). The posterior
mean is “shrunk” towards the prior mean, which is 0. (a) Weak prior N (0, 5). The posterior mean is
similar to the MLE. Figure generated by gaussInferParamsMean1d.


as follows:
    p(x|D, σ 2 )      =      N (x|μN , τN 2
                                            )                                                           (4.132)
               2                  1            σ 2 τ02
              τN      =                 =                                                               (4.133)
                              N      1
                              σ 2 + τ02
                                            N τ02 + σ 2
                                              
                               2    μ0    Ny               σ2             N τ02
              μN      =      τN      2  +          =      2       μ0 +             y                    (4.134)
                                    τ0     σ 2         N τ0 + σ 2      N τ02 + σ 2
                                            2
where τ02 = 1/λ0 is the prior variance and τN = 1/λN is the posterior variance.
  We can also compute the posterior sequentially, by updating after each observation. If
N = 1, we can rewrite the posterior after seeing a single observation as follows (where we
deﬁne Σy = σ 2 , Σ0 = τ02 and Σ1 = τ12 to be the variances of the likelihood, prior and
posterior):
    p(x|y)     =      N (x|μ1 , Σ1 )                                                                    (4.135)
                                 −1
                         1      1          Σy Σ0
         Σ1    =           +            =                                                               (4.136)
                        Σ0     Σy         Σ0 + Σ y
                                     
                           μ0       y
         μ1    =      Σ1        +                                                                       (4.137)
                           Σ0     Σy
We can rewrite the posterior mean in 3 different ways:
                      Σy             Σ0
    μ1    =                 μ0 +           y                                                            (4.138)
                   Σy + Σ 0       Σy + Σ 0
                                    Σ0
          =        μ0 + (y − μ0 )                                                                       (4.139)
                                  Σy + Σ 0
                                   Σy
          =        y − (y − μ0 )                                                                        (4.140)
                                 Σy + Σ 0
          122                                                                     Chapter 4. Gaussian models


          The ﬁrst equation is a convex combination of the prior and the data. The second equation is the
          prior mean adjusted towards the data. The third equation is the data adjusted towards the prior
          mean; this is called shrinkage. These are all equivalent ways of expressing the tradeoff between
          likelihood and prior. If Σ0 is small relative to ΣY , corresponding to a strong prior, the amount
          of shrinkage is large (see Figure 4.12(a)), whereas if Σ0 is large relative to Σy , corresponding to
          a weak prior, the amount of shrinkage is small (see Figure 4.12(b)).
             Another way to quantify the amount of shrinkage is in terms of the signal-to-noise ratio,
          which is deﬁned as follows:
                        
                     E X2         Σ0 + μ20
              SNR        2
                              =                                                                          (4.141)
                      E [ ]        Σy
          where x ∼ N (μ0 , Σ0 ) is the true signal, y = x +  is the observed signal, and  ∼ N (0, Σy )
          is the noise term.

4.4.2.2   Inferring an unknown vector from noisy measurements
          Now consider N vector-valued observations, yi ∼ N (x, Σy ), and a Gaussian prior, x ∼
          N (μ0 , Σ0 ). Setting A = I, b = 0, and using y for the effective observation with precision
          N Σ−1
              y , we have

                p(x|y1 , . . . , yN )   =   N (x|μN , ΣN )                                               (4.142)
                                Σ−1
                                  N     =   Σ−1     −1
                                             0 + N Σy                                                    (4.143)
                                μN      =   ΣN (Σ−1         −1
                                                 y (N y) + Σ0 μ0 )                                       (4.144)
          See Figure 4.13 for a 2d example. We can think of x as representing the true, but unknown,
          location of an object in 2d space, such as a missile or airplane, and the yi as being noisy
          observations, such as radar “blips”. As we receive more blips, we are better able to localize the
          source. In Section 18.3.1, we will see how to extend this example to track moving objects using
          the famous Kalman ﬁlter algorithm.
             Now suppose we have multiple measuring devices, and we want to combine them together;
          this is known as sensor fusion. If we have multiple observations with different covariances (cor-
          responding to sensors with different reliabilities), the posterior will be an appropriate weighted
          average of the data. Consider the example in Figure 4.14. We use an uninformative prior on x,
          namely p(x) = N (μ0 , Σ0 ) = N (0, 1010 I2 ). We get 2 noisy observations, y1 ∼ N (x, Σy,1 )
          and y2 ∼ N (x, Σy,2 ). We then compute p(x|y1 , y2 ).
             In Figure 4.14(a), we set Σy,1 = Σy,2 = 0.01I2 , so both sensors are equally reliable. In this
          case, the posterior mean is half way between the two observations, y1 and y2 . In Figure 4.14(b),
          we set Σy,1 = 0.05I2 and Σy,2 = 0.01I2 , so sensor 2 is more reliable than sensor 1. In this
          case, the posterior mean is closer to y2 . In Figure 4.14(c), we set
                                                            
                              10 1                      1 1
              Σy,1 = 0.01              , Σy,2 = 0.01                                                  (4.145)
                               1 1                      1 10
          so sensor 1 is more reliable in the y2 component (vertical direction), and sensor 2 is more
          reliable in the y1 component (horizontal direction). In this case, the posterior mean uses y1 ’s
          vertical component and y2 ’s horizontal component.
          4.4. Linear Gaussian systems                                                                                                                                                                          123


                                       data                                                                             prior                                                     post after 10 obs
              1                                                                      1                                                                                 1

            0.5                                                                     0.5                                                                              0.5

              0                                                                      0                                                                                 0

           −0.5                                                                    −0.5                                                                       −0.5

            −1                                                                      −1                                                                                −1
             −1                              0                               1       −1                                       0                           1            −1                         0             1

          Figure 4.13 Illustration of Bayesian inference for the mean of a 2d Gaussian. (a) The data is generated
          from yi ∼ N (x, Σy ), where x = [0.5, 0.5]T and Σy = 0.1[2, 1; 1, 1]). We assume the sensor noise
          covariance Σy is known but x is unknown. The black cross represents x. (b) The prior is p(x) =
          N (x|0, 0.1I2 ). (c) We show the posterior after 10 data points have been observed. Figure generated by
          gaussInferParamsMean2d.
                    0.4                                                                0.4                                                                      1


                    0.2                                                                0.2


                                                                                           0                                                                   0.5
                     0

                                                                                      −0.2
                   −0.2

                                                                                      −0.4                                                                      0
                   −0.4
                                                                                      −0.6
                   −0.6
                                                                                      −0.8                                                                    −0.5

                   −0.8
                                                                                          −1

                    −1
                                                                                      −1.2                                                                     −1


                   −1.2                                                               −1.4


                   −1.4                                                               −1.6                                                                    −1.5
                     −0.4   −0.2   0   0.2   0.4       0.6   0.8   1   1.2   1.4        −0.6   −0.4   −0.2   0   0.2    0.4   0.6   0.8   1   1.2   1.4          −1        −0.5   0         0.5       1   1.5




                                                 (a)                                                                   (b)                                                            (c)

          Figure 4.14 We observe y1 = (0, −1) (red cross) and y2 = (1, 0) (green cross) and infer E(μ|y1 , y2 , θ)
          (black cross). (a) Equally reliable sensors, so the posterior mean estimate is in between the two circles.
          (b) Sensor 2 is more reliable, so the estimate shifts more towards the green circle. (c) Sensor 1 is more
          reliable in the vertical direction, Sensor 2 is more reliable in the horizontal direction. The estimate is an
          appropriate combination of the two measurements. Figure generated by sensorFusion2d.



             Note that this technique crucially relies on modeling our uncertainty of each sensor; comput-
          ing an unweighted average would give the wrong result. However, we have assumed the sensor
          precisions are known. When they are not, we should model out uncertainty about Σ1 and Σ2
          as well. See Section 4.6.4 for details.

4.4.2.3   Interpolating noisy data
          We now revisit the example of Section 4.3.2.2. This time we no longer assume noise-free
          observations. Instead, let us assume that we obtain N noisy observations yi ; without loss
          of generality, assume these correspond to x1 , . . . , xN . We can model this setup as a linear
        124                                                                     Chapter 4. Gaussian models


        Gaussian system:
              y = Ax +                                                                                (4.146)
                                          2    2
        where  ∼ N (0, Σy ), Σy = σ I, σ is the observation noise, and A is a N × D projection
        matrix that selects out the observed elements. For example, if N = 2 and D = 4 we have
                               
                  1 0 0 0
          A=                                                                                 (4.147)
                   0 1 0 0
        Using the same improper prior as before, Σx = (LT L)−1 , we can easily compute the posterior
        mean and variance. In Figure 4.15, we plot the posterior mean, posterior variance, and some
        posterior samples. Now we see that the prior precision λ effects the posterior mean as well as
        the posterior variance. In particular, for a strong prior (large λ), the estimate is very smooth, and
        the uncertainty is low. but for a weak prior (small λ), the estimate is wiggly, and the uncertainty
        (away from the data) is high.
           The posterior mean can also be computed by solving the following optimization problem:
                  1                   λ )                                       *
                      N                    D
                                                             2                  2
            min 2        (xi − yi )2 +          (xj − xj−1 ) + (xj − xj+1 )                            (4.148)
             x 2σ                       2 j=1
                     i=1

        where we have deﬁned x0 = x1 and xD+1 = xD for notational simplicity. We recognize this
        as a discrete approximation to the following problem:
                  1                           λ
           min 2 (f (t) − y(t))2 dt +               [f  (t)]2 dt                                   (4.149)
             f 2σ                             2
        where f  (t) is the ﬁrst derivative of f . The ﬁrst term measures ﬁt to the data, and the second
        term penalizes functions that are “too wiggly”. This is an example of Tikhonov regularization,
        which is a popular approach to functional data analysis. See Chapter 15 for more sophisticated
        approaches, which enforce higher order smoothness (so the resulting samples look less “jagged”).

4.4.3   Proof of the result *
        We now derive Equation 4.125. The basic idea is to derive the joint distribution, p(x, y) =
        p(x)p(y|x), and then to use the results from Section 4.3.1 for computing p(x|y).
           In more detail, we proceed as follows. The log of the joint distribution is as follows (dropping
        irrelevant constants):
                              1                              1
            log p(x, y) = − (x − μx )T Σ−1                                    T −1
                                            x (x − μx ) − (y − Ax − b) Σy (y − Ax − b) (4.150)
                              2                              2
        This is clearly a joint Gaussian distribution, since it is the exponential of a quadratic form.
           Expanding out the quadratic terms involving x and y, and ignoring linear and constant terms,
        we have
                        1             1 T −1         1
            Q = − xT Σ−1                                     T −1
                                x x − y Σy y − (Ax) Σy (Ax) + y Σy Ax
                                                                              T −1
                                                                                                       (4.151)
                        2             2              2
                           T  −1                                   
                        1 x        Σx + AT Σ−1   y A −A Σy
                                                             T −1
                                                                         x
                 = −                                                                                  (4.152)
                        2 y             −Σ−1y A             Σ−1y         y
                           T         
                        1 x         −1 x
                 = −              Σ                                                                   (4.153)
                        2 y             y
      4.5. Digression: The Wishart distribution *                                                                                              125

                                        λ=30                                                                λ=0p1
       5                                                                    5


       4                                                                    4


       3                                                                    3


       2                                                                    2


       1                                                                    1


       0                                                                    0


      −1                                                                   −1


      −2                                                                   −2


      −3                                                                   −3


      −4                                                                   −4


      −5                                                                   −5
           0    0.1   0.2   0.3   0.4   0.5    0.6   0.7   0.8   0.9   1        0   0.1   0.2   0.3   0.4    0.5    0.6   0.7   0.8   0.9      1


                                        (a)                                                                 (b)


      Figure 4.15 Interpolating noisy data (noise variance σ 2 = 1) using a Gaussian with prior precision λ. (a)
      λ = 30. (b) λ = 0.01. See also Figure 4.10. Based on Figure 7.1 of (Calvetti and Somersalo 2007). Figure
      generated by gaussInterpNoisyDemo. See also splineBasisDemo.



      where the precision matrix of the joint is deﬁned as
                  −1                                                                               
          −1      Σx + AT Σ−1   y A −A Σy
                                            T −1
                                                             Λxx                                Λxy
        Σ =                −1                −1      Λ=                                                                                    (4.154)
                        −Σy A              Σy                Λyx                                Λyy

      From Equation 4.69, and using the fact that μy = Aμx + b, we have

               p(x|y)       =     N (μx|y , Σx|y )                                                                                          (4.155)
                Σx|y        =     Λ−1      −1     T −1
                                   xx = (Σx + A Σy A)
                                                          −1
                                                                                                                                            (4.156)
                                                             
                μx|y        =     Σx|y Λxx μx − Λxy (y − μy )                                                                               (4.157)
                                                               
                            =     Σx|y Σ−1       T −1
                                         x μ + A Σy (y − b)                                                                                 (4.158)

4.5   Digression: The Wishart distribution *
      The Wishart distribution is the generalization of the Gamma distribution to positive deﬁnite
      matrices. Press (Press 2005, p107) has said “The Wishart distribution ranks next to the (multi-
      variate) normal distribution in order of importance and usefuleness in multivariate statistics”.
      We will mostly use it to model our uncertainty in covariance matrices, Σ, or their inverses,
      Λ = Σ−1 .
        The pdf of the Wishart is deﬁned as follows:
                                                                  
                              1                        1
         Wi(Λ|S, ν) =             |Λ|(ν−D−1)/2 exp − tr(ΛS−1 )                                 (4.159)
                             ZWi                       2
      Here ν is called the “degrees of freedom” and S is the “scale matrix”. (We shall get more
      intuition for these parameters shortly.) The normalization constant for this distribution (which
        126                                                                 Chapter 4. Gaussian models


        requires integrating over all symmetric pd matrices) is the following formidable expression

              ZWi    =   2νD/2 ΓD (ν/2)|S|ν/2                                                     (4.160)

        where ΓD (a) is the multivariate gamma function:
                                          D
              ΓD (x) = π D(D−1)/4              Γ (x + (1 − i)/2)                                  (4.161)
                                         i=1

        Hence Γ1 (a) = Γ(a) and
                             D
                                        ν0 + 1 − i
              ΓD (ν0 /2) =         Γ(              )                                              (4.162)
                             i=1
                                            2

        The normalization constant only exists (and hence the pdf is only well deﬁned) if ν > D − 1.
           There is a connection between the Wishart distribution and the Gaussian. In particular,
                                                             N
        let xi ∼ N (0, Σ). Then the scatter matrix S =          i=1 xi xi has a Wishart distribution:
                                                                        T

        S ∼ Wi(Σ, 1). Hence E [S] = N Σ. More generally, one can show that the mean and mode of
        Wi(S, ν) are given by

              mean = νS, mode = (ν − D − 1)S                                                      (4.163)

        where the mode only exists if ν > D + 1.
          If D = 1, the Wishart reduces to the Gamma distribution:
                                  ν s
           Wi(λ|s−1 , ν) = Ga(λ| , )                                                              (4.164)
                                  2 2

4.5.1   Inverse Wishart distribution
        Recall that we showed (Exercise 2.10) that if λ ∼ Ga(a, b), then that λ1 ∼ IG(a, b). Similarly,
        if Σ−1 ∼ Wi(S, ν) then Σ ∼ IW(S−1 , ν + D + 1), where IW is the inverse Wishart, the
        multidimensional generalization of the inverse Gamma. It is deﬁned as follows, for ν > D − 1
        and S 0:
                                                                         
                               1                           1
           IW(Σ|S, ν) =            |Σ|−(ν+D+1)/2 exp − tr(S−1 Σ−1 )                             (4.165)
                             ZIW                           2
                     ZIW      =     |S|−ν/2 2νD/2 ΓD (ν/2)                                        (4.166)

        One can show that the distribution has these properties
                           S−1            S−1
              mean =           , mode =                                                           (4.167)
                         ν−D−1          ν+D+1
        If D = 1, this reduces to the inverse Gamma:

              IW(σ 2 |S −1 , ν) = IG(σ 2 |ν/2, S/2)                                               (4.168)
        4.6. Inferring the parameters of an MVN                                                                                                                         127


                                 Wi(dof=3.0, S), E=[9.5, −0.1; −0.1, 1.9], ρ=−0.0                                  σ21                              ρ(1,2)
                                                                                                    0.08                             0.8
                                                   5
                        2                                                      5                    0.06                             0.6
                        0                          0                           0
                                                                                                    0.04                             0.4
                     −2                                                       −5
                                                  −5                                                0.02                             0.2
                            −4 −2     0   2   4        −5     0       5        −10     0       10

                      4                                                                               0                               0
                                                   5                                                       0   5   10    15   20       −2      −1     0      1   2
                                                                               2
                      2
                      0                            0                           0
                                                                                                                                                     σ22
                     −2
                                                                              −2                                                     0.4
                     −4                           −5
                            −5        0       5        −5     0       5        −4 −2   0   2    4
                                                                                                                                     0.3

                        2                          2                           5                                                     0.2
                        0                          0                           0
                                                                                                                                     0.1
                     −2                           −2                          −5
                                                                                                                                      0
                                 −2   0   2        −4 −2      0   2       4   −10      0       10                                          0   1      2      3   4




                                                            (a)                                                                (b)

        Figure 4.16 Visualization of the Wishart distribution. Left: Some samples from the Wishart distribution,
        Σ ∼ Wi(S, ν), where S = [3.1653, −0.0262; −0.0262, 0.6477] and ν = 3. Right: Plots of the marginals
        (which are Gamma), and the approximate (sample-based) marginal on the correlation coefficient. If ν = 3
        there is a lot of uncertainty about the value of the correlation coefficient ρ (see the almost uniform
        distribution on [−1, 1]). The sampled matrices are highly variable, and some are nearly singular. As ν
        increases, the sampled matrices are more concentrated on the prior S. Figure generated by wiPlotDemo.



4.5.2   Visualizing the Wishart distribution *
        Since the Wishart is a distribution over matrices, it is hard to plot as a density function. However,
        we can easily sample from it, and in the 2d case, we can use the eigenvectors of the resulting
        matrix to deﬁne an ellipse, as explained in Section 4.1.2. See Figure 4.16 for some examples.
           For higher dimensional matrices, we can plot marginals of the distribution. The diagonals of
        a Wishart distributed matrix have Gamma distributions, so are easy to plot. It is hard in general
        to work out the distribution of the off-diagonal elements, but we can sample matrices from
        the distribution, and then compute the distribution empirically. In particular, we can convert
        each sampled matrix to a correlation matrix, and thus compute a Monte Carlo approximation
        (Section 2.7) to the expected correlation coefficients:

                            1
                               S
           E [Rij ] ≈             R(Σ(s) )ij                                                                                                                         (4.169)
                            S s=1

        where Σ(s) ∼ Wi(Σ, ν) and R(Σ) converts matrix Σ into a correlation matrix:
                        Σij
           Rij =                                                                                                                                                     (4.170)
                        Σii Σjj
        We can then use kernel density estimation (Section 14.7.2) to produce a smooth approximation
        to the univariate density E [Rij ] for plotting purposes. See Figure 4.16 for some examples.

 4.6    Inferring the parameters of an MVN
        So far, we have discussed inference in a Gaussian assuming the parameters θ = (μ, Σ) are
        known. We now discuss how to infer the parameters themselves. We will assume the data has
        128                                                                  Chapter 4. Gaussian models


        the form xi ∼ N (μ, Σ) for i = 1 : N and is fully observed, so we have no missing data (see
        Section 11.6.1 for how to estimate parameters of an MVN in the presence of missing values). To
        simplify the presentation, we derive the posterior in three parts: ﬁrst we compute p(μ|D, Σ);
        then we compute p(Σ|D, μ); ﬁnally we compute the joint p(μ, Σ|D).

4.6.1   Posterior distribution of μ
        We have discussed how to compute the MLE for μ; we now discuss how to compute its posterior,
        which is useful for modeling our uncertainty about its value.
          The likelihood has the form
                                 1
              p(D|μ) = N (x|μ,     Σ)                                                               (4.171)
                                 N
        For simplicity, we will use a conjugate prior, which in this case is a Gaussian. In particular, if
        p(μ) = N (μ|m0 , V0 ) then we can derive a Gaussian posterior for μ based on the results in
        Section 4.4.2.2. We get
              p(μ|D, Σ) = N (μ|mN , VN )                                                            (4.172)
                   VN−1
                        = V0−1 + N Σ−1                                                              (4.173)
                   mN = VN (Σ−1 (N x) + V0−1 m0 )                                                   (4.174)

        This is exactly the same process as inferring the location of an object based on noisy radar
        “blips”, except now we are inferring the mean of a distribution based on noisy samples. (To a
        Bayesian, there is no difference between uncertainty about parameters and uncertainty about
        anything else.)
           We can model an uninformative prior by setting V0 = ∞I. In this case we have p(μ|D, Σ) =
        N (x, N1 Σ), so the posterior mean is equal to the MLE. We also see that the posterior variance
        goes down as 1/N , which is a standard result from frequentist statistics.

4.6.2   Posterior distribution of Σ *
        We now discuss how to compute p(Σ|D, μ). The likelihood has the form
                                                   
                              −N        1        −1
          p(D|μ, Σ) ∝ |Σ|       2 exp − tr(Sμ Σ )                                                   (4.175)
                                        2
        The corresponding conjugate prior is known as the inverse Wishart distribution (Section 4.5.1).
        Recall that this has the following pdf:
                                                                    
                     −1                −(ν0 +D+1)/2      1        −1
           IW(Σ|S0 , ν0 ) ∝ |Σ|                     exp − tr(S0 Σ )                            (4.176)
                                                         2
        Here ν0 > D − 1 is the degrees of freedom (dof), and S0 is a symmetric pd matrix. We see
        that S−1
              0 plays the role of the prior scatter matrix, and N0  ν0 + D + 1 controls the strength
        of the prior, and hence plays a role analogous to the sample size N .
          4.6. Inferring the parameters of an MVN                                                                                                                                  129

                                       N=100, D=50                                                   N=50, D=50                                                N=25, D=50
                       1.5                                                             1.5                                                       1.5
                                                     true, k=10.00                                            true, k=10.00                                             true, k=10.00
                                                     MLE, k= 71                                               MLE, k=1.7e+17                                            MLE, k=2.2e+18
                                                     MAP, k=8.62                                              MAP, k=8.85                                               MAP, k=21.09


                        1                                                               1                                                         1




          eigenvalue




                                                                          eigenvalue




                                                                                                                                    eigenvalue
                       0.5                                                             0.5                                                       0.5




                        0                                                               0                                                         0
                             0   5     10      15        20          25                      0   5   10      15     20         25                      0   5   10      15     20         25



          Figure 4.17 Estimating a covariance matrix in D = 50 dimensions using N ∈ {100, 50, 25} samples.
          We plot the eigenvalues in descending order for the true covariance matrix (solid black), the MLE (dotted
          blue) and the MAP estimate (dashed red), using Equation 4.184 with λ = 0.9. We also list the condition
          number of each matrix in the legend. Based on Figure 1 of (Schaefer and Strimmer 2005). Figure generated
          by shrinkcovDemo.


                       Multiplying the likelihood and prior we ﬁnd that the posterior is also inverse Wishart:
                                                                     
                                                N           1
                       p(Σ|D, μ) ∝ |Σ|− 2 exp − tr(Σ−1 Sμ ) |Σ|−(ν0 +D+1)/2
                                                            2
                                                               
                                                   1
                                          exp − tr(Σ−1 S0 )                                                     (4.177)
                                                   2
                                                                                         
                                                N +(ν0 +D+1)      1                    
                                     = |Σ|−           2      exp − tr Σ−1 (Sμ + S0 )                           (4.178)
                                                                  2
                                     = IW(Σ|SN , νN )                                                          (4.179)
                               ν N = ν0 + N                                                                    (4.180)
                                     S−1
                                      N     =        S0 + S μ                                                                                                                 (4.181)
          In words, this says that the posterior strength νN is the prior strength ν0 plus the number of
          observations N , and the posterior scatter matrix SN is the prior scatter matrix S0 plus the data
          scatter matrix Sμ .

4.6.2.1   MAP estimation
          We see from Equation 4.7 that Σ̂mle is a rank min(N, D) matrix. If N < D, this is not
          full rank, and hence will be uninvertible. And even if N > D, it may be the case that Σ̂ is
          ill-conditioned (meaning it is nearly singular).
              To solve these problems, we can use the posterior mode (or mean). One can show (using
          techniques analogous to the derivation of the MLE) that the MAP estimate is given by
                          SN         S0 + S μ
                         Σ̂map =  =                                                        (4.182)
                      νN + D + 1      N0 + N
          If we use an improper uniform prior, corresponding to N0 = 0 and S0 = 0, we recover the
          MLE.
          130                                                                  Chapter 4. Gaussian models


             Let us now consider the use of a proper informative prior, which is necessary whenever D/N
          is large (say bigger than 0.1). Let μ = x, so Sμ = Sx . Then we can rewrite the MAP estimate
                                                                                           S0
          as a convex combination of the prior mode and the MLE. To see this, let Σ0  N    0
                                                                                              be the prior
          mode. Then the posterior mode can be rewritten as
                           S0 + S x     N0 S 0      N    S
                Σ̂map =             =           +          = λΣ0 + (1 − λ)Σ̂mle                      (4.183)
                           N0 + N     N0 + N N0   N0 + N N
          where λ = N0N+N  0
                             , controls the amount of shrinkage towards the prior.
             This begs the question: where do the parameters of the prior come from? It is common to
          set λ by cross validation. Alternatively, we can use the closed-form formula provided in (Ledoit
          and Wolf 2004b,a; Schaefer and Strimmer 2005), which is the optimal frequentist estimate if we
          use squared loss. This is arguably not the most natural loss function for covariance matrices
          (because it ignores the postive deﬁnite constraint), but it results in a simple estimator, which
          is implemented in the PMTK function shrinkcov. We discuss Bayesian ways of estimating λ
          later.
             As for the prior covariance matrix, S0 , it is common to use the following (data dependent)
          prior: S0 = diag(Σ̂mle ). In this case, the MAP estimate is given by
                             
                                Σ̂mle (i, j)         if i = j
              Σ̂map (i, j) =                                                                         (4.184)
                                (1 − λ)Σ̂mle (i, j) otherwise
          Thus we see that the diagonal entries are equal to their ML estimates, and the off diago-
          nal elements are “shrunk” somewhat towards 0. This technique is therefore called shrinkage
          estimation, or regularized estimation.
             The beneﬁts of MAP estimation are illustrated in Figure 4.17. We consider ﬁtting a 50 dimen-
          sional Gaussian to N = 100, N = 50 and N = 25 data points. We see that the MAP estimate
          is always well-conditioned, unlike the MLE. In particular, we see that the eigenvalue spectrum
          of the MAP estimate is much closer to that of the true matrix than the MLE’s. The eigenvectors,
          however, are unaffected.
             The importance of regularizing the estimate of Σ will become apparent in later chapters,
          when we consider ﬁtting covariance matrices to high dimensional data.

4.6.2.2   Univariate posterior
          In the 1d case, the likelihood has the form
                                                                    
                                                  1 
                                                     N
                       2           2 −N/2
                p(D|σ )     ∝   (σ )        exp − 2     (xi − μ)2                                    (4.185)
                                                 2σ i=1

          The standard conjugate prior is the inverse Gamma distribution, which is just the scalar version
          of the inverse Wishart:
                                                           b0
                IG(σ 2 |a0 , b0 ) ∝ (σ 2 )−(a0 +1) exp(−      )                                      (4.186)
                                                           σ2
4.6. Inferring the parameters of an MVN                                                               131

                                                                                2
                                         N=2prior = IW(ν=0.001, S=0.001), true σ =10.000
                              0.35       N=5
                                         N=50
                                         N=100
                               0.3


                              0.25


                               0.2


                              0.15


                               0.1


                              0.05


                                 0
                                     0                5                     10             15
                                                                 σ2




Figure 4.18 Sequential updating of the posterior for σ 2 starting from an uninformative prior. The data
was generated from a Gaussian with known mean μ = 5 and unknown variance σ 2 = 10. Figure generated
by gaussSeqUpdateSigma1D.


Multiplying the likelihood and the prior, we see that the posterior is also IG:
   p(σ 2 |D)   =    IG(σ 2 |aN , bN )                                                             (4.187)
          aN   =    a0 + N/2                                                                      (4.188)
                           1
                             N
         bN    =    b0 +         (xi − μ)2                                                        (4.189)
                           2 i=1
See Figure 4.18 for an illustration.
   The form of the posterior is not quite as pretty as the multivariate case, because of the
factors of 12 . This arises because IW(σ 2 |s0 , ν0 ) = IG(σ 2 | s20 , ν20 ). Another problem with using
the IG(a0 , b0 ) distribution is that the strength of the prior is encoded in both a0 and b0 .
To avoid both of these problems, it is common (in the statistics literature) to use an alternative
parameterization of the IG distribution, known as the (scaled) inverse chi-squared distribution.
This is deﬁned as follows:
                                   ν0 ν0 σ02                             ν0 σ 2
    χ−2 (σ 2 |ν0 , σ02 ) = IG(σ 2 | ,        ) ∝ (σ 2 )−ν0 /2−1 exp(− 20 )                        (4.190)
                                   2    2                                2σ
Here ν0 controls the strength of the prior, and σ02 encodes the value of the prior. With this
prior, the posterior becomes
   p(σ 2 |D, μ)    =                   2
                       χ−2 (σ 2 |νN , σN )                                               (4.191)
            νN     =   ν0 + N                                                           (4.192)
                            2
                                 N           2
              2        ν0 σ0 + i=1 (xi − μ)
             σN   =                                                                     (4.193)
                                   νN
We see that the posterior dof νN is the prior dof ν0 plus N , and the posterior sum of squares
     2
ν N σN  is the prior sum of squares ν0 σ02 plus the data sum of squares.
   We can emulate an uninformative prior, p(σ 2 ) ∝ σ −2 , by setting ν0 = 0, which makes
intuitive sense (since it corresponds to a zero virtual sample size).
          132                                                                      Chapter 4. Gaussian models


 4.6.3    Posterior distribution of μ and Σ *
          We now discuss how to compute p(μ, Σ|D). These results are a bit complex, but will prove
          useful later on in this book. Feel free to skip this section on a ﬁrst reading.

4.6.3.1   Likelihood
          The likelihood is given by
                                                                                                
                                                                 1
                                                                    N
                                                      −N
                p(D|μ, Σ)     =   (2π) −N D/2
                                                |Σ|    2   exp −       (xi − μ)T Σ−1 (xi − μ)          (4.194)
                                                                 2 i=1

          Now one can show that
                
                N
                      (xi − μ)T Σ−1 (xi − μ)    =      tr(Σ−1 Sx ) + N (x − μ)T Σ−1 (x − μ)            (4.195)
                i=1

          Hence we can rewrite the likelihood as follows:
                                                                    
                                               N          N
            p(D|μ, Σ) = (2π)−N D/2 |Σ|− 2 exp − (μ − x)T Σ−1 (μ − x)                                   (4.196)
                                                          2
                                                    
                                      N
                             exp − tr(Σ−1 Sx )                                                         (4.197)
                                       2
          We will use this form below.

4.6.3.2   Prior
          The obvious prior to use is the following
                p(μ, Σ) = N (μ|m0 , V0 )IW(Σ|S0 , ν0 )                                                 (4.198)
          Unfortunately, this is not conjugate to the likelihood. To see why, note that μ and Σ appear
          together in a non-factorized way in the likelihood; hence they will also be coupled together in
          the posterior.
             The above prior is sometimes called semi-conjugate or conditionally conjugate, since both
          conditionals, p(μ|Σ) and p(Σ|μ), are individually conjugate. To create a full conjugate prior,
          we need to use a prior where μ and Σ are dependent on each other. We will use a joint
          distribution of the form

                p(μ, Σ) = p(Σ)p(μ|Σ)                                                                   (4.199)
          Looking at the form of the likelihood equation, Equation 4.197, we see that a natural conjugate
4.6. Inferring the parameters of an MVN                                                                               133


prior has the form of a Normal-inverse-wishart or NIW distribution, deﬁned as follows:

            NIW(μ, Σ|m0 , κ0 , ν0 , S0 )                                                                        (4.200)
                             1
                N (μ|m0 , Σ) × IW(Σ|S0 , ν0 )                                                                     (4.201)
                            κ0
                   1                 + κ                     ,
                               1           0
              =        |Σ|− 2 exp − (μ − m0 )T Σ−1 (μ − m0 )                                                     (4.202)
                 ZN IW                    2
                                                 
                     −
                       ν0 +D+1            1  −1
                ×|Σ|       2      exp − tr(Σ S0 )                                                                (4.203)
                                          2
                   1           ν0 +D+2
              =        |Σ|− 2                                                                                     (4.204)
                 ZN IW
                                                              
                            κ0                       1
                × exp − (μ − m0 )T Σ−1 (μ − m0 ) − tr(Σ−1 S0 )                                                   (4.205)
                             2                       2
    ZN IW      =     2v0 D/2 ΓD (ν0 /2)(2π/κ0 )D/2 |S0 |−ν0 /2                                                   (4.206)

where ΓD (a) is the multivariate Gamma function.
  The parameters of the NIW can be interpreted as follows: m0 is our prior mean for μ, and
κ0 is how strongly we believe this prior; and S0 is (proportional to) our prior mean for Σ, and
ν0 is how strongly we believe this prior.3
  One can show (Minka 2000f) that the (improper) uninformative prior has the form
                                                                   1
    lim N (μ|m0 , Σ/k)IW(Σ|S0 , k)                ∝    |2πΣ|− 2 |Σ|−(D+1)/2                                       (4.207)
    k→0
                                                               D
                                                  ∝    |Σ|−( 2 +1) ∝ NIW(μ, Σ|0, 0, 0, 0I)                       (4.208)

  In practice, it is often better to use a weakly informative data-dependent prior. A common
choice (see e.g., (Chipman et al. 2001, p81), (Fraley and Raftery 2007, p6)) is to use S0 =
diag(Sx )/N , and ν0 = D + 2, to ensure E [Σ] = S0 , and to set μ0 = x and κ0 to some small
number, such as 0.01.
3. Although this prior has four parameters, there are really only three free parameters, since our uncertainty in the
mean is proportional to the variance. In particular, if we believe that the variance is large, then our uncertainty in μ
must be large too. This makes sense intuitively, since if the data has large spread, it may be hard to pin down its mean.
See also Exercise 9.1, where we will see the three free parameters more explicitly. If we want separate “control” over our
conﬁdence in μ and Σ, we must use a semi-conjugate prior.
          134                                                                   Chapter 4. Gaussian models


4.6.3.3   Posterior
          The posterior can be shown (Exercise 4.11) to be NIW with updated parameters:
                p(μ, Σ|D)    =   NIW(μ, Σ|mN , κN , νN , SN )                                          (4.209)
                                 κ0 m0 + N x     κ0              N
                      mN     =               =          m0 +         x                                 (4.210)
                                     κN        κ0 + N         κ0 + N
                      κN     =   κ0 + N                                                                 (4.211)
                      νN     =   ν0 + N                                                                (4.212)
                                                κ0 N
                     S N = S0 + S x +                   (x − m0 )(x − m0 )T                            (4.213)
                                              κ0 + N
                             = S0 + S + κ0 m0 mT0 − κN mN mTN                                          (4.214)
                                         N
          where we have deﬁned S  i=1 xi xTi as the uncentered sum-of-squares matrix (this is easier
          to update incrementally than the centered version).
             This result is actually quite intuitive: the posterior mean is a convex combination of the prior
          mean and the MLE, with “strength” κ0 + N ; and the posterior scatter matrix SN is the prior
          scatter matrix S0 plus the empirical scatter matrix Sx plus an extra term due to the uncertainty
          in the mean (which creates its own virtual scatter matrix).

4.6.3.4   Posterior mode
          The mode of the joint distribution has the following form:
                                                   SN
              argmax p(μ, Σ|D) = (mN ,                     )                                           (4.215)
                                               νN + D + 2
          If we set κ0 = 0, this reduces to
                                                S0 + Sx
              argmax p(μ, Σ|D) = (x,                         )                                         (4.216)
                                            ν0 + N + D + 2
          The corresponding estimate Σ̂ is almost the same as Equation 4.183, but differs by 1 in the
          denominator, because this is the mode of the joint, not the mode of the marginal.

4.6.3.5   Posterior marginals
          The posterior marginal for Σ is simply

                p(Σ|D)   =       p(μ, Σ|D)dμ = IW(Σ|SN , νN )                                          (4.217)

          The mode and mean of this marginal are given by
                           SN                       SN
             Σ̂map =                , E [Σ] =                                                      (4.218)
                       νN + D + 1               νN − D − 1
             One can show that the posterior marginal for μ has a multivariate Student T distribution:
                                                                    1
             p(μ|D) =         p(μ, Σ|D)dΣ = T (μ|mN ,                         SN , νN − D + 1)     (4.219)
                                                            κN (νN − D + 1)
          This follows from the fact that the Student distribution can be represented as a scaled mixture
          of Gaussians (see Equation 11.61).
          4.6. Inferring the parameters of an MVN                                                               135




          Figure 4.19 The N Iχ2 (m0 , κ0 , ν0 , σ02 ) distribution. m0 is the prior mean and κ0 is how strongly we
          believe this; σ02 is the prior variance and ν0 is how strongly we believe this. (a) m0 = 0, κ0 = 1, ν0 =
          1, σ02 = 1. Notice that the contour plot (underneath the surface) is shaped like a “squashed egg”. (b) We
          increase the strength of our belief in the mean, so it gets narrower: m0 = 0, κ0 = 5, ν0 = 1, σ02 = 1. (c)
          We increase the strength of our belief in the variance, so it gets narrower: m0 = 0, κ0 = 1, ν0 = 5, σ02 =
          1. Figure generated by NIXdemo2.


4.6.3.6   Posterior predictive
          The posterior predictive is given by
                         p(x, D)
             p(x|D) =                                                                                        (4.220)
                          p(D)
          so it can be easily evaluated in terms of a ratio of marginal likelihoods.
            It turns out that this ratio has the form of a multivariate Student-T distribution:

             p(x|D)     =          N (x|μ, Σ)NIW(μ, Σ|mN , κN , νN , SN )dμdΣ                                (4.221)
                                              κN + 1
                        =    T (x|mN ,                   SN , νN − D + 1)                                    (4.222)
                                         κN (νN − D + 1)
          The Student-T has wider tails than a Gaussian, which takes into account the fact that Σ is
          unknown. However, this rapidly becomes Gaussian-like.

4.6.3.7   Posterior for scalar data
          We now specialise the above results to the case where xi is 1d. These results are widely used
          in the statistics literature. As in Section 4.6.2.2, it is conventional not to use the normal inverse
136                                                                                Chapter 4. Gaussian models


Wishart, but to use the normal inverse chi-squared or NIX distribution, deﬁned by
      N Iχ2 (μ, σ 2 |m0 , κ0 , ν0 , σ02 )           N (μ|m0 , σ 2 /κ0 ) χ−2 (σ 2 |ν0 , σ02 )          (4.223)
                                                                                                  
                                                       1 (ν0 +3)/2          ν0 σ02 + κ0 (μ − m0 )2
                                             ∝       ( 2)           exp −                              (4.224)
                                                      σ                                 2σ 2
See Figure 4.19 for some plots. Along the μ axis, the distribution is shaped like a Gaussian, and
along the σ 2 axis, the distribution is shaped like a χ−2 ; the contours of the joint density have
a “squashed egg” appearance. Interestingly, we see that the contours for μ are more peaked
for small values of σ 2 , which makes sense, since if the data is low variance, we will be able to
estimate its mean more reliably.
   One can show that the posterior is given by
      p(μ, σ 2 |D)      =                                  2
                            N Iχ2 (μ, σ 2 |mN , κN , νN , σN )                                         (4.225)
                            κ0 m0 + N x
               mN       =                                                                              (4.226)
                                κN
               κN       =   κ0 + N                                                                     (4.227)
               νN       =   ν0 + N                                                                     (4.228)
                                       
                                       N
                                                              N κ0
                2
           ν N σN       =   ν0 σ02 +         (xi − x)2 +            (m0 − x)2                          (4.229)
                                       i=1
                                                             κ0 + N

  The posterior marginal for σ 2 is just

      p(σ 2 |D)     =                                         2
                             p(μ, σ 2 |D)dμ = χ−2 (σ 2 |νN , σN )                                      (4.230)
                                                        
                                                    2
with the posterior mean given by E σ 2 |D = νNνN−2 σN .
  The posterior marginal for μ has a Student T distribution, which follows from the scale
mixture representation of the student:

      p(μ|D)      =                                       2
                            p(μ, σ 2 |D)dσ 2 = T (μ|mN , σN /κN , νN )                                 (4.231)

with the posterior mean given by E [μ|D] = mN .
  Let us see how these results look if we use the following uninformative prior:
      p(μ, σ 2 ) ∝ p(μ)p(σ 2 ) ∝ σ −2 ∝ N Iχ2 (μ, σ 2 |μ0 = 0, κ0 = 0, ν0 = −1, σ02 = 0)               (4.232)
With this prior, the posterior has the form
      p(μ, σ 2 |D)      =                                               2
                            N Iχ2 (μ, σ 2 |mN = x, κN = N, νN = N − 1, σN = s2 )                       (4.233)
where
                    1 
                            N
                                         N
      s2                   (xi − x)2 =      σ̂ 2                                                      (4.234)
                  N − 1 i=1             N − 1 mle
is the the sample standard deviation. (In Section 6.4.2, we show that this is an unbiased
estimate of the variance.) Hence the marginal posterior for the mean is given by
                             s2
      p(μ|D) = T (μ|x,          , N − 1)                                                               (4.235)
                             N
          4.6. Inferring the parameters of an MVN                                                                        137


          and the posterior variance of μ is
                               νN    2   N − 1 s2   s2
             var [μ|D] =            σN =          →                                                                  (4.236)
                             νN − 2      N −3N      N
          The square root of this is called the standard error of the mean:
                              s
               var [μ|D] ≈ √                                                                                         (4.237)
                               N
          Thus an approximate 95% posterior credible interval for the mean is
                                s
            I.95 (μ|D) = x ± 2 √                                                                                     (4.238)
                                 N
          (Bayesian credible intervals are discussed in more detail in Section 5.2.2; they are contrasted
          with frequentist conﬁdence intervals in Section 6.6.1.)

4.6.3.8   Bayesian t-test
          Suppose we want to test the hypothesis that μ = μ0 for some known value μ0 (often 0), given
          values xi ∼ N (μ, σ 2 ). This is called a two-sided, one-sample t-test. A simple way to perform
          such a test is just to check if μ0 ∈ I0.95 (μ|D). If it is not, then we can be 95% sure that
          μ = μ0 .4 A more common scenario is when we want to test if two paired samples have
          the same mean. More precisely, suppose yi ∼ N (μ1 , σ 2 ) and zi ∼ N (μ2 , σ 2 ). We want to
          determine if μ = μ1 − μ2 > 0, using xi = yi − zi as our data. We can evaluate this quantity
          as follows:
                                    ∞
             p(μ > μ0 |D) =             p(μ|D)dμ                                                                     (4.239)
                                   μ0

          This is called a one-sided, paired t-test. (For a similar approach to unpaired tests, comparing
          the difference in binomial proportions, see Section 5.2.3.)
            To calculate the posterior, we must specify a prior. Suppose we use an uninformative prior.
          As we showed above, we ﬁnd that the posterior marginal on μ has the form
                                    s2
             p(μ|D) = T (μ|x,          , N − 1)                                                                      (4.240)
                                    N
          Now let us deﬁne the following t statistic:
                   x − μ0
             t      √                                                                                                (4.241)
                   s/ N
          where the denominator is the standard error of the mean. We see that
             p(μ|D) = 1 − FN −1 (t)                                                                                  (4.242)
          where Fν (t) is the cdf of the standard Student t distribution T (0, 1, ν).

          4. A more complex approach is to perform Bayesian model comparison. That is, we compute the Bayes factor (described
          in Section 5.3.3) p(D|H0 )/p(D|H1 ), where H0 is the point null hypothesis that μ = μ0 , and H1 is the alternative
          hypothesis that μ = μ0 . See (Gonen et al. 2005; Rouder et al. 2009) for details.
          138                                                                   Chapter 4. Gaussian models


4.6.3.9   Connection with frequentist statistics *
          If we use an uninformative prior, it turns out that the above Bayesian analysis gives the same
          result as derived using frequentist methods. (We discuss frequentist statistics in Chapter 6.)
          Speciﬁcally, from the above results, we see that
                μ−x
                        |D ∼ tN −1                                                                     (4.243)
                  s/N
          This has the same form as the sampling distribution of the MLE:

                μ−X
                        |μ ∼ tN −1                                                                     (4.244)
                  s/N

          The reason is that the Student distribution is symmetric in its ﬁrst two arguments, so T (x|μ, σ 2 , ν) =
          T (μ|x, σ 2 , ν); hence statements about the posterior for μ have the same form as statements
          about the sampling distribution of x. Consequently, the (one-sided) p-value (deﬁned in Sec-
          tion 6.6.2) returned by a frequentist test is the same as p(μ > μ0 |D) returned by the Bayesian
          method. See bayesTtestDemo for an example.
             Despite the superﬁcial similarity, these two results have a different interpretation: in the
          Bayesian approach, μ is unknown and x is ﬁxed, whereas in the frequentist approach, X
          is unknown and μ is ﬁxed. More equivalences between frequentist and Bayesian inference
          in simple models using uninformative priors can be found in (Box and Tiao 1973). See also
          Section 7.6.3.3.

 4.6.4    Sensor fusion with unknown precisions *
          In this section, we apply the results in Section 4.6.3 to the problem of sensor fusion in the
          case where the precision of each measurement device is unknown. This generalizes the results
          of Section 4.4.2.2, where the measurement model was assumed to be Gaussian with known
          precision. The unknown precision case turns out to give qualitatively different results, yielding
          a potentially multi-modal posterior as we will see. Our presentation is based on (Minka 2001e).
             Suppose we want to pool data from multiple sources to estimate some quantity μ ∈ R, but the
          reliability of the sources is unknown. Speciﬁcally, suppose we have two different measurement
          devices, x and y, with different precisions: xi |μ ∼ N (μ, λ−1                         −1
                                                                        x ) and yi |μ ∼ N (μ, λy ). We
          make two independent measurements with each device, which turn out to be

                x1 = 1.1, x2 = 1.9, y1 = 2.9, y2 = 4.1                                                 (4.245)

          We will use a non-informative prior for μ, p(μ) ∝ 1, which we can emulate using an inﬁnitely
          broad Gaussian, p(μ) = N (μ|m0 = 0, λ−1  0 = ∞). If the λx and λy terms were known, then
          the posterior would be Gaussian:

                p(μ|D, λx , λy )   =   N (μ|mN , λ−1
                                                  N )                                                  (4.246)
                            λN     =   λ0 + N x λ x + N y λ y                                          (4.247)
                                       λx N x x + λy N y y
                           mN      =                                                                   (4.248)
                                        N x λx + N y λy
4.6. Inferring the parameters of an MVN                                                        139


where Nx = 2 is the number of x measurements, Ny = 2 is the number of y measurements,
         Nx                          Ny
x = N1x i=1     xi = 1.5 and y = N1y i=1    yi = 3.5. This result follows because the posterior
precision is the sum of the measurement precisions, and the posterior mean is a weighted sum
of the prior mean (which is 0) and the data means.
   However, the measurement precisions are not known. Initially we will estimate them by
maximum likelihood. The log-likelihood is given by
                                      λx                       λy 
    (μ, λx , λy )     =    log λx −        (xi − μ)2 + log λy −      (yi − μ)2             (4.249)
                                       2 i                      2 i

The MLE is obtained by solving the following simultaneous equations:
    ∂
             =   λx Nx (x − μ) + λy Ny (y − μ) = 0                                         (4.250)
    ∂μ
                       1 
                         Nx
    ∂             1
             =      −        (xi − μ)2 = 0                                                  (4.251)
   ∂λx           λx   Nx i=1

                      1 
                         Ny
    ∂            1
             =      −        (yi − μ)2 = 0                                                 (4.252)
   ∂λy           λy   Ny i=1

This gives

                    Nx λ̂x x + Ny λ̂y y
       μ̂    =                                                                             (4.253)
                     Nx λ̂x + Ny λ̂y
                     1 
   1/λ̂x     =              (xi − μ̂)2                                                     (4.254)
                    Nx i
                    1 
   1/λ̂y     =             (yi − μ̂)2                                                      (4.255)
                    Ny i

We notice that the MLE for μ has the same form as the posterior mean, mN .
  We can solve these equations by ﬁxed point iteration. Let us initialize by estimating λx = 1/s2x
                                Nx                                        Ny
and λy = 1/s2y , where s2x = N1x i=1  (xi − x)2 = 0.16 and s2y = N1y i=1         (yi − y)2 = 0.36.
Using this, we get μ̂ = 2.1154, so p(μ|D, λ̂x , λ̂y ) = N (μ|2.1154, 0.0554). If we now iterate,
we converge to λ̂x = 1/0.1662, λ̂y = 1/4.0509, p(μ|D, λ̂x , λ̂y ) = N (μ|1.5788, 0.0798).
   The plug-in approximation to the posterior is plotted in Figure 4.20(a). This weights each
sensor according to its estimated) precision. Since
                                                *      sensor y was estimated to be much less
reliable than sensor x, we have E μ|D, λ̂x , λ̂y ≈ x, so we effectively ignore the y sensor.
   Now we will adopt a Bayesian approach and integrate out the unknown precisions, rather
than trying to estimate them. That is, we compute
                                                                             
    p(μ|D) ∝ p(μ)       p(Dx |μ, λx )p(λx |μ)dλx       p(Dy |μ, λy )p(λy |μ)dλy          (4.256)

We will use uninformative Jeffrey’s priors, p(μ) ∝ 1, p(λx |μ) ∝ 1/λx and p(λy |μ) ∝ 1/λy .
140                                                                     Chapter 4. Gaussian models


Since the x and y terms are symmetric, we will just focus on one of them. The key integral is

      I=    p(Dx |μ, λx )p(λx |μ)dλx    ∝     λ−1
                                               x (Nx λx )
                                                          Nx /2
                                                                                            (4.257)
                                                                        
                                                  Nx            2 Nx 2
                                            exp −    λx (x − μ) −    s λx dλx               (4.258)
                                                   2               2 x
Exploiting the fact that Nx = 2 this simpliﬁes to

      I=    λ−1 1                 2   2
             x λx exp(−λx [(x − μ) + sx ])dλx                                               (4.259)

We recognize this as proportional to the integral of an unnormalized Gamma density

      Ga(λ|a, b) ∝ λa−1 e−λb                                                                (4.260)

where a = 1 and b = (x − μ)2 + s2x . Hence the integral is proportional to the normalizing
constant of the Gamma distribution, Γ(a)b−a , so we get
                                                               −1
      I∝    p(Dx |μ, λx )p(λx |μ)dλx    ∝       x − μ)2 + s2x                               (4.261)

and the posterior becomes
                       1            1
      p(μ|D) ∝                                                                              (4.262)
                         2  2
                 (x − μ) + sx (y − μ)2 + s2y

   The exact posterior is plotted in Figure 4.20(b). We see that it has two modes, one near
x = 1.5 and one near y = 3.5. These correspond to the beliefs that the x sensor is more
reliable than the y one, and vice versa. The weight of the ﬁrst mode is larger, since the data
from the x sensor agree more with each other, so it seems slightly more likely that the x sensor
is the reliable one. (They obviously cannot both be reliable, since they disagree on the values
that they are reporting.) However, the Bayesian solution keeps open the possibility that the y
sensor is the more reliable one; from two measurements, we cannot tell, and choosing just the
x sensor, as the plug-in approximation does, results in over conﬁdence (a posterior that is too
narrow).

Exercises
Exercise 4.1 Uncorrelated does not imply independent
Let X ∼ U (−1, 1) and Y = X 2 . Clearly Y is dependent on X (in fact, Y is uniquely determined
by X). However, show that ρ(X, Y ) = 0. Hint: if X ∼ U (a, b) then E[X] = (a + b)/2 and
var [X] = (b − a)2 /12.
Exercise 4.2 Uncorrelated and Gaussian does not imply independent unless jointly Gaussian
Let X ∼ N (0, 1) and Y = W X, where p(W = −1) = p(W = 1) = 0.5. It is clear that X and Y are
not independent, since Y is a function of X.
a. Show Y ∼ N (0, 1).
4.6. Inferring the parameters of an MVN                                                                           141

   0.8                                                           1.5

   0.7

   0.6
                                                                  1
   0.5

   0.4

   0.3
                                                                 0.5
   0.2

   0.1

    0                                                             0
    −2     −1    0    1    2        3      4       5    6         −2   −1    0    1     2     3   4    5      6


                          (a)                                                         (b)

Figure 4.20 Posterior for μ.            (a) Plug-in approximation.     (b) Exact posterior.   Figure generated by
sensorFusionUnknownPrec.


b. Show cov [X, Y ] = 0. Thus X and Y are uncorrelated but dependent, even though they are Gaussian.
   Hint: use the deﬁnition of covariance
         cov [X, Y ] = E [XY ] − E [X] E [Y ]                                                                (4.263)
   and the rule of iterated expectation
         E [XY ] = E [E [XY |W ]]                                                                            (4.264)
Exercise 4.3 Correlation coefficient is between -1 and +1
Prove that −1 ≤ ρ(X, Y ) ≤ 1
Exercise 4.4 Correlation coefficient for linearly related variables is ±1
Show that, if Y = aX + b for some parameters a > 0 and b, then ρ(X, Y ) = 1. Similarly show that if
a < 0, then ρ(X, Y ) = −1.
Exercise 4.5 Normalization constant for a multidimensional Gaussian
Prove that the normalization constant for a d-dimensional Gaussian is given by
                     
                 1             1
   (2π)d/2 |Σ| 2 = exp(− (x − μ)T Σ−1 (x − μ))dx                                                    (4.265)
                               2
                                                      
Hint: diagonalize Σ and use the fact that |Σ| = i λi to write the joint pdf as a product of d one-
dimensional Gaussians in a transformed coordinate system. (You will need the change of variables formula.)
Finally, use the normalization constant for univariate Gaussians.
Exercise 4.6 Bivariate Gaussian
Let x ∼ N (μ, Σ) where x ∈ R2 and
         2                
            σ1      ρσ1 σ2
    Σ=                                                                                                       (4.266)
          ρσ1 σ2      σ22

where ρ is the correlation coefficient. Show that the pdf is given by
                                1
   p(x1 , x2 )   =                                                                                          (4.267)
                      2πσ1 σ2       1 − ρ2
                                                                                                         
                                    1              (x1 − μ1 )2   (x2 − μ2 )2      (x1 − μ1 ) (x2 − μ2 )
                      exp −                                    +             − 2ρ                           (4.268)
                                2(1 − ρ2 )             σ12           σ22              σ1         σ2
142                                                                                                                                 Chapter 4. Gaussian models

                               raw                                              standarized
              280                     2235                   4


              260                                                                       2235
                                      34                     3
                                      44         57                                                                                             whitened
              240                           13                                                                            4
                                                                                        34
                                                                                        44
                                            20                                                        57                                                    35 22
                                                             2                                 13                         3
              220
                                     25
                                     19               2                                        20                                              57          34
                                                                                                                                                           44
                                       65                                                                                 2                           13
              200                         11                                          25
                                                                                      19                        2                                   20
                              3123                           1                           65                                                               25
                            16          51        21                                                                               2
                                269
                                73        4067                                                 11                         1
                                                                                                                                              11     65 19
                                                                                23
              180             66 6849   17
                                    2715 52
                                        48            36                     31                                                     21         51             23 31
                                  37
                                  4
                                  55
                                                                          16
                                                                                73
                                                                                269 49
                                                                                            51
                                                                                               4067
                                                                                                           21
                                                                                                                              36         6752
                                                                                                                                            4048     4968
                                                                                                                                              17 15 27      2666 16
                                                                                                                                                         9 73
                              43 72     45                                   66 68 271548   1752                36        0                  45        37
                                                                                                                                                       4
                                                                                                                                                       55
                              2433                                                                                                                    72     43
                                                                                                                                                             24
                            53
                                  6460
                                      18
                                      69
                                      47              70     0                     37
                                                                                   4
                                                                                   55       45
                                                                                                                            70           71 62 69
                                                                                                                                               1860
                                                                                                                                               47
                                                                                                                                              63
                                                                                                                                              50 8 10
                                                                                                                                                 54  64 33 53
              160                   5450 71
                                    8 63                                     43 72                                                                     39  61
                                                                                                                                                           42
                              423910 62
                              61                                          53243364 69    18
                                                                                         47                     70       −1                    5 3236 58
                                                                                                                                                     7
                                                                                                                                                                    5646
                                                                                                                                                                30 28 12
                      1256        6
                                583
                                  32                                         423910
                                                                             61
                                                                                      8 63
                                                                                      54
                                                                                      60 50 71
                                                                                         62                                                      59        14 41
                                                                                                                                                           29
                      462830        5                                              6                                                      38                 1
                                7                                 4656
                                                                  12            58332 5
              140         41                                         2830
                            14
                            29    59                        −1                  7                                        −2
                                                                       41
                                                                          14
                                                                          29       59
                           1          38
              120                                                      1                38                               −3
                                                                                                                          −3       −2     −1          0     1       2      3
                                                            −2
              100


               80                                           −3
                 60   65       70           75         80    −3   −2       −1       0         1        2             3




              Figure 4.21 (a) Height/weight data for the men. (b) Standardized. (c) Whitened.


Exercise 4.7 Conditioning a bivariate Gaussian
Consider a bivariate Gaussian distribution p(x1 , x2 ) = N (x|μ, Σ) where
         2                    σ1        
           σ1 σ12                 σ2
                                         ρ
   Σ=                  = σ1 σ2          σ2                                                                                                                                     (4.269)
          σ21 σ22                  ρ    σ1

where the correlation coefficient is given by
            σ12
      ρ                                                                                                                                                                       (4.270)
           σ1 σ2
a. What is P (X2 |x1 )? Simplify your answer by expressing it in terms of ρ, σ2 , σ1 , μ1 ,μ2 and x1 .
b. Assume σ1 = σ2 = 1. What is P (X2 |x1 ) now?
Exercise 4.8 Whitening vs standardizing
a. Load the height/weight data using rawdata = dlmread(’heightWeightData.txt’). The ﬁrst col-
   umn is the class label (1=male, 2=female), the second column is height, the third weight. Extract the
   height/weight data corresponding to the males. Fit a 2d Gaussian to the male data, using the empirical
   mean and covariance. Plot your Gaussian as an ellipse (use gaussPlot2d), superimposing on your
   scatter plot. It should look like Figure 4.21(a), where have labeled each datapoint by its index. Turn in
   your ﬁgure and code.
b. Standardizing the data means ensuring the empirical variance along each dimension is 1. This can be
                         x −x
   done by computing ijσj j , where σj is the empirical std of dimension j. Standardize the data and
   replot. It should look like Figure 4.21(b). (Use axis(’equal’).) Turn in your ﬁgure and code.
c. Whitening or sphereing the data means ensuring its empirical covariance matrix is proportional to
   I, so the data is uncorrelated and of equal variance along each dimension. This can be done by
                    1
   computing Λ− 2 UT x for each data vector x, where U are the eigenvectors and Λ the eigenvalues of
   X. Whiten the data and replot. It should look like Figure 4.21(c). Note that whitening rotates the data,
   so people move to counter-intuitive locations in the new coordinate system (see e.g., person 2, who
   moves from the right hand side to the left).

Exercise 4.9 Sensor fusion with known variances in 1d
Suppose we have two sensors with known (and different) variances v1 and v2 , but unknown (and the same)
                                              (1)
mean μ. Suppose we observe n1 observations yi ∼ N (μ, v1 ) from the ﬁrst sensor and n2 observations
4.6. Inferring the parameters of an MVN                                                                     143

 (2)
yi ∼ N (μ, v2 ) from the second sensor. (For example, suppose μ is the true temperature outside,
and sensor 1 is a precise (low variance) digital thermosensing device, and sensor 2 is an imprecise (high
variance) mercury thermometer.) Let D represent all the data from both sensors. What is the posterior
p(μ|D), assuming a non-informative prior for μ (which we can simulate using a Gaussian with a precision
of 0)? Give an explicit expression for the posterior mean and variance.
Exercise 4.10 Derivation of information form formulae for marginalizing and conditioning
Derive the information form results of Section 4.3.1.
Exercise 4.11 Derivation of the NIW posterior
Derive Equation 4.209. Hint: one can show that

     N (x − μ)(x − μ)T + κ0 (μ − m0 )(μ − m0 )T                                                          (4.271)
                                       κ0 N
          = κN (μ − mN )(μ − mN )T +        (x − m0 )(x − m0 )T                                          (4.272)
                                        κN
This is a matrix generalization of an operation called completing the square.5
Derive the corresponding result for the normal-Wishart model.
Exercise 4.12 BIC for Gaussians
(Source: Jaakkola.)
The Bayesian information criterion (BIC) is a penalized log-likelihood function that can be used for model
selection (see Section 5.3.2.4). It is deﬁned as
                                        d
     BIC = log p(D|θ̂ M L ) −             log(N )                                                        (4.273)
                                        2
where d is the number of free parameters in the model and N is the number of samples. In this question,
we will see how to use this to choose between a full covariance Gaussian and a Gaussian with a diagonal
covariance. Obviously a full covariance Gaussian has higher likelihood, but it may not be “worth” the extra
parameters if the improvement over a diagonal covariance matrix is too small. So we use the BIC score to
choose the model.
Following Section 4.1.3, we can write
                             N  −1  N               ˆ
    log p(D|Σ̂, μ̂) = − tr Σ̂ Ŝ −               log(|Σ|)                                            (4.274)
                              2                2
                                       N
                                   1
                       Ŝ     =              (xi − x)(xi − x)T                                           (4.275)
                                   N   i=1

where Ŝ is the scatter matrix (empirical covariance), the trace of a matrix is the sum of its diagonals, and
we have used the trace trick.

a. Derive the BIC score for a Gaussian in D dimensions with full covariance matrix. Simplify your answer
   as much as possible, exploiting the form of the MLE. Be sure to specify the number of free parameters
   d.
b. Derive the BIC score for a Gaussian in D dimensions with a diagonal covariance matrix. Be sure to
   specify the number of free parameters d. Hint: for the digaonal case, the ML estimate of Σ is the same
   as Σ̂M L except the off-diagonal terms are zero:
         Σ̂diag = diag(Σ̂M L (1, 1), . . . , Σ̂M L (D, D))                                               (4.276)

5. In the scalar case, completing the square means rewriting c2 x2 + c1 x + c0 as −a(x − b)2 + w where a = −c2 ,
       c1               c2
b=     2c2
             and w =     1
                        4c2
                              + c0 .
144                                                                        Chapter 4. Gaussian models


Exercise 4.13 Gaussian posterior credible interval
(Source: DeGroot.)
Let X ∼ N (μ, σ 2 = 4) where μ is unknown but has prior μ ∼ N (μ0 , σ02 = 9). The posterior after
seeing n samples is μ ∼ N (μn , σn2 ). (This is called a credible interval, and is the Bayesian analog of a
conﬁdence interval.) How big does n have to be to ensure
      p( ≤ μn ≤ u|D) ≥ 0.95                                                                        (4.277)
where (, u) is an interval (centered on μn ) of width 1 and D is the data. Hint: recall that 95% of the
probability mass of a Gaussian is within ±1.96σ of the mean.
Exercise 4.14 MAP estimation for 1D Gaussians
(Source: Jaakkola.)
Consider samples x1 , . . . , xn from a Gaussian random variable with known variance σ 2 and unknown
mean μ. We further assume a prior distribution (also Gaussian) over the mean, μ ∼ N (m, s2 ), with ﬁxed
mean m and ﬁxed variance s2 . Thus the only unknown is μ.

a. Calculate the MAP estimate μ̂M AP . You can state the result without proof. Alternatively, with a lot
   more work, you can compute derivatives of the log posterior, set to zero and solve.
b. Show that as the number of samples n increase, the MAP estimate converges to the maximum likelihood
   estimate.
c. Suppose n is small and ﬁxed. What does the MAP estimator converge to if we increase the prior
   variance s2 ?
d. Suppose n is small and ﬁxed. What does the MAP estimator converge to if we decrease the prior
   variance s2 ?

Exercise 4.15 Sequential (recursive) updating of Σ̂
(Source: (Duda et al. 2001, Q3.35,3.36).)
The unbiased estimates for the covariance of a d-dimensional Gaussian based on n samples is given by
                             n
                      1
      Σ̂ = Cn   =                  (xi − mn )(xi − mn )T                                            (4.278)
                     n−1     i=1

It is clear that it takes O(nd2 ) time to compute Cn . If the data points arrive one at a time, it is more
efficient to incrementally update these estimates than to recompute from scratch.

a. Show that the covariance can be sequentially udpated as follows
                n−1            1
      Cn+1 =          Cn +         (xn+1 − mn )(xn+1 − mn )T                                        (4.279)
                  n          n+1
b. How much time does it take per sequential update? (Use big-O notation.)
c. Show that we can sequentially update the precision matrix using
                                                                          
        −1       n       −1       C−1
                                   n (xn+1 − mn )(xn+1 − mn ) Cn
                                                                   T  −1
      Cn+1 =            Cn − n2 −1                                                                  (4.280)
               n−1                   + (xn+1 − mn )T C−1  n (xn+1 − mn )
                                       n

      Hint: notice that the update to Cn+1 consists of adding a rank-one matrix, namely uuT , where
      u = xn+1 − mn . Use the matrix inversion lemma for rank-one updates (Equation 4.111), which we
      repeat here for convenience:
                                           E−1 uvT E−1
         (E + uvT )−1    =    E−1 −                                                                  (4.281)
                                           1 + vT E−1 u
4.6. Inferring the parameters of an MVN                                                                    145


d. What is the time complexity per update?

Exercise 4.16 Likelihood ratio for Gaussians
Source: Source: Alpaydin p103 ex 4. Consider a binary classiﬁer where the K class conditional densities
are MVN p(x|y = j) = N (x|μj , Σj ). By Bayes rule, we have
         p(y = 1|x)       p(x|y = 1)       p(y = 1)
   log              = log            + log                                                              (4.282)
         p(y = 0|x)       p(x|y = 0)       p(y = 0)
In other words, the log posterior ratio is the log likelihood ratio plus the log prior ratio. For each of the 4
cases in the table below, derive an expression for the log likelihood ratio log p(x|y=1)
                                                                                p(x|y=0)
                                                                                         , simplifying as much
as possible.
                Form of Σj              Cov                                   Num parameters
                Arbitrary               Σj                                    Kd(d + 1)/2
                Shared                  Σj = Σ                                d(d + 1)/2
                Shared, axis-aligned Σj = Σ with Σij = 0 for i = j d
                Shared, spherical       Σj = σ 2 I                            1

Exercise 4.17 LDA/QDA on height/weight data
The function discrimAnalysisHeightWeightDemo ﬁts an LDA and QDA model to the height/weight
data. Compute the misclassiﬁcation rate of both of these models on the training set. Turn in your numbers
and code.
Exercise 4.18 Naive Bayes with mixed features
Consider a 3 class naive Bayes classiﬁer with one binary feature and one Gaussian feature:

   y ∼ Mu(y|π, 1), x1 |y = c ∼ Ber(x1 |θc ), x2 |y = c ∼ N (x2 |μc , σc2 )                              (4.283)
Let the parameter vectors be as follows:

   π = (0.5, 0.25, 0.25), θ = (0.5, 0.5, 0.5), μ = (−1, 0, 1), σ 2 = (1, 1, 1)                          (4.284)

a. Compute p(y|x1 = 0, x2 = 0) (the result should be a vector of 3 numbers that sums to 1).
b. Compute p(y|x1 = 0).
c. Compute p(y|x2 = 0).
d. Explain any interesting patterns you see in your results. Hint: look at the parameter vector θ.

Exercise 4.19 Decision boundary for LDA with semi tied covariances
Consider a generative classiﬁer with class conditional densities of the form N (x|μc , Σc ). In LDA, we
assume Σc = Σ, and in QDA, each Σc is arbitrary. Here we consider the 2 class case in which
Σ1 = kΣ0 , for k > 1. That is, the Gaussian ellipsoids have the same “shape”, but the one for class 1
is “wider”. Derive an expression for p(y = 1|x, θ), simplifying as much as possible. Give a geometric
interpretation of your result, if possible.
Exercise 4.20 Logistic regression vs LDA/QDA
(Source: Jaakkola.) Suppose we train the following binary classiﬁers via maximum likelihood.
a. GaussI: A generative classiﬁer, where the class conditional densities are Gaussian, with both covariance
   matrices set to I (identity matrix), i.e., p(x|y = c) = N (x|μc , I). We assume p(y) is uniform.
b. GaussX: as for GaussI, but the covariance matrices are unconstrained, i.e., p(x|y = c) = N (x|μc , Σc ).
146                                                                            Chapter 4. Gaussian models


c. LinLog: A logistic regression model with linear features.
d. QuadLog: A logistic regression model, using linear and quadratic features (i.e., polynomial basis function
   expansion of degree 2).
After training we compute the performance of each model M on the training set as follows:
                    n
                1
      L(M ) =             log p(yi |xi , θ̂, M )                                                         (4.285)
                n   i=1


(Note that this is the conditional log-likelihood p(y|x, θ̂) and not the joint log-likelihood p(y, x|θ̂).) We
now want to compare the performance of each model. We will write L(M ) ≤ L(M  ) if model M must
have lower (or equal) log likelihood (on the training set) than M  , for any training set (in other words, M is
worse than M  , at least as far as training set logprob is concerned). For each of the following model pairs,
state whether L(M ) ≤ L(M  ), L(M ) ≥ L(M  ), or whether no such statement can be made (i.e., M
might sometimes be better than M  and sometimes worse); also, for each question, brieﬂy (1-2 sentences)
explain why.

a. GaussI, LinLog.
b. GaussX, QuadLog.
c. LinLog, QuadLog.
d. GaussI, QuadLog.
e. Now suppose we measure performance in terms of the average misclassiﬁcation rate on the training
   set:
                           n
                     1
         R(M ) =                I(yi = ŷ(xi ))                                                         (4.286)
                     n    i=1

      Is it true in general that L(M ) > L(M  ) implies that R(M ) < R(M  )? Explain why or why not.

Exercise 4.21 Gaussian decision boundaries
(Source: (Duda et al. 2001, Q3.7).) Let p(x|y = j) = N (x|μj , σj ) where j = 1, 2 and μ1 = 0, σ12 =
1, μ2 = 1, σ22 = 106 . Let the class priors be equal, p(y = 1) = p(y = 2) = 0.5.

a. Find the decision region
         R1 = {x : p(x|μ1 , σ1 ) ≥ p(x|μ2 , σ2 )}                                                        (4.287)
      Sketch the result. Hint: draw the curves and ﬁnd where they intersect. Find both solutions of the
      equation
         p(x|μ1 , σ1 ) = p(x|μ2 , σ2 )                                                                   (4.288)
                                                       2
      Hint: recall that to solve a quadratic equation ax + bx + c = 0, we use
                      √
               −b ± b2 − 4ac
         x=                                                                                              (4.289)
                        2a
b. Now suppose σ2 = 1 (and all other parameters remain the same). What is R1 in this case?
4.6. Inferring the parameters of an MVN                                                                 147


Exercise 4.22 QDA with 3 classes
Consider a three category classiﬁcation problem. Let the prior probabilites:
   P (Y = 1) = P (Y = 2) = P (Y = 3) = 1/3                                                           (4.290)
The class-conditional densities are multivariate normal densities with parameters:

   μ1 = [0, 0]T , μ2 = [1, 1]T , μ3 = [−1, 1]T                                                       (4.291)



                                                                               
              0.7    0                     0.8   0.2                    0.8   0.2
   Σ1 =                       , Σ2 =                       , Σ3 =                                    (4.292)
               0    0.7                    0.2   0.8                    0.2   0.8

Classify the following points:
a. x = [−0.5, 0.5]
b. x = [0.5, 0.5]
Exercise 4.23 Scalar QDA
[Note: you can solve this exercise by hand or using a computer (matlab, R, whatever). In either case, show
your work.] Consider the following training set of heights x (in inches) and gender y (male/female) of some
US college students: x = (67, 79, 71, 68, 67, 60), y = (m, m, m, f, f, f ).

a. Fit a Bayes classiﬁer to this data, using maximum likelihood estimation, i.e., estimate the parameters of
   the class conditional likelihoods
       p(x|y = c) = N (x; μc , σc )                                                                  (4.293)
   and the class prior
       p(y = c) = πc                                                                                 (4.294)
   What are your values of μc , σc , πc for c = m, f ? Show your work (so you can get partial credit if you
   make an arithmetic error).
b. Compute p(y = m|x, θ̂), where x = 72, and θ̂ are the MLE parameters. (This is called a plug-in
   prediction.)
c. What would be a simple way to extend this technique if you had multiple attributes per person, such
   as height and weight? Write down your proposed model as an equation.
5       Bayesian statistics



 5.1    Introduction
        We have now seen a variety of different probability models, and we have discussed how to
        ﬁt them to data, i.e., we have discussed how to compute MAP parameter estimates θ̂ =
        argmax p(θ|D), using a variety of different priors. We have also discussed how to compute
        the full posterior p(θ|D), as well as the posterior predictive density, p(x|D), for certain special
        cases (and in later chapters, we will discuss algorithms for the general case).
           Using the posterior distribution to summarize everything we know about a set of unknown
        variables is at the core of Bayesian statistics. In this chapter, we discuss this approach to
        statistics in more detail. In Chapter 6, we discuss an alternative approach to statistics known as
        frequentist or classical statistics.

 5.2    Summarizing posterior distributions
        The posterior p(θ|D) summarizes everything we know about the unknown quantities θ. In this
        section, we discuss some simple quantities that can be derived from a probability distribution,
        such as a posterior. These summary statistics are often easier to understand and visualize than
        the full joint.

5.2.1   MAP estimation
        We can easily compute a point estimate of an unknown quantity by computing the posterior
        mean, median or mode. In Section 5.7, we discuss how to use decision theory to choose between
        these methods. Typically the posterior mean or median is the most appropriate choice for a real-
        valued quantity, and the vector of posterior marginals is the best choice for a discrete quantity.
        However, the posterior mode, aka the MAP estimate, is the most popular choice because it
        reduces to an optimization problem, for which efficient algorithms often exist. Futhermore, MAP
        estimation can be interpreted in non-Bayesian terms, by thinking of the log prior as a regularizer
        (see Section 6.5 for more details).
           Although this approach is computationally appealing, it is important to point out that there
        are various drawbacks to MAP estimation, which we brieﬂy discuss below. This will provide
        motivation for the more thoroughly Bayesian approach which we will study later in this chapter
        (and elsewhere in this book).
          150                                                                          Chapter 5. Bayesian statistics

                     4.5                                          0.9

                      4                                           0.8

                     3.5                                          0.7

                      3                                           0.6

                     2.5                                          0.5

                      2                                           0.4

                     1.5                                          0.3

                      1                                           0.2

                     0.5                                          0.1

                      0
                      −2    −1     0     1     2     3     4             1    2    3         4   5   6   7


                                       (a)                                             (b)

          Figure 5.1 (a) A bimodal distribution in which the mode is very untypical of the distribution. The thin
          blue vertical line is the mean, which is arguably a better summary of the distribution, since it is near the
          majority of the probability mass. Figure generated by bimodalDemo. (b) A skewed distribution in which
          the mode is quite different from the mean. Figure generated by gammaPlotDemo.



5.2.1.1   No measure of uncertainty
          The most obvious drawback of MAP estimation, and indeed of any other point estimate such
          as the posterior mean or median, is that it does not provide any measure of uncertainty. In
          many applications, it is important to know how much one can trust a given estimate. We can
          derive such conﬁdence measures from the posterior, as we discuss in Section 5.2.2.

5.2.1.2   Plugging in the MAP estimate can result in overﬁtting
          In machine learning, we often care more about predictive accuracy than in interpreting the
          parameters of our models. However, if we don’t model the uncertainty in our parameters, then
          our predictive distribution will be overconﬁdent. We saw several examples of this in Chapter 3,
          and we will see more examples later. Overconﬁdence in predictions is particularly problematic
          in situations where we may be risk averse; see Section 5.7 for details.

5.2.1.3   The mode is an untypical point
          Choosing the mode as a summary of a posterior distribution is often a very poor choice, since
          the mode is usually quite untypical of the distribution, unlike the mean or median. This is
          illustrated in Figure 5.1(a) for a 1d continuous space. The basic problem is that the mode is a
          point of measure zero, whereas the mean and median take the volume of the space into account.
          Another example is shown in Figure 5.1(b): here the mode is 0, but the mean is non-zero. Such
          skewed distributions often arise when inferring variance parameters, especially in hierarchical
          models. In such cases the MAP estimate (and hence the MLE) is obviously a very bad estimate.
              How should we summarize a posterior if the mode is not a good choice? The answer is to
          use decision theory, which we discuss in Section 5.7. The basic idea is to specify a loss function,
          where L(θ, θ̂) is the loss you incur if the truth is θ and your estimate is θ̂. If we use 0-1 loss,
          L(θ, θ̂) = I(θ = θ̂), then the optimal estimate is the posterior mode. 0-1 loss means you only
          get “points” if you make no errors, otherwise you get nothing: there is no “partial credit” under
          5.2. Summarizing posterior distributions                                                               151

                                       1

                                      0.9                                  g

                                      0.8

                                      0.7

                                      0.6

                                      0.5

                                      0.4

                                      0.3

                                      0.2       p
                                                Y

                                      0.1                                  pX

                                       0
                                            0       2   4      6       8        10    12



          Figure 5.2 Example of the transformation of a density under a nonlinear transform. Note how the mode
          of the transformed distribution is not the transform of the original mode. Based on Exercise 1.4 of (Bishop
          2006b). Figure generated by bayesChangeOfVar.



          this loss function! For continuous-valued quantities, we often prefer to use squared error loss,
          L(θ, θ̂) = (θ − θ̂)2 ; the corresponding optimal estimator is then the posterior mean, as we show
          in Section 5.7. Or we can use a more robust loss function, L(θ, θ̂) = |θ − θ̂|, which gives rise to
          the posterior median.

5.2.1.4   MAP estimation is not invariant to reparameterization *
          A more subtle problem with MAP estimation is that the result we get depends on how we pa-
          rameterize the probability distribution. Changing from one representation to another equivalent
          representation changes the result, which is not very desirable, since the units of measurement
          are arbitrary (e.g., when measuring distance, we can use centimetres or inches).
             To understand the problem, suppose we compute the posterior for x. If we deﬁne y = f (x),
          the distribution for y is given by Equation 2.87, which we repeat here for convenience:
                            - dx -
             py (y) = px (x)- -                                                                                 (5.1)
                              dy
          The | dx
                dy | term is called the Jacobian, and it measures the change in size of a unit volume passed
          through f . Let x̂ = argmaxx px (x) be the MAP estimate for x. In general it is not the case
          that ŷ = argmaxy py (y) is given by f (x̂). For example, let x ∼ N (6, 1) and y = f (x), where
                              1
             f (x) =                                                                                            (5.2)
                       1 + exp(−x + 5)
          We can derive the distribution of y using Monte Carlo simulation (see Section 2.7.1). The result
          is shown in Figure 5.2. We see that the original Gaussian has become “squashed” by the sigmoid
          nonlinearity. In particular, we see that the mode of the transformed distribution is not equal to
          the transform of the original mode.
        152                                                                Chapter 5. Bayesian statistics


          To see how this problem arises in the context of MAP estimation, consider the following
        example, due to Michael Jordan. The Bernoulli distribution is typically parameterized by its
        mean μ, so p(y = 1|μ) = μ, where y ∈ {0, 1}. Suppose we have a uniform prior on the
        unit interval: pμ (μ) = 1 I(0 ≤ μ ≤ 1). If there is no data, the MAP estimate is just the
        mode of the prior, which can be anywhere between 0 and 1. We will now show that different
        parameterizations can pick different points in this interval arbitrarily.
                        √
          First let θ = μ so μ = θ2 . The new prior is
                             - dμ -
              pθ (θ) = pμ (μ)- - = 2θ                                                               (5.3)
                               dθ
        for θ ∈ [0, 1] so the new mode is

              θ̂M AP = arg max 2θ = 1                                                                (5.4)
                          θ∈[0,1]
                             √
          Now let φ = 1 −     1 − μ. The new prior is
                             - dμ -
              pφ (φ) = pμ (μ)- - = 2(1 − φ)                                                         (5.5)
                               dφ
        for φ ∈ [0, 1], so the new mode is

              φ̂M AP = arg max 2 − 2φ = 0                                                           (5.6)
                          φ∈[0,1]

        Thus the MAP estimate depends on the parameterization. The MLE does not suffer from this
        since the likelihood is a function, not a probability density. Bayesian inference does not suffer
        from this problem either, since the change of measure is taken into account when integrating
        over the parameter space.
           One solution to the problem is to optimize the following objective function:
                                              1
              θ̂ = argmax p(D|θ)p(θ)|I(θ)|− 2                                                        (5.7)
                     θ

        Here I(θ) is the Fisher information matrix associated with p(x|θ) (see Section 6.2.2). This
        estimate is parameterization independent, for reasons explained in (Jermyn 2005; Druilhet and
        Marin 2007). Unfortunately, optimizing Equation 5.7 is often difficult, which minimizes the
        appeal of the whole approach.

5.2.2   Credible intervals
        In addition to point estimates, we often want a measure of conﬁdence. A standard measure of
        conﬁdence in some (scalar) quantity θ is the “width” of its posterior distribution. This can be
        measured using a 100(1 − α)% credible interval, which is a (contiguous) region C = ( , u)
        (standing for lower and upper) which contains 1 − α of the posterior probability mass, i.e.,
              Cα (D) = ( , u) : P ( ≤ θ ≤ u|D) = 1 − α                                              (5.8)
        There may be many such intervals, so we choose one such that there is (1 − α)/2 mass in each
        tail; this is called a central interval.
          5.2. Summarizing posterior distributions                                                                153

                      3.5                                          3.5


                       3                                            3


                      2.5                                          2.5


                       2                                            2


                      1.5                                          1.5


                       1                                            1


                      0.5                                          0.5


                       0                                            0
                            0   0.2   0.4         0.6   0.8   1          0   0.2   0.4         0.6   0.8   1


                                            (a)                                          (b)

          Figure 5.3 (a) Central interval and (b) HPD region for a Beta(3,9) posterior. The CI is (0.06, 0.52) and the
          HPD is (0.04, 0.48). Based on Figure 3.6 of (Hoff 2009). Figure generated by betaHPD.



             If the posterior has a known functional form, we can compute the posterior central interval
          using = F −1 (α/2) and u = F −1 (1−α/2), where F is the cdf of the posterior. For example, if
          the posterior is Gaussian, p(θ|D) = N (0, 1), and α = 0.05, then we have = Φ(α/2) = −1.96,
          and u = Φ(1 − α/2) = 1.96, where Φ denotes the cdf of the Gaussian. This is illustrated in
          Figure 2.3(c). This justiﬁes the common practice of quoting a credible interval in the form of
          μ ± 2σ, where μ represents the posterior mean, σ represents the posterior standard deviation,
          and 2 is a good approximation to 1.96.
             Of course, the posterior is not always Gaussian. For example, in our coin example, if we
          use a uniform prior and we observe N1 = 47 heads out of N = 100 trials, then the posterior
          is a beta distribution, p(θ|D) = Beta(48, 54). We ﬁnd the 95% posterior credible interval is
          (0.3749, 0.5673) (see betaCredibleInt for the one line of Matlab code we used to compute
          this).
             If we don’t know the functional form, but we can draw samples from the posterior, then we
          can use a Monte Carlo approximation to the posterior quantiles: we simply sort the S samples,
          and ﬁnd the one that occurs at location α/S along the sorted list. As S → ∞, this converges
          to the true quantile. See mcQuantileDemo for a demo.
             People often confuse Bayesian credible intervals with frequentist conﬁdence intervals. How-
          ever, they are not the same thing, as we discuss in Section 6.6.1. In general, credible intervals are
          usually what people want to compute, but conﬁdence intervals are usually what they actually
          compute, because most people are taught frequentist statistics but not Bayesian statistics. Fortu-
          nately, the mechanics of computing a credible interval is just as easy as computing a conﬁdence
          interval (see e.g., betaCredibleInt for how to do it in Matlab).

5.2.2.1   Highest posterior density regions *
          A problem with central intervals is that there might be points outside the CI which have higher
          probability density. This is illustrated in Figure 5.3(a), where we see that points outside the
          left-most CI boundary have higher density than those just inside the right-most CI boundary.
             This motivates an alternative quantity known as the highest posterior density or HPD region.
          This is deﬁned as the (set of) most probable points that in total constitute 100(1 − α)% of the
        154                                                                  Chapter 5. Bayesian statistics




                 α/2                             α/2         pMIN




                                (a)                                             (b)

        Figure 5.4 (a) Central interval and (b) HPD region for a hypothetical multimodal posterior. Based on
        Figure 2.2 of (Gelman et al. 2004). Figure generated by postDensityIntervals.


        probability mass. More formally, we ﬁnd the threshold p∗ on the pdf such that

              1−α=                    p(θ|D)dθ                                                         (5.9)
                       θ:p(θ|D)>p∗

        and then deﬁne the HPD as
              Cα (D) = {θ : p(θ|D) ≥ p∗ }                                                             (5.10)
        In 1d, the HPD region is sometimes called a highest density interval or HDI. For example,
        Figure 5.3(b) shows the 95% HDI of a Beta(3, 9) distribution, which is (0.04, 0.48). We see that
        this is narrower than the CI, even though it still contains 95% of the mass; furthermore, every
        point inside of it has higher density than every point outside of it.
           For a unimodal distribution, the HDI will be the narrowest interval around the mode contain-
        ing 95% of the mass. To see this, imagine “water ﬁlling” in reverse, where we lower the level
        until 95% of the mass is revealed, and only 5% is submerged. This gives a simple algorithm for
        computing HDIs in the 1d case: simply search over points such that the interval contains 95%
        of the mass and has minimal width. This can be done by 1d numerical optimization if we know
        the inverse CDF of the distribution, or by search over the sorted data points if we have a bag of
        samples (see betaHPD for a demo).
           If the posterior is multimodal, the HDI may not even be a connected region: see Figure 5.4(b)
        for an example. However, summarizing multimodal posteriors is always difficult.

5.2.3   Inference for a difference in proportions
        Sometimes we have multiple parameters, and we are interested in computing the posterior
        distribution of some function of these parameters. For example, suppose you are about to buy
        something from Amazon.com, and there are two sellers offering it for the same price. Seller 1
        has 90 positive reviews and 10 negative reviews. Seller 2 has 2 positive reviews and 0 negative
        reviews. Who should you buy from?1
        1. This example is from www.johndcook.com/blog/2011/09/27/bayesian-amazon. See also lingpipe-blog.c
        om/2009/10/13/bayesian-counterpart-to-fisher-exact-test-on-contingency-tables.
      5.3. Bayesian model selection                                                                                                                     155

                 14                                                                                  2.5
                                                                              p(θ |data)
                                                                                 1
                                                                              p(θ |data)
                                                                                 2
                 12
                                                                                                      2


                 10


                                                                                                     1.5
                  8




                                                                                               pdf
                  6                                                                                   1




                  4
                                                                                                     0.5


                  2


                                                                                                      0
                                                                                                     −0.4   −0.2   0   0.2       0.4   0.6   0.8   1
                  0                                                                                                          δ
                      0   0.1   0.2   0.3   0.4      0.5    0.6   0.7   0.8    0.9         1



                                                    (a)                                                                  (b)

      Figure 5.5 (a) Exact posteriors p(θi |Di ). (b) Monte Carlo approximation to p(δ|D). We use kernel density
      estimation to get a smooth plot. The vertical lines enclose the 95% central interval. Figure generated by
      amazonSellerDemo,


         On the face of it, you should pick seller 2, but we cannot be very conﬁdent that seller 2 is
      better since it has had so few reviews. In this section, we sketch a Bayesian analysis of this
      problem. Similar methodology can be used to compare rates or proportions across groups for a
      variety of other settings.
         Let θ1 and θ2 be the unknown reliabilities of the two sellers. Since we don’t know much
      about them, we’ll endow them both with uniform priors, θi ∼ Beta(1, 1). The posteriors are
      p(θ1 |D1 ) = Beta(91, 11) and p(θ2 |D2 ) = Beta(3, 1).
         We want to compute p(θ1 > θ2 |D). For convenience, let us deﬁne δ = θ1 − θ2 as the
      difference in the rates. (Alternatively we might want to work in terms of the log-odds ratio.) We
      can compute the desired quantity using numerical integration:
                                                1       1
         p(δ > 0|D)             =                           I(θ1 > θ2 )Beta(θ1 |y1 + 1, N1 − y1 + 1)
                                            0       0
                                        Beta(θ2 |y2 + 1, N2 − y2 + 1)dθ1 dθ2                                                                           (5.11)
      We ﬁnd p(δ > 0|D) = 0.710, which means you are better off buying from seller 1! See
      amazonSellerDemo for the code. (It is also possible to solve the integral analytically (Cook
      2005).)
         A simpler way to solve the problem is to approximate the posterior p(δ|D) by Monte Carlo
      sampling. This is easy, since θ1 and θ2 are independent in the posterior, and both have beta
      distributions, which can be sampled from using standard methods. The distributions p(θi |Di )
      are shown in Figure 5.5(a), and a MC approximation to p(δ|D), together with a 95% HPD, is
      shown Figure 5.5(b). An MC approximation to p(δ > 0|D) is obtained by counting the fraction
      of samples where θ1 > θ2 ; this turns out to be 0.718, which is very close to the exact value. (See
      amazonSellerDemo for the code.)

5.3   Bayesian model selection
      In Figure 1.18, we saw that using too high a degree polynomial results in overﬁtting, and using
      too low a degree results in underﬁtting. Similarly, in Figure 7.8(a), we saw that using too small
        156                                                                   Chapter 5. Bayesian statistics


        a regularization parameter results in overﬁtting, and too large a value results in underﬁtting. In
        general, when faced with a set of models (i.e., families of parametric distributions) of different
        complexity, how should we choose the best one? This is called the model selection problem.
           One approach is to use cross-validation to estimate the generalization error of all the candiate
        models, and then to pick the model that seems the best. However, this requires ﬁtting each
        model K times, where K is the number of CV folds. A more efficient approach is to compute
        the posterior over models,
                        p(D|m)p(m)
              p(m|D) =                                                                                (5.12)
                         m∈M p(m, D)

        From this, we can easily compute the MAP model, m̂ = argmax p(m|D). This is called
        Bayesian model selection.
          If we use a uniform prior over models, p(m) ∝ 1, this amounts to picking the model which
        maximizes

              p(D|m) =        p(D|θ)p(θ|m)dθ                                                           (5.13)

        This quantity is called the marginal likelihood, the integrated likelihood, or the evidence for
        model m. The details on how to perform this integral will be discussed in Section 5.3.2. But
        ﬁrst we give an intuitive interpretation of what this quantity means.

5.3.1   Bayesian Occam’s razor
        One might think that using p(D|m) to select models would always favor the model with the
        most parameters. This is true if we use p(D|θ̂ m ) to select models, where θ̂ m is the MLE or
        MAP estimate of the parameters for model m, because models with more parameters will ﬁt the
        data better, and hence achieve higher likelihood. However, if we integrate out the parameters,
        rather than maximizing them, we are automatically protected from overﬁtting: models with
        more parameters do not necessarily have higher marginal likelihood. This is called the Bayesian
        Occam’s razor effect (MacKay 1995b; Murray and Ghahramani 2005), named after the principle
        known as Occam’s razor, which says one should pick the simplest model that adequately
        explains the data.
           One way to understand the Bayesian Occam’s razor is to notice that the marginal likelihood
        can be rewritten as follows, based on the chain rule of probability (Equation 2.5):
              p(D) = p(y1 )p(y2 |y1 )p(y3 |y1:2 ) . . . p(yN |y1:N −1 )                                 (5.14)
        where we have dropped the conditioning on x for brevity. This is similar to a leave-one-out
        cross-validation estimate (Section 1.4.8) of the likelihood, since we predict each future point given
        all the previous ones. (Of course, the order of the data does not matter in the above expression.)
        If a model is too complex, it will overﬁt the “early” examples and will then predict the remaining
        ones poorly.
           Another way to understand
                                       the Bayesian Occam’s razor effect is to note that probabilities must
        sum to one. Hence D p(D |m) = 1, where the sum is over all possible data sets. Complex
        models, which can predict many things, must spread their probability mass thinly, and hence
        will not obtain as large a probability for any given data set as simpler models. This is sometimes
5.3. Bayesian model selection                                                                         157




Figure 5.6 A schematic illustration of the Bayesian Occam’s razor. The broad (green) curve corresponds
to a complex model, the narrow (blue) curve to a simple model, and the middle (red) curve is just right.
Based on Figure 3.13 of (Bishop 2006a). See also (Murray and Ghahramani 2005, Figure 2) for a similar plot
produced on real data.



called the conservation of probability mass principle, and is illustrated in Figure 5.6. On the
horizontal axis we plot all possible data sets in order of increasing complexity (measured in
some abstract sense). On the vertical axis we plot the predictions of 3 possible models: a simple
one, M1 ; a medium one, M2 ; and a complex one, M3 . We also indicate the actually observed
data D0 by a vertical line. Model 1 is too simple and assigns low probability to D0 . Model 3
also assigns D0 relatively low probability, because it can predict many data sets, and hence it
spreads its probability quite widely and thinly. Model 2 is “just right”: it predicts the observed
data with a reasonable degree of conﬁdence, but does not predict too many other things. Hence
model 2 is the most probable model.
   As a concrete example of the Bayesian Occam’s razor, consider the data in Figure 5.7. We plot
polynomials of degrees 1, 2 and 3 ﬁt to N = 5 data points. It also shows the posterior over
models, where we use a Gaussian prior (see Section 7.6 for details). There is not enough data
to justify a complex model, so the MAP model is d = 1. Figure 5.8 shows what happens when
N = 30. Now it is clear that d = 2 is the right model (the data was in fact generated from a
quadratic).
   As another example, Figure 7.8(c) plots log p(D|λ) vs log(λ), for the polynomial ridge regres-
sion model, where λ ranges over the same set of values used in the CV experiment. We see
that the maximum evidence occurs at roughly the same point as the minimum of the test MSE,
which also corresponds to the point chosen by CV.
   When using the Bayesian approach, we are not restricted to evaluating the evidence at a
ﬁnite grid of values. Instead, we can use numerical optimization to ﬁnd λ∗ = argmaxλ p(D|λ).
This technique is called empirical Bayes or type II maximum likelihood (see Section 5.6 for
details). An example is shown in Figure 7.8(b): we see that the curve has a similar shape to the
CV estimate, but it can be computed more efficiently.
        158                                                                                Chapter 5. Bayesian statistics


                            d=1, logev=−18.593, EB                                         d=2, logev=−20.218, EB
         70                                                         80

         60                                                         60

         50
                                                                    40

         40
                                                                    20
         30
                                                                     0
         20
                                                                   −20
         10

                                                                   −40
          0

        −10                                                        −60


        −20                                                        −80
          −2      0     2        4          6        8   10   12     −2            0   2        4          6        8   10        12

                                      (a)                                                           (b)
                            d=3, logev=−21.718, EB                                            N=5, method=EB
         300
                                                                              1
         250

         200                                                                 0.8
         150




                                                                    P(M|D)
         100                                                                 0.6

          50
                                                                             0.4
           0

         −50
                                                                             0.2
        −100

        −150                                                                  0
                                                                                                 1              2            3
        −200
           −2     0     2         4         6        8   10   12                                           M
                                      (c)                                                            (d)

        Figure 5.7 (a-c) We plot polynomials of degrees 1, 2 and 3 ﬁt to N = 5 data points using empirical
        Bayes. The solid green curve is the true function, the dashed red curve is the prediction (dotted blue lines
        represent ±σ around the mean). (d) We plot the posterior over models, p(d|D), assuming a uniform prior
        p(d) ∝ 1. Based on a ﬁgure by Zoubin Ghahramani. Figure generated by linregEbModelSelVsN.


5.3.2   Computing the marginal likelihood (evidence)
        When discussing parameter inference for a ﬁxed model, we often wrote
              p(θ|D, m) ∝ p(θ|m)p(D|θ, m)                                                                                        (5.15)
        thus ignoring the normalization constant p(D|m). This is valid since p(D|m) is constant wrt θ.
        However, when comparing models, we need to know how to compute the marginal likelihood,
        p(D|m). In general, this can be quite hard, since we have to integrate over all possible parameter
        values, but when we have a conjugate prior, it is easy to compute, as we now show.
           Let p(θ) = q(θ)/Z0 be our prior, where q(θ) is an unnormalized distribution, and Z0 is
        the normalization constant of the prior. Let p(D|θ) = q(D|θ)/Z be the likelihood, where Z
        contains any constant factors in the likelihood. Finally let p(θ|D) = q(θ|D)/ZN be our poste-
5.3. Bayesian model selection                                                                                                159


                    d=1, logev=−106.110, EB                                         d=2, logev=−103.025, EB
 70                                                          80


 60                                                          70

                                                             60
 50

                                                             50
 40
                                                             40
 30
                                                             30
 20
                                                             20

 10
                                                             10

  0                                                           0

−10                                                         −10
  −2       0    2         4         6         8   10   12     −2            0   2         4         6         8   10        12

                              (a)                                                             (b)
                    d=3, logev=−107.410, EB                                           N=30, method=EB
 100
                                                                       1

  80
                                                                      0.8

  60




                                                             P(M|D)
                                                                      0.6

  40
                                                                      0.4
  20
                                                                      0.2
   0
                                                                       0
                                                                                          1              2             3
−20
  −2       0    2         4         6         8   10   12                                           M
                              (c)                                                             (d)

  Figure 5.8 Same as Figure 5.7 except now N = 30. Figure generated by linregEbModelSelVsN.



rior, where q(θ|D) = q(D|θ)q(θ) is the unnormalized posterior, and ZN is the normalization
constant of the posterior. We have
                       p(D|θ)p(θ)
       p(θ|D)   =                                                                                                          (5.16)
                          p(D)
       q(θ|D)          q(D|θ)q(θ)
                =                                                                                                          (5.17)
         ZN             Z Z0 p(D)
                        ZN
        p(D)    =                                                                                                          (5.18)
                       Z0 Z
So assuming the relevant normalization constants are tractable, we have an easy way to compute
the marginal likelihood. We give some examples below.
          160                                                                Chapter 5. Bayesian statistics


5.3.2.1   Beta-binomial model
          Let us apply the above result to the Beta-binomial model. Since we know p(θ|D) = Beta(θ|a , b ),
          where a = a + N1 and b = b + N0 , we know the normalization constant of the posterior is
          B(a , b ). Hence
                             p(D|θ)p(θ)
                p(θ|D)   =                                                                            (5.19)
                                p(D)
                                                                             
                               1       1                         N
                         =                θ a−1
                                                (1 − θ) b−1
                                                                     θ (1 − θ)
                                                                      N1       N0
                                                                                                     (5.20)
                             p(D) B(a, b)                       N1
                              
                               N     1     1      a+N1 −1                 
                         =                        θ         (1 − θ)b+N0 −1                            (5.21)
                              N1 p(D) B(a, b)
          So
                                                  
                       1                      N 1    1
                                      =                                                              (5.22)
                B(a + N1 , b + N0 )           N1
                                              p(D) B(a, b)
                                           
                                           N B(a + N1 , b + N0 )
                              p(D)    =                                                              (5.23)
                                           N1      B(a, b)
          The marginal
                       likelihood for the Beta-Bernoulli model is the same as above, except it is missing
          the NN1 term.

5.3.2.2   Dirichlet-multinoulli model
          By the same reasoning as the Beta-Bernoulli case, one can show that the marginal likelihood for
          the Dirichlet-multinoulli model is given by
                         B(N + α)
                p(D) =                                                                               (5.24)
                           B(α)
          where
                      K
                           Γ(αk )
                         
                B(α) = k=1                                                                           (5.25)
                       Γ( k αk )
          Hence we can rewrite the above result in the following form, which is what is usually presented
          in the literature:
                             
                          Γ( k αk )      Γ(Nk + αk )
              p(D) =                                                                               (5.26)
                        Γ(N + k αk )        Γ(αk )
                                          k

          We will see many applications of this equation later.

5.3.2.3   Gaussian-Gaussian-Wishart model
          Consider the case of an MVN with a conjugate NIW prior. Let Z0 be the normalizer for the
          prior, ZN be normalizer for the posterior, and let Zl = (2π)N D/2 be the normalizer for the
          5.3. Bayesian model selection                                                                                        161


          likelihood. Then it is easy to see that
                             ZN
              p(D)     =                                                                                                    (5.27)
                             Z0 Zl
                                                 +        ,D/2
                                                     2π
                                 1         1         κN          |SN |−νN /2 2(ν0 +N )D/2 ΓD (νN /2)
                       =                              +        ,D/2                                                         (5.28)
                             π N D/2 2N D/2               2π
                                                          κ0          |S0   |−ν0 /2 2ν0 D/2 Γ   D (ν0 /2)
                                               D/2
                                 1         κ0              |S0 |ν0 /2 ΓD (νN /2)
                       =                                                                                                    (5.29)
                             π N D/2       κN             |SN |νN /2 ΓD (ν0 /2)
          This equation will prove useful later.

5.3.2.4   BIC approximation to log marginal likelihood
          In general, computing the integral in Equation 5.13 can be quite difficult. One simple but popular
          approximation is known as the Bayesian information criterion or BIC, which has the following
          form (Schwarz 1978):
                                        dof(θ̂)
              BIC  log p(D|θ̂) −               log N ≈ log p(D)                                                            (5.30)
                                          2
          where dof(θ̂) is the number of degrees of freedom in the model, and θ̂ is the MLE for the
          model.2 We see that this has the form of a penalized log likelihood, where the penalty term
          depends on the model’s complexity. See Section 8.4.2 for the derivation of the BIC score.
             As an example, consider linear regression. As we show in Section 7.3, the MLE is given by ŵ =
                                                                N
          (XT X)−1 XT y and σ̂ 2 = RSS/N , where RSS = i=1 (yi − ŵmle        T
                                                                                  xi )2 . The corresponding
          log likelihood is given by
                                   N                N
              log p(D|θ̂) = −        log(2πσ̂ 2 ) −                                                                         (5.31)
                                   2                2
          Hence the BIC score is as follows (dropping constant terms)
                         N             D
              BIC = −      log(σ̂ 2 ) − log(N )                                                                             (5.32)
                         2             2
          where D is the number of variables in the model. In the statistics literature, it is common to
          use an alternative deﬁnition of BIC, which we call the BIC cost (since we want to minimize it):

              BIC-cost  −2 log p(D|θ̂) + dof(θ̂) log N ≈ −2 log p(D)                                                       (5.33)

          In the context of linear regression, this becomes

              BIC-cost = N log(σ̂ 2 ) + D log(N )                                                                           (5.34)

          2. Traditionally the BIC score is deﬁned using the ML estimate θ̂, so it is independent of the prior. However, for models
          such as mixtures of Gaussians, the ML estimate can be poorly behaved, so it is better to evaluate the BIC score using
          the MAP estimate, as in (Fraley and Raftery 2007).
          162                                                                  Chapter 5. Bayesian statistics


            The BIC method is very closely related to the minimum description length or MDL principle,
          which characterizes the score for a model in terms of how well it ﬁts the data, minus how
          complex the model is to deﬁne. See (Hansen and Yu 2001) for details.
            There is a very similar expression to BIC/ MDL called the Akaike information criterion or
          AIC, deﬁned as
                AIC(m, D)  log p(D|θ̂ M LE ) − dof(m)                                                  (5.35)
          This is derived from a frequentist framework, and cannot be interpreted as an approximation
          to the marginal likelihood. Nevertheless, the form of this expression is very similar to BIC. We
          see that the penalty for AIC is less than for BIC. This causes AIC to pick more complex models.
          However, this can result in better predictive accuracy. See e.g., (Clarke et al. 2009, sec 10.2) for
          further discussion on such information criteria.

5.3.2.5   Effect of the prior
          Sometimes it is not clear how to set the prior. When we are performing posterior inference, the
          details of the prior may not matter too much, since the likelihood often overwhelms the prior
          anyway. But when computing the marginal likelihood, the prior plays a much more important
          role, since we are averaging the likelihood over all possible parameter settings, as weighted by
          the prior.
             In Figures 5.7 and 5.8, where we demonstrated model selection for linear regression, we used
          a prior of the form p(w) = N (0, α−1 I). Here α is a tuning parameter that controls how strong
          the prior is. This parameter can have a large effect, as we discuss in Section 7.5. Intuitively, if
          α is large, the weights are “forced” to be small, so we need to use a complex model with many
          small parameters (e.g., a high degree polynomial) to ﬁt the data. Conversely, if α is small, we
          will favor simpler models, since each parameter is “allowed” to vary in magnitude by a lot.
             If the prior is unknown, the correct Bayesian procedure is to put a prior on the prior. That is,
          we should put a prior on the hyper-parameter α as well as the parametrs w. To compute the
          marginal likelihood, we should integrate out all unknowns, i.e., we should compute

                p(D|m) =        p(D|w)p(w|α, m)p(α|m)dwdα                                               (5.36)

          Of course, this requires specifying the hyper-prior. Fortunately, the higher up we go in the
          Bayesian hierarchy, the less sensitive are the results to the prior settings. So we can usually
          make the hyper-prior uninformative.
            A computational shortcut is to optimize α rather than integrating it out. That is, we use

                p(D|m) ≈     p(D|w)p(w|α̂, m)dw                                                         (5.37)

          where

                α̂ = argmax p(D|α, m) = argmax        p(D|w)p(w|α, m)dw                                 (5.38)
                       α                     α

          This approach is called empirical Bayes (EB), and is discussed in more detail in Section 5.6. This
          is the method used in Figures 5.7 and 5.8.
          5.3. Bayesian model selection                                                                                         163


                                      Bayes factor BF (1, 0)                Interpretation
                                                    1
                                             BF < 100                 Decisive evidence for M0
                                                    1
                                             BF < 10                   Strong evidence for M0
                                           1           1
                                          10 < BF < 3                 Moderate evidence for M0
                                           1
                                           3 < BF < 1                  Weak evidence for M0
                                           1 < BF < 3                  Weak evidence for M1
                                         3 < BF < 10                  Moderate evidence for M1
                                             BF > 10                   Strong evidence for M1
                                             BF > 100                 Decisive evidence for M1

                               Table 5.1 Jeffreys’ scale of evidence for interpreting Bayes factors.


 5.3.3    Bayes factors
          Suppose our prior on models is uniform, p(m) ∝ 1. Then model selection is equivalent to
          picking the model with the highest marginal likelihood. Now suppose we just have two models
          we are considering, call them the null hypothesis, M0 , and the alternative hypothesis, M1 .
          Deﬁne the Bayes factor as the ratio of marginal likelihoods:
                          p(D|M1 )   p(M1 |D) p(M1 )
              BF1,0               =         /                                                                               (5.39)
                          p(D|M0 )   p(M0 |D) p(M0 )
          (This is like a likelihood ratio, except we integrate out the parameters, which allows us to
          compare models of different complexity.) If BF1,0 > 1 then we prefer model 1, otherwise we
          prefer model 0.
            Of course, it might be that BF1,0 is only slightly greater than 1. In that case, we are not
          very conﬁdent that model 1 is better. Jeffreys (1961) proposed a scale of evidence for interpreting
          the magnitude of a Bayes factor, which is shown in Table 5.1. This is a Bayesian alternative to
          the frequentist concept of a p-value.3 Alternatively, we can just convert the Bayes factor to a
          posterior over models. If p(M1 ) = p(M0 ) = 0.5, we have
                                BF0,1        1
              p(M0 |D) =                =                                                                                    (5.40)
                              1 + BF0,1   BF1,0 + 1


5.3.3.1   Example: Testing if a coin is fair
          Suppose we observe some coin tosses, and want to decide if the data was generated by a fair
          coin, θ = 0.5, or a potentially biased coin, where θ could be any value in [0, 1]. Let us denote
          the ﬁrst model by M0 and the second model by M1 . The marginal likelihood under M0 is
          simply
                           N
                            1
             p(D|M0 ) =                                                                               (5.41)
                            2

          3. A p-value, is deﬁned as the probability (under the null hypothesis) of observing some test statistic f (D) (such as the
          chi-squared statistic) that is as large or larger than that actually observed, i.e., pvalue(D)  P (f (D̃) ≥ f (D)|D̃ ∼
          H0 ). Note that has almost nothing to do with what we really want to know, which is p(H0 |D).
        164                                                                        Chapter 5. Bayesian statistics


                              log    p(D|M1)                                  BIC approximation to log    p(D|M1)
                                10                                                                   10
         −0.4                                                   −2

                                                              −2.05
         −0.6
                                                               −2.1

         −0.8                                                 −2.15

                                                               −2.2
          −1
                                                              −2.25
         −1.2
                                                               −2.3

         −1.4                                                 −2.35

                                                               −2.4
         −1.6
                                                              −2.45

         −1.8                                                  −2.5
                01111122222222223333333333444445                      01111122222222223333333333444445

                                (a)                                                       (b)

        Figure 5.9 (a) Log marginal likelihood for the coins example. (b) BIC approximation. Figure generated by
        coinsModelSelDemo.


        where N is the number of coin tosses. The marginal likelihood under M1 , using a Beta prior, is
                                                     B(α1 + N1 , α0 + N0 )
              p(D|M1 )   =          p(D|θ)p(θ)dθ =                                                                  (5.42)
                                                          B(α1 , α0 )
           We plot log p(D|M1 ) vs the number of heads N1 in Figure 5.9(a), assuming N = 5 and
        α1 = α0 = 1. (The shape of the curve is not very sensitive to α1 and α0 , as long as α0 = α1 .)
        If we observe 2 or 3 heads, the unbiased coin hypothesis M0 is more likely than M1 , since M0
        is a simpler model (it has no free parameters) — it would be a suspicious coincidence if the
        coin were biased but happened to produce almost exactly 50/50 heads/tails. However, as the
        counts become more extreme, we favor the biased coin hypothesis. Note that, if we plot the log
        Bayes factor, log BF1,0 , it will have exactly the same shape, since log p(D|M0 ) is a constant.
        See also Exercise 3.18.
           In Figure 5.9(b) shows the BIC approximation to log p(D|M1 ) for our biased coin example
        from Section 5.3.3.1. We see that the curve has approximately the same shape as the exact log
        marginal likelihood, which is all that matters for model selection purposes, since the absolute
        scale is irrelevant. In particular, it favors the simpler model unless the data is overwhelmingly
        in support of the more complex model.

5.3.4   Jeffreys-Lindley paradox *
        Problems can arise when we use improper priors (i.e., priors that do not integrate to 1) for model
        selection/ hypothesis testing, even though such priors may be acceptable for other purposes. For
        example, consider testing the hypotheses M0 : θ ∈ Θ0 vs M1 : θ ∈ Θ1 . To deﬁne the marginal
        density on θ, we use the following mixture model
              p(θ)   =   p(θ|M0 )p(M0 ) + p(θ|M1 )p(M1 )                                                            (5.43)
        5.4. Priors                                                                                  165


        This is only meaningful if p(θ|M0 ) and p(θ|M1 ) are proper (normalized) density functions. In
        this case, the posterior is given by
                                    p(M0 )p(D|M0 )
           p(M0 |D)    =                                                                           (5.44)
                            p(M0 )p(D|M0 ) + p(M1 )p(D|M1 )
                                                
                                          p(M0 ) Θ0 p(D|θ)p(θ|M0 )dθ
                       =                                                                         (5.45)
                            p(M0 ) Θ0 p(D|θ)p(θ|M0 )dθ + p(M1 ) Θ1 p(D|θ)p(θ|M1 )dθ

        Now suppose we use improper priors, p(θ|M0 ) ∝ c0 and p(θ|M1 ) ∝ c1 . Then
                                               
                                     p(M0 )c0 Θ0 p(D|θ)dθ
          p(M0 |D) =                                                                             (5.46)
                         p(M0 )c0 Θ0 p(D|θ)dθ + p(M1 )c1 Θ1 p(D|θ)dθ
                                  p(M0 )c0 0
                       =                                                                           (5.47)
                            p(M0 )c0 0 + p(M1 )c1         1
                    
        where i = Θi p(D|θ)dθ is the integrated or marginal likelihood for model i. Now let p(M0 ) =
        p(M1 ) = 12 . Hence
                               c0 0                      0
           p(M0 |D)    =                    =                                                      (5.48)
                            c0 0 + c1   1       0   + (c1 /c0 )   1

        Thus we can change the posterior arbitrarily by choosing c1 and c0 as we please. Note that
        using proper, but very vague, priors can cause similar problems. In particular, the Bayes factor
        will always favor the simpler model, since the probability of the observed data under a complex
        model with a very diffuse prior will be very small. This is called the Jeffreys-Lindley paradox.
          Thus it is important to use proper priors when performing model selection. Note, however,
        that, if M0 and M1 share the same prior over a subset of the parameters, this part of the prior
        can be improper, since the corresponding normalization constant will cancel out.

 5.4    Priors
        The most controversial aspect of Bayesian statistics is its reliance on priors. Bayesians argue
        this is unavoidable, since nobody is a tabula rasa or blank slate: all inference must be done
        conditional on certain assumptions about the world. Nevertheless, one might be interested in
        minimizing the impact of one’s prior assumptions. We brieﬂy discuss some ways to do this
        below.

5.4.1   Uninformative priors
        If we don’t have strong beliefs about what θ should be, it is common to use an uninformative
        or non-informative prior, and to “let the data speak for itself”.
           The issue of designing uninformative priors is actually somewhat tricky. As an example
        of the difficulty, consider a Bernoulli parameter, θ ∈ [0, 1]. One might think that the most
        uninformative prior would be the uniform distribution, Beta(1, 1). But the posterior mean in
                                    1 +1
        this case is E [θ|D] = N1N+N   0 +2
                                            , whereas the MLE is N1N+N
                                                                     1
                                                                       0
                                                                         . Hence one could argue that the
        prior wasn’t completely uninformative after all.
        166                                                                                  Chapter 5. Bayesian statistics


           Clearly by decreasing the magnitude of the pseudo counts, we can lessen the impact of the
        prior. By the above argument, the most non-informative prior is
              lim Beta(c, c) = Beta(0, 0)                                                                            (5.49)
              c→0

        which is a mixture of two equal point masses at 0 and 1 (see (Zhu and Lu 2004)). This is also
        called the Haldane prior. Note that the Haldane prior is an improper prior, meaning it does not
        integrate to 1. However, as long as we see at least one head and at least one tail, the posterior
        will be proper.
           In Section 5.4.2.1 we will argue that the “right” uninformative prior is in fact Beta( 12 , 12 ).
        Clearly the difference in practice between these three priors is very likely negligible. In general,
        it is advisable to perform some kind of sensitivity analysis, in which one checks how much
        one’s conclusions or predictions change in response to change in the modeling assumptions,
        which includes the choice of prior, but also the choice of likelihood and any kind of data pre-
        processing. If the conclusions are relatively insensitive to the modeling assumptions, one can
        have more conﬁdence in the results.

5.4.2   Jeffreys priors *
        Harold Jeffreys4 designed a general purpose technique for creating non-informative priors. The
        result is known as the Jeffreys prior. The key observation is that if p(φ) is non-informative,
        then any re-parameterization of the prior, such as θ = h(φ) for some function h, should also
        be non-informative. Now, by the change of variables formula,
                           - dφ -
           pθ (θ) = pφ (φ)- -                                                                                        (5.50)
                             dθ
        so the prior will in general change. However, let us pick
                                1
              pφ (φ) ∝ (I(φ)) 2                                                                                       (5.51)
        where I(φ) is the Fisher information:
                                      
                          d log p(X|φ)
          I(φ)  −E                     2                                                                            (5.52)
                               dφ
        This is a measure of curvature of the expected negative log likelihood and hence a measure of
        stability of the MLE (see Section 6.2.2). Now
              d log p(x|θ)           d log p(x|φ) dφ
                               =                                                                                     (5.53)
                   dθ                     dφ      dθ
        Squaring and taking expectations over x, we have
                                           2          2
                                d log p(X|θ)              dφ
            I(θ) = −E                             = I(φ)                                                             (5.54)
                                     dθ                   dθ
                            1 - dφ -
           I(θ) 2 = I(φ) 2 - -
                1
                                                                                                                     (5.55)
                                dθ
        4. Harold Jeffreys, 1891 – 1989, was an English mathematician, statistician, geophysicist, and astronomer.
          5.4. Priors                                                                                      167


          so we ﬁnd the transformed prior is
                                      - dφ -       1 - dφ -
                                pφ (φ)- - ∝ (I(φ)) 2 - - = I(θ) 2
                                                                1
             pθ (θ)     =                                                                                (5.56)
                                        dθ             dθ
          So pθ (θ) and pφ (φ) are the same.
            Some examples will make this clearer.

5.4.2.1   Example: Jeffreys prior for the Bernoulli and multinoulli
          Suppose X ∼ Ber(θ). The log likelihood for a single sample is

             log p(X|θ) = X log θ + (1 − X) log(1 − θ)                                                   (5.57)

          The score function is just the gradient of the log-likelihood:
                            d               X   1−X
             s(θ)             log p(X|θ) =   −                                                          (5.58)
                            dθ              θ   1−θ
          The observed information is the second derivative of the log-likelihood:
                                    d2                          X     1−X
             J(θ)       =       −       log p(X|θ) = −s (θ|X) = 2 +                                     (5.59)
                                    dθ2                         θ    (1 − θ)2
          The Fisher information is the expected information:
                                                       θ     1−θ           1
             I(θ)     =     E[J(θ|X)|X ∼ θ] =             +          =                                   (5.60)
                                                       θ2   (1 − θ)2   θ(1 − θ)
          Hence Jeffreys’ prior is
                            1             1        1             1 1
             p(θ) ∝ θ− 2 (1 − θ)− 2 =                     ∝ Beta( , )                                    (5.61)
                                                 θ(1 − θ)        2 2

             Now consider a multinoulli random variable with K states. One can show that the Jeffreys’
          prior is given by
                        1         1
             p(θ) ∝ Dir( , . . . , )                                                                     (5.62)
                        2         2
                                                                            1       1
          Note that this is different from the more obvious choices of Dir( K ,..., K ) or Dir(1, . . . , 1).

5.4.2.2   Example: Jeffreys prior for location and scale parameters
          One can show that the Jeffreys prior for a location parameter, such as the Gaussian mean, is
          p(μ) ∝ 1. Thus is an example of a translation invariant prior, which satisﬁes the property
          that the probability mass assigned to any interval, [A, B] is the same as that assigned to any
          other shifted interval of the same width, such as [A − c, B − c]. That is,
                B−c                                                      B
                      p(μ)dμ = (A − c) − (B − c) = (A − B) =                 p(μ)dμ                      (5.63)
              A−c                                                       A
        168                                                                 Chapter 5. Bayesian statistics


        This can be achieved using p(μ) ∝ 1, which we can approximate by using a Gaussian with
        inﬁnite variance, p(μ) = N (μ|0, ∞). Note that this is an improper prior, since it does not
        integrate to 1. Using improper priors is ﬁne as long as the posterior is proper, which will be the
        case provided we have seen N ≥ 1 data points, since we can “nail down” the location as soon
        as we have seen a single data point.
           Similarly, one can show that the Jeffreys prior for a scale parameter, such as the Gaussian
        variance, is p(σ 2 ) ∝ 1/σ 2 . This is an example of a scale invariant prior, which satisﬁes the
        property that the probability mass assigned to any interval [A, B] is the same as that assigned
        to any other interval [A/c, B/c] which is scaled in size by some constant factor c > 0. (For
        example, if we change units from meters to feet we do not want that to affect our inferences.)
        This can be achieved by using
              p(s) ∝ 1/s                                                                            (5.64)
        To see this, note that
                B/c
                                        B/c
                      p(s)ds   =   [log s]A/c = log(B/c) − log(A/c)                                 (5.65)
               A/c
                                                        B
                               =   log(B) − log(A) =        p(s)ds                                  (5.66)
                                                       A

        We can approximate this using a degenerate Gamma distribution (Section 2.4.4), p(s) = Ga(s|0, 0).
        The prior p(s) ∝ 1/s is also improper, but the posterior is proper as soon as we have seen
        N ≥ 2 data points (since we need at least two data points to estimate a variance).

5.4.3   Robust priors
        In many cases, we are not very conﬁdent in our prior, so we want to make sure it does not have
        an undue inﬂuence on the result. This can be done by using robust priors (Insua and Ruggeri
        2000), which typically have heavy tails, which avoids forcing things to be too close to the prior
        mean.
           Let us consider an example from (Berger 1985, p7). Suppose x ∼ N (θ, 1). We observe that
        x = 5 and we want to estimate θ. The MLE is of course θ̂ = 5, which seems reasonable. The
        posterior mean under a uniform prior is also θ = 5. But now suppose we know that the prior
        median is 0, and the prior quantiles are at -1 and 1, so p(θ ≤ −1) = p(−1 < θ ≤ 0) = p(0 <
        θ ≤ 1) = p(1 < θ) = 0.25. Let us also assume the prior is smooth and unimodal.
           It is easy to show that a Gaussian prior of the form N (θ|0, 2.192 ) satisﬁes these prior
        constraints. But in this case the posterior mean is given by 3.43, which doesn’t seem very
        satisfactory.
           Now suppose we use as a Cauchy prior T (θ|0, 1, 1). This also satisﬁes the prior constraints of
        our example. But this time we ﬁnd (using numerical method integration: see robustPriorDemo
        for the code) that the posterior mean is about 4.6, which seems much more reasonable.

5.4.4   Mixtures of conjugate priors
        Robust priors are useful, but can be computationally expensive to use. Conjugate priors simplify
        the computation, but are often not robust, and not ﬂexible enough to encode our prior knowl-
          5.4. Priors                                                                                    169


          edge. However, it turns out that a mixture of conjugate priors is also conjugate (Exercise 5.1),
          and can approximate any kind of prior (Dallal and Hall 1983; Diaconis and Ylvisaker 1985). Thus
          such priors provide a good compromise between computational convenience and ﬂexibility.
             For example, suppose we are modeling coin tosses, and we think the coin is either fair, or
          is biased towards heads. This cannot be represented by a beta distribution. However, we can
          model it using a mixture of two beta distributions. For example, we might use
             p(θ) = 0.5 Beta(θ|20, 20) + 0.5 Beta(θ|30, 10)                                            (5.67)

          If θ comes from the ﬁrst distribution, the coin is fair, but if it comes from the second, it is
          biased towards heads.
             We can represent a mixture by introducing a latent indicator variable z, where z = k means
          that θ comes from mixture component k. The prior has the form
                     
              p(θ) =     p(z = k)p(θ|z = k)                                                        (5.68)
                        k

          where each p(θ|z = k) is conjugate, and p(z = k) are called the (prior) mixing weights. One can
          show (Exercise 5.1) that the posterior can also be written as a mixture of conjugate distributions
          as follows:
                            
              p(θ|D) =          p(z = k|D)p(θ|D, z = k)                                                (5.69)
                             k

          where p(Z = k|D) are the posterior mixing weights given by
                                      p(Z = k)p(D|Z = k)
             p(Z = k|D)      =                           
                                                                                                       (5.70)
                                      k p(Z = k )p(D|Z = k )

          Here the quantity p(D|Z = k) is the marginal likelihood for mixture component k (see Sec-
          tion 5.3.2.1).

5.4.4.1   Example
          Suppose we use the mixture prior

             p(θ) = 0.5Beta(θ|a1 , b1 ) + 0.5Beta(θ|a2 , b2 )                                           (5.71)
          where a1 = b1 = 20 and a2 = b2 = 10. and we observe N1 heads and N0 tails. The posterior
          becomes

          p(θ|D) = p(Z = 1|D)Beta(θ|a1 + N1 , b1 + N0 ) + p(Z = 2|D)Beta(θ|a2 + N1 , b2 + N0 )(5.72)
          If N1 = 20 heads and N0 = 10 tails, then, using Equation 5.23, the posterior becomes
             p(θ|D) = 0.346 Beta(θ|40, 30) + 0.654 Beta(θ|50, 20)                                      (5.73)
          See Figure 5.10 for an illustration.
          170                                                                                                            Chapter 5. Bayesian statistics

                                                                       mixture of Beta distributions
                                         5
                                                   prior
                                                   posterior
                                        4.5


                                         4


                                        3.5


                                         3


                                        2.5


                                         2


                                        1.5


                                         1


                                        0.5


                                         0
                                              0   0.1      0.2   0.3     0.4       0.5        0.6      0.7   0.8   0.9    1




                     Figure 5.10 A mixture of two Beta distributions. Figure generated by mixBetaDemo.


5.4.4.2   Application: Finding conserved regions in DNA and protein sequences
          We mentioned that Dirichlet-multinomial models are widely used in biosequence analysis. Let
          us give a simple example to illustrate some of the machinery that has developed. Speciﬁcally,
          consider the sequence logo discussed in Section 2.3.2.1. Now suppose we want to ﬁnd locations
          which represent coding regions of the genome. Such locations often have the same letter across
          all sequences, because of evolutionary pressure. So we need to ﬁnd columns which are “pure”,
          or nearly so, in the sense that they are mostly all As, mostly all Ts, mostly all Cs, or mostly all
          Gs. One approach is to look for low-entropy columns; these will be ones whose distribution is
          nearly deterministic (pure).
             But suppose we want to associate a conﬁdence measure with our estimates of purity. This
          can be useful if we believe adjacent locations are conserved together. In this case, we can let
          Z1 = 1 if location t is conserved, and let Zt = 0 otherwise. We can then add a dependence
          between adjacent Zt variables using a Markov chain; see Chapter 17 for details.
             In any case, we need to deﬁne a likelihood model, p(Nt |Zt ), where Nt is the vector of
          (A,C,G,T) counts for column t. It is natural to make this be a multinomial distribution with
          parameter θ t . Since each column has a different distribution, we will want to integrate out θ t
          and thus compute the marginal likelihood

                p(Nt |Zt ) =    p(Nt |θ t )p(θ t |Zt )dθ t                                                                                       (5.74)

          But what prior should we use for θ t ? When Zt = 0 we can use a uniform prior, p(θ|Zt = 0) =
          Dir(1, 1, 1, 1), but what should we use if Zt = 1? After all, if the column is conserved, it could
          be a (nearly) pure column of As, Cs, Gs, or Ts. A natural approach is to use a mixture of Dirichlet
          priors, each one of which is “tilted” towards the appropriate corner of the 4-dimensional simplex,
          e.g.,
                                1                               1
                p(θ|Zt = 1) =     Dir(θ|(10, 1, 1, 1)) + · · · + Dir(θ|(1, 1, 1, 10))                                                            (5.75)
                                4                               4
          Since this is conjugate, we can easily compute p(Nt |Zt ). See (Brown et al. 1993) for an
        5.5. Hierarchical Bayes                                                                           171


        application of these ideas to a real bio-sequence problem.

 5.5    Hierarchical Bayes
        A key requirement for computing the posterior p(θ|D) is the speciﬁcation of a prior p(θ|η),
        where η are the hyper-parameters. What if we don’t know how to set η? In some cases, we can
        use uninformative priors, we we discussed above. A more Bayesian approach is to put a prior on
        our priors! In terms of graphical models (Chapter 10), we can represent the situation as follows:
           η→θ→D                                                                                       (5.76)
        This is an example of a hierarchical Bayesian model, also called a multi-level model, since
        there are multiple levels of unknown quantities. We give a simple example below, and we will
        see many others later in the book.

5.5.1   Example: modeling related cancer rates
        Consider the problem of predicting cancer rates in various cities (this example is from (Johnson
        and Albert 1999, p24)). In particular, suppose we measure the number of people in various
        cities, Ni , and the number of people who died of cancer in these cities, xi . We assume
        xi ∼ Bin(Ni , θi ), and we want to estimate the cancer rates θi . One approach is to estimate
        them all separately, but this will suffer from the sparse data problem (underestimation of the
        rate of cancer due to small Ni ). Another approach is to assumeall the θi are the same; this is
                                                                             x
        called parameter tying. The resulting pooled MLE is just θ̂ =  i Nii . But the assumption that
                                                                           i
        all the cities have the same rate is a rather strong one. A compromise approach is to assume
        that the θi are similar, but that there may be city-speciﬁc variations. This can be modeled by
        assuming the θi are drawn from some common distribution, say θi ∼ Beta(a, b). The full joint
        distribution can be written as
                                         N
           p(D, θ, η|N)     =     p(η)         Bin(xi |Ni , θi )Beta(θi |η)                            (5.77)
                                         i=1

        where η = (a, b).
           Note that it is crucial that we infer η = (a, b) from the data; if we just clamp it to a constant,
        the θi will be conditionally independent, and there will be no information ﬂow between them.
        By contrast, by treating η as an unknown (hidden variable), we allow the data-poor cities to
        borrow statistical strength from data-rich ones.
           Suppose we compute the joint posterior p(η, θ|D). From this we can get the posterior
        marginals p(θi |D). In Figure 5.11(a), we plot the posterior means, E [θi |D], as blue bars, as well
        as the population level mean, E [a/(a + b)|D], shown as a red line (this represents the average
        of the θi ’s). We see that the posterior mean is shrunk towards the pooled estimate more strongly
        for cities with small sample sizes Ni . For example, city 1 and city 20 both have a 0 observed
        cancer incidence rate, but city 20 has a smaller population, so its rate is shrunk more towards
        the population-level estimate (i.e., it is closer to the horizontal red line) than city 1.
           Figure 5.11(b) shows the 95% posterior credible intervals for θi . We see that city 15, which has
        a very large population (53,637 people), has small posterior uncertainty. Consequently this city
      172                                                                                        Chapter 5. Bayesian statistics


                                                                                          95% credible interval on theta, *=median
                        number of people with cancer (truncated at 5)        20
               5
                                                                             18

               0                                                             16
                    0   5              10              15          20   25
                                 pop of city (truncated at 2000)
             2000                                                            14

             1000                                                            12
               0
                    0   5            10             15             20   25   10
                               MLE*1000 (red line=pooled MLE)
              10
                                                                              8
               5
                                                                              6
               0
                    0   5               10             15          20   25
                            posterior mean*1000 (red line=pop mean)           4
               4
                                                                              2
               2
               0                                                              0
                    0   5              10             15           20   25        0   1    2        3        4        5        6     7          8
                                                                                                                                            −3
                                                                                                                                         x 10


                                            (a)                                                           (b)

      Figure 5.11 (a) Results of ﬁtting the model using the data from (Johnson and Albert 1999, p24). First
      row: Number of cancer incidents xi in 20 cities in Missouri. Second row: population size Ni . The largest
      city (number 15) has a population of N15 = 53637 and x15 = 54 incidents, but we truncate the vertical
      axes of the ﬁrst two rows so that the differences between the other cities are visible. Third row: MLE θ̂i .
      The red line is the pooled MLE. Fourth row: posterior mean E [θi |D]. The red line is E [a/(a + b)|D],
      the population-level mean. (b) Posterior 95% credible intervals on the cancer rates. Figure generated by
      cancerRatesEb


      has the largest impact on the posterior estimate of η, which in turn will impact the estimate of
      the cancer rates for other cities. Cities 10 and 19, which have the highest MLE, also have the
      highest posterior uncertainty, reﬂecting the fact that such a high estimate is in conﬂict with the
      prior (which is estimated from all the other cities).
         In the above example, we have one parameter per city, modeling the probability the response
      is on. By making the Bernoulli rate parameter be a function of covariates, θi = sigm(wiT x), we
      can model multiple correlated logistic regression tasks. This is called multi-task learning, and
      will be discussed in more detail in Section 9.5.

5.6   Empirical Bayes
      In hierarchical Bayesian models, we need to compute the posterior on multiple levels of latent
      variables. For example, in a two-level model, we need to compute
            p(η, θ|D) ∝ p(D|θ)p(θ|η)p(η)                                                                                                            (5.78)
      In some cases, we can analytically marginalize out θ; this leaves is with the simpler problem of
      just computing p(η|D).
         As a computational shortcut, we can approximate the posterior on the hyper-parameters with
      a point-estimate, p(η|D) ≈ δη̂ (η), where η̂ = argmax p(η|D). Since η is typically much
      smaller than θ in dimensionality, it is less prone to overﬁtting, so we can safely use a uniform
      prior on η. Then the estimate becomes
                                                               
          η̂ = argmax p(D|η) = argmax           p(D|θ)p(θ|η)dθ                                    (5.79)
        5.6. Empirical Bayes                                                                          173


        where the quantity inside the brackets is the marginal or integrated likelihood, sometimes called
        the evidence. This overall approach is called empirical Bayes (EB) or type-II maximum
        likelihood. In machine learning, it is sometimes called the evidence procedure.
           Empirical Bayes violates the principle that the prior should be chosen independently of the
        data. However, we can just view it as a computationally cheap approximation to inference in a
        hierarchical Bayesian model, just as we viewed MAP estimation as an approximation to inference
        in the one level model θ → D. In fact, we can construct a hierarchy in which the more integrals
        one performs, the “more Bayesian” one becomes:

          Method                        Deﬁnition
          Maximum likelihood            θ̂ = argmaxθ p(D|θ)
          MAP estimation                θ̂ = argmaxθ p(D|θ)p(θ|η)
                                                     
          ML-II (Empirical Bayes)       η̂ = argmaxη  p(D|θ)p(θ|η)dθ = argmaxη p(D|η)
          MAP-II                        η̂ = argmaxη p(D|θ)p(θ|η)p(η)dθ = argmaxη p(D|η)p(η)
          Full Bayes                    p(θ, η|D) ∝ p(D|θ)p(θ|η)p(η)

           Note that EB can be shown to have good frequentist properties (see e.g., (Carlin and Louis
        1996; Efron 2010)), so it is widely used by non-Bayesians. For example, the popular James-Stein
        estimator, discussed in Section 6.3.3.2, can be derived using EB.

5.6.1   Example: beta-binomial model
        Let us return to the cancer rates model. We can analytically integrate out the θi ’s, and write
        down the marginal likelihood directly, as follows:

           p(D|a, b)   =             Bin(xi |Ni , θi )Beta(θi |a, b)dθi                            (5.80)
                               i
                                   B(a + xi , b + Ni − xi )
                       =                                                                            (5.81)
                               i
                                          B(a, b)

        Various ways of maximizing this wrt a and b are discussed in (Minka 2000e).
          Having estimated a and b, we can plug in the hyper-parameters to compute the posterior
        p(θi |â, b̂, D) in the usual way, using conjugate analysis. The net result is that the posterior
        mean of each θi is a weighted average of its local MLE and the prior means, which depends on
        η = (a, b); but since η is estimated based on all the data, each θi is inﬂuenced by all the data.

5.6.2   Example: Gaussian-Gaussian model
        We now study another example that is analogous to the cancer rates example, except the data is
        real-valued. We will use a Gaussian likelihood and a Gaussian prior. This will allow us to write
        down the solution analytically.
           In particular, suppose we have data from multiple related groups. For example, xij could be
        the test score for student i in school j, for j = 1 : D and i = 1 : Nj . We want to estimate
        the mean score for each school, θj . However, since the sample size, Nj , may be small for
          174                                                                                Chapter 5. Bayesian statistics


          some schools, we can regularize the problem by using a hierarchical Bayesian model, where we
          assume θj come from a common prior, N (μ, τ 2 ).
            The joint distribution has the following form:
                                      D                      Nj
                               2                         2
                p(θ, D|η, σ ) =             N (θj |μ, τ )          N (xij |θj , σ 2 )                                (5.82)
                                      j=1                    i=1

          where we assume σ 2 is known for simplicity. (We relax this assumption in Exercise 24.4.) We
          explain how to estimate η below. Once we have estimated η = (μ, τ ), we can compute the
          posteriors over the θj ’s. To do that, it simpliﬁes matters to rewrite the joint distribution in the
          following form, exploiting the fact that Nj Gaussian measurements with values xij and variance
                                                                       Nj
          σ 2 are equivalent to one measurement of value xj  N1j i=1       xij with variance σj2  σ 2 /Nj .
          This yields
                                      D
                               2
                p(θ, D|η̂, σ ) =            N (θj |μ̂, τ̂ 2 )N (xj |θj , σj2 )                                       (5.83)
                                      j=1

          From this, it follows from the results of Section 4.4.1 that the posteriors are given by

                p(θj |D, μ̂, τ̂ 2 )   =     N (θj |B̂j μ̂ + (1 − B̂j )xj , (1 − B̂j )σj2 )                           (5.84)
                                                σj2
                               B̂j                                                                                  (5.85)
                                            σj2 + τ̂ 2

          where μ̂ = x and τ̂ 2 will be deﬁned below.
             The quantity 0 ≤ B̂j ≤ 1 controls the degree of shrinkage towards the overall mean, μ. If
          the data is reliable for group j (e.g., because the sample size Nj is large), then σj2 will be small
          relative to τ 2 ; hence B̂j will be small, and we will put more weight on xj when we estimate θj .
          However, groups with small sample sizes will get regularized (shrunk towards the overall mean
          μ) more heavily. We will see an example of this below.
             If σj = σ for all groups j, the posterior mean becomes

                θ̂j   =     B̂x + (1 − B̂)xj = x + (1 − B̂)(xj − x)                                                  (5.86)

          This has exactly the same form as the James Stein estimator discussed in Section 6.3.3.2.

5.6.2.1   Example: predicting baseball scores
          We now give an example of shrinkage applied to baseball batting averages, from (Efron and
          Morris 1975). We observe the number of hits for D = 18 players during the ﬁrst T = 45 games.
          Call the number of hits bi . We assume bj ∼ Bin(T, θj ), where θj is the “true” batting average
          for player j. The goal is to estimate the θj . The MLE is of course θ̂j = xj , where xj = bj /T is
          the empirical batting average. However, we can use an EB approach to do better.
             To apply the Gaussian shrinkage approach described above, we require that the likelihood be
          Gaussian, xj ∼ N (θj , σ 2 ) for known σ 2 . (We drop the i subscript since we assume Nj = 1,
          5.6. Empirical Bayes                                                                                                                                175

                                 MLE (top) and shrinkage estimates (bottom)                            MSE MLE = 0.0042, MSE shrunk = 0.0013
                         1                                                                   0.4
                                                                                                                                                   true
                                                                                                                                                   shrunk
                                                                                            0.35
                                                                                                                                                   MLE
                        0.8
                                                                                             0.3

                                                                                            0.25
                        0.6




                                                                                      MSE
                                                                                             0.2

                        0.4
                                                                                            0.15

                                                                                             0.1
                        0.2
                                                                                            0.05

                         0                                                                    0
                                0.2         0.25           0.3           0.35   0.4                1          2           3        4           5
                                                                                                                   player number



                                                   (a)                                                               (b)

          Figure 5.12 (a) MLE parameters (top) and corresponding shrunken estimates (bottom). (b) We plot the
          true parameters (blue), the posterior mean estimate (green), and the MLEs (red) for 5 of the players. Figure
          generated by shrinkageDemoBaseball.


          since xj already represents the average for player j.) However, in this example we have a
          binomial likelihood. While this has the right mean, E [xj ] = θj , the variance is not constant:
                          1              T θj (1 − θj )
              var [xj ] =    var [bj ] =                                                          (5.87)
                         T2                    T2
          So let us apply a variance stabilizing transform5 to xj to better match the Gaussian assump-
          tion:
                            √
             yj = f (yj ) = T arcsin(2yj − 1)                                                     (5.88)
          Now we have approximately yj ∼ N (f (θj ), 1) = N (μj , 1). We use Gaussian shrinkage to
          estimate the μj using Equation 5.86 with σ 2 = 1, and we then transform back to get
                                 √
              θ̂j = 0.5(sin(μ̂j / T ) + 1)                                                    (5.89)
          The results are shown in Figure 5.12(a-b). In (a), we plot the MLE θ̂j and the posterior mean θj .
          We see that all the estimates have shrunk towards the global mean, 0.265. In (b), we plot the
          true value θj , the MLE θ̂j and the posterior mean θj . (The “true” values of θj are estimated
          from a large number of independent games.) We see that, on average, the shrunken estimate
          is much closer to the true parameters than the MLE is. Speciﬁcally, the mean squared error,
                                D
          deﬁned by MSE = N1 j=1 (θj − θj )2 , is over three times smaller using the shrinkage estimates
          θj than using the MLEs θ̂j .

5.6.2.2   Estimating the hyper-parameters
          In this section, we give an algorithm for estimating η. Suppose initially that σj2 = σ 2 is the
          same for all groups. In this case, we can derive the EB estimate in closed form, as we now show.
          From Equation 4.126, we have

              p(xj |μ, τ 2 , σ 2 )     =                 N (xj |θj , σ 2 )N (θj |μ, τ 2 )dθj = N (xj |μ, τ 2 + σ 2 )                                        (5.90)

          5. Suppose E [X] = μ and var [X] = σ 2 (μ). Let Y = f (X). Then a Taylor series expansions gives Y ≈
          f (μ) + (X − μ)f  (μ). Hence var [Y ] ≈ f  (μ)2 var [X − μ] = f  (μ)2 σ 2 (μ). A variance stabilizing transformation
          is a function f such that f  (μ)2 σ 2 (μ) is independent of μ.
      176                                                                  Chapter 5. Bayesian statistics


      Hence the marginal likelihood is
                                   D
            p(D|μ, τ 2 , σ 2 ) =         N (xj |μ, τ 2 + σ 2 )                                      (5.91)
                                   j=1

      Thus we can estimate the hyper-parameters using the usual MLEs for a Gaussian. For μ, we
      have

                   1 
                      D
            μ̂ =         xj = x                                                                     (5.92)
                   D j=1

      which is the overall mean.
        For the variance, we can use moment matching (which is equivalent to the MLE for a
      Gaussian): we simply equate the model variance to the empirical variance:

                     1 
                        D
             2      2
            τ̂ + σ =       (xj − x)2  s2                                                           (5.93)
                     D j=1

      so τ̂ 2 = s2 − σ 2 . Since we know τ 2 must be positive, it is common to use the following revised
      estimate:
            τ̂ 2 = max{0, s2 − σ 2 } = (s2 − σ 2 )+                                                 (5.94)

      Hence the shrinkage factor is
                      σ2                σ2
            B̂ =              =                                                                     (5.95)
                   σ 2 + τ̂ 2   σ 2 + (s2 − σ 2 )+
         In the case where the σj2 ’s are different, we can no longer derive a solution in closed form.
      Exercise 11.13 discusses how to use the EM algorithm to derive an EB estimate, and Exercise 24.4
      discusses how to perform full Bayesian inference in this hierarchical model.

5.7   Bayesian decision theory
      We have seen how probability theory can be used to represent and updates our beliefs about
      the state of the world. However, ultimately our goal is to convert our beliefs into actions. In this
      section, we discuss the optimal way to do this.
         We can formalize any given statistical decision problem as a game against nature (as opposed
      to a game against other strategic players, which is the topic of game theory, see e.g., (Shoham
      and Leyton-Brown 2009) for details). In this game, nature picks a state or parameter or label,
      y ∈ Y, unknown to us, and then generates an observation, x ∈ X , which we get to see. We
      then have to make a decision, that is, we have to choose an action a from some action space
      A. Finally we incur some loss, L(y, a), which measures how compatible our action a is with
      nature’s hidden state y. For example, we might use misclassiﬁcation loss, L(y, a) = I(y = a),
      or squared loss, L(y, a) = (y − a)2 . We will see some other examples below.
          5.7. Bayesian decision theory                                                                  177


            Our goal is to devise a decision procedure or policy, δ : X → A, which speciﬁes the
          optimal action for each possible input. By optimal, we mean the action that minimizes the
          expected loss:
             δ(x) = argmin E [L(y, a)]                                                                (5.96)
                       a∈A

          In economics, it is more common to talk of a utility function; this is just negative loss,
          U (y, a) = −L(y, a). Thus the above rule becomes

             δ(x) = argmax E [U (y, a)]                                                               (5.97)
                       a∈A

          This is called the maximum expected utility principle, and is the essence of what we mean
          by rational behavior.
             Note that there are two different interpretations of what we mean by “expected”. In the
          Bayesian version, which we discuss below, we mean the expected value of y given the data we
          have seen so far. In the frequentist version, which we discuss in Section 6.3, we mean the
          expected value of y and x that we expect to see in the future.
             In the Bayesian approach to decision theory, the optimal action, having observed x, is deﬁned
          as the action a that minimizes the posterior expected loss:
                                           
              ρ(a|x)  Ep(y|x) [L(y, a)] =      L(y, a)p(y|x)                                         (5.98)
                                             y

          (If y is continuous (e.g., when we want to estimate a parameter vector), we should replace the
          sum with an integral.) Hence the Bayes estimator, also called the Bayes decision rule, is given
          by

             δ(x) = arg min ρ(a|x)                                                                    (5.99)
                         a∈A


 5.7.1    Bayes estimators for common loss functions
          In this section we show how to construct Bayes estimators for the loss functions most commonly
          arising in machine learning.

5.7.1.1   MAP estimate minimizes 0-1 loss
          The 0-1 loss is deﬁned by
                                   
                                     0 if a = y
             L(y, a) = I(y = a) =                                                                   (5.100)
                                     1 if a = y
          This is commonly used in classiﬁcation problems where y is the true class label and a = ŷ is
          the estimate.
            For example, in the two class case, we can write the loss matrix as follows:
                                                      ŷ = 1 ŷ = 0
                                             y=1         0        1
                                             y=0         1        0
          178                                                                       Chapter 5. Bayesian statistics



                                                                  
                                          
                                    




                                           
                                                              
                                                              


          Figure 5.13 For some regions of input space, where the class posteriors are uncertain, we may prefer not
          to choose class 1 or 2; instead we may prefer the reject option. Based on Figure 1.26 of (Bishop 2006a).



            (In Section 5.7.2, we generalize this loss function so it penalizes the two kinds of errors on
          the off-diagonal differently.)
            The posterior expected loss is

                ρ(a|x) = p(a = y|x) = 1 − p(y|x)                                                           (5.101)

          Hence the action that minimizes the expected loss is the posterior mode or MAP estimate

                y ∗ (x) = arg max p(y|x)                                                                   (5.102)
                             y∈Y


5.7.1.2   Reject option
          In classiﬁcation problems where p(y|x) is very uncertain, we may prefer to choose a reject
          action, in which we refuse to classify the example as any of the speciﬁed classes, and instead
          say “don’t know”. Such ambiguous cases can be handled by e.g., a human expert. See Figure 5.13
          for an illustration. This is useful in risk averse domains such as medicine and ﬁnance.
             We can formalize the reject option as follows. Let choosing a = C + 1 correspond to
          picking the reject action, and choosing a ∈ {1, . . . , C} correspond to picking one of the classes.
          Suppose we deﬁne the loss function as
                                  ⎧
                                  ⎨ 0 if i = j and i, j ∈ {1, . . . , C}
              L(y = j, a = i) =        λr            if i = C + 1                                      (5.103)
                                  ⎩
                                       λs              otherwise
          where λr is the cost of the reject action, and λs is the cost of a substitution error. In Exercise 5.3,
          you will show that the optimal action is to pick the reject action if the most probable class has
          a probability below 1 − λλrs ; otherwise you should just pick the most probable class.
          5.7. Bayesian decision theory                                                                               179

                              |x|0.2                           |x|1.0                       |x|2.0
                    2                                2                             2




                    1                                1                             1




                    0                                0                            0
                    −2   −1     0      1   2         −2   −1     0      1   2     −2   −1     0      1   2




                              (a)                              (b)                          (c)

          Figure 5.14 (a-c). Plots of the L(y, a) = |y − a|q vs |y − a| for q = 0.2, q = 1 and q = 2. Figure
          generated by lossFunctionFig.


5.7.1.3   Posterior mean minimizes         2   (quadratic) loss
          For continuous parameters, a more appropriate loss function is squared error,                      2   loss, or
          quadratic loss, deﬁned as
             L(y, a) = (y − a)2                                                                                    (5.104)
          The posterior expected loss is given by
                                               
             ρ(a|x) = E (y − a)2 |x = E y 2 |x − 2aE [y|x] + a2                                                   (5.105)
          Hence the optimal estimate is the posterior mean:
             ∂
                ρ(a|x) = −2E [y|x] + 2a = 0 ⇒ ŷ = E [y|x] =                    yp(y|x)dy                         (5.106)
             ∂a
          This is often called the minimum mean squared error estimate or MMSE estimate.
            In a linear regression problem, we have
             p(y|x, θ) = N (y|xT w, σ 2 )                                                                          (5.107)
          In this case, the optimal estimate given some training data D is given by
             E [y|x, D] = xT E [w|D]                                                                              (5.108)
          That is, we just plug-in the posterior mean parameter estimate. Note that this is the optimal
          thing to do no matter what prior we use for w.

5.7.1.4   Posterior median minimizes           1   (absolute) loss
          The 2 loss penalizes deviations from the truth quadratically, and thus is sensitive to outliers. A
          more robust alternative is the absolute or 1 loss, L(y, a) = |y −a| (see Figure 5.14). The optimal
          estimate is the posterior median, i.e., a value a such that P (y < a|x) = P (y ≥ a|x) = 0.5.
          See Exercise 5.9 for a proof.

5.7.1.5   Supervised learning
          Consider a prediction function δ : X → Y, and suppose we have some cost function (y, y  )
          which gives the cost of predicting y  when the truth is y. We can deﬁne the loss incurred by
          180                                                                  Chapter 5. Bayesian statistics


          taking action δ (i.e., using this predictor) when the unknown state of nature is θ (the parameters
          of the data generating mechanism) as follows:
                                                         
              L(θ, δ)  E(x,y)∼p(x,y|θ) [ (y, δ(x)] =           L(y, δ(x))p(x, y|θ)                   (5.109)
                                                       x    y

          This is known as the generalization error. Our goal is to minimize the posterior expected loss,
          given by

                ρ(δ|D) =      p(θ|D)L(θ, δ)dθ                                                          (5.110)

          This should be contrasted with the frequentist risk which is deﬁned in Equation 6.47.

 5.7.2    The false positive vs false negative tradeoff
          In this section, we focus on binary decision problems, such as hypothesis testing, two-class
          classiﬁcation, object/ event detection, etc. There are two types of error we can make: a false
          positive (aka false alarm), which arises when we estimate ŷ = 1 but the truth is y = 0; or a
          false negative (aka missed detection), which arises when we estimate ŷ = 0 but the truth is
          y = 1. The 0-1 loss treats these two kinds of errors equivalently. However, we can consider the
          following more general loss matrix:
                                                        ŷ = 1 ŷ = 0
                                               y=1         0      LF N
                                               y = 0 LF P           0
             where LF N is the cost of a false negative, and LF P is the cost of a false positive. The
          posterior expected loss for the two possible actions is given by
                ρ(ŷ = 0|x)   =   LF N p(y = 1|x)                                                      (5.111)
                ρ(ŷ = 1|x)   =   LF P p(y = 0|x)                                                      (5.112)
          Hence we should pick class ŷ = 1 iff

                ρ(ŷ = 0|x) >     ρ(ŷ = 1|x)                                                          (5.113)
                p(y = 1|x)        LF P
                            >                                                                          (5.114)
                p(y = 0|x)        LF N
          If LF N = cLF P , it is easy to show (Exercise 5.10) that we should pick ŷ = 1 iff p(y =
          1|x)/p(y = 0|x) > τ , where τ = c/(1 + c) (see also (Muller et al. 2004)). For example, if a
          false negative costs twice as much as false positive, so c = 2, then we use a decision threshold
          of 2/3 before declaring a positive.
             Below we discuss ROC curves, which provide a way to study the FP-FN tradeoff without having
          to choose a speciﬁc threshold.

5.7.2.1   ROC curves and all that
          Suppose we are solving a binary decision problem, such as classiﬁcation, hypothesis testing,
          object detection, etc. Also, assume we have a labeled data set, D = {(xi , yi )}. Let δ(x) =
5.7. Bayesian decision theory                                                                         181


                                   Truth
                            1              0                                    Σ
                1          TP             FP                             N̂+ = T P + F P
   Estimate
                0         FN              TN                            N̂− = F N + T N
                Σ    N+ = T P + F N N − = F P + T N                 N = TP + FP + FN + TN

Table 5.2 Quantities derivable from a confusion matrix. N+ is the true number of positives, N̂+ is the
“called” number of positives, N− is the true number of negatives, N̂− is the “called” number of negatives.

                                   y=1                                 y=0
               ŷ = 1    T P/N+ =TPR=sensitivity=recall          F P/N− =FPR=type I
               ŷ = 0    F N/N+ =FNR=miss rate=type II          T N/N− =TNR=speciﬁty

Table 5.3 Estimating p(ŷ|y) from a confusion matrix. Abbreviations: FNR = false negative rate, FPR =
false positive rate, TNR = true negative rate, TPR = true positive rate.



I(f (x) > τ ) be our decision rule, where f (x) is a measure of conﬁdence that y = 1 (this
should be monotonically related to p(y = 1|x), but does not need to be a probability), and τ is
some threshold parameter. For each given value of τ , we can apply our decision rule and count
the number of true positives, false positives, true negatives, and false negatives that occur, as
shown in Table 5.2. This table of errors is called a confusion matrix.
   From this table, we can compute the true positive rate (TPR), also known as the sensitivity,
recall or hit rate, by using T P R = T P/N+ ≈ p(ŷ = 1|y = 1). We can also compute the
false positive rate (FPR), also called the false alarm rate, or the type I error rate, by using
F P R = F P/N− ≈ p(ŷ = 1|y = 0). These and other deﬁnitions are summarized in Tables 5.3
and 5.4. We can combine these errors in any way we choose to compute a loss function.
   However, rather than than computing the TPR and FPR for a ﬁxed threshold τ , we can run
our detector for a set of thresholds, and then plot the TPR vs FPR as an implicit function of
τ . This is called a receiver operating characteristic or ROC curve. See Figure 5.15(a) for an
example. Any system can achieve the point on the bottom left, (F P R = 0, T P R = 0), by
setting τ = 1 and thus classifying everything as negative; similarly any system can achieve the
point on the top right, (F P R = 1, T P R = 1), by setting τ = 0 and thus classifying everything
as positive. If a system is performing at chance level, then we can achieve any point on the
diagonal line T P R = F P R by choosing an appropriate threshold. A system that perfectly
separates the positives from negatives has a threshold that can achieve the top left corner,
(F P R = 0, T P R = 1); by varying the threshold such a system will “hug” the left axis and
then the top axis, as shown in Figure 5.15(a).
   The quality of a ROC curve is often summarized as a single number using the area under the
curve or AUC. Higher AUC scores are better; the maximum is obviously 1. Another summary
statistic that is used is the equal error rate or EER, also called the cross over rate, deﬁned
as the value which satisﬁes F P R = F N R. Since F N R = 1 − T P R, we can compute the
EER by drawing a line from the top left to the bottom right and seeing where it intersects the
ROC curve (see points A and B in Figure 5.15(a)). Lower EER scores are better; the minimum is
obviously 0.
          182                                                                                   Chapter 5. Bayesian statistics


                            1                                                         1


                                  A                                                       B                A
                                      B




                                                                          precision
                      tpr
                            0                                                         0
                             0                         1                                   0                   1
                                       fpr                                                        recall



                                      (a)                                                        (b)

          Figure 5.15 (a) ROC curves for two hypothetical classiﬁcation systems. A is better than B. We plot the
          true positive rate (TPR) vs the false positive rate (FPR) as we vary the threshold τ . We also indicate the
          equal error rate (EER) with the red and blue dots, and the area under the curve (AUC) for classiﬁer B. (b)
          A precision-recall curve for two hypothetical classiﬁcation systems. A is better than B. Figure generated by
          PRhand.

                                                     y=1                                     y=0
                                   ŷ = 1    T P/N̂+ =precision=PPV                       F P/N̂+ =FDP
                                   ŷ = 0          F N/N̂−                                T N/N̂− =NPV

          Table 5.4 Estimating p(y|ŷ) from a confusion matrix. Abbreviations: FDP = false discovery probability,
          NPV = negative predictive value, PPV = positive predictive value,


5.7.2.2   Precision recall curves
          When trying to detect a rare event (such as retrieving a relevant document or ﬁnding a face
          in an image), the number of negatives is very large. Hence comparing T P R = T P/N+ to
          F P R = F P/N− is not very informative, since the FPR will be very small. Hence all the
          “action” in the ROC curve will occur on the extreme left. In such cases, it is common to plot
          the TPR versus the number of false positives, rather than vs the false positive rate.
             However, in some cases, the very notion of “negative” is not well-deﬁned. For example, when
          detecting objects in images (see Section 1.2.1.3), if the detector works by classifying patches, then
          the number of patches examined — and hence the number of true negatives — is a parameter
          of the algorithm, not part of the problem deﬁnition. So we would like to use a measure that
          only talks about positives.
             The precision is deﬁned as T P/N̂+ = p(y = 1|ŷ = 1) and the recall is deﬁned as
          T P/N+ = p(ŷ = 1|y = 1). Precision measures what fraction of our detections are actually
          positive, and recall measures what fraction of the positives we actually detected. If ŷi ∈ {0, 1}
          is the predicted label, and yi ∈ {0, 1} is the true label, we can estimate precision and recall
          using
                                   
                        yi ŷi          yi ŷi
              P =    i
                               , R = i                                                                  (5.115)
                        i ŷi           i yi

          A precision recall curve is a plot of precision vs recall as we vary the threshold τ . See
          Figure 5.15(b). Hugging the top right is the best one can do.
             This curve can be summarized as a single number using the mean precision (averaging over
          5.7. Bayesian decision theory                                                                        183


                         Class 1                          Class 2                          Pooled
                         y=1       y=0                    y=1        y=0                   y=1        y=0
               ŷ = 1      10        10         ŷ = 1      90         10        ŷ = 1     100        20
               ŷ = 0      10       970         ŷ = 0      10        890        ŷ = 0      20       1860

          Table 5.5 Illustration of the difference between macro- and micro-averaging. y is the true label, and ŷ
          is the called label. In this example, the macro-averaged precision is [10/(10 + 10) + 90/(10 + 90)]/2 =
          (0.5 + 0.9)/2 = 0.7. The micro-averaged precision is 100/(100 + 20) ≈ 0.83. Based on Table 13.7 of
          (Manning et al. 2008).



          recall values), which approximates the area under the curve. Alternatively, one can quote the
          precision for a ﬁxed recall level, such as the precision of the ﬁrst K = 10 entities recalled.
          This is called the average precision at K score. This measure is widely used when evaluating
          information retrieval systems.

5.7.2.3   F-scores *
          For a ﬁxed threshold, one can compute a single precision and recall value. These are often
          combined into a single statistic called the F score, or F1 score, which is the harmonic mean of
          precision and recall:
                        2       2P R
             F1              =                                                                            (5.116)
                    1/P + 1/R   R+P
          Using Equation 5.115, we can write this as
                        N
                       2 i=1 yi ŷi
             F1 = N           N                                                                           (5.117)
                     i=1 yi +    i=1 ŷi

          This is a widely used measure in information retrieval systems.
             To understand why we use the harmonic mean instead of the arithmetic mean, (P + R)/2,
          consider the following scenario. Suppose we recall all entries, so R = 1. The precision will be
          given by the prevalence, p(y = 1). Suppose the prevalence is low, say p(y = 1) = 10−4 . The
          arithmetic mean of P and R is given by (P + R)/2 = (10−4 + 1)/2 ≈ 50%. By contrast, the
                                                        −4
          harmonic mean of this strategy is only 2×10      ×1
                                                     1+10−4 ≈ 0.2%.
             In the multi-class case (e.g., for document classiﬁcation problems), there are two ways to
                                                                                            C
          generalize F1 scores. The ﬁrst is called macro-averaged F1, and is deﬁned as c=1 F1 (c)/C,
          where F1 (c) is the F1 score obtained on the task of distinguishing class c from all the others.
          The other is called micro-averaged F1, and is deﬁned as the F1 score where we pool all the
          counts from each class’s contingency table.
             Table 5.5 gives a worked example that illustrates the difference. We see that the precision of
          class 1 is 0.5, and of class 2 is 0.9. The macro-averaged precision is therefore 0.7, whereas the
          micro-averaged precision is 0.83. The latter is much closer to the precision of class 2 than to
          the precision of class 1, since class 2 is ﬁve times larger than class 1. To give equal weight to
          each class, use macro-averaging.
          184                                                                    Chapter 5. Bayesian statistics


5.7.2.4   False discovery rates *
          Suppose we are trying to discover a rare phenomenon using some kind of high throughput
          measurement device, such as a gene expression micro array, or a radio telescope. We will need
          to make many binary decisions of the form p(yi = 1|D) > τ , where D = {xi }N       i=1 and N may
          be large. This is called multiple hypothesis testing. Note that the difference from standard
          binary classiﬁcation is that we are classifying yi based on all the data, not just based on xi . So
          this is a simultaneous classiﬁcation problem, where we might hope to do better than a series of
          individual classiﬁcation problems.
             How should we set the threshold τ ? A natural approach is to try to minimize the expected
          number of false positives. In the Bayesian approach, this can be computed as follows:
                            
              F D(τ, D)        (1 − pi ) I(pi > τ )                                                  (5.118)
                                ! "# $ ! "# $
                             i
                                pr. error discovery

          where pi  p(yi = 1|D) is your belief that this object exhibits the phenomenon in question.
          We then deﬁne the posterior expected false discovery rate as follows:
              F DR(τ, D)  F D(τ, D)/N (τ, D)                                                             (5.119)
                                 
          where N (τ, D) =         i I(pi > τ ) is the number of discovered items. Given a desired FDR
          tolerance, say α = 0.05, one can then adapt τ to achieve this; this is called the direct posterior
          probability approach to controlling the FDR (Newton et al. 2004; Muller et al. 2004).
             In order to control the FDR it is very helpful to estimate the pi ’s jointly (e.g., using a hierar-
          chical Bayesian model, as in Section 5.5), rather than independently. This allows the pooling of
          statistical strength, and thus lower FDR. See e.g., (Berry and Hochberg 1999) for more information.

 5.7.3    Other topics *
          In this section, we brieﬂy mention a few other topics related to Bayesian decision theory. We do
          not have space to go into detail, but we include pointers to the relevant literature.

5.7.3.1   Contextual bandits
          A one-armed bandit is a colloquial term for a slot machine, found in casinos around the world.
          The game is this: you insert some money, pull an arm, and wait for the machine to stop; if
          you’re lucky, you win some money. Now imagine there is a bank of K such machines to choose
          from. Which one should you use? This is called a multi-armed bandit, and can be modeled
                                                                                      has an unknown
          using Bayesian decision theory: there are K possible actions, and each action
          reward (payoff function) rk . By maintaining a belief state, p(r1:K |D) = k p(rk |D), one can
          devise an optimal policy; this can be compiled into a series of Gittins Indices (Gittins 1989).
          This optimally solves the exploration-exploitation tradeoff, which speciﬁes how many times
          one should try each action before deciding to go with the winner.
             Now consider an extension where each arm, and the player, has an associated feature vector;
          call all these features x. This is called a contextual bandit (see e.g., (Sarkar 1991; Scott 2010;
          Li et al. 2011)). For example, the “arms” could represent ads or news articles which we want
          to show to the user, and the features could represent properties of these ads or articles, such
          5.7. Bayesian decision theory                                                                                185


          as a bag of words, as well as properties of the user, such as demographics. If we assume a
          linear model for reward, rk = θ Tk x, we can maintain a distribution over the parameters of each
          arm, p(θ k |D), where D is a series of tuples of the form (a, x, r), which speciﬁes which arm
          was pulled, what its features were, and what the resulting outcome was (e.g., r = 1 if the user
          clicked on the ad, and r = 0 otherwise). We discuss ways to compute p(θ k |D) from linear and
          logistic regression models in later chapters.
             Given the posterior, we must decide what action to take. One common heuristic, known as
          UCB (which stands for “upper conﬁdence bound”) is to take the action which maximizes
                        K
             k ∗ = argmax μk + λσk                                                                                 (5.120)
                       k=1

          where μk = E [rk |D], σk2 = var [rk |D] and λ is a tuning parameter that trades off exploration
          and exploitation. The intuition is that we should pick actions about which we believe are good
          (μk is large), and/ or actions about which we are uncertain (σk is large).
            An even simpler method, known as Thompson sampling, is as follows. At each step, we pick
          action k with a probability that is equal to its probability of being the optimal action:

             pk =       I(E [r|a, x, θ] = max
                                           
                                              E [r|a , x, θ])p(θ|D)dθ                                              (5.121)
                                              a

          We can approximate this by drawing a single sample from the posterior, θ t ∼ p(θ|D), and then
          choosing k ∗ = argmaxk E r|x, k, θ t . Despite its simplicity, this has been shown to work quite
          well (Chapelle and Li 2011).

5.7.3.2   Utility theory
          Suppose we are a doctor trying to decide whether to operate on a patient or not. We imagine
          there are 3 states of nature: the patient has no cancer, the patient has lung cancer, or the
          patient has breast cancer. Since the action and state space is discrete, we can represent the loss
          function L(θ, a) as a loss matrix, such as the following:
                                                          Surgery No surgery
                                          No cancer          20            0
                                         Lung cancer         10           50
                                        Breast cancer        10           60
             These numbers reﬂects the fact that not performing surgery when the patient has cancer is
          very bad (loss of 50 or 60, depending on the type of cancer), since the patient might die; not
          performing surgery when the patient does not have cancer incurs no loss (0); performing surgery
          when the patient does not have cancer is wasteful (loss of 20); and performing surgery when
          the patient does have cancer is painful but necessary (10).
             It is natural to ask where these numbers come from. Ultimately they represent the personal
          preferences or values of a ﬁctitious doctor, and are somewhat arbitrary: just as some people
          prefer chocolate ice cream and others prefer vanilla, there is no such thing as the “right” loss/
          utility function. However, it can be shown (see e.g., (DeGroot 1970)) that any set of consistent
          preferences can be converted to a scalar loss/ utility function. Note that utility can be measured
          on an arbitrary scale, such as dollars, since it is only relative values that matter.6
          6. People are often squeamish about talking about human lives in monetary terms, but all decision making requires
          186                                                                                    Chapter 5. Bayesian statistics


5.7.3.3   Sequential decision theory
          So far, we have concentrated on one-shot decision problems, where we only have to make
          one decision and then the game ends. In Setion 10.6, we will generalize this to multi-stage or
          sequential decision problems. Such problems frequently arise in many business and engineering
          settings. This is closely related to the problem of reinforcement learning. However, further
          discussion of this point is beyond the scope of this book.

          Exercises
          Exercise 5.1 Proof that a mixture of conjugate priors is indeed conjugate
          Derive Equation 5.69.
          Exercise 5.2 Optimal threshold on classiﬁcation probability
          Consider a case where we have learned a conditional probability distribution P (y|x). Suppose there are
          only two classes, and let p0 = P (Y = 0|x) and p1 = P (Y = 1|x). Consider the loss matrix below:

                                                        predicted       true label y
                                                         label ŷ          0       1
                                                            0              0     λ01
                                                            1             λ10      0

          a. Show that the decision ŷ that minimizes the expected loss is equivalent to setting a probability threshold
             θ and predicting ŷ = 0 if p1 < θ and ŷ = 1 if p1 ≥ θ. What is θ as a function of λ01 and λ10 ? (Show
             your work.)
          b. Show a loss matrix where the threshold is 0.1. (Show your work.)

          Exercise 5.3 Reject option in classiﬁers
          (Source: (Duda et al. 2001, Q2.13).)
          In many classiﬁcation problems one has the option either of assigning x to class j or, if you are too
          uncertain, of choosing the reject option. If the cost for rejects is less than the cost of falsely classifying
          the object, it may be the optimal action. Let αi mean you choose action i, for i = 1 : C + 1, where C
          is the number of classes and C + 1 is the reject action. Let Y = j be the true (but unknown) state of
          nature. Deﬁne the loss function as follows
                               ⎧
                               ⎨ 0 if i = j and i, j ∈ {1, . . . , C}
              λ(αi |Y = j) =       λr            if i = C + 1                                                     (5.122)
                               ⎩
                                   λs              otherwise
          In otherwords, you incur 0 loss if you correctly classify, you incur λr loss (cost) if you choose the reject
          option, and you incur λs loss (cost) if you make a substitution error (misclassiﬁcation).

          tradeoffs, and one needs to use some kind of “currency” to compare different courses of action. Insurance companies
          do this all the time. Ross Schachter, a decision theorist at Stanford University, likes to tell a story of a school board who
          rejected a study on absestos removal from schools because it performed a cost-beneﬁt analysis, which was considered
          “inhumane” because they put a dollar value on children’s health; the result of rejecting the report was that the absestos
          was not removed, which is surely more “inhumane”. In medical domains, one often measures utility in terms of QALY, or
          quality-adjusted life-years, instead of dollars, but it’s the same idea. Of course, even if you do not explicitly specify how
          much you value different people’s lives, your behavior will reveal your implicit values/ preferences, and these preferences
          can then be converted to a real-valued scale, such as dollars or QALY. Inferring a utility function from behavior is called
          inverse reinforcement learning.
5.7. Bayesian decision theory                                                                              187


                                         Decision      true label y
                                             ŷ           0      1
                                         predict 0        0     10
                                         predict 1        10     0
                                           reject          3     3


a. Show that the minimum risk is obtained if we decide Y = j if p(Y = j|x) ≥ p(Y = k|x) for all k
   (i.e., j is the most probable class) and if p(Y = j|x) ≥ 1 − λλrs ; otherwise we decide to reject.
b. Describe qualitatively what happens as λr /λs is increased from 0 to 1 (i.e., the relative cost of rejection
   increases).
Exercise 5.4 More reject options
In many applications, the classiﬁer is allowed to “reject” a test example rather than classifying it into one
of the classes. Consider, for example, a case in which the cost of a misclassiﬁcation is $10 but the cost of
having a human manually make the decison is only $3. We can formulate this as the following loss matrix:

a. Suppose P (y = 1|x) is predicted to be 0.2. Which decision minimizes the expected loss?
b. Now suppose P (y = 1|x)=0.4. Now which decision minimizes the expected loss?
c. Show that in general, for this loss matrix, but for any posterior distribution, there will be two thresholds
   θ0 and θ1 such that the optimal decisionn is to predict 0 if p1 < θ0 , reject if θ0 ≤ p1 ≤ θ1 , and
   predict 1 if p1 > θ1 (where p1 = p(y = 1|x)). What are these thresholds?

Exercise 5.5 Newsvendor problem
Consider the following classic problem in decision theory/ economics. Suppose you are trying to decide
how much quantity Q of some product (e.g., newspapers) to buy to maximize your proﬁts. The optimal
amount will depend on how much demand D you think there is for your product, as well as its cost
to you C and its selling price P . Suppose D is unknown but has pdf f (D) and cdf F (D). We can
evaluate the expected proﬁt by considering two cases: if D > Q, then we sell all Q items, and make proﬁt
π = (P − C)Q; but if D < Q, we only sell D items, at proﬁt (P − C)D, but have wasted C(Q − D)
on the unsold items. So the expected proﬁt if we buy quantity Q is
                ∞                         Q                      Q
    Eπ(Q) =        (P − C)Qf (D)dD +          (P − C)Df (D) −         C(Q − D)f (D)dD             (5.123)
                Q                            0                         0

Simplify this expression, and then take derivatives wrt Q to show that the optimal quantity Q∗ (which
maximizes the expected proﬁt) satisﬁes
               P −C
   F (Q∗ ) =                                                                                            (5.124)
                 P

Exercise 5.6 Bayes factors and ROC curves
Let B = p(D|H1 )/p(D|H0 ) be the bayes factor in favor of model 1. Suppose we plot two ROC curves,
one computed by thresholding B, and the other computed by thresholding p(H1 |D). Will they be the
same or different? Explain why.
Exercise 5.7 Bayes model averaging helps predictive accuracy
Let Δ be a quantity that we want to predict, let D be the observed data and M be a ﬁnite set of models.
Suppose our action is to provide a probabilistic prediction p(), and the loss function is L(Δ, p()) =
188                                                                        Chapter 5. Bayesian statistics


− log p(Δ). We can either perform Bayes model averaging and predict using

      pBM A (Δ) =          p(Δ|m, D)p(m|D)                                                            (5.125)
                    m∈M

or we could predict using any single model (a plugin approximation)
      pm (Δ) = p(Δ|m, D)                                                                              (5.126)
Show that, for all models m ∈ M, the posterior expected loss using BMA is lower, i.e.,
                    
   E L(Δ, pBM A ) ≤ E [L(Δ, pm )]                                                                     (5.127)

where the expectation over Δ is with respect to

      p(Δ|D) =          p(Δ|m, D)p(m|D)                                                               (5.128)
                 m∈M

Hint: use the non-negativity of the KL divergence.
Exercise 5.8 MLE and model selection for a 2d discrete distribution
(Source: Jaakkola.)
Let x ∈ {0, 1} denote the result of a coin toss (x = 0 for tails, x = 1 for heads). The coin is potentially
biased, so that heads occurs with probability θ1 . Suppose that someone else observes the coin ﬂip and
reports to you the outcome, y. But this person is unreliable and only reports the result correctly with
probability θ2 ; i.e., p(y|x, θ2 ) is given by
                                                   y=0     y=1
                                             x = 0 θ2      1 − θ2
                                             x = 1 1 − θ 2 θ2
Assume that θ2 is independent of x and θ1 .

a. Write down the joint probability distribution p(x, y|θ) as a 2 × 2 table, in terms of θ = (θ1 , θ2 ).
b. Suppose have the following dataset: x = (1, 1, 0, 1, 1, 0, 0), y = (1, 0, 0, 0, 1, 0, 1). What are the
   MLEs for θ1 and θ2 ? Justify your answer. Hint: note that the likelihood function factorizes,
         p(x, y|θ) = p(y|x, θ2 )p(x|θ1 )                                                              (5.129)
   What is p(D|θ̂, M2 ) where M2 denotes this 2-parameter model? (You may leave your answer in
   fractional form if you wish.)
c. Now consider a model with 4 parameters, θ = (θ0,0 , θ0,1 , θ1,0 , θ1,1 ), representing p(x, y|θ) = θx,y .
   (Only 3 of these parameters are free to vary, since they must sum to one.) What is the MLE of θ? What
   is p(D|θ̂, M4 ) where M4 denotes this 4-parameter model?
d. Suppose we are not sure which model is correct. We compute the leave-one-out cross validated log
   likelihood of the 2-parameter model and the 4-parameter model as follows:
                    n
         L(m) =         log p(xi , yi |m, θ̂(D−i ))                                                   (5.130)
                  i=1

      and θ̂(D−i )) denotes the MLE computed on D excluding row i. Which model will CV pick and why?
      Hint: notice how the table of counts changes when you omit each training case one at a time.
5.7. Bayesian decision theory                                                                     189


e. Recall that an alternative to CV is to use the BIC score, deﬁned as
                                         dof(M )
       BIC(M, D)  log p(D|θ̂ M LE ) −           log N                                          (5.131)
                                            2
   where dof(M ) is the number of free parameters in the model, Compute the BIC scores for both models
   (use log base e). Which model does BIC prefer?

Exercise 5.9 Posterior median is optimal estimate under L1 loss
Prove that the posterior median is optimal estimate under L1 loss.
Exercise 5.10 Decision rule for trading off FPs and FNs
If LF N = cLF P , show that we should pick ŷ = 1 iff p(y = 1|x)/p(y = 0|x) > τ , where τ = c/(1 + c)
6     Frequentist statistics



6.1   Introduction
      The approach to statistical inference that we described in Chapter 5 is known as Bayesian
      statistics. Perhaps surprisingly, this is considered controversial by some people, whereas the ap-
      plication of Bayes rule to non-statistical problems — such as medical diagnosis (Section 2.2.3.1),
      spam ﬁltering (Section 3.4.4.1), or airplane tracking (Section 18.2.1) — is not controversial. The
      reason for the objection has to do with a misguided distinction between parameters of a statis-
      tical model and other kinds of unknown quantities.1
         Attempts have been made to devise approaches to statistical inference that avoid treating
      parameters like random variables, and which thus avoid the use of priors and Bayes rule. Such
      approaches are known as frequentist statistics, classical statistics or orthodox statistics.
      Instead of being based on the posterior distribution, they are based on the concept of a sampling
      distribution. This is the distribution that an estimator has when applied to multiple data sets
      sampled from the true but unknown distribution; see Section 6.2 for details. It is this notion
      of variation across repeated trials that forms the basis for modeling uncertainty used by the
      frequentist approach.
         By contrast, in the Bayesian approach, we only ever condition on the actually observed data;
      there is no notion of repeated trials. This allows the Bayesian to compute the probability of
      one-off events, as we discussed in Section 2.1. Perhaps more importantly, the Bayesian approach
      avoids certain paradoxes that plague the frequentist approach (see Section 6.6). Nevertheless, it
      is important to be familiar with frequentist statistics (especially Section 6.5), since it is widely
      used in machine learning.

6.2   Sampling distribution of an estimator
      In frequentist statistics, a parameter estimate θ̂ is computed by applying an estimator δ to
      some data D, so θ̂ = δ(D). The parameter is viewed as ﬁxed and the data as random, which
      is the exact opposite of the Bayesian approach. The uncertainty in the parameter estimate can
      be measured by computing the sampling distribution of the estimator. To understand this

      1. Parameters are sometimes considered to represent true (but unknown) physical quantities, which are therefore not
      random. However, we have seen that it is perfectly reasonable to use a probability distribution to represent one’s
      uncertainty about an unknown constant.
        192                                                                                                                                 Chapter 6. Frequentist statistics

                                        Boot: true = 0.70, n=10, mle = 0.90, se = 0.001                                 Boot: true = 0.70, n=100, mle = 0.70, se = 0.000

                     4000                                                                             3500



                     3500
                                                                                                      3000


                     3000
                                                                                                      2500


                     2500
                                                                                                      2000

                     2000

                                                                                                      1500
                     1500


                                                                                                      1000
                     1000


                                                                                                      500
                     500



                       0                                                                                0
                            0   0.1   0.2    0.3     0.4      0.5     0.6     0.7     0.8   0.9   1          0   0.1   0.2    0.3     0.4     0.5     0.6     0.7      0.8   0.9   1



                                                           (a)                                                                              (b)


        Figure 6.1 A bootstrap approximation to the sampling distribution of θ̂ for a Bernoulli distribution. We
        use B = 10, 000 bootstrap samples. The N datacases were generated from Ber(θ = 0.7). (a) MLE with
        N = 10. (b) MLE with N = 100. Figure generated by bootstrapDemoBer.



        concept, imagine sampling many different data sets D(s) from some true model, p(·|θ∗ ), i.e., let
                    (s)
        D(s) = {xi }N                         ∗         ∗
                        i=1 , where xi ∼ p(·|θ ), and θ is the true parameter. Here s = 1 : S indexes
                                      s

        the sampled data set, and N is the size of each such dataset. Now apply the estimator θ̂(·)
        to each D(s) to get a set of estimates, {θ̂(D(s) )}. As we let S → ∞, the distribution induced
        on θ̂(·) is the sampling distribution of the estimator. We will discuss various ways to use the
        sampling distribution in later sections. But ﬁrst we sketch two approaches for computing the
        sampling distribution itself.

6.2.1   Bootstrap
        The bootstrap is a simple Monte Carlo technique to approximate the sampling distribution. This
        is particularly useful in cases where the estimator is a complex function of the true parameters.
           The idea is simple. If we knew the true parameters θ∗ , we could generate many (say S) fake
        datasets, each of size N , from the true distribution, xsi ∼ p(·|θ∗ ), for s = 1 : S, i = 1 : N .
        We could then compute our estimator from each sample, θ̂s = f (xs1:N ) and use the empirical
        distribution of the resulting samples as our estimate of the sampling distribution. Since θ is
        unknown, the idea of the parametric bootstrap is to generate the samples using θ̂(D) instead.
        An alternative, called the non-parametric bootstrap, is to sample the xsi (with replacement)
        from the original data D, and then compute the induced distribution as before. Some methods
        for speeding up the bootstrap when applied to massive data sets are discussed in (Kleiner et al.
        2011).
           Figure 6.1 shows an example where we compute the sampling distribution of the MLE for
        a Bernoulli using the parametric bootstrap. (Results using the non-parametric bootstrap are
        essentially the same.) We see that the sampling distribution is asymmetric, and therefore quite
        far from Gaussian, when N = 10; when N = 100, the distribution looks more Gaussian, as
        theory suggests (see below).
           A natural question is: what is the connection between the parameter estimates θ̂s = θ̂(xs1:N )
        computed by the bootstrap and parameter values sampled from the posterior, θs ∼ p(·|D)?
        6.2. Sampling distribution of an estimator                                                                         193


        Conceptually they are quite different. But in the common case that that the prior is not very
        strong, they can be quite similar. For example, Figure 6.1(c-d) shows an example where we
        compute the posterior using a uniform Beta(1,1) prior, and then sample from it. We see that
        the posterior and the sampling distribution are quite similar. So one can think of the bootstrap
        distribution as a “poor man’s” posterior; see (Hastie et al. 2001, p235) for details.
           However, perhaps surprisingly, bootstrap can be slower than posterior sampling. The reason
        is that the bootstrap has to ﬁt the model S times, whereas in posterior sampling, we usually
        only ﬁt the model once (to ﬁnd a local mode), and then perform local exploration around the
        mode. Such local exploration is usually much faster than ﬁtting a model from scratch.

6.2.2   Large sample theory for the MLE *
        In some cases, the sampling distribution for some estimators can be computed analytically. In
        particular, it can be shown that, under certain conditions, as the sample size tends to inﬁnity,
        the sampling distribution of the MLE becomes Gaussian. Informally, the requirement for this
        result to hold is that each parameter in the model gets to “see” an inﬁnite amount of data, and
        that the model be identiﬁable. Unfortunately this excludes many of the models of interest to
        machine learning. Nevertheless, let us assume we are in a simple setting where the theorem
        holds.
           The center of the Gaussian will be the MLE θ̂. But what about the variance of this Gaussian?
        Intuitively the variance of the estimator will be (inversely) related to the amount of curvature of
        the likelihood surface at its peak. If the curvature is large, the peak will be “sharp”, and the
        variance low; in this case, the estimate is “well determined”. By contrast, if the curvature is
        small, the peak will be nearly “ﬂat”, so the variance is high.
           Let us now formalize this intuition. Deﬁne the score function as the gradient of the log
        likelihood evaluated at some point θ̂:
            s(θ̂)  ∇ log p(D|θ)|θ̂                                                                                       (6.1)
        Deﬁne the observed information matrix as the gradient of the negative score function, or
        equivalently, the Hessian of the NLL:
            J(θ̂(D))  −∇s(θ̂) = −∇2θ log p(D|θ)|θ̂                                                                      (6.2)
        In 1D, this becomes
                          d
            J(θ̂(D)) = − 2 log p(D|θ)|θ̂                                                                                 (6.3)
                         dθ
        This is just a measure of curvature of the log-likelihood function at θ̂.
           Since we are studying the sampling distribution, D = (x1 , . . . , xN ) is a set of random
        variables. The Fisher information matrix is deﬁned to be the expected value of the observed
        information matrix:2
                              )        *
            IN (θ̂|θ ∗ )  Eθ∗ J(θ̂|D)                                                            (6.4)

        2. This is not the usual deﬁnition, but is equivalent to it under standard assumptions. More   precisely, the standard
                                                                                                                         
                                                                                                         d
        deﬁnition is as follows (we just give the scalar case to simplify notation): I(θ̂|θ∗ )  varθ∗ dθ  log p(X|θ)|θ̂ , that
                                                                                                                 
                                                                                                  d
        is, the variance of the score function. If θ̂ is the MLE, it is easy to see that Eθ∗ dθ     log p(X|θ)|θ̂ = 0 (since
      194                                                                            Chapter 6. Frequentist statistics

                                 N
      where Eθ∗ [f (D)]  N1 i=1 f (xi )p(xi |θ ∗ ) is the expected value of the function f when
      applied to data sampled from θ ∗ . Often θ ∗ , representing the “true parameter” that generated
      the data, is assumed known, so we just write IN (θ̂)  IN (θ̂|θ ∗ ) for short. Furthermore, it is
      easy to see that IN (θ̂) = N I1 (θ̂), because the log-likelihood for a sample of size N is just N
      times “steeper” than the log-likelihood for a sample of size 1. So we can drop the 1 subscript
      and just write I(θ̂)  I1 (θ̂). This is the notation that is usually used.
         Now let θ̂  θ̂ mle (D) be the MLE, where D ∼ θ ∗ . It can be shown that

            θ̂ → N (θ ∗ , IN (θ ∗ )−1 )                                                                               (6.5)
      as N → ∞ (see e.g., (Rice 1995, p265) for a proof). We say that the sampling distribution of the
      MLE is asymptotically normal.
         What about the variance of the MLE, which can be used as some measure of conﬁdence
      in the MLE? Unfortunately, θ ∗ is unknown, so we can’t evaluate the variance of the sampling
      distribution. However, we can approximate the sampling distribution by replacing θ ∗ with θ̂.
      Consequently, the approximate standard errors of θ̂k are given by
                                −1
            ˆ k  IN (θ̂)kk2
            se                                                                                                       (6.6)
       For example, from Equation 5.60 we know that the Fisher information for a binomial sampling
      model is
                               1
            I(θ)       =                                                                                              (6.7)
                           θ(1 − θ)
      So the approximate standard error of the MLE is
                                                                     12
                                1          1           θ̂(1 − θ̂)
            ˆ
            se     =       1           =1        =                                                                   (6.8)
                                                           N
                               IN (θ̂)   N I(θ̂)
                    
      where θ̂ = N1 i Xi . Compare this to Equation 3.27, which is the posterior standard deviation
      under a uniform prior.

6.3   Frequentist decision theory
      In frequentist or classical decision theory, there is a loss function and a likelihood, but there is
      no prior and hence no posterior or posterior expected loss. Thus there is no automatic way of
      deriving an optimal estimator, unlike the Bayesian case. Instead, in the frequentist approach, we
      are free to choose any estimator or decision procedure δ : X → A we want.3

      the gradient must be zero at a maximum),
                                                   so the variance reduces to the expected square of the score function:
                                                                                                                       
                            d                                                                           d
      I(θ̂|θ ∗ ) = Eθ∗ ( dθ   log p(X|θ))2 . It can be shown (e.g., (Rice 1995, p263)) that Eθ∗ ( dθ       log p(X|θ))2 =
               2              
                 d
      −Eθ∗ dθ      2 log p(X|θ) , so now the Fisher information reduces to the expected second derivative of the NLL, which

      is a much more intuitive quantity than the variance of the score.
      3. In practice, the frequentist approach is usually only applied to one-shot statistical decision problems — such as
      classiﬁcation, regression and parameter estimation — since its non-constructive nature makes it difficult to apply to
      sequential decision problems, which adapt to data online.
        6.3. Frequentist decision theory                                                                195


          Having chosen an estimator, we deﬁne its expected loss or risk as follows:
                                )             *
          R(θ∗ , δ)  Ep(D̃|θ∗ ) L(θ∗ , δ(D̃)) = L(θ∗ , δ(D̃))p(D̃|θ∗ )dD̃                            (6.9)

        where D̃ is data sampled from “nature’s distribution”, which is represented by parameter θ∗ . In
        other words, the expectation is wrt the sampling distribution of the estimator. Compare this to
        the Bayesian posterior expected loss:

           ρ(a|D, π)  Ep(θ|D,π) [L(θ, a)] =              L(θ, a)p(θ|D, π)dθ                         (6.10)
                                                      Θ
        We see that the Bayesian approach averages over θ (which is unknown) and conditions on D
        (which is known), whereas the frequentist approach averages over D̃ (thus ignoring the observed
        data), and conditions on θ ∗ (which is unknown).
           Not only is the frequentist deﬁnition unnatural, it cannot even be computed, because θ∗ is
        unknown. Consequently, we cannot compare different estimators in terms of their frequentist
        risk. We discuss various solutions to this below.

6.3.1   Bayes risk
        How do we choose amongst estimators? We need some way to convert R(θ ∗ , δ) into a single
        measure of quality, R(δ), which does not depend on knowing θ ∗ . One approach is to put a
        prior on θ∗ , and then to deﬁne Bayes risk or integrated risk of an estimator as follows:

           RB (δ)  Ep(θ∗ ) [R(θ ∗ , δ)] =         R(θ ∗ , δ)p(θ ∗ )dθ ∗                              (6.11)

        A Bayes estimator or Bayes decision rule is one which minimizes the expected risk:
           δB  argmin RB (δ)                                                                         (6.12)
                     δ
        Note that the integrated risk is also called the preposterior risk, since it is before we have seen
        the data. Minimizing this can be useful for experiment design.
          We will now prove a very important theorem, that connects the Bayesian and frequentist
        approaches to decision theory.
        Theorem 6.3.1. A Bayes estimator can be obtained by minimizing the posterior expected loss for
        each x.
        Proof. By switching the order of integration, we have
                                                          
                              
           RB (δ) =                                      ∗
                                     L(y, δ(x))p(x, y|θ ) p(θ ∗ )dθ ∗                                (6.13)
                               x       y
                         
                     =                     L(y, δ(x))p(x, y, θ ∗ )dθ ∗                                (6.14)
                          x    y       Θ
                                                             
                          
                     =                 L(y, δ(x))p(y|x)dy p(x)                                        (6.15)
                          x        y
                         
                     =        ρ(δ(x)|x) p(x)                                                         (6.16)
                          x
        196                                                                    Chapter 6. Frequentist statistics


                                                           R



                                                                        R(θ, δ1 )



                                                                        R(θ, δ2 )

                                                                                                 θ
        Figure 6.2 Risk functions for two decision procedures, δ1 and δ2 . Since δ1 has lower worst case risk, it
        is the minimax estimator, even though δ2 has lower risk for most values of θ. Thus minimax estimators
        are overly conservative.



        To minimize the overall expectation, we just minimize the term inside for each x, so our decision
        rule is to pick
              δB (x) = argmin ρ(a|x)                                                                       (6.17)
                        a∈A




          Hence we see that the picking the optimal action on a case-by-case basis (as in the Bayesian
        approach) is optimal on average (as in the frequentist approach). In other words, the Bayesian
        approach provides a good way of achieving frequentist goals. In fact, one can go further and
        prove the following.
        Theorem 6.3.2 (Wald, 1950). Every admissable decision rule is a Bayes decision rule with respect
        to some, possibly improper, prior distribution.
           This theorem shows that the best way to minimize frequentist risk is to be Bayesian! See
        (Bernardo and Smith 1994, p448) for further discussion of this point.

6.3.2   Minimax risk
        Obviously some frequentists dislike using Bayes risk since it requires the choice of a prior (al-
        though this is only in the evaluation of the estimator, not necessarily as part of its construction).
        An alternative approach is as follows. Deﬁne the maximum risk of an estimator as

              Rmax (δ)  max
                          ∗
                             R(θ ∗ , δ)                                                                    (6.18)
                             θ

        A minimax rule is one which minimizes the maximum risk:

              δM M  argmin Rmax (δ)                                                                       (6.19)
                         δ
          6.3. Frequentist decision theory                                                                 197


          For example, in Figure 6.2, we see that δ1 has lower worst-case risk than δ2 , ranging over all
          possible values of θ∗ , so it is the minimax estimator (see Section 6.3.3.1 for an explanation of
          how to compute a risk function for an actual model).
             Minimax estimators have a certain appeal. However, computing them can be hard. And
          furthermore, they are very pessimistic. In fact, one can show that all minimax estimators
          are equivalent to Bayes estimators under a least favorable prior. In most statistical situations
          (excluding game theoretic ones), assuming nature is an adversary is not a reasonable assumption.

 6.3.3    Admissible estimators
          The basic problem with frequentist decision theory is that it relies on knowing the true distri-
          bution p(·|θ∗ ) in order to evaluate the risk. However, It might be the case that some estimators
          are worse than others regardless of the value of θ∗ . In particular, if R(θ, δ1 ) ≤ R(θ, δ2 ) for all
          θ ∈ Θ, then we say that δ1 dominates δ2 . The domination is said to be strict if the inequality
          is strict for some θ. An estimator is said to be admissible if it is not strictly dominated by any
          other estimator.

6.3.3.1   Example
          Let us give an example, based on (Bernardo and Smith 1994). Consider the problem of estimating
          the mean of a Gaussian. We assume the data is sampled from xi ∼ N (θ∗ , σ 2 = 1) and use
          quadratic loss, L(θ, θ̂) = (θ − θ̂)2 . The corresponding risk function is the MSE. Some possible
          decision rules or estimators θ̂(x) = δ(x) are as follows:

          • δ1 (x) = x, the sample mean
          • δ2 (x) = x̃, the sample median
          • δ3 (x) = θ0 , a ﬁxed value
          • δκ (x), the posterior mean under a N (θ|θ0 , σ 2 /κ) prior:

                            N        κ
                δκ (x) =        x+      θ0 = wx + (1 − w)θ0                                              (6.20)
                           N +κ    N +κ

          For δκ , we consider a weak prior, κ = 1, and a stronger prior, κ = 5. The prior mean is θ0 ,
          some ﬁxed value. We assume σ 2 is known. (Thus δ3 (x) is the same as δκ (x) with an inﬁnitely
          strong prior, κ = ∞.)
             Let us now derive the risk functions analytically. (We can do this since in this toy example,
          we know the true parameter θ∗ .) In Section 6.4.4, we show that the MSE can be decomposed
          into squared bias plus variance:
                                       ) *
              M SE(θ̂(·)|θ∗ ) = var θ̂ + bias2 (θ̂)                                                  (6.21)

          The sample mean is unbiased, so its risk is
                                          σ2
             M SE(δ1 |θ∗ ) = var [x] =                                                                   (6.22)
                                          N
198                                                                                                Chapter 6. Frequentist statistics

                                  risk functions for n=5                                                  risk functions for n=20
            0.5                                                                     0.18
                     mle                                                                      mle
           0.45      median                                                         0.16      median
                     fixed                                                                    fixed
            0.4
                     postmean1                                                      0.14      postmean1
           0.35      postmean5                                                                postmean5
                                                                                    0.12
            0.3
                                                                                     0.1


 R(θ*,δ)




                                                                          R(θ*,δ)
           0.25
                                                                                    0.08
            0.2
                                                                                    0.06
           0.15
                                                                                    0.04
            0.1

           0.05                                                                     0.02

             0                                                                        0
             −2   −1.5   −1      −0.5         0     0.5    1   1.5   2                −2   −1.5   −1      −0.5         0     0.5    1   1.5     2
                                              θ                                                                        θ
                                              *                                                                        *


                                        (a)                                                                      (b)


Figure 6.3 Risk functions for estimating the mean of a Gaussian using data sampled N (θ∗ , σ 2 = 1).
The solid dark blue horizontal line is the MLE, the solid light blue curved line is the posterior mean when
κ = 5. Left: N = 5 samples. Right: N = 20 samples. Based on Figure B.1 of (Bernardo and Smith 1994).
Figure generated by riskFnGauss.


The sample median is also unbiased. One can show that the variance is approximately π/(2N ),
so
                    π
   M SE(δ2 |θ∗ ) =                                                                     (6.23)
                   2N
For δ3 (x) = θ0 , the variance is zero, so
           M SE(δ3 |θ∗ ) = (θ∗ − θ0 )2                                                                                                        (6.24)
Finally, for the posterior mean, we have
                            )                    *
                                               2
   M SE(δκ |θ∗ ) = E (wx + (1 − w)θ0 − θ∗ )                                                                                                   (6.25)
                            )                               *
                                                          2
                     = E (w(x − θ∗ ) + (1 − w)(θ0 − θ∗ ))                                                                                     (6.26)
                                                    2
                                                σ
                                  =           w2   + (1 − w)2 (θ0 − θ∗ )2                                                                     (6.27)
                                                N
                                                 1                              
                                  =                   2
                                                          N σ 2 + κ2 (θ0 − θ∗ )2                                                              (6.28)
                                              (N + κ)
   These functions are plotted in Figure 6.3 for N ∈ {5, 20}. We see that in general, the best
estimator depends on the value of θ∗ , which is unknown. If θ∗ is very close to θ0 , then δ3
(which just predicts θ0 ) is best. If θ∗ is within some reasonable range around θ0 , then the
posterior mean, which combines the prior guess of θ0 with the actual data, is best. If θ∗ is far
from θ0 , the MLE is best. None of this should be suprising: a small amount of shrinkage (using
the posterior mean with a weak prior) is usually desirable, assuming our prior mean is sensible.
   What is more surprising is that the risk of decision rule δ2 (sample median) is always higher
than that of δ1 (sample mean) for every value of θ∗ . Consequently the sample median is an
          6.3. Frequentist decision theory                                                                 199


          inadmissible estimator for this particular problem (where the data is assumed to come from a
          Gaussian).
             In practice, the sample median is often better than the sample mean, because it is more
          robust to outliers. One can show (Minka 2000d) that the median is the Bayes estimator (under
          squared loss) if we assume the data comes from a Laplace distribution, which has heavier tails
          than a Gaussian. More generally, we can construct robust estimators by using ﬂexible models
          of our data, such as mixture models or non-parametric density estimators (Section 14.7.2), and
          then computing the posterior mean or median.

6.3.3.2   Stein’s paradox *
          Suppose we have N iid random variables Xi ∼ N (θi , 1), and we want to estimate the θi . The
          obvious estimator is the MLE, which in this case sets θ̂i = xi . It turns out that this is an
          inadmissible estimator under quadratic loss, when N ≥ 4.
             To show this, it suffices to construct an estimator that is better. The James-Stein estimator is
          one such estimator, and is deﬁned as follows:
             θ̂i   =     B̂x + (1 − B̂)xi = x + (1 − B̂)(xi − x)                                         (6.29)
                           
          where x = N1 i=1 xi and 0 < B < 1 is some tuning constant. This estimate “shrinks” the
                              N

          θi towards the overall mean. (We derive this estimator using an empirical Bayes approach in
          Section 5.6.2.)
             It can be shown that this shrinkage estimator has lower frequentist risk (MSE) than the MLE
          (sample mean) for N ≥ 4. This is known as Stein’s paradox. The reason it is called a paradox
          is illustrated by the following example. Suppose θi is the “true” IQ of student i and Xi is his
          test score. Why should my estimate of θi depend on the global mean x, and hence on some
          other student’s scores? One can create even more paradoxical examples by making the different
          dimensions be qualitatively different, e.g., θ1 is my IQ, θ2 is the average rainfall in Vancouver,
          etc.
             The solution to the paradox is the following. If your goal is to estimate just θi , you cannot do
          better than using xi , but if the goal is to estimate the whole vector θ, and you use squared error
          as your loss function, then shrinkage helps. To see this, suppose we want to estimate ||θ||22 from
          a single sample x ∼ N (θ, I). A simple estimate is ||x||22 , but this will overestimate the result,
          since
                                      
                                         N
                                                        
                      2              2
              E x2 = E            xi =         1 + θi2 = N + ||θ||22                                   (6.30)
                               i             i=1

          Consequently we can reduce our risk by pooling information, even from unrelated sources, and
          shrinking towards the overall mean. In Section 5.6.2, we give a Bayesian explanation for this.
          See also (Efron and Morris 1975).

6.3.3.3   Admissibility is not enough
          It seems clear that we can restrict our search for good estimators to the class of admissible
          estimators. But in fact it is easy to construct admissible estimators, as we show in the following
          example.
        200                                                                            Chapter 6. Frequentist statistics


        Theorem 6.3.3. Let X ∼ N (θ, 1), and consider estimating θ under squared loss. Let δ1 (x) = θ0 ,
        a constant independent of the data. This is an admissible estimator.
        Proof. Suppose not. Then there is some other estimator δ2 with smaller risk, so R(θ∗ , δ2 ) ≤
        R(θ∗ , δ1 ), where the inequality must be strict for some θ∗ . Suppose the true parameter is
        θ∗ = θ0 . Then R(θ∗ , δ1 ) = 0, and

           R(θ∗ , δ2 ) =      (δ2 (x) − θ0 )2 p(x|θ0 )dx                                                                (6.31)

        Since 0 ≤ R(θ∗ , δ2 ) ≤ R(θ∗ , δ1 ) for all θ∗ , and R(θ0 , δ1 ) = 0, we have R(θ0 , δ2 ) = 0 and
        hence δ2 (x) = θ0 = δ1 (x). Thus the only way δ2 can avoid having higher risk than δ1 at some
        speciﬁc point θ0 is by being equal to δ1 . Hence there is no other estimator δ2 with strictly lower
        risk, so δ2 is admissible.

 6.4    Desirable properties of estimators
        Since frequentist decision theory does not provide an automatic way to choose the best estimator,
        we need to come up with other heuristics for choosing amongst them. In this section, we discuss
        some properties we would like estimators to have. Unfortunately, we will see that we cannot
        achieve all of these properties at the same time.

6.4.1   Consistent estimators
        An estimator is said to be consistent if it eventually recovers the true parameters that generated
        the data as the sample size goes to inﬁnity, i.e., θ̂(D) → θ∗ as |D| → ∞ (where the arrow
        denotes convergence in probability). Of course, this concept only makes sense if the data actually
        comes from the speciﬁed model with parameters θ∗ , which is not usually the case with real
        data. Nevertheless, it can be a useful theoretical property.
                                                             +
          It can be shown that the MLE is a consistent estimator.             ,
                                                                        The intuitive reason is that maxi-
        mizing likelihood is equivalent to minimizing KL p(·|θ ∗ )||p(·|θ̂) , where p(·|θ ∗ ) is the true
        distribution and p(·|θ̂) is our estimate. We can achieve 0 KL divergence iff θ̂ = θ ∗ .4

6.4.2   Unbiased estimators
        The bias of an estimator is deﬁned as
                                  )           *
           bias(θ̂(·)) = Ep(D|θ∗ ) θ̂(D) − θ∗                                                                          (6.32)
        where θ∗ is the true parameter value. If the bias is zero, the estimator is called unbiased. This
        means the sampling distribution is centered on the true parameter. For example, the MLE for a
        Gaussian mean is unbiased:
                                               
                                      1 
                                          N
                                                          Nμ
          bias(μ̂) = E [x] − μ = E           xi − μ =          −μ=0                                 (6.33)
                                      N i=1                N

        4. If the model is unidentiﬁable, the MLE may select a set of parameters that is different from the true parameters
        but for which the induced distribution, p(·|θ̂), is the same as the exact distribution. Such parameters are said to be
        likelihood equivalent.
        6.4. Desirable properties of estimators                                                           201


        However, the MLE for a Gaussian variance, σ̂ 2 , is not an unbiased estimator of σ 2 . In fact, one
        can show (Exercise 6.3) that
              N −1 2
           E σ̂ 2 =   σ                                                                                 (6.34)
                    N
        However, the following estimator

                                    1 
                                            N
             2         N
           σ̂N −1 =        σ̂ 2 =           (xi − x)2                                                   (6.35)
                      N −1        N − 1 i=1

        is an unbiased estimator, which we can easily prove as follows:
                                      
               2            N      2      N N −1 2
            E σ̂N −1 = E           σ̂ =                 σ = σ2                                          (6.36)
                             N −1         N −1 N
                                       2                                 2
        In Matlab, var(X) returns σ̂N    −1 , whereas var(X,1) returns σ̂ (the MLE). For large enough
        N , the difference will be negligible.
           Although the MLE may sometimes be a biased estimator, one can show that asymptotically, it
        is always unbiased. (This is necessary for the MLE to be a consistent estimator.)
           Although being unbiased sounds like a desirable property, this is not always true. See Sec-
        tion 6.4.4 and (Lindley 1972) for discussion of this point.

6.4.3   Minimum variance estimators
        It seems intuitively reasonable that we want our estimator to be unbiased (although we shall
        give some arguments against this claim below). However, being unbiased is not enough. For
        example, suppose we want to estimate the mean of a Gaussian from D = {x1 , . . . , xN }. The
        estimator that just looks at the ﬁrst data point, θ̂(D) = x1 , is an unbiased estimator, but will
        generally be further from θ∗ than the empirical mean x (which is also unbiased). So the variance
        of an estimator is also important.
           A natural question is: how long can the variance go? A famous result, called the Cramer-
        Rao lower bound, provides a lower bound on the variance of any unbiased estimator. More
        precisely,

        Theorem 6.4.1 (Cramer-Rao inequality). Let X1 , . . . , Xn ∼ p(X|θ0 ) and θ̂ = θ̂(x1 , . . . , xn ) be
        an unbiased estimator of θ0 . Then, under various smoothness assumptions on p(X|θ0 ), we have
              ) *        1
           var θ̂ ≥                                                                                     (6.37)
                      nI(θ0 )
        where I(θ0 ) is the Fisher information matrix (see Section 6.2.2).

          A proof can be found e.g., in (Rice 1995, p275).
          It can be shown that the MLE achieves the Cramer Rao lower bound, and hence has the
        smallest asymptotic variance of any unbiased estimator. Thus MLE is said to be asymptotically
        optimal.
          202                                                                Chapter 6. Frequentist statistics


 6.4.4    The bias-variance tradeoff
          Although using an unbiased estimator seems like a good idea, this is not always the case. To see
          why, suppose we use quadratic loss. As we showed above, the corresponding risk is the MSE.
          We now derive a very useful decomposition of the MSE. (All expectations and variances are wrt
          the true distribution p(D|θ∗ ), but we drop the
                                                         explicit conditioning for notational brevity.) Let
          θ̂ = θ̂(D) denote the estimate, and θ = E θ̂ denote the expected value of the estimate (as we
          vary D). Then we have
                                                       2 
                        ∗ 2                              ∗
              E (θ̂ − θ )      = E (θ̂ − θ) + (θ − θ )                                                (6.38)
                                            2                     
                               = E θ̂ − θ          + 2(θ − θ∗ )E θ̂ − θ + (θ − θ∗ )2                  (6.39)
                                            2 
                               = E θ̂ − θ          + (θ − θ∗ )2                                       (6.40)
                                       
                               = var θ̂ + bias2 (θ̂)                                                   (6.41)
          In words,



                 MSE = variance + bias2                                                                 (6.42)


             This is called the bias-variance tradeoff (see e.g., (Geman et al. 1992)). What it means is that
          it might be wise to use a biased estimator, so long as it reduces our variance, assuming our goal
          is to minimize squared error.

6.4.4.1   Example: estimating a Gaussian mean
          Let us give an example, based on (Hoff 2009, p79). Suppose we want to estimate the mean of a
          Gaussian from x = (x1 , . . . , xN ). We assume the data is sampled from xi ∼ N (θ∗ = 1, σ 2 ).
          An obvious estimate is the MLE. This has a bias of 0 and a variance of
                           σ2
             var [x|θ∗ ] =                                                                       (6.43)
                           N
          But we could also use a MAP estimate. In Section 4.6.1, we show that the MAP estimate under
          a Gaussian prior of the form N (θ0 , σ 2 /κ0 ) is given by
                     N            κ0
             x̃           x+             θ0 = wx + (1 − w)θ0                                    (6.44)
                  N + κ0       N + κ0
          where 0 ≤ w ≤ 1 controls how much we trust the MLE compared to our prior. (This is also the
          posterior mean, since the mean and mode of a Gaussian are the same.) The bias and variance
          are given by
             E [x̃] − θ∗    =   wθ0 + (1 − w)θ0 − θ∗ = (1 − w)(θ0 − θ∗ )                                (6.45)
                                   σ2
                 var [x̃]   =   w2                                                                      (6.46)
                                   N
          6.4. Desirable properties of estimators                                                                                                                   203


                    sampling distribution, truth = 1.0, prior = 0.0, n = 5                                              MSE of postmean / MSE of MLE
          1.5                                                                                            1.3
                                                                        postMean0                                                                           postMean0
                                                                        postMean1                                                                           postMean1
                                                                                                         1.2
                                                                        postMean2                                                                           postMean2
                                                                        postMean3                                                                           postMean3
                                                                                                         1.1

           1                                                                                              1




                                                                                          relative MSE
                                                                                                         0.9


                                                                                                         0.8

          0.5
                                                                                                         0.7


                                                                                                         0.6


                                                                                                         0.5
                                                                                                               0   10         20                 30    40               50
           0                                                                                                                       sample size
           −1    −0.5        0         0.5          1         1.5            2      2.5

                                             (a)                                                                                    (b)

          Figure 6.4 Left: Sampling distribution of the MAP estimate with different prior strengths κ0 . (The MLE
          corresponds to κ0 = 0.) Right: MSE relative to that of the MLE versus sample size. Based on Figure 5.6 of
          (Hoff 2009). Figure generated by samplingDistGaussShrinkage.



          So although the MAP estimate is biased (assuming w < 1), it has lower variance.
             Let us assume that our prior is slightly misspeciﬁed, so we use θ0 = 0, whereas the truth is
          θ∗ = 1. In Figure 6.4(a), we see that the sampling distribution of the MAP estimate for κ0 > 0
          is biased away from the truth, but has lower variance (is narrower) than that of the MLE.
             In Figure 6.4(b), we plot mse(x̃)/mse(x) vs N . We see that the MAP estimate has lower MSE
          than the MLE, especially for small sample size, for κ0 ∈ {1, 2}. The case κ0 = 0 corresponds to
          the MLE, and the case κ0 = 3 corresponds to a strong prior, which hurts performance because
          the prior mean is wrong. It is clearly important to “tune” the strength of the prior, a topic we
          discuss later.

6.4.4.2   Example: ridge regression
          Another important example of the bias variance tradeoff arises in ridge regression, which we
          discuss in Section 7.5. In brief, this corresponds to MAP estimation for linear regression under
          a Gaussian prior, p(w) = N (w|0, λ−1 I) The zero-mean prior encourages the weights to be
          small, which reduces overﬁtting; the precision term, λ, controls the strength of this prior. Setting
          λ = 0 results in the MLE; using λ > 0 results in a biased estimate. To illustrate the effect on
          the variance, consider a simple example. Figure 6.5 on the left plots each individual ﬁtted curve,
          and on the right plots the average ﬁtted curve. We see that as we increase the strength of the
          regularizer, the variance decreases, but the bias increases.

6.4.4.3   Bias-variance tradeoff for classiﬁcation
          If we use 0-1 loss instead of squared error, the above analysis breaks down, since the frequentist
          risk is no longer expressible as squared bias plus variance. In fact, one can show (Exercise 7.2
          of (Hastie et al. 2009)) that the bias and variance combine multiplicatively. If the estimate is on
      204                                                                          Chapter 6. Frequentist statistics


                                        ln(λ) = 5                               ln(λ) = 5
                        1.5                                      1

                         1
                                                                0.5
                        0.5

                         0                                       0

                       −0.5
                                                               −0.5
                        −1

                       −1.5                                     −1
                              0   0.2    0.4   0.6   0.8   1          0   0.2    0.4   0.6   0.8   1


                                        ln(λ) = −5                              ln(λ) = −5
                        1.5                                      1

                         1
                                                                0.5
                        0.5

                         0                                       0

                       −0.5
                                                               −0.5
                        −1

                       −1.5                                     −1
                              0   0.2    0.4   0.6   0.8   1          0   0.2    0.4   0.6   0.8   1


      Figure 6.5 Illustration of bias-variance tradeoff for ridge regression. We generate 100 data sets from the
      true function, shown in solid green. Left: we plot the regularized ﬁt for 20 different data sets. We use
      linear regression with a Gaussian RBF expansion, with 25 centers evenly spread over the [0, 1] interval.
      Right: we plot the average of the ﬁts, averaged over all 100 datasets. Top row: strongly regularized: we see
      that the individual ﬁts are similar to each other (low variance), but the average is far from the truth (high
      bias). Bottom row: lightly regularized: we see that the individual ﬁts are quite different from each other
      (high variance), but the average is close to the truth (low bias). Based on (Bishop 2006a) Figure 3.5. Figure
      generated by biasVarModelComplexity3.



      the correct side of the decision boundary, then the bias is negative, and decreasing the variance
      will decrease the misclassiﬁcation rate. But if the estimate is on the wrong side of the decision
      boundary, then the bias is positive, so it pays to increase the variance (Friedman 1997a). This
      little known fact illustrates that the bias-variance tradeoff is not very useful for classiﬁcation.
      It is better to focus on expected loss (see below), not directly on bias and variance. We can
      approximate the expected loss using cross validatinon, as we discuss in Section 6.5.3.

6.5   Empirical risk minimization
      Frequentist decision theory suffers from the fundamental problem that one cannot actually
      compute the risk function, since it relies on knowing the true data distribution. (By contrast,
      the Bayesian posterior expected loss can always be computed, since it conditions on the the
      data rather than conditioning on θ∗ .) However, there is one setting which avoids this problem,
      and that is where the task is to predict observable quantities, as opposed to estimating hidden
      variables or parameters. That is, instead of looking at loss functions of the form L(θ, δ(D)),
      where θ is the true but unknown parameter, and δ(D) is our estimator, let us look at loss
        6.5. Empirical risk minimization                                                                 205


        functions of the form L(y, δ(x)), where y is the true but unknown response, and δ(x) is our
        prediction given the input x. In this case, the frequentist risk becomes
                                                 
           R(p∗ , δ)  E(x,y)∼p∗ [L(y, δ(x)] =            L(y, δ(x))p∗ (x, y)                 (6.47)
                                                   x   y

        where p∗ represents “nature’s distribution”. Of course, this distribution is unknown, but a simple
        approach is to use the empirical distribution, derived from some training data, to approximate
        p∗ , i.e.,

                                       1 
                                          N
           p∗ (x, y) ≈ pemp (x, y)         δx (x)δyi (y)                                              (6.48)
                                       N i=1 i

        We then deﬁne the empirical risk as follows:

                                            1 
                                               N
           Remp (D, D)  R(pemp , δ) =            L(yi , δ(xi ))                                       (6.49)
                                            N i=1

        In the case of 0-1 loss, L(y, δ(x)) = I(y = δ(x)), this becomes the misclassiﬁcation rate. In
        the case of squared error loss, L(y, δ(x)) = (y −δ(x))2 , this becomes the mean squared error.
        We deﬁne the task of empirical risk minimization or ERM as ﬁnding a decision procedure
        (typically a classiﬁcation rule) to minimize the empirical risk:

           δERM (D) = argmin Remp (D, δ)                                                               (6.50)
                             δ

           In the unsupervised case, we eliminate all references to y, and replace L(y, δ(x)) with
        L(x, δ(x)), where, for example, L(x, δ(x)) = ||x − δ(x)||22 , which measures the reconstruc-
        tion error. We can deﬁne the decision rule using δ(x) = decode(encode(x)), as in vector
        quantization (Section 11.4.2.6) or PCA (section 12.2). Finally, we deﬁne the empirical risk as

                           1 
                              N
           Remp (D, δ) =         L(xi , δ(xi ))                                                        (6.51)
                           N i=1

        Of course, we can always trivially minimize this risk by setting δ(x) = x, so it is critical that
        the encoder-decoder go via some kind of bottleneck.

6.5.1   Regularized risk minimization
        Note that the empirical risk is equal to the Bayes risk if our prior about “nature’s distribution” is
        that it is exactly equal to the empirical distribution (Minka 2001b):

           E [R(p∗ , δ)|p∗ = pemp ] = Remp (D, δ)                                                      (6.52)

        Therefore minimizing the empirical risk will typically result in overﬁtting. It is therefore often
        necessary to add a complexity penalty to the objective function:

           R (D, δ) = Remp (D, δ) + λC(δ)                                                             (6.53)
        206                                                               Chapter 6. Frequentist statistics


        where C(δ) measures the complexity of the prediction function δ(x) and λ controls the strength
        of the complexity penalty. This approach is known as regularized risk minimization (RRM).
        Note that if the loss function is negative log likelihood, and the regularizer is a negative log
        prior, this is equivalent to MAP estimation.
           The two key issues in RRM are: how do we measure complexity, and how do we pick λ. For
        a linear model, we can deﬁne the complexity of in terms of its degrees of freedom, discussed in
        Section 7.5.3. For more general models, we can use the VC dimension, discussed in Section 6.5.4.
        To pick λ, we can use the methods discussed in Section 6.5.2.

6.5.2   Structural risk minimization
        The regularized risk minimization principle says that we should ﬁt the model, for a given
        complexity penalty, by using
           δ̂λ = argmin [Remp (D, δ) + λC(δ)]                                                        (6.54)
                    δ

        But how should we pick λ? We cannot using the training set, since this will underestimate the
        true risk, a problem known as optimism of the training error. As an alternative, we can use
        the following rule, known as the structural risk minimization principle: (Vapnik 1998):

           λ̂ = argmin R̂(δ̂λ )                                                                      (6.55)
                   λ

        where R̂(δ) is an estimate of the risk. There are two widely used estimates: cross validation
        and theoretical upper bounds on the risk. We discuss both of these below.

6.5.3   Estimating the risk using cross validation
        We can estimate the risk of some estimator using a validation set. If we don’t have a separate
        validation set, we can use cross validation (CV), as we brieﬂy discussed in Section 1.4.8. More
        precisely, CV is deﬁned as follows. Let there be N = |D| data cases in the training set. Denote
        the data in the k’th test fold by Dk and all the other data by D−k . (In stratiﬁed CV, these folds
        are chosen so the class proportions (if discrete labels are present) are roughly equal in each
        fold.) Let F be a learning algorithm or ﬁtting function that takes a dataset and a model index
        m (this could a discrete index, such as the degree of a polynomial, or a continuous index, such
        as the strength of a regularizer) and returns a parameter vector:

           θ̂ m = F(D, m)                                                                            (6.56)

        Finally, let P be a prediction function that takes an input and a parameter vector and returns a
        prediction:
           ŷ = P(x, θ̂) = f (x, θ̂)                                                                 (6.57)

        Thus the combined ﬁt-predict cycle is denoted as

           fm (x, D) = P(x, F(D, m))                                                                 (6.58)
          6.5. Empirical risk minimization                                                              207


          The K-fold CV estimate of the risk of fm is deﬁned by
                                1 
                                  K
             R(m, D, K)             L (yi , P(xi , F(D−k , m)))                                      (6.59)
                                N
                                   k=1 i∈Dk

          Note that we can call the ﬁtting algorithm once per fold. Let fm k
                                                                             (x) = P(x, F(D−k , m)) be
          the function that was trained on all the data except for the test data in fold k. Then we can
          rewrite the CV estimate as
                              1                         1                       
                                 K                             N
             R(m, D, K) =                         k
                                         L y i , fm (xi ) =                k(i)
                                                                  L y i , fm    (xi )             (6.60)
                             N                              N i=1
                                   k=1 i∈Dk

          where k(i) is the fold in which i is used as test data. In other words, we predict yi using a
          model that was trained on data that does not contain xi .
             Of K = N , the method is known as leave one out cross validation or LOOCV. In this case,
          n the estimated risk becomes
                              1                    
                                 N
                                            −i
             R(m, D, N ) =          L yi , fm  (xi )                                              (6.61)
                              N i=1
                                                                                                     −i
          where fm i
                     (x) = P(x, F(D−i , m)). This requires ﬁtting the model N times, where for fm        we
          omit the i’th training case. Fortunately, for some model classes and loss functions (namely linear
          models and quadratic loss), we can ﬁt the model once, and analytically “remove” the effect of
          the i’th training case. This is known as generalized cross validation or GCV.

6.5.3.1   Example: using CV to pick λ for ridge regression
          As a concrete example, consider picking the strength of the 2 regularizer in penalized linear
          regression. We use the following rule:
             λ̂ = arg        min          R(λ, Dtrain , K)                                            (6.62)
                        λ∈[λmin ,λmax ]

          where [λmin , λmax ] is a ﬁnite range of λ values that we search over, and R(λ, Dtrain , K) is the
          K-fold CV estimate of the risk of using λ, given by
                                          1
                                                K 
                                                
             R(λ, Dtrain , K) =                            L(yi , fλk (xi ))                          (6.63)
                                    |Dtrain |
                                                k=1 i∈Dk

          where fλk (x) = xT ŵλ (D−k ) is the prediction function trained on data excluding fold k, and
          ŵλ (D) = arg minw N LL(w, D) + λ||w||22 is the MAP estimate. Figure 6.6(b) gives an example
          of a CV estimate of the risk vs log(λ), where the loss function is squared error.
             When performing classiﬁcation, we usually use 0-1 loss. In this case, we optimize a convex
          upper bound on the empirical risk to estimate wλ m but we optimize (the CV estimate of) the
          risk itself to estimate λ. We can handle the non-smooth 0-1 loss function when estimating λ
          because we are using brute-force search over the entire (one-dimensional) space.
             When we have more than one or two tuning parameters, this approach becomes infeasible.
          In such cases, one can use empirical Bayes, which allows one to optimize large numbers of
          hyper-parameters using gradient-based optimizers instead of brute-force search. See Section 5.6
          for details.
          208                                                                                                Chapter 6. Frequentist statistics

                                          mean squared error                                             5−fold cross validation, ntrain = 50
             14                                                                              20
                        train mse
                        test mse                                                             18
             12
                                                                                             16

             10                                                                              14

                                                                                             12
                8




                                                                                       mse
                                                                                             10
                6
                                                                                              8

                4                                                                             6

                                                                                              4
                2
                                                                                              2

              0                                                                              0
             −25        −20         −15         −10            −5     0       5              −15       −10               −5                     0   5
                                             log lambda                                                              log lambda


                                                (a)                                                                  (b)

          Figure 6.6 (a) Mean squared error for 2 penalized degree 14 polynomial regression vs log regularizer.
          Same as in Figures 7.8, except now we have N = 50 training points instead of 21. The stars correspond
          to the values used to plot the functions in Figure 7.7. (b) CV estimate. The vertical scale is truncated for
          clarity. The blue line corresponds to the value chosen by the one standard error rule. Figure generated by
          linregPolyVsRegDemo.



6.5.3.2   The one standard error rule
          The above procedure estimates the risk, but does not give any measure of uncertainty. A
          standard frequentist measure of uncertainty of an estimate is the standard error of the mean,
          deﬁned by
                          
                    σ̂        σ̂ 2
             se = √ =                                                                             (6.64)
                     N        N
          where σ̂ 2 is an estimate of the variance of the loss:

                  1                                                                                 1 
                     N                                                                                  N
                    2
             σ̂ =       (Li − L)2 ,                            Li =           k(i)
                                                                      L(yi , fm    (xi ))         L=       Li                                       (6.65)
                  N i=1                                                                              N i=1

          Note that σ measures the intrinsic variability of Li across samples, whereas se measures our
          uncertainty about the mean L.
             Suppose we apply CV to a set of models and compute the mean and se of their estimated
          risks. A common heuristic for picking a model from these noisy estimates is to pick the value
          which corresponds to the simplest model whose risk is no more than one standard error above
          the risk of the best model; this is called the one-standard error rule (Hastie et al. 2001, p216).
          For example, in Figure 6.6, we see that this heuristic does not choose the lowest point on the
          curve, but one that is slightly to its right, since that corresponds to a more heavily regularized
          model with essentially the same empirical performance.
          6.5. Empirical risk minimization                                                                   209


6.5.3.3   CV for model selection in non-probabilistic unsupervised learning
          If we are performing unsupervised learning, we must use a loss function such as L(x, δ(x)) =
          ||x − δ(x)||2 , which measures reconstruction error. Here δ(x) is some encode-decode scheme.
          However, as we discussed in Section 11.5.2, we cannot use CV to determine the complexity of δ,
          since we will always get lower loss with a more complex model, even if evaluated on the test set.
          This is because more complex models will compress the data less, and induce less distortion.
          Consequently, we must either use probabilistic models, or invent other heuristics.

 6.5.4    Upper bounding the risk using statistical learning theory *
          The principle problem with cross validation is that it is slow, since we have to ﬁt the model
          multiple times. This motivates the desire to compute analytic approximations or bounds to
          the generalization error. This is the studied in the ﬁeld of statistical learning theory (SLT).
          More precisely, SLT tries to bound the risk R(p∗ , h) for any data distribution p∗ and hypothesis
          h ∈ H in terms of the empirical risk Remp (D, h), the sample size N = |D|, and the size of the
          hypothesis space H.
             Let us initially consider the case where the hypothesis space is ﬁnite, with size dim(H) = |H|.
          In other words, we are selecting a model/ hypothesis from a ﬁnite list, rather than optimizing
          real-valued parameters, Then we can prove the following.
          Theorem 6.5.1. For any data distribution p∗ , and any dataset D of size N drawn from p∗ , the
          probability that our estimate of the error rate will be more than  wrong, in the worst case, is upper
          bounded as follows:
               
                                                                              2
             P max |Remp (D, h) − R(p∗ , h)| >  ≤ 2 dim(H)e−2N                                           (6.66)
                  h∈H



          Proof. To prove this, we need two useful results. First, Hoeffding’s inequality, which states that
          if X1 , . . . , XN ∼ Ber(θ), then, for any  > 0,
                                         2
             P (|x − θ| > ) ≤ 2e−2N                                                                      (6.67)
          where x = N1 i=1 xi . Second, the union bound, which says that if A1 , . . . , Ad are a set of
                            N

                                           d
          events, then P (∪di=1 Ai ) ≤ i=1 P (Ai ).
            Finally, for notational brevity, let R(h) = R(h, p∗ ) be the true risk, and R̂N (h) = Remp (D, h)
          be the empirical risk.
            Using these results we have
               
             P max |R̂N (h) − R(h)| >             = P          |R̂N (h) − R(h)| >                     (6.68)
                  h∈H
                                                             h∈H
                                                                                  
                                                  ≤          P |R̂N (h) − R(h)| >                         (6.69)
                                                       h∈H
                                                                   2                     2
                                                  ≤          2e−2N  = 2 dim(H)e−2N                       (6.70)
                                                       h∈H
        210                                                                 Chapter 6. Frequentist statistics




           Ths bound tells us that the optimism of the training error increases with dim(H) but de-
        creases with N = |D|, as is to be expected.
           If the hypothesis space H is inﬁnite (e.g., we have real-valued parameters), we cannot use
        dim(H) = |H|. Instead, we can use a quantity called the Vapnik-Chervonenkis or VC dimen-
        sion of the hypothesis class. See (Vapnik 1998) for details.
           Stepping back from all the theory, the key intuition behind statistical learning theory is quite
        simple. Suppose we ﬁnd a model with low empirical risk. If the hypothesis space H is very
        big, relative to the data size, then it is quite likely that we just got “lucky” and were given a
        data set that is well-modeled by our chosen function by chance. However, this does not mean
        that such a function will have low generalization error. But if the hypothesis class is sufficiently
        constrained in size, and/or the training set is sufficiently large, then we are unlikely to get lucky
        in this way, so a low empirical risk is evidence of a low true risk.
           Note that optimism of the training error does not necessarily increase with model complexity,
        but it does increase with the number of different models that are being searched over.
           The advantage of statistical learning theory compared to CV is that the bounds on the risk
        are quicker to compute than using CV. The disadvantage is that it is hard to compute the VC
        dimension for many interesting models, and the upper bounds are usually very loose (although
        see (Kaariainen and Langford 2005)).
           One can extend statistical learning theory by taking computational complexity of the learner
        into account. This ﬁeld is called computational learning theory or COLT. Most of this work
        focuses on the case where h is a binary classiﬁer, and the loss function is 0-1 loss. If we observe
        a low empirical risk, and the hypothesis space is suitably “small”, then we can say that our
        estimated function is probably approximately correct or PAC. A hypothesis space is said to be
        efficiently PAC-learnable if there is a polynomial time algorithm that can identify a function
        that is PAC. See (Kearns and Vazirani 1994) for details.

6.5.5   Surrogate loss functions
        Minimizing the loss in the ERM/ RRM framework is not always easy. For example, we might
        want to optimize the AUC or F1 scores. Or more simply, we might just want to minimize the 0-1
        loss, as is common in classiﬁcation. Unfortunately, the 0-1 risk is a very non-smooth objective
        and hence is hard to optimize. One alternative is to use maximum likelihood estimation instead,
        since log-likelihood is a smooth convex upper bound on the 0-1 risk, as we show below.
           To see this, consider binary logistic regression, and let yi ∈ {−1, +1}. Suppose our decision
        function computes the log-odds ratio,
                               p(y = 1|xi , w)
              f (xi ) = log                    = w T x i = ηi                                          (6.71)
                              p(y = −1|xi , w)
        Then the corresponding probability distribution on the output label is
              p(yi |xi , w) = sigm(yi ηi )                                                             (6.72)
        Let us deﬁne the log-loss as as
              Lnll (y, η) = − log p(y|x, w) = log(1 + e−yη )                                           (6.73)
      6.6. Pathologies of frequentist statistics *                                                             211


                                           3                                            0−1
                                                                                        hinge
                                                                                        logloss
                                          2.5


                                           2




                                   loss
                                          1.5


                                           1


                                          0.5


                                           0

                                                −2   −1.5   −1   −0.5   0   0.5   1   1.5    2
                                                                        η



      Figure 6.7 Illustration of various loss functions for binary classiﬁcation. The horizontal axis is the margin
      yη, the vertical axis is the loss. The log loss uses log base 2. Figure generated by hingeLossPlot.



      It is clear that minimizing the average log-loss is equivalent to maximizing the likelihood.
         Now consider computing the most probable label, which is equivalent to using ŷ = −1 if
      ηi < 0 and ŷ = +1 if ηi ≥ 0. The 0-1 loss of our function becomes
         L01 (y, η) = I(y = ŷ) = I(yη < 0)                                                                 (6.74)

      Figure 6.7 plots these two loss functions. We see that the NLL is indeed an upper bound on the
      0-1 loss.
         Log-loss is an example of a surrogate loss function. Another example is the hinge loss:

         Lhinge (y, η) = max(0, 1 − yη)                                                                      (6.75)

      See Figure 6.7 for a plot. We see that the function looks like a door hinge, hence its name.
      This loss function forms the basis of a popular classiﬁcation method known as support vector
      machines (SVM), which we will discuss in Section 14.5.
         The surrogate is usually chosen to be a convex upper bound, since convex functions are easy
      to minimize. See e.g., (Bartlett et al. 2006) for more information.

6.6   Pathologies of frequentist statistics *
         I believe that it would be very difficult to persuade an intelligent person that current
         [frequentist] statistical practice was sensible, but that there would be much less difficulty
         with an approach via likelihood and Bayes’ theorem. — George Box, 1962.

      Frequentist statistics exhibits various forms of weird and undesirable behaviors, known as
      pathologies. We give a few examples below, in order to caution the reader; these and other
      examples are explained in more detail in (Lindley 1972; Lindley and Phillips 1976; Lindley 1982;
      Berger 1985; Jaynes 2003; Minka 1999).
        212                                                               Chapter 6. Frequentist statistics


6.6.1   Counter-intuitive behavior of conﬁdence intervals
        A conﬁdence interval is an interval derived from the sampling distribution of an estimator
        (whereas a Bayesian credible interval is derived from the posterior of a parameter, as we dis-
        cussed in Section 5.2.2). More precisely, a frequentist conﬁdence interval for some parameter θ
        is deﬁned by the following (rather un-natural) expression:

              Cα (θ) = (, u) : P ((D̃) ≤ θ ≤ u(D̃)|D̃ ∼ θ) = 1 − α                                (6.76)

        That is, if we sample hypothetical future data D̃ from θ, then ((D̃), u(D̃)), is a conﬁdence
        interval if the parameter θ lies inside this interval 1 − α percent of the time.
           Let us step back for a moment and think about what is going on. In Bayesian statistics,
        we condition on what is known — namely the observed data, D — and average over what
        is not known, namely the parameter θ. In frequentist statistics, we do exactly the opposite:
        we condition on what is unknown — namely the true parameter value θ — and average over
        hypothetical future data sets D̃.
           This counter-intuitive deﬁnition of conﬁdence intervals can lead to bizarre results. Consider
        the following example from (Berger 1985, p11). Suppose we draw two integers D = (x1 , x2 ) from
                       ⎧
                       ⎨ 0.5 if x = θ
            p(x|θ) =      0.5 if x = θ + 1                                                         (6.77)
                       ⎩
                          0     otherwise
        If θ = 39, we would expect the following outcomes each with probability 0.25:
              (39, 39), (39, 40), (40, 39), (40, 40)                                                 (6.78)

        Let m = min(x1 , x2 ) and deﬁne the following conﬁdence interval:

              [(D), u(D)] = [m, m]                                                                  (6.79)
        For the above samples this yields

              [39, 39], [39, 39], [39, 39], [40, 40]                                                 (6.80)

        Hence Equation 6.79 is clearly a 75% CI, since 39 is contained in 3/4 of these intervals. However,
        if D = (39, 40) then p(θ = 39|D) = 1.0, so we know that θ must be 39, yet we only have 75%
        “conﬁdence” in this fact.
           Another, less contrived example, is as follows. Suppose we want to estimate the parameter θ
        of a Bernoulli distribution. Let x = N1 i=1 xi be the sample mean. The MLE is θ̂ = x. An
                                                    N
                                                                                   
        approximate 95% conﬁdence interval for a Bernoulli parameter is x ± 1.96 x(1 − x)/N (this is
        called a Wald interval and is based on a Gaussian approximation to the Binomial distribution;
        compare to Equation 3.27). Now consider a single trial, where N = 1 and x1 = 0. The MLE
        is 0, which overﬁts, as we saw in Section 3.3.4.1. But our 95% conﬁdence interval is also (0, 0),
        which seems even worse. It can be argued that the above ﬂaw is because we approximated
        the true sampling distribution with a Gaussian, or because the sample size was to small, or the
        parameter “too extreme”. However, the Wald interval can behave badly even for large N , and
        non-extreme parameters (Brown et al. 2001).
        6.6. Pathologies of frequentist statistics *                                                                       213


6.6.2   p-values considered harmful
        Suppose we want to decide whether to accept or reject some baseline model, which we will
        call the null hypothesis. We need to deﬁne some decision rule. In frequentist statistics, it
        is standard to ﬁrst compute a quantity called the p-value, which is deﬁned as the probability
        (under the null) of observing some test statistic f (D) (such as the chi-squared statistic) that is
        as large or larger than that actually observed:5
            pvalue(D)  P (f (D̃) ≥ f (D)|D̃ ∼ H0 )                                                                     (6.81)
        This quantity relies on computing a tail area probability of the sampling distribution; we give
        an example of how to do this below.
           Given the p-value, we deﬁne our decision rule as follows: we reject the null hypothesis iff the
        p-value is less than some threshold, such as α = 0.05. If we do reject it, we say the difference
        between the observed test statistic and the expected test statistic is statistically signiﬁcant at
        level α. This approach is known as null hypothesis signiﬁcance testing, or NHST.
           This procedure guarantees that our expected type I (false positive) error rate is at most α.
        This is sometimes interpreted as saying that frequentist hypothesis testing is very conservative,
        since it is unlikely to accidently reject the null hypothesis. But in fact the opposite is the case:
        because this method only worries about trying to reject the null, it can never gather evidence
        in favor of the null, no matter how large the sample size. Because of this, p-values tend to
        overstate the evidence against the null, and are thus very “trigger happy”.
           In general there can be huge differences between p-values and the quantity that we really
        care about, which is the posterior probability of the null hypothesis given the data, p(H0 |D).
        In particular, Sellke et al. (2001) show that even if the p-value is as slow as 0.05, the posterior
        probability of H0 is at least 30%, and often much higher. So frequentists often claim to have
        “signiﬁcant” evidence of an effect that cannot be explained by the null hypothesis, whereas
        Bayesians are usually more conservative in their claims. For example, p-values have been used
        to “prove” that ESP (extra-sensory perception) is real (Wagenmakers et al. 2011), even though ESP
        is clearly very improbable. For this reason, p-values have been banned from certain medical
        journals (Matthews 1998).
           Another problem with p-values is that their computation depends on decisions you make
        about when to stop collecting data, even if these decisions don’t change the data you actually
        observed. For example, suppose I toss a coin n = 12 times and observe s = 9 successes (heads)
        and f = 3 failures (tails), so n = s + f . In this case, n is ﬁxed and s (and hence f ) is random.
        The relevant sampling model is the binomial
                            
                              n s
            Bin(s|n, θ) =        θ (1 − θ)n−s                                                         (6.82)
                              s
        Let the null hypothesis be that the coin is fair, θ = 0.5, where θ is the probability of success
        (heads). The one-sided p-value, using test statistic t(s) = s, is
                                  12                     12 
                                                                12
           p1 = P (S ≥ 9|H0 ) =       Bin(s|12, 0.5) =              0.512 = 0.073                  (6.83)
                                  s=9                     s=9
                                                                 s

        5. The reason we cannot just compute the probability of the observed value of the test statistic is that this will have
        probability zero under a pdf. The p-value is deﬁned in terms of the cdf, so is always a number between 0 and 1.
        214                                                                     Chapter 6. Frequentist statistics


        The two-sided p-value is
                     12
                                             3
                                              
              p2 =         Bin(s|12, 0.5) +         Bin(s|12, 0.5) = 0.073 + 0.073 = 0.146                 (6.84)
                     s=9                      s=0

        In either case, the p-value is larger than the magical 5% threshold, so a frequentist would not
        reject the null hypothesis.
           Now suppose I told you that I actually kept tossing the coin until I observed f = 3 tails. In
        this case, f is ﬁxed and n (and hence s = n − f ) is random. The probability model becomes
        the negative binomial distribution, given by
                                  
                                    s+f −1 s
            NegBinom(s|f, θ) =                   θ (1 − θ)f                                       (6.85)
                                      f −1
        where f = n − s.
          Note that the term which depends on θ is the same in Equations 6.82 and 6.85, so the
        posterior over θ would be the same in both cases. However, these two interpretations of the
        same data give different p-values. In particular, under the negative binomial model we get
                                  ∞ 
                                        3+s−1
           p3 = P (S ≥ 9|H0 ) =                     (1/2)s (1/2)3 = 0.0327                        (6.86)
                                  s=9
                                             2

        So the p-value is 3%, and suddenly there seems to be signiﬁcant evidence of bias in the coin!
        Obviously this is ridiculous: the data is the same, so our inferences about the coin should be
        the same. After all, I could have chosen the experimental protocol at random. It is the outcome
        of the experiment that matters, not the details of how I decided which one to run.
           Although this might seem like just a mathematical curiosity, this also has signiﬁcant practical
        implications. In particular, the fact that the stopping rule affects the computation of the p-
        value means that frequentists often do not terminate experiments early, even when it is obvious
        what the conclusions are, lest it adversely affect their statistical analysis. If the experiments are
        costly or harmful to people, this is obviously a bad idea. Perhaps it is not surprising, then, that
        the US Food and Drug Administration (FDA), which regulates clinical trials of new drugs, has
        recently become supportive of Bayesian methods6 , since Bayesian methods are not affected by
        the stopping rule.

6.6.3   The likelihood principle
        The fundamental reason for many of these pathologies is that frequentist inference violates
        the likelihood principle, which says that inference should be based on the likelihood of the
        observed data, not based on hypothetical future data that you have not observed. Bayes obviously
        satisﬁes the likelihood principle, and consequently does not suffer from these pathologies.
           A compelling argument in favor of the likelihood principle was presented in (Birnbaum 1962),
        who showed that it followed automatically from two simpler principles. The ﬁrst of these is the
        sufficiency principle, which says that a sufficient statistic contains all the relevant information

        6. See http://yamlb.wordpress.com/2006/06/19/the-us-fda-is-becoming-progressively-more-bayes
        ian/.
        6.6. Pathologies of frequentist statistics *                                                            215


        about an unknown parameter (arguably this is true by deﬁnition). The second principle is
        known as weak conditionality, which says that inferences should be based on the events that
        happened, not which might have happened. To motivate this, consider an example from (Berger
        1985). Suppose we need to analyse a substance, and can send it either to a laboratory in New
        York or in California. The two labs seem equally good, so a fair coin is used to decide between
        them. The coin comes up heads, so the California lab is chosen. When the results come back,
        should it be taken into account that the coin could have come up tails and thus the New York
        lab could have been used? Most people would argue that the New York lab is irrelevant, since
        the tails event didn’t happen. This is an example of weak conditionality. Given this principle,
        one can show that all inferences should only be based on what was observed, which is in
        contrast to standard frequentist procedures. See (Berger and Wolpert 1988) for further details on
        the likelihood principle.

6.6.4   Why isn’t everyone a Bayesian?
        Given these fundamental ﬂaws of frequentist statistics, and the fact that Bayesian methods
        do not have such ﬂaws, an obvious question to ask is: “Why isn’t everyone a Bayesian?” The
        (frequentist) statistician Bradley Efron wrote a paper with exactly this title (Efron 1986). His short
        paper is well worth reading for anyone interested in this topic. Below we quote his opening
        section:
           The title is a reasonable question to ask on at least two counts. First of all, everone used
           to be a Bayesian. Laplace wholeheatedly endorsed Bayes’s formulation of the inference
           problem, and most 19th-century scientists followed suit. This included Gauss, whose
           statistical work is usually presented in frequentist terms.
           A second and more important point is the cogency of the Bayesian argument. Modern
           statisticians, following the lead of Savage and de Finetti, have advanced powerful theoret-
           ical arguments for preferring Bayesian inference. A byproduct of this work is a disturbing
           catalogue of inconsistencies in the frequentist point of view.
           Nevertheless, everyone is not a Bayesian. The current era (1986) is the ﬁrst century in
           which statistics has been widely used for scientiﬁc reporting, and in fact, 20th-century
           statistics is mainly non-Bayesian. However, Lindley (1975) predicts a change for the 21st
           century.
        Time will tell whether Lindley was right....

        Exercises
        Exercise 6.1 Pessimism of LOOCV
        (Source: Witten05, p152.). Suppose we have a completely random labeled dataset (i.e., the features x tell us
        nothing about the class labels y) with N1 examples of class 1, and N2 examples of class 2, where N1 = N2 .
        What is the best misclassiﬁcation rate any method can achieve? What is the estimated misclassiﬁcation
        rate of the same method using LOOCV?
        Exercise 6.2 James Stein estimator for Gaussian means
        Consider the 2 stage model Yi |θi ∼ N (θi , σ 2 ) and θi |μ ∼ N (m0 , τ02 ). Suppose σ 2 = 500 is known and
        we observe the following 6 data points, i = 1 : 6:
216                                                                       Chapter 6. Frequentist statistics


1505, 1528, 1564, 1498, 1600, 1470

a. Find the ML-II estimates of m0 and τ02 .
b. Find the posterior estimates E [θi |yi , m0 , τ0 ] and var [θi |yi , m0 , τ0 ] for i = 1. (The other terms,
   i = 2 : 6, are computed similarly.)
c. Give a 95% credible interval for p(θi |yi , m0 , τ0 ) for i = 1. Do you trust this interval (assuming the
   Gaussian assumption is reasonable)? i.e. is it likely to be too large or too small, or just right?
d. What do you expect would happen to your estimates if σ 2 were much smaller (say σ 2 = 1)? You do
   not need to compute the numerical answer; just brieﬂy explain what would happen qualitatively, and
   why.

               2
Exercise 6.3 σ̂M LE is biased
            2          N              2                          2
Show that σ̂M LE = N1     n=1 (xn − μ̂) is a biased estimator of σ , i.e., show

      EX1 ,...,Xn ∼N (μ,σ) [σ̂ 2 (X1 , . . . , Xn ) = σ 2
Hint: note that X1 , . . . , XN are independent, and use the fact that the expectation of a product of
independent random variables is the product of the expectations.

Exercise 6.4 Estimation of σ 2 when μ is known
Suppose we sample x1 , . . . , xN ∼ N (μ, σ 2 ) where μ is a known constant. Derive an expression for the
MLE for σ 2 in this case. Is it unbiased?
7     Linear regression



7.1   Introduction
      Linear regression is the “work horse” of statistics and (supervised) machine learning. When
      augmented with kernels or other forms of basis function expansion, it can model also non-
      linear relationships. And when the Gaussian output is replaced with a Bernoulli or multinoulli
      distribution, it can be used for classiﬁcation, as we will see below. So it pays to study this model
      in detail.

7.2   Model speciﬁcation
      As we discussed in Section 1.4.5, linear regression is a model of the form
         p(y|x, θ) = N (y|wT x, σ 2 )                                                                  (7.1)
        Linear regression can be made to model non-linear relationships by replacing x with some
      non-linear function of the inputs, φ(x). That is, we use
         p(y|x, θ) = N (y|wT φ(x), σ 2 )                                                              (7.2)
      This is known as basis function expansion. (Note that the model is still linear in the parameters
      w, so it is still called linear regression; the importance of this will become clear below.) A simple
      example are polynomial basis functions, where the model has the form
         φ(x) = [1, x, x2 , . . . , xd ]                                                              (7.3)
      Figure 1.18 illustrates the effect of changing d: increasing the degree d allows us to create
      increasingly complex functions.
         We can also apply linear regression to more than 1 input. For example, consider modeling
      temperature as a function of location. Figure 7.1(a) plots E [y|x] = w0 + w1 x1 + w2 x2 , and
      Figure 7.1(b) plots E [y|x] = w0 + w1 x1 + w2 x2 + w3 x21 + w4 x22 .

7.3   Maximum likelihood estimation (least squares)
      A common way to esitmate the parameters of a statistical model is to compute the MLE, which
      is deﬁned as
         θ̂  arg max log p(D|θ)                                                                      (7.4)
                     θ
218                                                                                                                     Chapter 7. Linear regression



                  18                                                                 18

                 17.5                                                               17.5

                                                                                     17
                  17
                                                                                    16.5
                 16.5
                                                                                     16
                  16
                                                                                    15.5

                 15.5
                                                                                     15


                        30
                             25                                                            30
                                                                               40
                                  20                                                                                                     40
                                                                          30                    20
                                       15                                                                                           30
                                            10                       20
                                                                                                     10                        20
                                                 5              10                                                        10
                                                     0    0                                               0         0



                                                         (a)                                                  (b)

Figure 7.1 Linear regression applied to 2d data. Vertical axis is temperature, horizontal axes are location
within a room. Data was collected by some remote sensing motes at Intel’s lab in Berkeley, CA (data
courtesy of Romain Thibaux). (a) The ﬁtted plane has the form fˆ(x) = w0 + w1 x1 + w2 x2 . (b)
Temperature data is ﬁtted with a quadratic of the form fˆ(x) = w0 + w1 x1 + w2 x2 + w3 x21 + w4 x22 .
Produced by surfaceFitDemo.


It is common to assume the training examples are independent and identically distributed,
commonly abbreviated to iid. This means we can write the log-likelihood as follows:
                                                     
                                                     N
      (θ)  log p(D|θ) =                                     log p(yi |xi , θ)                                                                 (7.5)
                                                     i=1

Instead of maximizing the log-likelihood, we can equivalently minimize the negative log likeli-
hood or NLL:
                        
                        N
      NLL(θ)  −                       log p(yi |xi , θ)                                                                                        (7.6)
                         i=1

The NLL formulation is sometimes more convenient, since many optimization software packages
are designed to ﬁnd the minima of functions, rather than maxima.
   Now let us apply the method of MLE to the linear regression setting. Inserting the deﬁnition
of the Gaussian into the above, we ﬁnd that the log likelihood is given by
                               1                             
               N
                            1    2
                                            1                2
    (θ) =         log             exp − 2 (yi − w xi ) T
                                                                                           (7.7)
               i=1
                          2πσ 2            2σ
               −1             N
            =       RSS(w) −     log(2πσ 2 )                                                                                                    (7.8)
               2σ 2            2
RSS stands for residual sum of squares and is deﬁned by
                             
                             N
      RSS(w)                               (yi − wT xi )2                                                                                      (7.9)
                              i=1

The RSS is also called the sum of squared errors, or SSE, and SSE/N is called the mean
squared error or MSE. It can also be written as the square of the 2 norm of the vector of
        7.3. Maximum likelihood estimation (least squares)                                                                                      219

                                                                                      Sum of squares error contours for linear regression
                 5                                                               3

                           prediction
                 4         truth                                                2.5


                 3                                                               2


                 2                                                              1.5




                                                                          w1
                 1                                                               1

                 0                                                              0.5

                −1
                                                                                 0

                −2
                                                                               −0.5

                −3
                 −4   −3       −2       −1         0      1   2   3   4         −1
                                                                                 −1             0               1            2              3
                                                                                                               w0


                                              (a)                                                        (b)

        Figure 7.2 (a) In linear least squares, we try to minimize the sum of squared distances from each training
        point (denoted by a red circle) to its approximation (denoted by a blue cross), that is, we minimize the
        sum of the lengths of the little vertical blue lines. The red diagonal line represents ŷ(x) = w0 + w1 x,
        which is the least squares regression line. Note that these residual lines are not perpendicular to the least
        squares line, in contrast to Figure 12.5. Figure generated by residualsDemo. (b) Contours of the RSS error
        surface for the same example. The red cross represents the MLE, w = (1.45, 0.93). Figure generated by
        contoursSSEdemo.


        residual errors:
                                             
                                             N
           RSS(w) = ||||22 =                       2i                                                                                     (7.10)
                                             i=1

        where i = (yi − wT xi ).
           We see that the MLE for w is the one that minimizes the RSS, so this method is known
        as least squares. This method is illustrated in Figure 7.2(a). The training data (xi , yi ) are
        shown as red circles, the estimated values (xi , ŷi ) are shown as blue crosses, and the residuals
        i = yi − ŷi are shown as vertical blue lines. The goal is to ﬁnd the setting of the parameters
        (the slope w1 and intercept w0 ) such that the resulting red line minimizes the sum of squared
        residuals (the lengths of the vertical blue lines).
           In Figure 7.2(b), we plot the NLL surface for our linear regression example. We see that it is a
        quadratic “bowl” with a unique minimum, which we now derive. (Importantly, this is true even
        if we use basis function expansion, such as polynomials, because the NLL is still linear in the
        parameters w, even if it is not linear in the inputs x.)

7.3.1   Derivation of the MLE
        First, we rewrite the objective in a form that is more amenable to differentiation:
                                    1                     1
           NLL(w)          =          (y − Xw)T (y − Xw) = wT (XT X)w − wT (XT y)                                                           (7.11)
                                    2                     2
        220                                                                             Chapter 7. Linear regression


        where
                                              ⎛                                     ⎞
                                                     x2i,1      ···     xi,1 xi,D
                       
                       N                  
                                          N
                                              ⎜                                     ⎟
           XT X =            xi xTi =         ⎝                  ..                 ⎠                          (7.12)
                                                                    .
                       i=1                i=1  xi,D xi,1        ···       x2i,D
        is the sum of squares matrix and
                      
                      N
           XT y =            x i yi .                                                                          (7.13)
                      i=1

          Using results from Equation 4.10, we see that the gradient of this is given by
                                                         
                                                         N
           g(w)      =       [XT Xw − XT y] =                  xi (wT xi − yi )                                (7.14)
                                                         i=1

        Equating to zero we get
           XT Xw         =      XT y                                                                           (7.15)
        This is known as the normal equation. The corresponding solution ŵ to this linear system of
        equations is called the ordinary least squares or OLS solution, which is given by


                ŵOLS = (XT X)−1 XT y                                                                          (7.16)


7.3.2   Geometric interpretation
        This equation has an elegant geometrical intrepretation, as we now explain. We assume N > D,
        so we have more examples than features. The columns of X deﬁne a linear subspace of
        dimensionality D which is embedded in N dimensions. Let the j’th column be x̃j , which is
        a vector in RN . (This should not be confused with xi ∈ RD , which represents the i’th data
        case.) Similarly, y is a vector in RN . For example, suppose we have N = 3 examples in D = 2
        dimensions:
                 ⎛         ⎞          ⎛         ⎞
                   1 2                   8.8957
           X = ⎝1 −2⎠ , y = ⎝0.6130⎠                                                            (7.17)
                   1 2                   1.7761
        These vectors are illustrated in Figure 7.3.
           We seek a vector ŷ ∈ RN that lies in this linear subspace and is as close as possible to y,
        i.e., we want to ﬁnd
                 argmin                 y − ŷ 2 .                                                             (7.18)
           ŷ∈span({x̃1 ,...,x̃D })

        Since ŷ ∈ span(X), there exists some weight vector w such that
           ŷ = w1 x̃1 + · · · + wD x̃D = Xw                                                                   (7.19)
        7.3. Maximum likelihood estimation (least squares)                                                   221




                               1


                              0.8
                                                                   ŷ
                              0.6                       x1
                                                                         x2

                         x3
                              0.4

                                                                               y
                              0.2


                               0
                               1
                                    0.5
                                           0
                                                (0,0,0)                            0.6
                                                                                         0.8
                                                                                               1

                                                 −0.5                    0.4
                                                                   0.2
                                                        −1   0
                                           x2                             x1



        Figure 7.3 Graphical interpretation of least squares for N = 3 examples and D = 2 features. x̃1 and
        x̃2 are vectors in R3 ; together they deﬁne a 2D plane. y is also a vector in R3 but does not lie on this
        2D plane. The orthogonal projection of y onto this plane is denoted ŷ. The red line from y to ŷ is
        the residual, whose norm we want to minimize. For visual clarity, all vectors have been converted to unit
        norm. Figure generated by leastSquaresProjection.



        To minimize the norm of the residual, y − ŷ, we want the residual vector to be orthogonal to
        every column of X, so x̃Tj (y − ŷ) = 0 for j = 1 : D. Hence

           x̃Tj (y − ŷ) = 0 ⇒ XT (y − Xw) = 0 ⇒ w = (XT X)−1 XT y                                         (7.20)

        Hence our projected value of y is given by

           ŷ = Xŵ = X(XT X)−1 XT y                                                                       (7.21)

        This corresponds to an orthogonal projection of y onto the column space of X. The projection
        matrix P  X(XT X)−1 XT is called the hat matrix, since it “puts the hat on y”.

7.3.3   Convexity
        When discussing least squares, we noted that the NLL had a bowl shape with a unique minimum.
        The technical term for functions like this is convex. Convex functions play a very important
        role in machine learning.
           Let us deﬁne this concept more precisely. We say a set S is convex if for any θ, θ  ∈ S, we
        have
           λθ + (1 − λ)θ  ∈ S, ∀ λ ∈ [0, 1]                                                               (7.22)
222                                                                                  Chapter 7. Linear regression




                                               (a)                       (b)

              Figure 7.4 (a) Illustration of a convex set. (b) Illustration of a nonconvex set.




                                           λ
                                     1−
                           λ




                      x                          y                   A                  B
                               (a)                                             (b)

Figure 7.5 (a) Illustration of a convex function. We see that the chord joining (x, f (x)) to (y, f (y)) lies
above the function. (b) A function that is neither convex nor concave. A is a local minimum, B is a global
minimum. Figure generated by convexFnHand.



That is, if we draw a line from θ to θ  , all points on the line lie inside the set. See Figure 7.4(a)
for an illustration of a convex set, and Figure 7.4(b) for an illustration of a non-convex set.
    A function f (θ) is called convex if its epigraph (the set of points above the function) deﬁnes
a convex set. Equivalently, a function f (θ) is called convex if it is deﬁned on a convex set and
if, for any θ, θ  ∈ S, and for any 0 ≤ λ ≤ 1, we have

   f (λθ + (1 − λ)θ  ) ≤ λf (θ) + (1 − λ)f (θ  )                                                                   (7.23)

See Figure 7.5 for a 1d example. A function is called strictly convex if the inequality is strict. A
function f (θ) is concave if −f (θ) is convex. Examples of scalar convex functions include√       θ2 ,
 θ
e , and θ log θ (for θ > 0). Examples of scalar concave functions include log(θ) and θ.
   Intuitively, a (strictly) convex function has a “bowl shape”, and hence has a unique global
minimum θ∗ corresponding to the bottom of the bowl. Hence its second derivative must be
                         d
positive everywhere, dθ    f (θ) > 0. A twice-continuously differentiable, multivariate function f is
convex iff its Hessian is positive deﬁnite for all θ.1 In the machine learning context, the function
f often corresponds to the NLL.
                                                                                            ∂f 2 (θ)
1. Recall that the Hessian is the matrix of second partial derivatives, deﬁned by Hjk =     ∂θj ∂θk
                                                                                                     .   Also, recall that a
matrix H is positive deﬁnite iff   vT Hv   > 0 for any non-zero vector v.
      7.4. Robust linear regression *                                                                               223


                           Linear data with noise and outliers               5
       4                                                                                           L2
                  least squares                                             4.5                    L1
       3          laplace                                                                          huber
                                                                             4
       2
                                                                            3.5
       1
                                                                             3
       0
                                                                            2.5
      −1
                                                                             2
      −2
                                                                            1.5
      −3                                                                     1

      −4                                                                    0.5

      −5                                                                     0

      −6                                                                   −0.5
           0         0.2           0.4            0.6            0.8   1      −3   −2   −1     0           1   2      3

                                          (a)                                                (b)

      Figure 7.6 (a) Illustration of robust linear regression. Figure generated by linregRobustDemoCombined.
      (b) Illustration of 2 , 1 , and Huber loss functions. Figure generated by huberLossDemo.



         Models where the NLL is convex are desirable, since this means we can always ﬁnd the
      globally optimal MLE. We will see many examples of this later in the book. However, many
      models of interest will not have concave likelihoods. In such cases, we will discuss ways to
      derive locally optimal parameter estimates.

7.4   Robust linear regression *
      It is very common to model the noise in regression models using a Gaussian distribution
      with zero mean and constant variance, i ∼ N (0, σ 2 ), where i = yi − wT xi . In this case,
      maximizing likelihood is equivalent to minimizing the sum of squared residuals, as we have
      seen. However, if we have outliers in our data, this can result in a poor ﬁt, as illustrated in
      Figure 7.6(a). (The outliers are the points on the bottom of the ﬁgure.) This is because squared
      error penalizes deviations quadratically, so points far from the line have more affect on the ﬁt
      than points near to the line.
         One way to achieve robustness to outliers is to replace the Gaussian distribution for the
      response variable with a distribution that has heavy tails. Such a distribution will assign higher
      likelihood to outliers, without having to perturb the straight line to “explain” them.
         One possibility is to use the Laplace distribution, introduced in Section 2.4.3. If we use this
      as our observation model for regression, we get the following likelihood:
                                                                   1
               p(y|x, w, b)         =        Lap(y|wT x, b) ∝ exp(− |y − wT x|)                                    (7.24)
                                                                   b
      The robustness arises from the use of |y − wT x| instead of (y − wT x)2 . For simplicity, we will
      assume b is ﬁxed. Let ri  yi − wT xi be the i’th residual. The NLL has the form
                 
         (w) =      |ri (w)|                                                                    (7.25)
                            i
224                                                                         Chapter 7. Linear regression


                    Likelihood    Prior        Name                      Section
                    Gaussian      Uniform      Least squares             7.3
                    Gaussian      Gaussian     Ridge                     7.5
                    Gaussian      Laplace      Lasso                     13.3
                    Laplace       Uniform      Robust regression         7.4
                    Student       Uniform      Robust regression         Exercise 11.12

Table 7.1 Summary of various likelihoods and priors used for linear regression. The likelihood refers to
the distributional form of p(y|x, w, σ 2 ), and the prior refers to the distributional form of p(w). MAP
estimation with a uniform distribution corresponds to MLE.


Unfortunately, this is a non-linear objective function, which is hard to optimize. Fortunately, we
can convert the NLL to a linear objective, subject to linear constraints, using the following split
variable trick. First we deﬁne
   ri  ri+ − ri−                                                                                  (7.26)
and then we impose the linear inequality constraints that          ri+
                                                                ≥ 0 and              ri−   ≥ 0. Now the
constrained objective becomes
           
     min
      + −
              (ri+ − ri− )   s.t. ri+ ≥ 0, ri− ≥ 0, wT xi + ri+ + ri− = yi                         (7.27)
   w,r ,r
             i

This is an example of a linear program with D + 2N unknowns and 3N constraints.
  Since this is a convex optimization problem, it has a unique solution. To solve an LP, we must
ﬁrst write it in standard form, which as follows:
   min f T θ s.t. Aθ ≤ b, Aeq θ = beq , l ≤ θ ≤ u                                                  (7.28)
      θ

In our current example, θ = (w, r+ , r− ), f = [0, 1, 1], A = [], b = [], Aeq = [X, I, −I],
beq = y, l = [−∞1, 0, 0], u = []. This can be solved by any LP solver (see e.g., (Boyd and
Vandenberghe 2004)). See Figure 7.6(a) for an example of the method in action.
  An alternative to using NLL under a Laplace likelihood is to minimize the Huber loss function
(Huber 1964), deﬁned as follows:
               
                     r2 /2      if |r| ≤ δ
   LH (r, δ) =                                                                            (7.29)
                  δ|r| − δ 2 /2 if |r| > δ
This is equivalent to 2 for errors that are smaller than δ, and is equivalent to 1 for larger errors.
See Figure 7.6(b). The advantage of this loss function is that it is everywhere differentiable,
using the fact that dr d
                         |r| = sign(r) if r = 0. We can also check that the function is C1
continuous, since the gradients of the two parts of the function match at r = ±δ, namely
 d
dr LH (r, δ)|r=δ = δ. Consequently optimizing the Huber loss is much faster than using the
Laplace likelihood, since we can use standard smooth optimization methods (such as quasi-
Newton) instead of linear programming.
   Figure 7.6(a) gives an illustration of the Huber loss function. The results are qualitatively
similiar to the probabilistic methods. (In fact, it turns out that the Huber method also has a
probabilistic interpretation, although it is rather unnatural (Pontil et al. 1998).)
        7.5. Ridge regression                                                                                            225

                                       ln lambda −20.135                                   ln lambda −8.571
                     20                                                      20


                                                                             15
                     15


                                                                             10
                     10

                                                                              5
                      5
                                                                              0

                      0
                                                                             −5


                     −5
                                                                            −10


                    −10                                                     −15
                          0        5          10           15   20                0    5          10          15   20


                                            (a)                                                  (b)

        Figure 7.7 Degree 14 Polynomial ﬁt to N = 21 data points with increasing amounts of 2 regularization.
        Data was generated from noise with variance σ 2 = 4. The error bars, representing the noise variance σ 2 ,
        get wider as the ﬁt gets smoother, since we are ascribing more of the data variation to the noise. Figure
        generated by linregPolyVsRegDemo.


 7.5    Ridge regression
        One problem with ML estimation is that it can result in overﬁtting. In this section, we discuss a
        way to ameliorate this problem by using MAP estimation with a Gaussian prior. For simplicity,
        we assume a Gaussian likelihood, rather than a robust likelihood.

7.5.1   Basic idea
        The reason that the MLE can overﬁt is that it is picking the parameter values that are the
        best for modeling the training data; but if the data is noisy, such parameters often result in
        complex functions. As a simple example, suppose we ﬁt a degree 14 polynomial to N = 21 data
        points using least squares. The resulting curve is very “wiggly”, as shown in Figure 7.7(a). The
        corresponding least squares coefficients (excluding w0 ) are as follows:
        6.560, -36.934, -109.255, 543.452, 1022.561, -3046.224, -3768.013,
        8524.540, 6607.897, -12640.058, -5530.188, 9479.730, 1774.639, -2821.526
           We see that there are many large positive and negative numbers. These balance out exactly
        to make the curve “wiggle” in just the right way so that it almost perfectly interpolates the data.
        But this situation is unstable: if we changed the data a little, the coefficients would change a lot.
           We can encourage the parameters to be small, thus resulting in a smoother curve, by using a
        zero-mean Gaussian prior:
                     
           p(w) =        N (wj |0, τ 2 )                                                               (7.30)
                      j

        where 1/τ 2 controls the strength of the prior. The corresponding MAP estimation problem
        becomes
                     
                     N                                               
                                                                     D
           argmax             log N (yi |w0 + wT xi , σ 2 ) +              log N (wj |0, τ 2 )                          (7.31)
               w
                     i=1                                             j=1
226                                                                               Chapter 7. Linear regression

                             mean squared error                0.9
  25                                                                                                 negative log marg. likelihood
                                                                                                     CV estimate of MSE
           train mse
                                                               0.8
           test mse

  20                                                           0.7



                                                               0.6
  15

                                                               0.5


  10                                                           0.4



                                                               0.3
   5

                                                               0.2


   0                                                           0.1
   −25    −20          −15         −10            −5   0   5    −20   −15   −10                 −5             0                     5
                                log lambda                                         log lambda


                                   (a)                                              (b)

Figure 7.8 (a) Training error (dotted blue) and test error (solid red) for a degree 14 polynomial ﬁt by
ridge regression, plotted vs log(λ). Data was generated from noise with variance σ 2 = 4 (training set
has size N = 21). Note: Models are ordered from complex (small regularizer) on the left to simple (large
regularizer) on the right. The stars correspond to the values used to plot the functions in Figure 7.7. (b)
Estimate of performance using training set. Dotted blue: 5-fold cross-validation estimate of future MSE.
Solid black: negative log marginal likelihood, − log p(D|λ). Both curves have been vertically rescaled to
[0,1] to make them comparable. Figure generated by linregPolyVsRegDemo.



It is a simple exercise to show that this is equivalent to minimizing the following:

                1 
                   N
   J(w) =             (yi − (w0 + wT xi ))2 + λ||w||22                                                                           (7.32)
                N i=1

where λ  σ 2 /τ 2 and ||w||22 = j wj2 = wT w is the squared two-norm. Here the ﬁrst term is
the MSE/ NLL as usual, and the second term, λ ≥ 0, is a complexity penalty. The corresponding
solution is given by



         ŵridge = (λID + XT X)−1 XT y                                                                                           (7.33)


   This technique is known as ridge regression, or penalized least squares. In general, adding
a Gaussian prior to the parameters of a model to encourage them to be small is called 2
regularization or weight decay. Note that the offset term w0 is not regularized, since this just
affects the height of the function, not its complexity. By penalizing the sum of the magnitudes
of the weights, we ensure the function is simple (since w = 0 corresponds to a straight line,
which is the simplest possible function, corresponding to a constant.)
   We illustrate this idea in Figure 7.7, where we see that increasing λ results in smoother
functions. The resulting coefficients also become smaller. For example, using λ = 10−3 , we
have
        7.5. Ridge regression                                                                               227


        2.128, 0.807, 16.457, 3.704, -24.948, -10.472, -2.625, 4.360, 13.711,
        10.063, 8.716, 3.966, -9.349, -9.232
           In Figure 7.8(a), we plot the MSE on the training and test sets vs log(λ). We see that, as we
        increase λ (so the model becomes more constrained), the error on the training set increases.
        For the test set, we see the characteristic U-shaped curve, where the model overﬁts and then
        underﬁts. It is common to use cross validation to pick λ, as shown in Figure 7.8(b). In
        Section 1.4.8, we will discuss a more probabilistic approach.
           We will consider a variety of different priors in this book. Each of these corresponds to a
        different form of regularization. This technique is very widely used to prevent overﬁtting.

7.5.2   Numerically stable computation *
        Interestingly, ridge regression, which works better statistically, is also easier to ﬁt numerically,
        since (λID + XT X) is much better conditioned (and hence more likely to be invertible) than
        XT X, at least for suitable largy λ.
           Nevertheless, inverting matrices is still best avoided, for reasons of numerical stability. (Indeed,
        if you write w=inv(X’ * X)*X’*y in Matlab, it will give you a warning.) We now describe
        a useful trick for ﬁtting ridge regression models (and hence by extension, computing vanilla
        OLS estimates) that is more numerically robust. We assume the prior has the form p(w) =
        N (0, Λ−1 ), where Λ is the precision matrix. In the case of ridge regression, Λ = (1/τ 2 )I. To
        avoid penalizing the w0 term, we should center the data ﬁrst, as explained in Exercise 7.5.
           First let us augment the original data with some “virtual data” coming from the prior:
                                   
                     X/σ
                     √                 y/σ
            X̃ =           , ỹ =                                                                         (7.34)
                       Λ              0 D×1
                      √ √ T
        where Λ = Λ Λ is a Cholesky decomposition of Λ. We see that X̃ is (N + D) × D,
        where the extra rows represent pseudo-data from the prior.
           We now show that the NLL on this expanded data is equivalent to penalized NLL on the
        original data:
           f (w)    =(ỹ − X̃w)T (ỹ − X̃w)                                                               (7.35)
                                            T      
                          y/σ        X/σ
                                     √             y/σ    X/σ
                  =              −          w          − √    w                                           (7.36)
                            0          Λ            0      Λ
                     1               T 1
                        σ (y√ − Xw)           − Xw)
                                          σ (y√
                  =                                                                                       (7.37)
                           − Λw             − Λw
                      1                           √     √
                  =     2
                          (y − Xw)T (y − Xw) + ( Λw)T ( Λw)                                               (7.38)
                      σ
                      1
                  =       (y − Xw)T (y − Xw) + wT Λw                                                      (7.39)
                      σ2
        Hence the MAP estimate is given by
           ŵridge = (X̃T X̃)−1 X̃T ỹ                                                                    (7.40)
        as we claimed.
        228                                                                Chapter 7. Linear regression


          Now let

           X̃ = QR                                                                                (7.41)

        be the QR decomposition of X, where Q is orthonormal (meaning QT Q = QQT = I), and
        R is upper triangular. Then

           (X̃T X̃)−1 = (RT QT QR)−1 = (RT R)−1 = R−1 R−T                                         (7.42)

        Hence

           ŵridge = R−1 R−T RT QT ỹ = R−1 Qỹ                                                   (7.43)

        Note that R is easy to invert since it is upper triangular. This gives us a way to compute the
        ridge estimate while avoiding having to invert (Λ + XT X).
           We can use this technique to ﬁnd the MLE, by simply computing the QR decomposition of
        the unaugmented matrix X, and using the original y. This is the method of choice for solving
        least squares problems. (In fact, it is so sommon that it can be implemented in one line of
        Matlab, using the backslash operator: w=X\y.) Note that computing the QR decomposition of
        an N × D matrix takes O(N D2 ) time, and is numerically very stable.
           If D  N , we should ﬁrst perform an SVD decomposition. In particular, let X = USVT be
        the SVD of X, where VT V = IN , UUT = UT U = IN , and S is a diagonal N × N matrix.
        Now let Z = UD be an N × N matrix. Then we can rewrite the ridge estimate thus:
           ŵridge   =   V(ZT Z + λIN )−1 ZT y                                                    (7.44)

        In other words, we can replace the D-dimensional vectors xi with the N -dimensional vectors
        zi and perform our penalized ﬁt as before. We then transform the N -dimensional solution
        to the D-dimensional solution by multiplying by V. Geometrically, we are rotating to a new
        coordinate system in which all but the ﬁrst N coordinates are zero. This does not affect the
        solution since the spherical Gaussian prior is rotationally invariant. The overall time is now
        O(DN 2 ) operations.

7.5.3   Connection with PCA *
        In this section, we discuss an interesting connection between ridge regression and PCA (Sec-
        tion 12.2), which gives further insight into why ridge regression works well. Our discussion is
        based on (Hastie et al. 2009, p66).
           Let X = USVT be the SVD of X. From Equation 7.44, we have
           ŵridge = V(S2 + λI)−1 SUT y                                                           (7.45)

        Hence the ridge predictions on the training set are given by
           ŷ   =    Xŵridge = USVT V(S2 + λI)−1 SUT y                                          (7.46)
                                 
                                 D
                =    US̃UT y =         uj S̃jj uTj y                                              (7.47)
                                 j=1
7.5. Ridge regression                                                                                229


                                                                         u2




                                                                                    u1
                                                                    ML Estimate

                                                          MAP Estimate




                                                    prior mean




Figure 7.9 Geometry of ridge regression. The likelihood is shown as an ellipse, and the prior is shown
as a circle centered on the origin. Based on Figure 3.15 of (Bishop 2006b). Figure generated by geomRidge



where
                                                  σj2
   S̃jj           [S(S2 + λI)−1 S]jj =                                                             (7.48)
                                               σj2 + λ
and σj are the singular values of X. Hence

                               
                               D
                                             σj2
   ŷ     =       Xŵridge =         uj          uT y                                               (7.49)
                               j=1
                                          σj2 + λ j

In contrast, the least squares prediction is
                                                                                  
                                                                                  D
                                             −1
   ŷ     =       Xŵls = (USV )(VS  T
                                                  U y) = UU y =
                                                   T                 T
                                                                                         uj uTj y   (7.50)
                                                                                  j=1

If σj2 is small compared to λ, then direction uj will not have much effect on the prediction. In
view of this, we deﬁne the effective number of degrees of freedom of the model as follows:
                   
                   D
                         σj2
   dof(λ) =                                                                                         (7.51)
                      σ2
                   j=1 j
                          +λ

When λ = 0, dof(λ) = D, and as λ → ∞, dof(λ) → 0.
  Let us try to understand why this behavior is desirable. In Section 7.6, we show that
cov [w|D] = σ 2 (XT X)−1 , if we use a uniform prior for w. Thus the directions in which
we are most uncertain about w are determined by the eigenvectors of this matrix with the
smallest eigenvalues, as shown in Figure 4.1. Furthermore, in Section 12.2.3, we show that the
squared singular values σj2 are equal to the eigenvalues of XT X. Hence small singular values σj
correspond to directions with high posterior variance. It is these directions which ridge shrinks
the most.
        230                                                                               Chapter 7. Linear regression


           This process is illustrated in Figure 7.9. The horizontal w1 parameter is not-well determined
        by the data (has high posterior variance), but the vertical w2 parameter is well-determined.
        Hence w2map is close to ŵ2mle , but w1map is shifted strongly towards the prior mean, which is 0.
        (Compare to Figure 4.14(c), which illustrated sensor fusion with sensors of different reliabilities.)
        In this way, ill-determined parameters are reduced in size towards 0. This is called shrinkage.
           There is a related, but different, technique called principal components regression. The idea
        is this: ﬁrst use PCA to reduce the dimensionality to K dimensions, and then use these low
        dimensional features as input to regression. However, this technique does not work as well as
        ridge in terms of predictive accuracy (Hastie et al. 2001, p70). The reason is that in PC regression,
        only the ﬁrst K (derived) dimensions are retained, and the remaining D − K dimensions are
        entirely ignored. By contrast, ridge regression uses a “soft” weighting of all the dimensions.

7.5.4   Regularization effects of big data
        Regularization is the most common way to avoid overﬁtting. However, another effective approach
        — which is not always available — is to use lots of data. It should be intuitively obvious that
        the more training data we have, the better we will be able to learn.2 So we expect the test set
        error to decrease to some plateau as N increases.
           This is illustrated in Figure 7.10, where we plot the mean squared error incurred on the test set
        achieved by polynomial regression models of different degrees vs N (a plot of error vs training
        set size is known as a learning curve). The level of the plateau for the test error consists of
        two terms: an irreducible component that all models incur, due to the intrinsic variability of
        the generating process (this is called the noise ﬂoor); and a component that depends on the
        discrepancy between the generating process (the “truth”) and the model: this is called structural
        error.
           In Figure 7.10, the truth is a degree 2 polynomial, and we try ﬁtting polynomials of degrees 1,
        2 and 25 to this data. Call the 3 models M1 , M2 and M25 . We see that the structural error
        for models M2 and M25 is zero, since both are able to capture the true generating process.
        However, the structural error for M1 is substantial, which is evident from the fact that the
        plateau occurs high above the noise ﬂoor.
           For any model that is expressive enough to capture the truth (i.e., one with small structural
        error), the test error will go to the noise ﬂoor as N → ∞. However, it will typically go to
        zero faster for simpler models, since there are fewer parameters to estimate. In particular, for
        ﬁnite training sets, there will be some discrepancy between the parameters that we estimate
        and the best parameters that we could estimate given the particular model class. This is called
        approximation error, and goes to zero as N → ∞, but it goes to zero faster for simpler
        models. This is illustrated in Figure 7.10. See also Exercise 7.1.
           In domains with lots of data, simple methods can work surprisingly well (Halevy et al. 2009).
        However, there are still reasons to study more sophisticated learning methods, because there
        will always be problems for which we have little data. For example, even in such a data-rich
        domain as web search, as soon as we want to start personalizing the results, the amount of data
        available for any given user starts to look small again (relative to the complexity of the problem).

        2. This assumes the training data is randomly sampled, and we don’t just get repetitions of the same examples. Having
        informatively sampled data can help even more; this is the motivation for an approach known as active learning, where
        you get to choose your training data.
      7.6. Bayesian linear regression                                                                                                                                           231

                                truth=degree 2, model = degree 1                                                       truth=degree 2, model = degree 2
             22                                                                                     22
                                                                                train                                                                                  train
                                                                                test                                                                                   test
             20                                                                                     20


             18                                                                                     18


             16                                                                                     16


             14                                                                                     14


             12                                                                                     12

       mse




                                                                                              mse
             10                                                                                     10


              8                                                                                      8


              6                                                                                      6


              4                                                                                      4


              2                                                                                      2


              0                                                                                      0
                  0   20   40   60     80      100      120   140   160   180           200              0   20   40   60     80      100      120   140   160   180           200
                                       size of training set                                                                   size of training set


                                             (a)                                                                                    (b)
                                truth=degree 2, model = degree 10                                                      truth=degree 2, model = degree 25
             22                                                                                     22
                                                                                train                                                                                  train
                                                                                test                                                                                   test
             20                                                                                     20


             18                                                                                     18


             16                                                                                     16


             14                                                                                     14


             12                                                                                     12
       mse




                                                                                              mse
             10                                                                                     10


              8                                                                                      8


              6                                                                                      6


              4                                                                                      4


              2                                                                                      2


              0                                                                                      0
                  0   20   40   60     80      100      120   140   160   180           200              0   20   40   60     80      100      120   140   160   180           200
                                       size of training set                                                                   size of training set


                                             (c)                                                                                    (d)

      Figure 7.10 MSE on training and test sets vs size of training set, for data generated from a degree 2
      polynomial with Gaussian noise of variance σ 2 = 4. We ﬁt polynomial models of varying degree to this
      data. (a) Degree 1. (b) Degree 2. (c) Degree 10. (d) Degree 25. Note that for small training set sizes, the test
      error of the degree 25 polynomial is higher than that of the degree 2 polynomial, due to overﬁtting, but
      this difference vanishes once we have enough data. Note also that the degree 1 polynomial is too simple
      and has high test error even given large amounts of training data. Figure generated by linregPolyVsN.



      In such cases, we may want to learn multiple related models at the same time, which is known
      as multi-task learning. This will allow us to “borrow statistical strength” from tasks with lots of
      data and to share it with tasks with little data. We will discuss ways to do later in the book.

7.6   Bayesian linear regression
      Although ridge regression is a useful way to compute a point estimate, sometimes we want to
      compute the full posterior over w and σ 2 . For simplicity, we will initially assume the noise
      variance σ 2 is known, so we focus on computing p(w|D, σ 2 ). Then in Section 7.6.3 we consider
        232                                                                   Chapter 7. Linear regression


        the general case, where we compute p(w, σ 2 |D). We assume throughout a Gaussian likelihood
        model. Performing Bayesian inference with a robust likelihood is also possible, but requires more
        advanced techniques (see Exercise 24.5).

7.6.1   Computing the posterior
        In linear regression, the likelihood is given by

           p(y|X, w, μ, σ 2 )    =   N (y|μ + Xw, σ 2 IN )                                            (7.52)
                                         
                                             1
                                 ∝   exp − 2 (y − μ1N − Xw)T (y − μ1N − Xw)                           (7.53)
                                            2σ
        where μ is an offset term. If the inputs are centered, so i xij = 0 for each j, the mean of the
        output is equally likely to be positive or negative. So let us put an improper prior on μ of the
        form p(μ) ∝ 1, and then integrate it out to get
                                   
                                        1
           p(y|X, w, σ 2 ) ∝ exp − 2 ||y − y1N − Xw||22                                            (7.54)
                                       2σ

        where y = N1 i=1 yi is the empirical mean of the output. For notational simplicity, we shall
                         N

        assume the output has been centered, and write y for y − y1N .
           The conjugate prior to the above Gaussian likelihood is also a Gaussian, which we will denote
        by p(w) = N (w|w0 , V0 ). Using Bayes rule for Gaussians, Equation 4.125, the posterior is given
        by
           p(w|X, y, σ 2 )   ∝    N (w|w0 , V0 )N (y|Xw, σ 2 IN ) = N (w|wN , VN )                    (7.55)
                                                   1
                      wN     =    VN V0−1 w0 + 2 VN XT y                                              (7.56)
                                                   σ
                      −1                     1
                     VN      =    V0−1 + 2 XT X                                                       (7.57)
                                            σ
                      VN     =    σ 2 (σ 2 V0−1 + XT X)−1                                             (7.58)
          If w0 = 0 and V0 = τ 2 I, then the posterior mean reduces to the ridge estimate, if we deﬁne
               2
        λ = στ 2 . This is because the mean and mode of a Gaussian are the same.
          To gain insight into the posterior distribution (and not just its mode), let us consider a 1D
        example:

           y(x, w) = w0 + w1 x +                                                                     (7.59)

        where the “true” parameters are w0 = −0.3 and w1 = 0.5. In Figure 7.11 we plot the prior,
        the likelihood, the posterior, and some samples from the posterior predictive. In particular,
        the right hand column plots the function y(x, w(s) ) where x ranges over [−1, 1], and w(s) ∼
        N (w|wN , VN ) is a sample from the parameter posterior. Initially, when we sample from the
        prior (ﬁrst row), our predictions are “all over the place”, since our prior is uniform. After we see
        one data point (second row), our posterior becomes constrained by the corresponding likelihood,
        and our predictions pass close to the observed data. However, we see that the posterior has
        a ridge-like shape, reﬂecting the fact that there are many possible solutions, with different
        7.6. Bayesian linear regression                                                                           233


                            likelihood                     prior/posterior                         data space
                                                           1                                   1
                                                      W1                                  y
                                                           0                                   0

                                                         −1                                   −1
                                                          −1    0      1                       −1      0    1
                                                                W0                                     x

                        1                                  1                                   1
                   W1                                 W1                                  y
                        0                                  0                                   0

                      −1                                 −1                                   −1
                       −1      0         1                −1    0      1                       −1      0    1
                               W0                               W0                                     x

                        1                                  1                                   1
                   W1                                 W1                                  y
                        0                                  0                                   0

                      −1                                 −1                                   −1
                       −1      0         1                −1    0      1                       −1      0    1
                               W0                               W0                                     x

                        1                                  1                                   1
                   W1                                 W1                                  y
                        0                                  0                                   0

                      −1                                 −1                                   −1
                       −1      0         1                −1    0      1                       −1      0    1
                               W0                               W0                                     x


        Figure 7.11 Sequential Bayesian updating of a linear regression model p(y|x) = N (y|w0 x0 + w1 x1 , σ 2 ).
        Row 0 represents the prior, row 1 represents the ﬁrst data point (x1 , y1 ), row 2 represents the second
        data point (x2 , y2 ), row 3 represents the 20th data point (x20 , y20 ). Left column: likelihood function for
        current data point. Middle column: posterior given data so far, p(w|x1:n , y1:n ) (so the ﬁrst line is the
        prior). Right column: samples from the current prior/posterior predictive distribution. The white cross in
        columns 1 and 2 represents the true parameter value; we see that the mode of the posterior rapidly (after
        20 samples) converges to this point. The blue circles in column 3 are the observed data points. Based on
        Figure 3.7 of (Bishop 2006a). Figure generated by bayesLinRegDemo2d.



        slopes/intercepts. This makes sense since we cannot uniquely infer two parameters from one
        observation. After we see two data points (third row), the posterior becomes much narrower,
        and our predictions all have similar slopes and intercepts. After we observe 20 data points (last
        row), the posterior is essentially a delta function centered on the true value, indicated by a white
        cross. (The estimate converges to the truth since the data was generated from this model, and
        because Bayes is a consistent estimator; see Section 6.4.1 for discussion of this point.)

7.6.2   Computing the posterior predictive
           It’s tough to make predictions, especially about the future. — Yogi Berra
          234                                                                   Chapter 7. Linear regression


          In machine learning, we often care more about predictions than about interpreting the parame-
          ters. Using Equation 4.126, we can easily show that the posterior predictive distribution at a test
          point x is also Gaussian:
                                  
              p(y|x, D, σ 2 ) =       N (y|xT w, σ 2 )N (w|wN , VN )dw                                 (7.60)
                                                2
                                =   N (y|wN
                                          T
                                            x, σN (x))                                                  (7.61)
                     2
                    σN (x)      =   σ 2 + x T VN x                                                     (7.62)
                                            2
          The variance in this prediction, σN (x), depends on two terms: the variance of the observation
                   2
          noise, σ , and the variance in the parameters, VN . The latter translates into variance about
          observations in a way which depends on how close x is to the training data D. This is illustrated
          in Figure 7.12, where we see that the error bars get larger as we move away from the training
          points, representing increased uncertainty. This is important for applications such as active
          learning, where we want to model what we don’t know as well as what we do. By contrast, the
          plugin approximation has constant sized error bars, since
                                  
             p(y|x, D, σ 2 ) ≈       N (y|xT w, σ 2 )δŵ (w)dw = p(y|x, ŵ, σ 2 )                     (7.63)

          See Figure 7.12(a).

 7.6.3    Bayesian inference when σ 2 is unknown *
          In this section, we apply the results in Section 4.6.3 to the problem of computing p(w, σ 2 |D)
          for a linear regression model. This generalizes the results from Section 7.6.1 where we assumed
          σ 2 was known. In the case where we use an uninformative prior, we will see some interesting
          connections to frequentist statistics.

7.6.3.1   Conjugate prior
          As usual, the likelihood has the form
             p(y|X, w, σ 2 ) = N (y|Xw, σ 2 IN )                                                       (7.64)

          By analogy to Section 4.6.3, one can show that the natural conjugate prior has the following
          form:

             p(w, σ 2 )   =     NIG(w, σ 2 |w0 , V0 , a0 , b0 )                                        (7.65)
                               N (w|w0 , σ 2 V0 )IG(σ 2 |a0 , b0 )                                    (7.66)
                                        ba0 0
                          =                   1        (σ 2 )−(a0 +(D/2)+1)                            (7.67)
                                (2π)D/2 |V0 | 2 Γ(a0 )
                                                                           
                                          (w − w0 )T V0−1 (w − w0 ) + 2b0
                                × exp −                                                                (7.68)
                                                           2σ 2
7.6. Bayesian linear regression                                                                                                            235

                          plugin approximation (MLE)                                      Posterior predictive (known variance)
 60                                                                       80
          prediction                                                            prediction
          training data                                                   70    training data
 50
                                                                          60


 40                                                                       50


                                                                          40
 30
                                                                          30


 20                                                                       20


                                                                          10
 10
                                                                           0


  0                                                                      −10
  −8      −6       −4        −2       0       2        4       6     8     −8   −6       −4         −2       0        2          4   6     8


                                    (a)                                                                    (b)
          functions sampled from plugin approximation to posterior                            functions sampled from posterior
 50                                                                      100


 45

                                                                          80
 40


 35
                                                                          60

 30


 25                                                                       40


 20

                                                                          20
 15


 10
                                                                           0

  5


  0                                                                      −20
  −8      −6       −4        −2       0       2        4       6     8     −8   −6       −4         −2       0        2          4   6     8


                                     (c)                                                                   (d)

Figure 7.12 (a) Plug-in approximation to predictive density (we plug in the MLE of the parameters). (b)
Posterior predictive density, obtained by integrating out the parameters. Black curve is posterior mean,
error bars are 2 standard deviations of the posterior predictive density. (c) 10 samples from the plugin
approximation to posterior predictive. (d) 10 samples from the posterior predictive. Figure generated by
linregPostPredDemo.


      With this prior and likelihood, one can show that the posterior has the following form:
       p(w, σ 2 |D)          =       NIG(w, σ 2 |wN , VN , aN , bN )                                                                     (7.69)
               wN            =       VN (V0−1 w0 + XT y)                                                                                 (7.70)
                 VN          =       (V0−1 + XT X)−1                                                                                     (7.71)
                   aN        =       a0 + n/2                                                                                            (7.72)
                                          1  T −1                     −1
                                                                             
                   bN        =       b0 +    w 0 V0 w 0 + y T y − w N
                                                                    T
                                                                      VN  wN                                                             (7.73)
                                          2
The expressions for wN and VN are similar to the case where σ 2 is known. The expression for
aN is also intuitive, since it just updates the counts. The expression for bN can be interpreted
          236                                                                    Chapter 7. Linear regression


          as follows: it is the prior sum of squares, b0 , plus the empirical sum of squares, yT y, plus a
          term due to the error in the prior on w.
             The posterior marginals are as follows:
             p(σ 2 |D)     =       IG(aN , bN )                                                          (7.74)
                                           bN
                p(w|D)     =       T (wN ,     VN , 2aN )                                                (7.75)
                                           aN
          We give a worked example of using these equations in Section 7.6.3.3.
             By analogy to Section 4.6.3.6, the posterior predictive distribution is a Student T distribution.
          In particular, given m new test inputs X̃, we have
                                                    bN
             p(ỹ|X̃, D)       =     T (ỹ|X̃wN ,      (Im + X̃VN X̃T ), 2aN )                           (7.76)
                                                    aN
          The predictive variance has two components: (bN /aN )Im due to the measurement noise, and
          (bN /aN )X̃VN X̃T due to the uncertainty in w. This latter terms varies depending on how
          close the test inputs are to the training data.
             It is common to set a0 = b0 = 0, corresponding to an uninformative prior for σ 2 , and to set
          w0 = 0 and V0 = g(XT X)−1 for any positive value g. This is called Zellner’s g-prior (Zellner
          1986). Here g plays a role analogous to 1/λ in ridge regression. However, the prior covariance is
          proportional to (XT X)−1 rather than I. This ensures that the posterior is invariant to scaling
          of the inputs (Minka 2000b). See also Exercise 7.10.
             We will see below that if we use an uninformative prior, the posterior precision given N
                               −1
          measurements is VN       = XT X. The unit information prior is deﬁned to contain as much
          information as one sample (Kass and Wasserman 1995). To create a unit information prior for
          linear regression, we need to use V0−1 = N1 XT X, which is equivalent to the g-prior with
          g = N.

7.6.3.2   Uninformative prior
          An uninformative prior can be obtained by considering the uninformative limit of the conjugate
          g-prior, which corresponds to setting g = ∞. This is equivalent to an improper NIG prior with
          w0 = 0, V0 = ∞I, a0 = 0 and b0 = 0, which gives p(w, σ 2 ) ∝ σ −(D+2) .
             Alternatively, we can start with the semi-conjugate prior p(w, σ 2 ) = p(w)p(σ 2 ), and take
          each term to its uninformative limit individually, which gives p(w, σ 2 ) ∝ σ −2 . This is equivalent
          to an improper NIG prior with w0 = 0,V = ∞I, a0 = −D/2 and b0 = 0. The corresponding
          posterior is given by
             p(w, σ 2 |D)      =      NIG(w, σ 2 |wN , VN , aN , bN )                                    (7.77)
                                                        −1
                     wN        =      ŵmle = (X X) X y
                                                    T        T
                                                                                                         (7.78)
                     VN        =      (XT X)−1                                                           (7.79)
                                      N −D
                         aN    =                                                                         (7.80)
                                         2
                                      s2
                         bN    =                                                                         (7.81)
                                       2
                         s2          (y − Xŵmle )T (y − Xŵmle                                         (7.82)
          7.6. Bayesian linear regression                                                                      237

                                                    
                                 wj    E [wj |D]       var [wj |D]    95% CI             sig
                                 w0    10.998       3.06027           [4.652, 17.345]    *
                                 w1    -0.004       0.00156           [-0.008, -0.001]   *
                                 w2    -0.054       0.02190           [-0.099, -0.008]   *
                                 w3    0.068        0.09947           [-0.138, 0.274]
                                 w4    -1.294       0.56381           [-2.463, -0.124]   *
                                 w5    0.232        0.10438           [0.015, 0.448]     *
                                 w6    -0.357       1.56646           [-3.605, 2.892]
                                 w7    -0.237       1.00601           [-2.324, 1.849]
                                 w8    0.181        0.23672           [-0.310, 0.672]
                                 w9    -1.285       0.86485           [-3.079, 0.508]
                                 w10   -0.433       0.73487           [-1.957, 1.091]

          Table 7.2 Posterior mean, standard deviation and credible intervals for a linear regression model with an
          uninformative prior ﬁt to the caterpillar data. Produced by linregBayesCaterpillar.



          The marginal distribution of the weights is given by
                                      s2
             p(w|D) = T (w|ŵ,           C, N − D)                                                           (7.83)
                                    N −D
          where C = (XT X)−1 and ŵ is the MLE. We discuss the implications of these equations below.

7.6.3.3   An example where Bayesian and frequentist inference coincide *
          The use of a (semi-conjugate) uninformative prior is interesting because the resulting posterior
          turns out to be equivalent to the results from frequentist statistics (see also Section 4.6.3.9). In
          particular, from Equation 7.83 we have
                                       Cjj s2
             p(wj |D) = T (wj |ŵj ,          , N − D)                                                       (7.84)
                                       N −D
          This is equivalent to the sampling distribution of the MLE which is given by the following (see
          e.g., (Rice 1995, p542), (Casella and Berger 2002, p554)):
             wj − ŵj
                      ∼ tN −D                                                                                (7.85)
                sj
          where
                    
                        s2 Cjj
             sj =                                                                                            (7.86)
                        N −D
          is the standard error of the estimated parameter. (See Section 6.2 for a discussion of sampling
          distributions.) Consequently, the frequentist conﬁdence interval and the Bayesian marginal
          credible interval for the parameters are the same in this case.
             As a worked example of this, consider the caterpillar dataset from (Marin and Robert 2007).
          (The details of what the data mean don’t matter for our present purposes.) We can compute
        238                                                                               Chapter 7. Linear regression


        the posterior mean and standard deviation, and the 95% credible intervals (CI) for the regression
        coefficients using Equation 7.84. The results are shown in Table 7.2. It is easy to check that these
        95% credible intervals are identical to the 95% conﬁdence intervals computed using standard
        frequentist methods (see linregBayesCaterpillar for the code).
           We can also use these marginal posteriors to compute if the coefficients are “signiﬁcantly”
        different from 0. An informal way to do this (without using decision theory) is to check if its 95%
        CI excludes 0. From Table 7.2, we see that the CIs for coefficients 0, 1, 2, 4, 5 are all signiﬁcant
        by this measure, so we put a little star by them. It is easy to check that these results are the
        same as those produced by standard frequentist software packages which compute p-values at
        the 5% level.
           Although the correspondence between the Bayesian and frequentist results might seem ap-
        pealing to some readers, recall from Section 6.6 that frequentist inference is riddled with patholo-
        gies. Also, note that the MLE does not even exist when N < D, so standard frequentist inference
        theory breaks down in this setting. Bayesian inference theory still works, although it requires
        the use of proper priors. (See (Maruyama and George 2008) for one extension of the g-prior to
        the case where D > N .)

7.6.4   EB for linear regression (evidence procedure)
        So far, we have assumed the prior is known. In this section, we describe an empirical Bayes
        procedure for picking the hyper-parameters. More precisely, we choose η = (α, λ) to maximize
        the marignal likelihood, where λ = 1/σ 2 be the precision of the observation noise and α is
        the precision of the prior, p(w) = N (w|0, α−1 I). This is known as the evidence procedure
        (MacKay 1995b).3 See Section 13.7.4 for the algorithmic details.
           The evidence procedure provides an alternative to using cross validation. For example, in
        Figure 7.13(b), we plot the log marginal likelihood for different values of α, as well as the
        maximum value found by the optimizer. We see that, in this example, we get the same result
        as 5-CV, shown in Figure 7.13(a). (We kept λ = 1/σ 2 ﬁxed in both methods, to make them
        comparable.)
           The principle practical advantage of the evidence procedure over CV will become apparent
        in Section 13.7, where we generalize the prior by allowing a different αj for every feature. This
        can be used to perform feature selection, using a technique known as automatic relevancy
        determination or ARD. By contrast, it would not be possible to use CV to tune D different
        hyper-parameters.
           The evidence procedure is also useful when comparing different kinds of models, since it
        provides a good approximation to the evidence:
                            
            p(D|m) =             p(D|w, m)p(w|m, η)p(η|m)dwdη                                       (7.87)
                                
                       ≈ max p(D|w, m)p(w|m, η)p(η|m)dw                                             (7.88)
                                η

        It is important to (at least approximately) integrate over η rather than setting it arbitrarily, for
        reasons discussed in Section 5.3.2.5. Indeed, this is the method we used to evaluate the marginal
        3. Alternatively, we could integrate out λ analytically, as shown in Section 7.6.3, and just optimize α (Buntine and
        Weigend 1991). However, it turns out that this is less accurate than optimizing both α and λ (MacKay 1999).
7.6. Bayesian linear regression                                                                                   239

                      5−fold cross validation, ntrain = 21                               log evidence
          7
         10                                                          −50


          6
                                                                     −60
         10
                                                                     −70
          5
         10                                                          −80

          4                                                          −90
         10



   mse
                                                                     −100
          3
         10
                                                                     −110

          2                                                          −120
         10

                                                                     −130
          1
         10
                                                                     −140
          0
         10                                                          −150
          −25   −20     −15          −10          −5         0   5     −25   −20   −15      −10         −5   0    5
                                  log lambda                                              log alpha


                                  (a)                                                      (b)

Figure 7.13 (a) Estimate of test MSE produced by 5-fold cross-validation vs log(λ). The smallest value is
indicated by the vertical line. Note the vertical scale is in log units. (c) Log marginal likelihood vs log(α).
The largest value is indicated by the vertical line. Figure generated by linregPolyVsRegDemo.



likelihood for the polynomial regression models in Figures 5.7 and 5.8. For a “more Bayesian”
approach, in which we model our uncertainty about η rather than computing point estimates,
see Section 21.5.2.

Exercises
Exercise 7.1 Behavior of training set error with increasing sample size
The error on the test will always decrease as we get more training data, since the model will be better
estimated. However, as shown in Figure 7.10, for sufficiently complex models, the error on the training set
can increase we we get more training data, until we reach some plateau. Explain why.
Exercise 7.2 Multi-output linear regression
(Source: Jaakkola.)
When we have multiple independent outputs in linear regression, the model becomes
                       M
    p(y|x, W) =               N (yj |wjT xi , σj2 )                                                              (7.89)
                      j=1

Since the likelihood factorizes across dimensions, so does the MLE. Thus

    Ŵ = [ŵ1 , . . . , ŵM ]                                                                                    (7.90)

where ŵj = (XT X)−1 Y:,j .
In this exercise we apply this result to a model with 2 dimensional response vector yi ∈ R2 . Suppose we
have some binary input data, xi ∈ {0, 1}. The training data is as follows:
240                                                                                        Chapter 7. Linear regression


                                                             x   y
                                                             0   (−1, −1)T
                                                             0   (−1, −2)T
                                                             0   (−2, −1)T
                                                             1   (1, 1)T
                                                             1   (1, 2)T
                                                             1   (2, 1)T
Let us embed each xi into 2d using the following basis function:

     φ(0) = (1, 0)T , φ(1) = (0, 1)T                                                                              (7.91)
The model becomes
     ŷ = WT φ(x)                                                                                                 (7.92)
where W is a 2 × 2 matrix. Compute the MLE for W from the above data.
Exercise 7.3 Centering and ridge regression
Assume that x = 0, so the input data has been centered. Show that the optimizer of

     J(w, w0 )        =         (y − Xw − w0 1)T (y − Xw − w0 1) + λwT w                                          (7.93)
is
     ŵ0      =   y                                                                                               (7.94)
                        T              −1       T
      w       =   (X X + λI)                X y                                                                   (7.95)

Exercise 7.4 MLE for σ 2 for linear regression
Show that the MLE for the error variance in linear regression is given by
                  N
              1
     σ̂ 2 =             (yi − xTi ŵ)2                                                                            (7.96)
              N   i=1

This is just the empirical variance of the residual errors when we plug in our estimate of ŵ.
Exercise 7.5 MLE for the offset term in linear regression
Linear regression has the form E [y|x] = w0 + wT x. It is common to include a column of 1’s in the
design matrix, so we can solve for the offset term w0 term and the other parameters w at the same time
using the normal equations. However, it is also possible to solve for w and w0 separately. Show that
                   1                   1
     ŵ0      =                 yi −                xTi w = y − xT w                                              (7.97)
                   N        i
                                       N    i

So ŵ0 models the difference in the average output from the average predicted output. Also, show that
                               N                      −1  N                    
     ŵ = (XTc Xc )−1 XTc yc =                        (xi − x)(xi − x)T            (yi − y)(xi − x)               (7.98)
                                                i=1                          i=1

where Xc is the centered input matrix containing xci = xi − x along its rows, and yc = y − y is
the centered output vector. Thus we can ﬁrst compute ŵ on centered data, and then estimate w0 using
y − xT ŵ.
7.6. Bayesian linear regression                                                                                   241


Exercise 7.6 MLE for simple linear regression
Simple linear regression refers to the case where the input is scalar, so D = 1. Show that the MLE in
this case is given by the following equations, which may be familiar from basic statistics classes:
                                        
                  i (x
                    
                       i − x)(yi − ȳ)     i x i yi − N x y   cov [X, Y ]
    w1 =                               =        2       2  ≈                                        (7.99)
                        i (x i − x̄) 2        x
                                             i i   − N x       var [X]
    w0 = ȳ − w1 x̄ ≈ E [Y ] − w1 E [X]                                                             (7.100)
See linregDemo1 for a demo.
Exercise 7.7 Sufficient statistics for online linear regression
(Source: Jaakkola.) Consider ﬁtting the model ŷ = w0 + w1 x using least squares. Unfortunately we did
not keep the original data, xi , yi , but we do have the following functions (statistics) of the data:
                     n                       n
                1                        1
    x(n)   =              xi , y (n) =             yi                                                          (7.101)
                n   i=1
                                         n   i=1
                     n                                  n                                    n
    (n)         1                                   1                                    1
   Cxx     =              (xi − x)2 , Cxy
                                       (n)
                                           =                                     (n)
                                                              (xi − x)(yi − y), Cyy  =             (yi − y)2   (7.102)
                n   i=1
                                                    n   i=1
                                                                                         n   i=1


a. What are the minimal set of statistics that we need to estimate w1 ? (Hint: see Equation 7.99.)
b. What are the minimal set of statistics that we need to estimate w0 ? (Hint: see Equation 7.97.)
c. Suppose a new data point, xn+1 , yn+1 arrives, and we want to update our sufficient statistics without
   looking at the old data, which we have not stored. (This is useful for online learning.) Show that we
   can this for x as follows.
                                          1  (n)             
                              n+1
                         1
      x(n+1)                     xi =          nx + xn+1                                          (7.103)
                      n + 1 i=1        n+1
                                 1
                 =       x(n) +      (xn+1 − x(n) )                                                 (7.104)
                               n+1
   This has the form: new estimate is old estimate plus correction. We see that the size of the correction
   diminishes over time (i.e., as we get more samples). Derive a similar expression to update y
                                   (n+1)
d. Show that one can update Cxy           recursively using
         (n+1)            1                       (n)
                                                                                               
       Cxy         =              xn+1 yn+1 + nCxy     + nx(n) y (n) − (n + 1)x(n+1) y (n+1)        (7.105)
                        n+1
   Derive a similar expression to update Cxx .
e. Implement the online learning algorithm, i.e., write a function of the form [w,ss] = linregUpdateSS(ss,
   x, y), where x and y are scalars and ss is a structure containing the sufficient statistics.
f. Plot the coefficients over “time”, using the dataset in linregDemo1. (Speciﬁcally, use [x,y] =
   polyDataMake(’sampling’,’thibaux’).) Check that they converge to the solution given by the
   batch (offline) learner (i.e, ordinary least squares). Your result should look like Figure 7.14.

Turn in your derivation, code and plot.
Exercise 7.8 Bayesian linear regression in 1d with known σ 2
(Source: Bolstad.) Consider ﬁtting a model of the form

   p(y|x, θ) = N (y|w0 + w1 x, σ 2 )                                                                           (7.106)
to the data shown below:
242                                                                                                   Chapter 7. Linear regression

                                                           online linear regression
                                               3
                                                                                           w0
                                               2                                           w1
                                                                                           w0 batch
                                                                                           w1 batch
                                               1

                                               0

                                              −1




                                    weights
                                              −2

                                              −3

                                              −4

                                              −5

                                              −6
                                                   0   5          10                  15     20
                                                                    time




                    Figure 7.14 Regression coefficients over time. Produced by Exercise 7.7.



x = [94,96,94,95,104,106,108,113,115,121,131];
y = [0.47, 0.75, 0.83, 0.98, 1.18, 1.29, 1.40, 1.60, 1.75, 1.90, 2.23];

a. Compute an unbiased estimate of σ 2 using
                         N
                  1
       σ̂ 2 =                  (yi − ŷi )2                                                                                 (7.107)
                N −2     i=1

   (The denominator is N −2 since we have 2 inputs, namely the offset term and x.) Here ŷi = ŵ0 + ŵ1 xi ,
   and ŵ = (ŵ0 , ŵ1 ) is the MLE.
b. Now assume the following prior on w:
       p(w) = p(w0 )p(w1 )                                                                                                  (7.108)
   Use an (improper) uniform prior on w0 and a N (0, 1) prior on w1 . Show that this can be written as
   a Gaussian prior of the form p(w) = N (w|w0 , V0 ). What are w0 and V0 ?
                                                              2                                     2
c. Compute the marginal posterior of the slope, p(w                                    above, and σ is the
                                                     1 |D, σ2 ), where D is the data
                                                                                    2
   unbiased estimate computed above. What is E w1 |D, σ and var w1 |D, σ Show your work. (You
   can use Matlab if you like.) Hint: the posterior variance is a very small number!
d. What is a 95% credible interval for w1 ?

Exercise 7.9 Generative model for linear regression
Linear regression is the problem of estimating E[Y |x] using a linear function of the form w0 + wT x.
Typically we assume that the conditional distribution of Y given X is Gaussian. We can either estimate this
conditional Gaussian directly (a discriminative approach), or we can ﬁt a Gaussian to the joint distribution
of X, Y and then derive E[Y |X = x].
In Exercise 7.5 we showed that the discriminative approach leads to these equations

   E[Y |x]      =     w0 + w T x                                                                                            (7.109)
                               T
        w0      =     y−x w                                                                                                 (7.110)
         w      =     (XTc Xc )−1 XTc yc                                                                                     (7.111)
7.6. Bayesian linear regression                                                                         243


where Xc = X − X̄ is the centered input matrix, and X̄ = 1n xT replicates x across the rows. Similarly,
yc = y − y is the centered output vector, and y = 1n y replicates y across the rows.

a. By ﬁnding the maximum likelihood estimates of ΣXX , ΣXY , μX and μY , derive the above equations
   by ﬁtting a joint Gaussian to X, Y and using the formula for conditioning a Gaussian (see Section 4.3.1).
   Show your work.
b. What are the advantages and disadvantages of this approach compared to the standard discriminative
   approach?

Exercise 7.10 Bayesian linear regression using the g-prior
Show that when we use the g-prior, p(w, σ 2 ) = NIG(w, σ 2 |0, g(XT X)−1 , 0, 0), the posterior has the
following form:

   p(w, σ 2 |D)   =    NIG(w, σ 2 |wN , VN , aN , bN )                                                (7.112)
                         g
           VN     =        (XT X)−1                                                                   (7.113)
                       g+1
                         g
           wN     =        ŵmle                                                                      (7.114)
                       g+1
            aN    =    N/2                                                                            (7.115)
                        2
                       s       1      T
            bN    =      +          ŵmle XT Xŵmle                                                   (7.116)
                       2   2(g + 1)
                                                                                                      (7.117)
8     Logistic regression



8.1   Introduction
      One way to build a probabilistic classiﬁer is to create a joint model of the form p(y, x) and
      then to condition on x, thereby deriving p(y|x). This is called the generative approach. An
      alternative approach is to ﬁt a model of the form p(y|x) directly. This is called the discrimi-
      native approach, and is the approach we adopt in this chapter. In particular, we will assume
      discriminative models which are linear in the parameters. This will turn out to signiﬁcantly sim-
      plify model ﬁtting, as we will see. In Section 8.6, we compare the generative and discriminative
      approaches, and in later chapters, we will consider non-linear and non-parametric discriminative
      models.

8.2   Model speciﬁcation
      As we discussed in Section 1.4.6, logistic regression corresponds to the following binary classiﬁ-
      cation model:
         p(y|x, w) = Ber(y|sigm(wT x))                                                              (8.1)

         A 1d example is shown in Figure 1.19(b). Logistic regression can easily be extended to higher-
      dimensional inputs. For example, Figure 8.1 shows plots of p(y = 1|x, w) = sigm(wT x) for
      2d input and different weight vectors w. If we threshold these probabilities at 0.5, we induce a
      linear decision boundary, whose normal (perpendicular) is given by w.

8.3   Model ﬁtting
      In this section, we discuss algorithms for estimating the parameters of a logistic regression
      model.
        246                                                                                                                                                Chapter 8. Logistic regression




                                                                                                  W=(1,4)                                                                 W=(5,4)

                     5                                                  w2
                                                                                         1                                                                            1
                                                                                       0.5                                                                          0.5
                                              W = ( −2 , 3 )                             0                                                                            0
                                                                                       −10                                  10                                      −10                      10
                     4                    1
                                                                                                  0
                                                                                                  x1    10 −10
                                                                                                                   0
                                                                                                                  x2
                                                                                                                                                                          0
                                                                                                                                                                          x1   10 −10
                                                                                                                                                                                        0
                                                                                                                                                                                        x2
                                        0.5
                                          0
                                                                               W=(0,2)                                 W=(2,2)
                                        −10                        10
                     3                         0
                                                x1   10 −10
                                                              0
                                                              x2          1
                                                                         0.5
                                                                                                              1
                                                                                                            0.5
                                                                          0                                   0
                                                                                                                                                                          W=(5,1)
                                                                        −10                            10   −10                                 10
                     2                                                         0
                                                                               x1   10 −10
                                                                                             0
                                                                                             x2
                                                                                                                       0
                                                                                                                       x1    10 −10
                                                                                                                                       0
                                                                                                                                       x2                             1
                                                                                                                                                                    0.5
                                                                                                  W=(1,0)                                   W=(3,0)                   0
                                                                                                                                                                    −10                      10
                     1                                                                   1
                                                                                       0.5
                                                                                                                                   1
                                                                                                                                 0.5
                                                                                                                                                                          0
                                                                                                                                                                          x1   10 −10
                                                                                                                                                                                        0
                                                                                                                                                                                        x2
                                              W = ( −2 , −1 )                            0                                         0
                                                                                       −10                                  10   −10                           10
                     0                    1
                                        0.5
                                                                                                  0
                                                                                                  x1    10 −10
                                                                                                                   0
                                                                                                                  x2               x1
                                                                                                                                            0
                                                                                                                                                 10 −10
                                                                                                                                                          0
                                                                                                                                                          x2                   w1
                                          0
                                                                                                                    W = ( 2 , −2 )
                                        −10                        10
                   −1                          0
                                                x1   10 −10
                                                              0
                                                              x2                                              1
                                                                                                            0.5
                                                                                                              0
                                                                                                            −10                                 10
                   −2                                                                                                  0
                                                                                                                       x1    10 −10
                                                                                                                                       0
                                                                                                                                       x2


                   −3

                             −3     −2                 −1                  0             1                    2                    3                  4               5             6



        Figure 8.1 Plots of sigm(w1 x1 + w2 x2 ). Here w = (w1 , w2 ) deﬁnes the normal to the decision
        boundary. Points to the right of this have sigm(wT x) > 0.5, and points to the left have sigm(wT x) <
        0.5. Based on Figure 39.3 of (MacKay 2003). Figure generated by sigmoidplot2D.



8.3.1   MLE
        The negative log-likelihood for logistic regression is given by

                                  
                                  N
                                                      I(yi =1)
           NLL(w)        =   −          log[μi                          × (1 − μi )I(yi =0) ]                                                                                                     (8.2)
                                  i=1
                                  
                                  N
                         =   −          [yi log μi + (1 − yi ) log(1 − μi )]                                                                                                                      (8.3)
                                  i=1

        This is also called the cross-entropy error function (see Section 2.8.2).
          Another way of writing this is as follows. Suppose ỹi ∈ {−1, +1} instead of yi ∈ {0, 1}. We
                                 1                              1
        have p(y = 1) = 1+exp(−w     T x) and p(y = 1) = 1+exp(+wT x) . Hence



                         
                         N
           N LL(w) =           log(1 + exp(−ỹi wT xi ))                                                                                                                                          (8.4)
                         i=1

          Unlike linear regression, we can no longer write down the MLE in closed form. Instead, we
        need to use an optimization algorithm to compute it. For this, we need to derive the gradient
        and Hessian.
          In the case of logistic regression, one can show (Exercise 8.3) that the gradient and Hessian
        8.3. Model ﬁtting                                                                                      247


                      3                                              3


                     2.5                                            2.5


                      2                                              2


                     1.5                                            1.5


                      1                                              1


                     0.5                                            0.5


                      0                                              0


                    −0.5                                           −0.5
                           0   0.5     1     1.5     2                    0   0.5     1     1.5     2




                                     (a)                                            (b)

        Figure 8.2 Gradient descent on a simple function, starting from (0, 0), for 20 steps, using a ﬁxed
        learning rate (step size) η. The global minimum is at (1, 1). (a) η = 0.1. (b) η = 0.6. Figure generated by
        steepestDescentDemo.



        of this are given by the following
                       d         
            g   =        f (w) =    (μi − yi )xi = XT (μ − y)                                                 (8.5)
                      dw         i
                       d                          
           H    =        g(w)T =     (∇w μi )xTi =     μi (1 − μi )xi xTi                                     (8.6)
                      dw           i                i
                =     XT SX                                                                                   (8.7)

        where S  diag(μi (1 − μi )). One can also show (Exercise 8.3) that H is positive deﬁnite.
        Hence the NLL is convex and has a unique global minimum. Below we discuss some methods
        for ﬁnding this minimum.

8.3.2   Steepest descent
        Perhaps the simplest algorithm for unconstrained optimization is gradient descent, also known
        as steepest descent. This can be written as follows:

           θ k+1 = θ k − ηk gk                                                                                (8.8)

        where ηk is the step size or learning rate. The main issue in gradient descent is: how should
        we set the step size? This turns out to be quite tricky. If we use a constant learning rate, but
        make it too small, convergence will be very slow, but if we make it too large, the method can fail
        to converge at all. This is illustrated in Figure 8.2. where we plot the following (convex) function
           f (θ) = 0.5(θ12 − θ2 )2 + 0.5(θ1 − 1)2 ,                                                           (8.9)

        We arbitrarily decide to start from (0, 0). In Figure 8.2(a), we use a ﬁxed step size of η = 0.1; we
        see that it moves slowly along the valley. In Figure 8.2(b), we use a ﬁxed step size of η = 0.6; we
        see that the algorithm starts oscillating up and down the sides of the valley and never converges
        to the optimum.
248                                                                        Chapter 8. Logistic regression


                                   exact line searching 1
              3


             2.5


              2


             1.5


              1


             0.5


              0


            −0.5
                   0         0.5             1              1.5   2




                                          (a)                                     (b)

Figure 8.3 (a) Steepest descent on the same function as Figure 8.2, starting from (0, 0), using line search.
Figure generated by steepestDescentDemo. (b) Illustration of the fact that at the end of a line search
(top of picture), the local gradient of the function will be perpendicular to the search direction. Based on
Figure 10.6.1 of (Press et al. 1988).



   Let us develop a more stable method for picking the step size, so that the method is guaran-
teed to converge to a local optimum no matter where we start. (This property is called global
convergence, which should not be confused with convergence to the global optimum!) By
Taylor’s theorem, we have
   f (θ + ηd) ≈ f (θ) + ηgT d                                                                         (8.10)
where d is our descent direction. So if η is chosen small enough, then f (θ + ηd) < f (θ), since
the gradient will be negative. But we don’t want to choose the step size η too small, or we will
move very slowly and may not reach the minimum. So let us pick η to minimize
   φ(η) = f (θ k + ηdk )                                                                              (8.11)
This is called line minimization or line search. There are various methods for solving this 1d
optimization problem; see (Nocedal and Wright 2006) for details.
   Figure 8.3(a) demonstrates that line search does indeed work for our simple problem. However,
we see that the steepest descent path with exact line searches exhibits a characteristic zig-zag
behavior. To see why, note that an exact line search satisﬁes ηk = arg minη>0 φ(η). A
necessary condition for the optimum is φ (η) = 0. By the chain rule, φ (η) = dT g, where
g = f  (θ + ηd) is the gradient at the end of the step. So we either have g = 0, which means
we have found a stationary point, or g ⊥ d, which means that exact search stops at a point
where the local gradient is perpendicular to the search direction. Hence consecutive directions
will be orthogonal (see Figure 8.3(b)). This explains the zig-zag behavior.
   One simple heuristic to reduce the effect of zig-zagging is to add a momentum term, (θ k −
θ k−1 ), as follows:
   θ k+1    =          θ k − ηk gk + μk (θ k − θ k−1 )                                                (8.12)
        8.3. Model ﬁtting                                                                          249


        where 0 ≤ μk ≤ 1 controls the importance of the momentum term. In the optimization
        community, this is known as the heavy ball method (see e.g., (Bertsekas 1999)).
           An alternative way to minimize “zig-zagging” is to use the method of conjugate gradients
        (see e.g., (Nocedal and Wright 2006, ch 5) or (Golub and van Loan 1996, Sec 10.2)). This is the
        method of choice for quadratic objectives of the form f (θ) = θ T Aθ, which arise when solving
        linear systems. However, non-linear CG is less popular.

8.3.3   Newton’s method

         Algorithm 8.1: Newton’s method for minimizing a strictly convex function
        1   Initialize θ 0 ;
        2   for k = 1, 2, . . . until convergence do
        3        Evaluate gk = ∇f (θ k );
        4        Evaluate Hk = ∇2 f (θ k );
        5        Solve Hk dk = −gk for dk ;
        6        Use line search to ﬁnd stepsize ηk along dk ;
        7        θ k+1 = θ k + ηk dk ;


           One can derive faster optimization methods by taking the curvature of the space (i.e., the
        Hessian) into account. These are called second order optimization metods. The primary
        example is Newton’s algorithm. This is an iterative algorithm which consists of updates of the
        form
            θ k+1 = θ k − ηk H−1
                              k gk                                                                (8.13)
        The full pseudo-code is given in Algorithm 2.
          This algorithm can be derived as follows. Consider making a second-order Taylor series
        approximation of f (θ) around θ k :
                                             1
            fquad (θ) = fk + gkT (θ − θ k ) + (θ − θ k )T Hk (θ − θ k )                           (8.14)
                                             2
        Let us rewrite this as
            fquad (θ) = θ T Aθ + bT θ + c                                                         (8.15)
        where
                  1                                          1
            A=      Hk , b = gk − Hk θ k , c = fk − gkT θ k + θ Tk Hk θ k                         (8.16)
                  2                                          2
        The minimum of fquad is at
                 1
            θ = − A−1 b = θ k − H−1
                                 k gk                                                             (8.17)
                 2
        Thus the Newton step dk = −H−1  k gk is what should be added to θ k to minimize the second
        order approximation of f around θ k . See Figure 8.4(a) for an illustration.
        250                                                                      Chapter 8. Logistic regression


                                                          f(x)        f(x)
                                                          f    (x)    f    (x)
                                                          quad         quad




                           x             x +d                                           x       x +d
                               k         k   k                                              k   k   k


                                   (a)                                           (b)

        Figure 8.4 Illustration of Newton’s method for minimizing a 1d function. (a) The solid curve is the
        function f (x). The dotted line fquad (x) is its second order approximation at xk . The Newton step dk
        is what must be added to xk to get to the minimum of fquad (x). Based on Figure 13.4 of (Vandenberghe
        2006). Figure generated by newtonsMethodMinQuad. (b) Illustration of Newton’s method applied to a
        nonconvex function. We ﬁt a quadratic around the current point xk and move to its stationary point,
        xk+1 = xk + dk . Unfortunately, this is a local maximum, not minimum. This means we need to be careful
        about the extent of our quadratic approximation. Based on Figure 13.11 of (Vandenberghe 2006). Figure
        generated by newtonsMethodNonConvex.


           In its simplest form (as listed), Newton’s method requires that Hk be positive deﬁnite, which
        will hold if the function is strictly convex. If not, the objective function is not convex, then
        Hk may not be positive deﬁnite, so dk = −H−1         k gk may not be a descent direction (see
        Figure 8.4(b) for an example). In this case, one simple strategy is to revert to steepest descent,
        dk = −gk . The Levenberg Marquardt algorithm is an adaptive way to blend between Newton
        steps and steepest descent steps. This method is widely used when solving nonlinear least
        squares problems. An alternative approach is this: Rather than computing dk = −H−1          k gk
        directly, we can solve the linear system of equations Hk dk = −gk for dk using conjugate
        gradient (CG). If Hk is not positive deﬁnite, we can simply truncate the CG iterations as soon
        as negative curvature is detected; this is called truncated Newton.

8.3.4   Iteratively reweighted least squares (IRLS)
        Let us now apply Newton’s algorithm to ﬁnd the MLE for binary logistic regression. The Newton
        update at iteration k + 1 for this model is as follows (using ηk = 1, since the Hessian is exact):
           wk+1     =    wk − H−1 gk                                                                     (8.18)
                                                     −1
                    =    wk + (X Sk X) X (y − μk )
                                   T                         T
                                                                                                         (8.19)
                                    
                    =    (XT Sk X)−1 (XT Sk X)wk + XT (y − μk )                                          (8.20)
                                       −1
                    =    (X Sk X) X [Sk Xwk + y − μk ]
                               T                 T
                                                                                                          (8.21)
                    =    (XT Sk X)−1 XT Sk zk                                                            (8.22)
        where we have deﬁned the working response as
           zk  Xwk + S−1
                       k (y − μk )                                                                       (8.23)
        8.3. Model ﬁtting                                                                           251


        Equation 8.22 is an example of a weighted least squares problem, which is a minimizer of
             
             N
                   Ski (zki − wT xi )2                                                            (8.24)
             i=1

        Since Sk is a diagonal matrix, we can rewrite the targets in component form (for each case
        i = 1 : N ) as
                            yi − μki
           zki = wkT xi +                                                                    (8.25)
                          μki (1 − μki )
        This algorithm is known as iteratively reweighted least squares or IRLS for short, since at
        each iteration, we solve a weighted least squares problem, where the weight matrix Sk changes
        at each iteration. See Algorithm 10 for some pseudocode.

         Algorithm 8.2: Iteratively reweighted least squares (IRLS)
         1   w = 0D ;
        2    w0 = log(y/(1 − y));
        3    repeat
        4       η i = w0 + w T x i ;
        5       μi = sigm(ηi );
        6       si = μi (1 − μi ) ;
        7       zi = ηi + yi −μ
                              si
                                 i
                                   ;
        8       S = diag(s1:N ) ;
        9       w = (XT SX)−1 XT Sz;
        10   until converged;



8.3.5   Quasi-Newton (variable metric) methods
        The mother of all second-order optimization algorithm is Newton’s algorithm, which we dis-
        cussed in Section 8.3.3. Unfortunately, it may be too expensive to compute H explicitly. Quasi-
        Newton methods iteratively build up an approximation to the Hessian using information gleaned
        from the gradient vector at each step. The most common method is called BFGS (named after
        its inventors, Broyden, Fletcher, Goldfarb and Shanno), which updates the approximation to the
        Hessian Bk ≈ Hk as follows:
                                  yk ykT   (Bk sk )(Bk sk )T
             Bk+1      =   Bk +          −                                                        (8.26)
                                  yk sk
                                    T          sTk Bk sk
                sk     =   θ k − θ k−1                                                            (8.27)
                yk     =   gk − gk−1                                                              (8.28)
        This is a rank-two update to the matrix, and ensures that the matrix remains positive deﬁnite
        (under certain restrictions on the step size). We typically start with a diagonal approximation,
        B0 = I. Thus BFGS can be thought of as a “diagonal plus low-rank” approximation to the
        Hessian.
        252                                                                 Chapter 8. Logistic regression


           Alternatively, BFGS can iteratively update an approximation to the inverse Hessian, Ck ≈ H−1
                                                                                                      k ,
        as follows:
                                            
                                sk y T             y k sT     sk sT
            Ck+1 =          I − T k Ck I − T k + T k                                                (8.29)
                                y k sk             yk sk      yk sk

           Since storing the Hessian takes O(D2 ) space, for very large problems, one can use limited
        memory BFGS, or L-BFGS, where Hk or H−1      k   is approximated by a diagonal plus low rank
        matrix. In particular, the product H−1
                                            k  gk can  be  obtained by performing a sequence of inner
        products with sk and yk , using only the m most recent (sk , yk ) pairs, and ignoring older
        information. The storage requirements are therefore O(mD). Typically m ∼ 20 suffices for
        good performance. See (Nocedal and Wright 2006, p177) for more information. L-BFGS is
        often the method of choice for most unconstrained smooth optimization problems that arise in
        machine learning (although see Section 8.5).

8.3.6    2    regularization
        Just as we prefer ridge regression to linear regression, so we should prefer MAP estimation for
        logistic regression to computing the MLE. In fact, regularization is important in the classiﬁcation
        setting even if we have lots of data. To see why, suppose the data is linearly separable. In
        this case, the MLE is obtained when ||w|| → ∞, corresponding to an inﬁnitely steep sigmoid
        function, I(wT x > w0 ), also known as a linear threshold unit. This assigns the maximal
        amount of probability mass to the training data. However, such a solution is very brittle and
        will not generalize well.
           To prevent this, we can use 2 regularization, just as we did with ridge regression. We note
        that the new objective, gradient and Hessian have the following forms:
              f  (w)   =   NLL(w) + λwT w                                                           (8.30)
              g (w)    =   g(w) + λw                                                                 (8.31)
             H (w)     =   H(w) + λI                                                                (8.32)

        It is a simple matter to pass these modiﬁed equations into any gradient-based optimizer.

8.3.7   Multi-class logistic regression
        Now we consider multinomial logistic regression, sometimes called a maximum entropy
        classiﬁer. This is a model of the form
                                  exp(wcT x)
             p(y = c|x, W) =     C
                                                                                                     (8.33)
                                 c =1   exp(wcT x)
        A slight variant, known as a conditional logit model, normalizes over a different set of classes
        for each data case; this can be useful for modeling choices that users make between different
        sets of items that are offered to them.
           Let us now introduce some notation. Let μic = p(yi = c|xi , W) = S(η i )c , where η i =
        WT xi is a C × 1 vector. Also, let yic = I(yi = c) be the one-of-C encoding of yi ; thus yi is a
        bit vector, in which the c’th bit turns on iff yi = c. Following (Krishnapuram et al. 2005), let us
8.3. Model ﬁtting                                                                              253


set wC = 0, to ensure identiﬁability, and deﬁne w = vec(W(:, 1 : C − 1)) to be a D × (C − 1)
column vector.
   With this, the log-likelihood can be written as
                      N 
                       C                      N 
                                                C
   (W)     =   log                 μyicic =             yic log μic                         (8.34)
                      i=1 c=1                  i=1 c=1
                                                                                    
                
                N             
                              C                               
                                                              C
            =                       yic wcT xi    − log              exp(wcT xi )           (8.35)
                i=1           c=1                            c =1

Deﬁne the NLL as

   f (w) = −(w)                                                                             (8.36)
We now proceed to compute the gradient and Hessian of this expression. Since w is block-
structured, the notation gets a bit heavy, but the ideas are simple. It helps to deﬁne A ⊗ B
be the kronecker product of matrices A and B. If A is an m × n matrix and B is a p × q
matrix, then A × B is the mp × nq block matrix
              ⎡                      ⎤
                a11 B · · · a1n B
              ⎢                  .. ⎥
   A ⊗ B = ⎣ ...         ..
                            .     . ⎦                                                   (8.37)
                am1 B         ···      amn B
  Returning to the task at hand, one can show (Exercise 8.4) that the gradient is given by

                              
                              N
   g(W) = ∇f (w) =                  (μi − yi ) ⊗ xi                                          (8.38)
                              i=1

where yi = (I(yi = 1), . . . , I(yi = C − 1)) and μi (W) = [p(yi = 1|xi , W), . . . , p(yi =
C − 1|xi , W)] are column vectors of length C − 1, For example, if we have D = 3 feature
dimensions and C = 3 classes, this becomes
                ⎛                 ⎞
                  (μi1 − yi1 )xi1
                ⎜(μi1 − yi1 )xi2 ⎟
            ⎜  ⎜(μi1 − yi1 )xi3 ⎟
                                  ⎟
   g(W) =       ⎜                 ⎟                                                     (8.39)
                ⎜(μi2 − yi2 )xi1 ⎟
             i ⎜                  ⎟
                ⎝(μi2 − yi2 )xi2 ⎠
                  (μi2 − yi2 )xi3
In other words, for each class c, the derivative for the weights in the c’th column is
                      
   ∇wc f (W) =           (μic − yic )xi                                                      (8.40)
                          i

This has the same form as in the binary logistic regression case, namely an error term times xi .
(This turns out to be a general property of distributions in the exponential family, as we will see
in Section 9.3.2.)
      254                                                                      Chapter 8. Logistic regression


        One can also show (Exercise 8.4) that the Hessian is the following block structured D(C −
      1) × D(C − 1) matrix:
                                     
                                     N
         H(W)      =    ∇2 f (w) =         (diag(μi ) − μi μTi ) ⊗ (xi xTi )                            (8.41)
                                     i=1

      For example, if we have 3 features and 3 classes, this becomes
                                                         ⎛                                ⎞
                        μi1 − μ2        −μi1 μi2
                                                           xi1 xi1 xi1 xi2        xi1 xi3
         H(W) =                      i1              ⊗   ⎝ xi2 xi1 xi2 xi2        xi2 xi3 ⎠            (8.42)
                             −μi1 μi2 μi2 − μ2i2
                        i                                  xi3 xi1 xi3 xi2        xi3 xi3
                        (μi1 − μ2 )Xi        −μi1 μi2 Xi
                  =                   i1                                                               (8.43)
                              −μi1 μi2 Xi     (μi2 − μ2i2 )Xi
                         i

      where Xi = xi xTi . In other words, the block c, c submatrix is given by
                           
        Hc,c (W) =            μic (δc,c − μi,c )xi xTi                                              (8.44)
                             i

      This is also a positive deﬁnite matrix, so there is a unique MLE.
        Now consider minimizing
        f  (W)  − log p(D|w) − log p(W)                                                   (8.45)
                    '
      where p(W) = c N (wc |0, V0 ). The new objective, its gradient and Hessian are given by
                              1
         f  (W) = f (W) +          wc V0−1 wc                                             (8.46)
                              2 c
                                    
         g (W) = g(W) + V0−1 (        wc )                                                 (8.47)
                                            c
         H (W)     =   H(W) + IC ⊗ V0−1                                                               (8.48)
      This can be passed to any gradient-based optimizer to ﬁnd the MAP estimate. Note, however,
      that the Hessian has size O ((CD) × (CD)), which is C times more row and columns than
      in the binary case, so limited memory BFGS is more appropriate than Newton’s method. See
      logregFit for some Matlab code.

8.4   Bayesian logistic regression
      It is natural to want to compute the full posterior over the parameters, p(w|D), for logistic
      regression models. This can be useful for any situation where we want to associate conﬁdence
      intervals with our predictions (e.g., this is necessary when solving contextual bandit problems,
      discussed in Section 5.7.3.1).
         Unfortunately, unlike the linear regression case, this cannot be done exactly, since there is no
      convenient conjugate prior for logistic regression. We discuss one simple approximation below;
      some other approaches include MCMC (Section 24.3.3.1), variational inference (Section 21.8.1.1),
      expectation propagation (Kuss and Rasmussen 2005), etc. For notational simplicity, we stick to
      binary logistic regression.
        8.4. Bayesian logistic regression                                                          255


8.4.1   Laplace approximation
        In this section, we discuss how to make a Gaussian approximation to a posterior distribution.
        The approximation works as follows. Suppose θ ∈ RD . Let
                       1 −E(θ)
           p(θ|D) =      e                                                                       (8.49)
                       Z
        where E(θ) is called an energy function, and is equal to the negative log of the unnormal-
        ized log posterior, E(θ) = − log p(θ, D), with Z = p(D) being the normalization constant.
        Performing a Taylor series expansion around the mode θ ∗ (i.e., the lowest energy state) we get
                                           1
           E(θ) ≈ E(θ ∗ ) + (θ − θ ∗ )T g + (θ − θ ∗ )T H(θ − θ ∗ )                              (8.50)
                                           2
        where g is the gradient and H is the Hessian of the energy function evaluated at the mode:
                    (         ∂ 2 E(θ)
           g  ∇E(θ)(θ∗ , H           |θ ∗                                                       (8.51)
                              ∂θ∂θ T
        Since θ ∗ is the mode, the gradient term is zero. Hence
                                                                     
                             1 −E(θ∗ )          1
              p̂(θ|D) ≈        e        exp − (θ − θ ∗ )T H(θ − θ ∗ )                            (8.52)
                             Z                  2
                         =   N (θ|θ ∗ , H−1 )                                                    (8.53)
                             
                                                 ∗               1
           Z = p(D)      ≈      p̂(θ|D)dθ = e−E(θ ) (2π)D/2 |H|− 2                               (8.54)

        The last line follows from normalization constant of the multivariate Gaussian.
           Equation 8.54 is known as the Laplace approximation to the marginal likelihood. Therefore
        Equation 8.52 is sometimes called the the Laplace approximation to the posterior. However,
        in the statistics community, the term “Laplace approximation” refers to a more sophisticated
        method (see e.g. (Rue et al. 2009) for details). It may therefore be better to use the term
        “Gaussian approximation” to refer to Equation 8.52. A Gaussian approximation is often a
        reasonable approximation, since posteriors often become more “Gaussian-like” as the sample
        size increases, for reasons analogous to the central limit theorem. (In physics, there is an
        analogous technique known as a saddle point approximation.)

8.4.2   Derivation of the BIC
        We can use the Gaussian approximation to write the log marginal likelihood as follows, dropping
        irrelevant constants:
                                                      1
           log p(D) ≈ log p(D|θ ∗ ) + log p(θ ∗ ) −     log |H|                                  (8.55)
                                                      2
        The penalization terms which are added to the log p(D|θ ∗ ) are sometimes called the Occam
        factor, and are a measure of model complexity. If we have a uniform prior, p(θ) ∝ 1, we can
        drop the second term, and replace θ ∗ with the MLE, θ̂.
        256                                                                  Chapter 8. Logistic regression

                                                                                     N
         We now focus on approximating the third term. We have H =           i=1 Hi , where Hi =
        ∇∇ log p(Di |θ). Let us approximate each Hi by a ﬁxed matrix Ĥ. Then we have
           log |H| = log |N Ĥ| = log(N d |Ĥ|) = D log N + log |Ĥ|                                  (8.56)
        where D = dim(θ) and we have assumed H is full rank. We can drop the log |Ĥ| term, since
        it is independent of N , and thus will get overwhelmed by the likelihood. Putting all the pieces
        together, we recover the BIC score (Section 5.3.2.4):
                                       D
           log p(D) ≈ log p(D|θ̂) −      log N                                                        (8.57)
                                       2

8.4.3   Gaussian approximation for logistic regression
        Now let us apply the Gaussian approximation to logistic regression. We will use a a Gaussian
        prior of the form p(w) = N (w|0, V0 ), just as we did in MAP estimation. The approximate
        posterior is given by
           p(w|D)     ≈   N (w|ŵ, H−1 )                                                              (8.58)
        where ŵ = arg minw E(w), E(w) = −(log p(D|w) + log p(w)), and H = ∇2 E(w)|ŵ .
           As an example, consider the linearly separable 2D data in Figure 8.5(a). There are many
        parameter settings that correspond to lines that perfectly separate the training data; we show 4
        examples. The likelihood surface is shown in Figure 8.5(b), where we see that the likelihood is
        unbounded as we move up and to the right in parameter space, along a ridge where w2 /w1 =
        2.35 (this is indicated by the diagonal line). The reasons for this is that we can maximize the
        likelihood by driving ||w|| to inﬁnity (subject to being on this line), since large regression weights
        make the sigmoid function very steep, turning it into a step function. Consequently the MLE is
        not well deﬁned when the data is linearly separable.
           To regularize the problem, let us use a vague spherical prior centered at the origin, N (w|0, 100I).
        Multiplying this spherical prior by the likelihood surface results in a highly skewed posterior,
        shown in Figure 8.5(c). (The posterior is skewed because the likelihood function “chops off”
        regions of parameter space (in a “soft” fashion) which disagree with the data.) The MAP estimate
        is shown by the blue dot. Unlike the MLE, this is not at inﬁnity.
           The Gaussian approximation to this posterior is shown in Figure 8.5(d). We see that this is
        a symmetric distribution, and therefore not a great approximation. Of course, it gets the mode
        correct (by construction), and it at least represents the fact that there is more uncertainty along
        the southwest-northeast direction (which corresponds to uncertainty about the orientation of
        separating lines) than perpendicular to this. Although a crude approximation, this is surely
        better than approximating the posterior by a delta function, which is what MAP estimation does.

8.4.4   Approximating the posterior predictive
        Given the posterior, we can compute credible intervals, perform hypothesis tests, etc., just as we
        did in Section 7.6.3.3 in the case of linear regression. But in machine learning, interest usually
        focusses on prediction. The posterior predictive distribution has the form
                             
           p(y|x, D) =          p(y|x, w)p(w|D)dw                                                    (8.59)
8.4. Bayesian logistic regression                                                                                                    257


                                  data                                                     Log−Likelihood
   8                                                             8


   6                                                             6


   4                                                             4
                                                                                                                         3       4
   2                                                             2                                                   2
                                                                                                                1
   0                                                             0


  −2                                                            −2


  −4                                                            −4


  −6                                                            −6


  −8                                                            −8
  −10               −5                         0            5    −8   −6   −4         −2         0          2        4       6       8

                                  (a)                                                          (b)
                    Log−Unnormalised Posterior                                  Laplace Approximation to Posterior
   8                                                             8


   6                                                             6


   4                                                             4


   2                                                             2


   0                                                             0


  −2                                                            −2


  −4                                                            −4


  −6                                                            −6


  −8                                                            −8
   −8     −6   −4        −2        0       2       4   6    8    −8   −6   −4         −2         0          2        4       6       8

                                  (c)                                                          (d)

Figure 8.5 (a) Two-class data in 2d. (b) Log-likelihood for a logistic regression model. The line is drawn
from the origin in the direction of the MLE (which is at inﬁnity). The numbers correspond to 4 points
in parameter space, corresponding to the lines in (a). (c) Unnormalized log posterior (assuming vague
spherical prior). (d) Laplace approximation to posterior. Based on a ﬁgure by Mark Girolami. Figure
generated by logregLaplaceGirolamiDemo.



Unfortunately this integral is intractable.
   The simplest approximation is the plug-in approximation, which, in the binary case, takes the
form
       p(y = 1|x, D)          ≈         p(y = 1|x, E [w])                                                                        (8.60)

where E [w] is the posterior mean. In this context, E [w] is called the Bayes point. Of course,
such a plug-in estimate underestimates the uncertainty. We discuss some better approximations
below.
          258                                                                               Chapter 8. Logistic regression


                                  p(y=1|x, wMAP)                                     decision boundary for sampled w
            8                                                        8


            6                                                        6


            4                                                        4


            2                                                        2


            0                                                        0


           −2                                                       −2


           −4                                                       −4


           −6                                                       −6


           −8                                                       −8
            −8     −6   −4   −2         0          2   4   6   8    −10   −8   −6      −4        −2         0       2       4   6    8

                                       (a)                                                            (b)
                             MC approx of p(y=1|x)                                     numerical approx of p(y=1|x)
            8                                                        8


            6                                                        6


            4                                                        4


            2                                                        2


            0                                                        0


           −2                                                       −2


           −4                                                       −4


           −6                                                       −6


           −8                                                       −8
            −8     −6   −4   −2         0          2   4   6   8     −8   −6    −4          −2         0        2       4       6    8

                                       (c)                                                            (d)

          Figure 8.6 Posterior predictive distribution for a logistic regression model in 2d. Top left: contours of
          p(y = 1|x, ŵmap ). Top right: samples from the posterior predictive distribution. Bottom left: Averaging
          over these samples. Bottom right: moderated output (probit approximation). Based on a ﬁgure by Mark
          Girolami. Figure generated by logregLaplaceGirolamiDemo.



8.4.4.1   Monte Carlo approximation
          A better approach is to use a Monte Carlo approximation, as follows:

                                             1
                                                S
                p(y = 1|x, D)      ≈               sigm((ws )T x)                                                                   (8.61)
                                             S s=1

          where ws ∼ p(w|D) are samples from the posterior. (This technique can be trivially extended
          to the multi-class case.) If we have approximated the posterior using Monte Carlo, we can reuse
          these samples for prediction. If we made a Gaussian approximation to the posterior, we can
          draw independent samples from the Gaussian using standard methods.
             Figure 8.6(b) shows samples from the posteiror predictive for our 2d example. Figure 8.6(c)
          8.4. Bayesian logistic regression                                                                                            259

                                                                                          1
                                                                                                                       sigmoid
                                                                                         0.9                           probit
                       1
                                                                                         0.8
                      0.9

                      0.8                                                                0.7

                      0.7
                                                                                         0.6
                      0.6
                                                                                         0.5
                      0.5

                      0.4
                                                                                         0.4

                      0.3                                                                0.3
                      0.2
                                                                                         0.2
                      0.1
                                                                                         0.1
                       0

                            460   480   500   520   540   560    580   600   620   640    0
                                                                                          −6   −4   −2    0    2   4             6


                                                           (a)                                           (b)

          Figure 8.7 (a) Posterior predictive density for SAT data. The red circle denotes the posterior mean, the
          blue cross the posterior median, and the blue lines denote the 5th and 95th percentiles of the predictive
          distribution. Figure generated by logregSATdemoBayes. (b) The logistic (sigmoid) function  sigm(x) in
          solid red, with the rescaled probit function Φ(λx) in dotted blue superimposed. Here λ = π/8, which
          was chosen so that the derivatives of the two curves match at x = 0. Based on Figure 4.9 of (Bishop
          2006b). Figure generated by probitPlot. Figure generated by probitRegDemo.



          shows the average of these samples. By averaging over multiple predictions, we see that the
          uncertainty in the decision boundary “splays out” as we move further from the training data.
          So although the decision boundary is linear, the posterior predictive density is not linear. Note
          also that the posterior mean decision boundary is roughly equally far from both classes; this is
          the Bayesian analog of the large margin principle discussed in Section 14.5.2.2.
             Figure 8.7(a) shows an example in 1d. The red dots denote the mean of the posterior predictive
          evaluated at the training data. The vertical blue lines denote 95% credible intervals for the
          posterior predictive; the small blue star is the median. We see that, with the Bayesian approach,
          we are able to model our uncertainty about the probability a student will pass the exam based
          on his SAT score, rather than just getting a point estimate.

8.4.4.2   Probit approximation (moderated output) *
          If we have a Gaussian approximation to the posterior p(w|D) ≈ N (w|mN , VN ), we can also
          compute a deterministic approximation to the posterior predictive distribution, at least in the
          binary case. We proceed as follows:
                                                              
              p(y = 1|x, D) ≈       sigm(wT x)p(w|D)dw = sigm(a)N (a|μa , σa2 )da                   (8.62)

                                   a           wT x                                                                                 (8.63)
                                  μa           E [a] = mTN x                                                                        (8.64)
                                                         
                                                                         
                                  σa2          var [a] = p(a|D)[a2 − E a2 ]da                                                       (8.65)
                                                
                                              =    p(w|D)[(wT x)2 − (mTN x)2 ]dw = xT VN x                                           (8.66)
        260                                                                 Chapter 8. Logistic regression


        Thus we see that we need to evaluate the expectation of a sigmoid with respect to a Gaussian.
        This can be approximated by exploiting the fact that the sigmoid function is similar to the
        probit function, which is given by the cdf of the standard normal:
                    a
           Φ(a)         N (x|0, 1)dx                                                          (8.67)
                     −∞

        Figure 8.7(b) plots the sigmoid and probit functions. We have rescaled the axes so that sigm(a)
        has the same slope as Φ(λa) at the origin, where λ2 = π/8.
           The advantage of using the probit is that one can convolve it with a Gaussian analytically:
                                        
                                                 a
              Φ(λa)N (a|μ, σ 2 )da = Φ                  1                                          (8.68)
                                           (λ−2 + σ 2 ) 2
        We now plug in the approximation sigm(a) ≈ Φ(λa) to both sides of this equation to get
          
             sigm(a)N (a|μ, σ 2 )da ≈ sigm(κ(σ 2 )μ)                                          (8.69)
                                                             1
                                κ(σ 2 )      (1 + πσ 2 /8)− 2                                       (8.70)

        Applying this to the logistic regression model we get the following expression (ﬁrst suggested in
        (Spiegelhalter and Lauritzen 1990)):

           p(y = 1|x, D)    ≈     sigm(κ(σa2 )μa )                                                    (8.71)

        Figure 8.6(d) indicates that this gives very similar results to the Monte Carlo approximation.
           Using Equation 8.71 is sometimes called a moderated output, since it is less extreme than
        the plug-in estimate. To see this, note that 0 ≤ κ(σ 2 ) ≤ 1 and hence

           sigm(κ(σ 2 )μ) ≤ sigm(μ) = p(y = 1|x, ŵ)                                                 (8.72)

        where the inequality is strict if μ = 0. If μ > 0, we have p(y = 1|x, ŵ) > 0.5, but the
        moderated prediction is always closer to 0.5, so it is less conﬁdent. However, the decision
        boundary occurs whenever p(y = 1|x, D) = sigm(κ(σ 2 )μ) = 0.5, which implies μ = ŵT x =
        0. Hence the decision boundary for the moderated approximation is the same as for the plug-in
        approximation. So the number of misclassiﬁcations will be the same for the two methods,
        but the log-likelihood will not. (Note that in the multiclass case, taking into account posterior
        covariance gives different answers than the plug-in approach: see Exercise 3.10.3 of (Rasmussen
        and Williams 2006).)

8.4.5   Residual analysis (outlier detection) *
        It is sometimes useful to detect data cases which are “outliers”. This is called residual analysis
        or case analysis. In a regression setting, this can be performed by computing ri = yi − ŷi , where
        ŷi = ŵT xi . These values should follow a N (0, σ 2 ) distribution, if the modelling assumptions
        are correct. This can be assessed by creating a qq-plot, where we plot the N theoretical
        quantiles of a Gaussian distribution against the N empirical quantiles of the ri . Points that
        deviate from the straightline are potential outliers.
      8.5. Online learning and stochastic optimization                                                                  261


          Classical methods, based on residuals, do not work well for binary data, because they rely
      on asymptotic normality of the test statistics. However, adopting a Bayesian approach, we
      can just deﬁne outliers to be points which which p(yi |ŷi ) is small, where we typically use
      ŷi = sigm(ŵT xi ). Note that ŵ was estimated from all the data. A better method is to exclude
      (xi , yi ) from the estimate of w when predicting yi . That is, we deﬁne outliers to be points
      which have low probability under the cross-validated posterior predictive distribution, deﬁned
      by
                                                 
           p(yi |xi , x−i , y−i ) = p(yi |xi , w)   p(yi |xi , w)p(w)dw                        (8.73)
                                                      i =i

      This can be efficiently approximated by sampling methods (Gelfand 1996). For further discussion
      of residual analysis in logistic regression models, see e.g.,(Johnson and Albert 1999, Sec 3.4).

8.5   Online learning and stochastic optimization
      Traditionally machine learning is performed offline, which means we have a batch of data, and
      we optimize an equation of the following form

                    1 
                       N
         f (θ) =          f (θ, zi )                                                                                 (8.74)
                    N i=1

      where zi = (xi , yi ) in the supervised case, or just xi in the unsupervised case, and f (θ, zi ) is
      some kind of loss function. For example, we might use
         f (θ, zi ) = − log p(yi |xi , θ)                                                                            (8.75)

      in which case we are trying to maximize the likelihood. Alternatively, we might use

         f (θ, zi ) = L(yi , h(xi , θ))                                                                              (8.76)

      where h(xi , θ) is a prediction function, and L(y, ŷ) is some other loss function such as squared
      error or the Huber loss. In frequentist decision theory, the average loss is called the risk (see
      Section 6.3), so this overall approach is called empirical risk minimization or ERM (see Section 6.5
      for details).
         However, if we have streaming data, we need to perform online learning, so we can update
      our estimates as each new data point arrives rather than waiting until “the end” (which may
      never occur). And even if we have a batch of data, we might want to treat it like a stream if it is
      too large to hold in main memory. Below we discuss learning methods for this kind of scenario.1

      1. A simple implementation trick can be used to speed up batch learning algorithms when applied to data sets that
      are too large to hold in memory. First note that the naive implementation makes a pass over the data ﬁle, from the
      beginning to end, accumulating the sufficient statistics and gradients as it goes; then an update is performed and the
      process repeats. Unfortunately, at the end of each pass, the data from the beginning of the ﬁle will have been evicted
      from the cache (since are are assuming it cannot all ﬁt into memory). Rather than going back to the beginning of the
      ﬁle and reloading it, we can simply work backwards from the end of the ﬁle, which is already in memory. We then
      repeat this forwards-backwards pattern over the data. This simple trick is known as rocking.
        262                                                                                 Chapter 8. Logistic regression


8.5.1   Online learning and regret minimization
        Suppose that at each step, “nature” presents a sample zk and the “learner” must respond with
        a parameter estimate θ k . In the theoretical machine learning community, the objective used in
        online learning is the regret, which is the averaged loss incurred relative to the best we could
        have gotten in hindsight using a single ﬁxed parameter value:
                         1                           1
                            k                            k
            regretk           f (θ t , zt ) − min          f (θ ∗ , zt )                                                 (8.77)
                         k t=1                 θ ∗ ∈Θ k
                                                        t=1

        For example, imagine we are investing in the stock-market. Let θj be the amount we invest in
        stock j, and let zj be the return on this stock. Our loss function is f (θ, z) = −θ T z. The regret
        is how much better (or worse) we did by trading at each step, rather than adopting a “buy and
        hold” strategy using an oracle to choose which stocks to buy.
           One simple algorithm for online learning is online gradient descent (Zinkevich 2003), which
        is as follows: at each step k, update the parameters using
            θ k+1 = projΘ (θ k − ηk gk )                                                                                  (8.78)
        where projV (v) = argminw∈V ||w − v||2 is the projection of vector v onto space V, gk =
        ∇f (θ k , zk ) is the gradient, and ηk is the step size. (The projection step is only needed if
        the parameter must be constrained to live in a certain subset of RD . See Section 13.4.3 for
        details.) Below we will see how this approach to regret minimization relates to more traditional
        objectives, such as MLE.
           There are a variety of other approaches to regret minimization which are beyond the scope
        of this book (see e.g., Cesa-Bianchi and Lugosi (2006) for details).

8.5.2   Stochastic optimization and risk minimization
        Now suppose that instead of minimizing regret with respect to the past, we want to minimize
        expected loss in the future, as is more common in (frequentist) statistical learning theory. That
        is, we want to minimize
            f (θ) = E [f (θ, z)]                                                                                          (8.79)
        where the expectation is taken over future data. Optimizing functions where some of the
        variables in the objective are random is called stochastic optimization.2
           Suppose we receive an inﬁnite stream of samples from the distribution. One way to optimize
        stochastic objectives such as Equation 8.79 is to perform the update in Equation 8.78 at each
        step. This is called stochastic gradient descent or SGD (Nemirovski and Yudin 1978). Since we
        typically want a single parameter estimate, we can use a running average:
                    1
                       k
            θk =          θt                                                                                              (8.80)
                    k t=1

        2. Note that in stochastic optimization, the objective is stochastic, and therefore the algorithms will be, too. However,
        it is also possible to apply stochastic optimization algorithms to deterministic objectives. Examples include simulated
        annealing (Section 24.6.1) and stochastic gradient descent applied to the empirical risk minimization problem. There are
        some interesting theoretical connections between online learning and stochastic optimization (Cesa-Bianchi and Lugosi
        2006), but this is beyond the scope of this book.
          8.5. Online learning and stochastic optimization                                               263


          This is called Polyak-Ruppert averaging, and can be implemented recursively as follows:
                             1
             θ k = θ k−1 −     (θ k−1 − θ k )                                                          (8.81)
                             k
          See e.g., (Spall 2003; Kushner and Yin 2003) for details.

8.5.2.1   Setting the step size
          We now discuss some sufficient conditions on the learning rate to guarantee convergence of
          SGD. These are known as the Robbins-Monro conditions:
             ∞
                            ∞
                             
                   ηk = ∞,         ηk2 < ∞.                                                            (8.82)
             k=1             k=1

          The set of values of ηk over time is called the learning rate schedule. Various formulas are
          used, such as ηk = 1/k, or the following (Bottou 1998; Bach and Moulines 2011):
             ηk = (τ0 + k)−κ                                                                           (8.83)

          where τ0 ≥ 0 slows down early iterations of the algorithm, and κ ∈ (0.5, 1] controls the rate at
          which old values of are forgotten.
             The need to adjust these tuning parameters is one of the main drawback of stochastic
          optimization. One simple heuristic (Bottou 2007) is as follows: store an initial subset of the
          data, and try a range of η values on this subset; then choose the one that results in the fastest
          decrease in the objective and apply it to all the rest of the data. Note that this may not result
          in convergence, but the algorithm can be terminated when the performance improvement on a
          hold-out set plateaus (this is called early stopping).

8.5.2.2   Per-parameter step sizes
          One drawback of SGD is that it uses the same step size for all parameters. We now brieﬂy
          present a method known as adagrad (short for adaptive gradient) (Duchi et al. 2010), which is
          similar in spirit to a diagonal Hessian approximation. (See also (Schaul et al. 2012) for a similar
          approach.) In particular, if θi (k) is parameter i at time k, and gi (k) is its gradient, then we
          make an update as follows:
                                           gi (k)
             θi (k + 1) = θi (k) − η                                                                  (8.84)
                                       τ0 + si (k)
          where the diagonal step size vector is the gradient vector squared, summed over all time steps.
          This can be recursively updated as follows:

             si (k) = si (k − 1) + gi (k)2                                                             (8.85)
          The result is a per-parameter step size that adapts to the curvature of the loss function. This
          method was original derived for the regret minimization case, but it can be applied more
          generally.
          264                                                                  Chapter 8. Logistic regression


8.5.2.3   SGD compared to batch learning
          If we don’t have an inﬁnite data stream, we can “simulate” one by sampling data points at
          random from our training set. Essentially we are optimizing Equation 8.74 by treating it as an
          expectation with respect to the empirical distribution.

           Algorithm 8.3: Stochastic gradient descent
          1   Initialize θ, η;
          2   repeat
          3        Randomly permute data;
          4        for i = 1 : N do
          5            g = ∇f (θ, zi );
          6            θ ← projΘ (θ − ηg);
          7            Update η;
          8   until converged;


             In theory, we should sample with replacement, although in practice it is usually better to
          randomly permute the data and sample without replacement, and then to repeat. A single such
          pass over the entire data set is called an epoch. See Algorithm 8 for some pseudocode.
             In this offline case, it is often better to compute the gradient of a mini-batch of B data cases.
          If B = 1, this is standard SGD, and if B = N , this is standard steepest descent. Typically
          B ∼ 100 is used.
             Although a simple ﬁrst-order method, SGD performs surprisingly well on some problems,
          especially ones with large data sets (Bottou 2007). The intuitive reason for this is that one can
          get a fairly good estimate of the gradient by looking at just a few examples. Carefully evaluating
          precise gradients using large datasets is often a waste of time, since the algorithm will have
          to recompute the gradient again anyway at the next step. It is often a better use of computer
          time to have a noisy estimate and to move rapidly through parameter space. As an extreme
          example, suppose we double the training set by duplicating every example. Batch methods will
          take twice as long, but online methods will be unaffected, since the direction of the gradient
          has not changed (doubling the size of the data changes the magnitude of the gradient, but that
          is irrelevant, since the gradient is being scaled by the step size anyway).
             In addition to enhanced speed, SGD is often less prone to getting stuck in shallow local
          minima, because it adds a certain amount of “noise”. Consequently it is quite popular in the
          machine learning community for ﬁtting models with non-convex objectives, such as neural
          networks (Section 16.5) and deep belief networks (Section 28.1).

 8.5.3    The LMS algorithm
          As an example of SGD, let us consider how to compute the MLE for linear regression in an
          online fashion. We derived the batch gradient in Equation 7.14. The online gradient at iteration
          k is given by
              gk = xi (θ Tk xi − yi )                                                                   (8.86)
        8.5. Online learning and stochastic optimization                                                                                      265

                          black line = LMS trajectory towards LS soln (red cross)                         RSS vs iteration
                     3                                                                  10

                    2.5
                                                                                         9

                     2
                                                                                         8
                    1.5

                                                                                         7




              w1
                     1


                    0.5                                                                  6


                     0                                                                   5

                   −0.5
                                                                                         4

                    −1
                     −1               0               1            2                3
                                                     w0                                  3
                                                                                             0   5   10         15           20   25   30

                                               (a)                                                             (b)

        Figure 8.8 Illustration of the LMS algorithm. Left: we start from θ = (−0.5, 2) and slowly converging
        to the least squares solution of θ̂ = (1.45, 0.92) (red cross). Right: plot of objective function over time.
        Note that it does not decrease monotonically. Figure generated by LMSdemo.


        where i = i(k) is the training example to use at iteration k. If the data set is streaming, we use
        i(k) = k; we shall assume this from now on, for notational simplicity. Equation 8.86 is easy
        to interpret: it is the feature vector xk weighted by the difference between what we predicted,
        ŷk = θ Tk xk , and the true response, yk ; hence the gradient acts like an error signal.
           After computing the gradient, we take a step along it as follows:
           θ k+1 = θ k − ηk (ŷk − yk )xk                                                                                                   (8.87)
        (There is no need for a projection step, since this is an unconstrained optimization problem.)
        This algorithm is called the least mean squares or LMS algorithm, and is also known as the
        delta rule, or the Widrow-Hoff rule.
           Figure 8.8 shows the results of applying this algorithm to the data shown in Figure 7.2. We
        start at θ = (−0.5, 2) and converge (in the sense that ||θ k − θ k−1 ||22 drops below a threshold
        of 10−2 ) in about 26 iterations.
           Note that LMS may require multiple passes through the data to ﬁnd the optimum. By
        contrast, the recursive least squares algorithm, which is based on the Kalman ﬁlter and which
        uses second-order information, ﬁnds the optimum in a single pass (see Section 18.2.3). See also
        Exercise 7.7.

8.5.4   The perceptron algorithm
        Now let us consider how to ﬁt a binary logistic regression model in an online manner. The
        batch gradient was given in Equation 8.5. In the online case, the weight update has the simple
        form
           θ k = θ k−1 − ηk gi = θ k−1 − ηk (μi − yi )xi                                                                                    (8.88)
        where μi = p(yi = 1|xi , θ k ) = E [yi |xi , θ k ]. We see that this has exactly the same form as the
        LMS algorithm. Indeed, this property holds for all generalized linear models (Section 9.3).
        266                                                                Chapter 8. Logistic regression


          We now consider an approximation to this algorithm. Speciﬁcally, let

           ŷi = arg max p(y|xi , θ)                                                               (8.89)
                     y∈{0,1}


        represent the most probable class label. We replace μi = p(y = 1|xi , θ) = sigm(θ T xi ) in the
        gradient expression with ŷi . Thus the approximate gradient becomes
           gi ≈ (ŷi − yi )xi                                                                      (8.90)

        It will make the algebra simpler if we assume y ∈ {−1, +1} rather than y ∈ {0, 1}. In this
        case, our prediction becomes

           ŷi = sign(θ T xi )                                                                      (8.91)

        Then if ŷi yi = −1, we have made an error, but if ŷi yi = +1, we guessed the right label.
            At each step, we update the weight vector by adding on the gradient. The key observation is
        that, if we predicted correctly, then ŷi = yi , so the (approximate) gradient is zero and we do
        not change the weight vector. But if xi is misclassiﬁed, we update the weights as follows: If
        ŷi = 1 but yi = −1, then the negative gradient is −(ŷi − yi )xi = −2xi ; and if ŷi = −1 but
        yi = 1, then the negative gradient is −(ŷi − yi )xi = 2xi . We can absorb the factor of 2 into
        the learning rate η and just write the update, in the case of a misclassiﬁcation, as
           θ k = θ k−1 + ηk yi xi                                                                  (8.92)

        Since it is only the sign of the weights that matter, not the magnitude, we will set ηk = 1. See
        Algorithm 11 for the pseudocode.
           One can show that this method, known as the perceptron algorithm (Rosenblatt 1958), will
        converge, provided the data is linearly separable, i.e., that there exist parameters θ such that
        predicting with sign(θ T x) achieves 0 error on the training set. However, if the data is not
        linearly separable, the algorithm will not converge, and even if it does converge, it may take
        a long time. There are much better ways to train logistic regression models (such as using
        proper SGD, without the gradient approximation, or IRLS, discussed in Section 8.3.4). However,
        the perceptron algorithm is historically important: it was one of the ﬁrst machine learning
        algorithms ever derived (by Frank Rosenblatt in 1957), and was even implemented in analog
        hardware. In addition, the algorithm can be used to ﬁt models where computing marginals
        p(yi |x, θ) is more expensive than computing the MAP output, arg maxy p(y|x, θ); this arises
        in some structured-output classiﬁcation problems. See Section 19.7 for details.

8.5.5   A Bayesian view
        Another approach to online learning is to adopt a Bayesian view. This is conceptually quite
        simple: we just apply Bayes rule recursively:

           p(θ|D1:k ) ∝ p(Dk |θ)p(θ|D1:k−1 )                                                       (8.93)

        This has the obvious advantage of returning a posterior instead of just a point estimate. It also
        allows for the online adaptation of hyper-parameters, which is important since cross-validation
        cannot be used in an online setting. Finally, it has the (less obvious) advantage that it can be
      8.6. Generative vs discriminative classiﬁers                                                    267


       Algorithm 8.4: Perceptron algorithm
       1   Input: linearly separable data set xi ∈ RD , yi ∈ {−1, +1} for i = 1 : N ;
      2    Initialize θ 0 ;
      3    k ← 0;
      4    repeat
      5         k ← k + 1;
      6         i ← k mod N ;
      7         if ŷi = yi then
      8              θ k+1 ← θ k + yi xi
      9         else
      10             no-op
      11   until converged;



      quicker than SGD. To see why, note that by modeling the posterior variance of each parameter
      in addition to its mean, we effectively associate a different learning rate for each parameter
      (de Freitas et al. 2000), which is a simple way to model the curvature of the space. These
      variances can then be adapted using the usual rules of probability theory. By contrast, getting
      second-order optimization methods to work online is more tricky (see e.g., (Schraudolph et al.
      2007; Sunehag et al. 2009; Bordes et al. 2009, 2010)).
         As a simple example, in Section 18.2.3 we show how to use the Kalman ﬁlter to ﬁt a linear
      regression model online. Unlike the LMS algorithm, this converges to the optimal (offline) answer
      in a single pass over the data. An extension which can learn a robust non-linear regression model
      in an online fashion is described in (Ting et al. 2010). For the GLM case, we can use an assumed
      density ﬁlter (Section 18.5.3), where we approximate the posterior by a Gaussian with a diagonal
      covariance; the variance terms serve as a per-parameter step-size. See Section 18.5.3.2 for details.
      Another approach is to use particle ﬁltering (Section 23.5); this was used in (Andrieu et al. 2000)
      for sequentially learning a kernelized linear/logistic regression model.

8.6   Generative vs discriminative classiﬁers
      In Section 4.2.2, we showed that the posterior over class labels induced by Gaussian discrim-
      inant analysis (GDA) has exactly the same form as logistic regression, namely p(y = 1|x) =
      sigm(wT x). The decision boundary is therefore a linear function of x in both cases. Note,
      however, that many generative models can give rise to a logistic regression posterior, e.g., if each
      class-conditional density is Poisson, p(x|y = c) = Poi(x|λc ). So the assumptions made by GDA
      are much stronger than the assumptions made by logistic regression.
         A further difference between these models is the way they are trained. When ﬁtting a discrim-
                                                                                N
      inative model, we usually maximize the conditional log likelihood i=1 log p(yi |xi , θ), whereas
                                                                                          N
      when ﬁtting a generative model, we usually maximize the joint log likelihood, i=1 log p(yi , xi |θ).
      It is clear that these can, in general, give different results (see Exercise 4.20).
         When the Gaussian assumptions made by GDA are correct, the model will need less training
      data than logistic regression to achieve a certain level of performance, but if the Gaussian
        268                                                                 Chapter 8. Logistic regression


        assumptions are incorrect, logistic regression will do better (Ng and Jordan 2002). This is
        because discriminative models do not need to model the distribution of the features. This is
        illustrated in Figure 8.10. We see that the class conditional densities are rather complex; in
        particular, p(x|y = 1) is a multimodal distribution, which might be hard to estimate. However,
        the class posterior, p(y = c|x), is a simple sigmoidal function, centered on the threshold value
        of 0.55. This suggests that, in general, discriminative methods will be more accurate, since their
        “job” is in some sense easier. However, accuracy is not the only important factor when choosing
        a method. Below we discuss some other advantages and disadvantages of each approach.

8.6.1   Pros and cons of each approach
        • Easy to ﬁt? As we have seen, it is usually very easy to ﬁt generative classiﬁers. For example,
          in Sections 3.5.1.1 and 4.2.4, we show that we can ﬁt a naive Bayes model and an LDA model
          by simple counting and averaging. By contrast, logistic regression requires solving a convex
          optimization problem (see Section 8.3.4 for the details), which is much slower.
        • Fit classes separately? In a generative classiﬁer, we estimate the parameters of each class
          conditional density independently, so we do not have to retrain the model when we add
          more classes. In contrast, in discriminative models, all the parameters interact, so the whole
          model must be retrained if we add a new class. (This is also the case if we train a generative
          model to maximize a discriminative objective Salojarvi et al. (2005).)
        • Handle missing features easily? Sometimes some of the inputs (components of x) are not
          observed. In a generative classiﬁer, there is a simple method for dealing with this, as we
          discuss in Section 8.6.2. However, in a discriminative classiﬁer, there is no principled solution
          to this problem, since the model assumes that x is always available to be conditioned on
          (although see (Marlin 2008) for some heuristic approaches).
        • Can handle unlabeled training data? There is much interest in semi-supervised learning,
          which uses unlabeled data to help solve a supervised task. This is fairly easy to do using
          generative models (see e.g., (Lasserre et al. 2006; Liang et al. 2007)), but is much harder to do
          with discriminative models.
        • Symmetric in inputs and outputs? We can run a generative model “backwards”, and
          infer probable inputs given the output by computing p(x|y). This is not possible with a
          discriminative model. The reason is that a generative model deﬁnes a joint distribution on x
          and y, and hence treats both inputs and outputs symmetrically.
        • Can handle feature preprocessing? A big advantage of discriminative methods is that they
          allow us to preprocess the input in arbitrary ways, e.g., we can replace x with φ(x), which
          could be some basis function expansion, as illustrated in Figure 8.9. It is often hard to
          deﬁne a generative model on such pre-processed data, since the new features are correlated
          in complex ways.
        • Well-calibrated probabilities? Some generative models, such as naive Bayes, make strong
          independence assumptions which are often not valid. This can result in very extreme poste-
          rior class probabilities (very near 0 or 1). Discriminative models, such as logistic regression,
          are usually better calibrated in terms of their probability estimates.

           We see that there are arguments for and against both kinds of models. It is therefore useful
        to have both kinds in your “toolbox”. See Table 8.1 for a summary of the classiﬁcation and
        8.6. Generative vs discriminative classiﬁers                                                                                                                         269

                                                          Linear Multinomial Logistic Regression                   Kernel−RBF Multinomial Logistic Regression
                                              1                                                               1



                                             0.5                                                         0.5



                                              0                                                               0



                                            −0.5                                                        −0.5



                                             −1                                                              −1
                                              −1            −0.5                 0       0.5       1          −1         −0.5          0          0.5            1

                                                                               (a)                                                   (b)

        Figure 8.9 (a) Multinomial logistic regression for 5 classes in the original feature space. (b) After basis
        function expansion, using RBF kernels with a bandwidth of 1, and using all the data points as centers.
        Figure generated by logregMultinomKernelDemo.

                                       5                                                               1.2

                                                                                        p(x|y=2)                       p(y=1|x)                                   p(y=2|x)
                                                                                                        1
                                       4
         class conditional densities




                                                                                                       0.8
                                       3

                                                                                                       0.6

                                       2       p(x|y=1)
                                                                                                       0.4


                                       1
                                                                                                       0.2


                                       0                                                                0
                                        0          0.2         0.4               0.6     0.8       1     0              0.2          0.4         0.6            0.8          1
                                                                           x                                                                 x

                                                                     (a)                                                                   (b)

        Figure 8.10 The class-conditional densities p(x|y = c) (left) may be more complex than the
        class posteriors p(y = c|x) (right). Based on Figure 1.27 of (Bishop 2006a). Figure generated by
        generativeVsDiscrim.



        regression techniques we cover in this book.

8.6.2   Dealing with missing data
        Sometimes some of the inputs (components of x) are not observed; this could be due to a
        sensor failure, or a failure to complete an entry in a survey, etc. This is called the missing data
        problem (Little. and Rubin 1987). The ability to handle missing data in a principled way is one
        of the biggest advantages of generative models.
           To formalize our assumptions, we can associate a binary response variable ri ∈ {0, 1},
        that speciﬁes whether each value xi is observed or not. The joint model has the form
        p(xi , ri |θ, φ) = p(ri |xi , φ)p(xi |θ), where φ are the parameters controlling whether the item
270                                                                           Chapter 8. Logistic regression

Model                                         Classif/regr   Gen/Discr   Param/Non   Section
Discriminant analysis                         Classif        Gen         Param       Sec. 4.2.2, 4.2.4
Naive Bayes classiﬁer                         Classif        Gen         Param       Sec. 3.5, 3.5.1.2
Tree-augmented Naive Bayes classiﬁer          Classif        Gen         Param       Sec. 10.2.1
Linear regression                             Regr           Discrim     Param       Sec. 1.4.5, 7.3, 7.6,
Logistic regression                           Classif        Discrim     Param       Sec. 1.4.6, 8.3.4, 8.4.3, 21.8.1.1
Sparse linear/ logistic regression            Both           Discrim     Param       Ch. 13
Mixture of experts                            Both           Discrim     Param       Sec. 11.2.4
Multilayer perceptron (MLP)/ Neural network   Both           Discrim     Param       Ch. 16
Conditional random ﬁeld (CRF)                 Classif        Discrim     Param       Sec. 19.6
K nearest neighbor classiﬁer                  Classif        Gen         Non         Sec. 1.4.2, 14.7.3
(Inﬁnite) Mixture Discriminant analysis       Classif        Gen         Non         Sec. 14.7.3
Classiﬁcation and regression trees (CART)     Both           Discrim     Non         Sec. 16.2
Boosted model                                 Both           Discrim     Non         Sec. 16.4
Sparse kernelized lin/logreg (SKLR)           Both           Discrim     Non         Sec. 14.3.2
Relevance vector machine (RVM)                Both           Discrim     Non         Sec. 14.3.2
Support vector machine (SVM)                  Both           Discrim     Non         Sec. 14.5
Gaussian processes (GP)                       Both           Discrim     Non         Ch. 15
Smoothing splines                             Regr           Discrim     Non         Section 15.4.6

Table 8.1 List of various models for classiﬁcation and regression which we discuss in this book. Columns
are as follows: Model name; is the model suitable for classiﬁcation, regression, or both; is the model
generative or discriminative; is the model parametric or non-parametric; list of sections in book which
discuss the model. See also http://pmtk3.googlecode.com/svn/trunk/docs/tutorial/html/tu
tSupervised.html for the PMTK equivalents of these models. Any generative probabilistic model (e.g.,
HMMs, Boltzmann machines, Bayesian networks, etc.) can be turned into a classiﬁer by using it as a class
conditional density.



is observed or not. If we assume p(ri |xi , φ) = p(ri |φ), we say the data is missing completely
at random or MCAR. If we assume p(ri |xi , φ) = p(ri |xoi , φ), where xoi is the observed part of
xi , we say the data is missing at random or MAR. If neither of these assumptions hold, we say
the data is not missing at random or NMAR. In this case, we have to model the missing data
mechanism, since the pattern of missingness is informative about the values of the missing data
and the corresponding parameters. This is the case in most collaborative ﬁltering problems, for
example. See e.g., (Marlin 2008) for further discussion. We will henceforth assume the data is
MAR.
   When dealing with missing data, it is helpful to distinguish the cases when there is missing-
ness only at test time (so the training data is complete data), from the harder case when there
is missingness also at training time. We will discuss these two cases below. Note that the class
label is always missing at test time, by deﬁnition; if the class label is also sometimes missing at
training time, the problem is called semi-supervised learning.
          8.6. Generative vs discriminative classiﬁers                                                   271


8.6.2.1   Missing data at test time
          In a generative classiﬁer, we can handle features that are MAR by marginalizing them out. For
          example, if we are missing the value of x1 , we can compute
             p(y = c|x2:D , θ)   ∝    p(y = c|θ)p(x2:D |y = c, θ)                                      (8.94)
                                                 
                                 =    p(y = c|θ)    p(x1 , x2:D |y = c, θ)                             (8.95)
                                                   x1

            If we make the naive Bayes assumption, the marginalization can be performed as follows:
                                                           D
                                                                           
                                                                              D
                 p(x1 , x2:D |y = c, θ) =     p(x1 |θ 1c )     p(xj |θ jc ) =   p(xj |θ jc )     (8.96)
              x1                            x1              j=2              j=2

          where we exploited the fact that x1 p(x1 |y = c, θ) = 1. Hence in a naive Bayes classiﬁer, we
          can simply ignore missing features at test time. Similarly, in discriminant analysis, no matter
          what regularization method was used to estimate the parameters, we can always analytically
          marginalize out the missing variables (see Section 4.3):
             p(x2:D |y = c, θ) = N (x2:D |μc,2:D , Σc,2:D,2:D )                                        (8.97)

8.6.2.2   Missing data at training time
          Missing data at training time is harder to deal with. In particular, computing the MLE or MAP
          estimate is no longer a simple optimization problem, for reasons discussed in Section 11.3.2.
          However, soon we will study are a variety of more sophisticated algorithms (such as EM algo-
          rithm, in Section 11.4) for ﬁnding approximate ML or MAP estimates in such cases.

 8.6.3    Fisher’s linear discriminant analysis (FLDA) *
          Discriminant analysis is a generative approach to classiﬁcation, which requires ﬁtting an MVN to
          the features. As we have discussed, this can be problematic in high dimensions. An alternative
          approach is to reduce the dimensionality of the features x ∈ RD and then ﬁt an MVN to the
          resulting low-dimensional features z ∈ RL . The simplest approach is to use a linear projection
          matrix, z = Wx, where W is a L × D matrix. One approach to ﬁnding W would be to use
          PCA (Section 12.2); the result would be very similar to RDA (Section 4.2.6), since SVD and PCA
          are essentially equivalent. However, PCA is an unsupervised technique that does not take class
          labels into account. Thus the resulting low dimensional features are not necessarily optimal
          for classiﬁcation, as illustrated in Figure 8.11. An alternative approach is to ﬁnd the matrix
          W such that the low-dimensional data can be classiﬁed as well as possible using a Gaussian
          class-conditional density model. The assumption of Gaussianity is reasonable since we are
          computing linear combinations of (potentially non-Gaussian) features. This approach is called
          Fisher’s linear discriminant analysis, or FLDA.
             FLDA is an interesting hybrid of discriminative and generative techniques. The drawback of
          this technique is that it is restricted to using L ≤ C − 1 dimensions, regardless of D, for reasons
          that we will explain below. In the two-class case, this means we are seeking a single vector w
          onto which we can project the data. Below we derive the optimal w in the two-class case. We
272                                                                                        Chapter 8. Logistic regression


                          4
                               means
                               fisher
                               pca
                          3




                          2




                          1




                         0
                         −4             −2          0            2          4          6        8


                                                           (a)
                                                               fisher
                         20




                         15




                         10




                          5




                          0
                         −45     −40         −35   −30   −25         −20   −15   −10       −5   0


                                                           (b)
                                                                pca
                         25



                         20



                         15



                         10



                          5



                         0
                         −8             −6         −4          −2           0          2        4


                                                           (c)

Figure 8.11 Example of Fisher’s linear discriminant. (a) Two class data in 2D. Dashed green line = ﬁrst
principal basis vector. Dotted red line = Fisher’s linear discriminant vector. Solid black line joins the
class-conditional means. (b) Projection of points onto Fisher’s vector shows good class separation. (c)
Projection of points onto PCA vector shows poor class separation. Figure generated by fisherLDAdemo.
          8.6. Generative vs discriminative classiﬁers                                                                   273


          then generalize to the multi-class case, and ﬁnally we give a probabilistic interpretation of this
          technique.

8.6.3.1   Derivation of the optimal 1d projection
          We now derive this optimal direction w, for the two-class case, following the presentation of
          (Bishop 2006b, Sec 4.1.4). Deﬁne the class-conditional means as
                    1                   1 
              μ1 =           xi , μ 2 =            xi                                             (8.98)
                   N1 i:y =1             N2 i:y =2
                             i                      i


          Let mk = wT μk be the projection of each mean onto the line w. Also, let zi = wT xi be the
          projection of the data onto the line. The variance of the projected points is proportional to
                    
             s2k =       (zi − mk )2                                                                  (8.99)
                   i:yi =k

          The goal is to ﬁnd w such that we maximize the distance between the means, m2 − m1 , while
          also ensuring the projected clusters are “tight”:
                       (m2 − m1 )2
             J(w) =                                                                                                  (8.100)
                         s21 + s22
          We can rewrite the right hand side of the above in terms of w as follows
                       w T SB w
             J(w) =                                                                                                   (8.101)
                       w T SW w
          where SB is the between-class scatter matrix given by
             SB = (μ2 − μ1 )(μ2 − μ1 )T                                                                              (8.102)
          and SW is the within-class scatter matrix, given by
                                                   
             SW =       (xi − μ1 )(xi − μ1 )T +          (xi − μ2 )(xi − μ2 )T                                       (8.103)
                    i:yi =1                                i:yi =2

          To see this, note that
             wT SB w = wT (μ2 − μ1 )(μ2 − μ1 )T w = (m2 − m1 )(m2 − m1 )                                             (8.104)
          and
                                                                                    
             w T SW w        =             wT (xi − μ1 )(xi − μ1 )T w +                    wT (xi − μ2 )(xi − μ2 )T w(8.105)
                                 i:yi =1                                         i:yi =2
                                                          
                                                    2                            2
                             =             (zi − m1 ) +             (zi − m2 )                                       (8.106)
                                 i:yi =1                  i:yi =2

          Equation 8.101 is a ratio of two scalars; we can take its derivative with respect to w and equate
          to zero. One can show (Exercise 12.6) that that J(w) is maximized when
             SB w = λSW w                                                                                             (8.107)
          274                                                                                      Chapter 8. Logistic regression

                       3                                           0.5

                                                                    0
                       2
                                                                  −0.5

                       1                                           −1

                                                                  −1.5
                       0
                                                                   −2

                      −1                                          −2.5

                                                                   −3
                      −2

                                                                  −3.5
                      −3
                       −4    −3   −2   −1    0    1   2   3   4     −4.5   −4   −3.5   −3   −2.5     −2   −1.5   −1   −0.5   0


                                            (a)                                                (b)

          Figure 8.12 (a) PCA projection of vowel data to 2d. (b) FLDA projection of vowel data to 2d. We see there
          is better class separation in the FLDA case. Based on Figure 4.11 of (Hastie et al. 2009). Figure generated by
          fisherDiscrimVowelDemo, by Hannes Bretschneider.


          where
                    w T SB w
             λ=                                                                                                                  (8.108)
                    w T SW w
          Equation 8.107 is called a generalized eigenvalue problem. If SW is invertible, we can convert
          it to a regular eigenvalue problem:
             S−1
              W SB w = λw                                                                                                        (8.109)
            However, in the two class case, there is a simpler solution. In particular, since
             SB w = (μ2 − μ1 )(μ2 − μ1 )T w = (μ2 − μ1 )(m2 − m1 )                                                               (8.110)
          then, from Equation 8.109 we have
             λw      =      S−1
                             W (μ2 − μ1 )(m2 − m1 )                                                                               (8.111)
                w    ∝      S−1
                             W (μ2     − μ1 )                                                                                    (8.112)
          Since we only care about the directionality, and not the scale factor, we can just set
             w = S−1
                  W (μ2 − μ1 )                                                                                                   (8.113)
          This is the optimal solution in the two-class case. If SW ∝ I, meaning the pooled covariance
          matrix is isotropic, then w is proportional to the vector that joins the class means. This is an
          intuitively reasonable direction to project onto, as shown in Figure 8.11.

8.6.3.2   Extension to higher dimensions and multiple classes
          We can extend the above idea to multiple classes, and to higher dimensional subspaces, by
          ﬁnding a projection matrix W which maps from D to L so as to maximize
                            |WΣB WT |
             J(W) =                                                                                                              (8.114)
                            |WΣW WT |
          8.6. Generative vs discriminative classiﬁers                                                   275


          where
                            Nc
             ΣB                     (μc − μ)(μc − μ)T                                                 (8.115)
                            c
                                 N
                            Nc
             ΣW                  Σc                                                                   (8.116)
                            c
                               N
                           1 
              Σc                    (xi − μc )(xi − μc )T                                             (8.117)
                           Nc i:y =c
                                 i


          The solution can be shown to be
                      −1
             W = ΣW2 U                                                                                 (8.118)
                                                             − 12   − 12
          where U are the L leading eigenvectors of ΣW ΣB ΣW , assuming ΣW is non-singular. (If it
          is singular, we can ﬁrst perform PCA on all the data.)
             Figure 8.12 gives an example of this method applied to some D = 10 dimensional speech
          data, representing C = 11 different vowel sounds. We see that FLDA gives better class separation
          than PCA.
             Note that FLDA is restricted to ﬁnding at most a L ≤ C − 1 dimensional linear subspace,
          no matter how large D, because the rank of the between class covariance matrix ΣB is C − 1.
          (The -1 term arises because of the μ term, which is a linear function of the μc .) This is a rather
          severe restriction which limits the usefulness of FLDA.

8.6.3.3   Probabilistic interpretation of FLDA *
          To ﬁnd a valid probabilistic interpretation of FLDA, we follow the approach of (Kumar and Andreo
          1998; Zhou et al. 2009). They proposed a model known as heteroscedastic LDA (HLDA), which
          works as follows. Let W be a D × D invertible matrix, and let zi = Wxi be a transformed
          version of the data. We now ﬁt full covariance Gaussians to the transformed data, one per class,
          but with the constraint that only the ﬁrst L components will be class-speciﬁc; the remaining
          H = D − L components will be shared across classes, and will thus not be discriminative. That
          is, we use
             p(zi |θ, yi = c)    =     N (zi |μc , Σc )                                                (8.119)
                          μc          (mc ; m0 )                                                     (8.120)
                                       
                                        Sc 0
                            Σc                                                                        (8.121)
                                         0 S0
          where m0 is the shared H dimensional mean and S0 is the shared H × H covariace. The pdf
          of the original (untransformed) data is given by
             p(xi |yi = c, W, θ)       =   |W| N (Wxi |μc , Σc )                                      (8.122)
                                       =   |W| N (WL xi |mc , Sc ) N (WH xi |m0 , S0 )                (8.123)
                        
                       WL
          where W =          . For ﬁxed W, it is easy to derive the MLE for θ. One can then optimize
                       WH
          W using gradient methods.
276                                                                         Chapter 8. Logistic regression


   In the special case that the Σc are diagonal, there is a closed-form solution for W (Gales
1999). And in the special case the Σc are all equal, we recover classical LDA (Zhou et al. 2009).
   In view of this this result, it should be clear that HLDA will outperform LDA if the class
covariances are not equal within the discriminative subspace (i.e., if the assumption that Σc is
independent of c is a poor assumption). This is easy to demonstrate on synthetic data, and is
also the case on more challenging tasks such as speech recognition (Kumar and Andreo 1998).
Furthermore, we can extend the model by allowing each class to use its own projection matrix;
this is known as multiple LDA (Gales 2002).

Exercises
Exercise 8.1 Spam classiﬁcation using logistic regression
Consider the email spam data set discussed on p300 of (Hastie et al. 2009). This consists of 4601 email
messages, from which 57 features have been extracted. These are as follows:
•   48 features, in [0, 100], giving the percentage of words in a given message which match a given word
    on the list. The list contains words such as “business”, “free”, “george”, etc. (The data was collected by
    George Forman, so his name occurs quite a lot.)
•   6 features, in [0, 100], giving the percentage of characters in the email that match a given character on
    the list. The characters are ; ( [ ! $ #
•   Feature 55: The average length of an uninterrupted sequence of capital letters (max is 40.3, mean is 4.9)
•   Feature 56: The length of the longest uninterrupted sequence of capital letters (max is 45.0, mean is
    52.6)
•   Feature 57: The sum of the lengts of uninterrupted sequence of capital letters (max is 25.6, mean is
    282.2)
Load the data from spamData.mat, which contains a training set (of size 3065) and a test set (of size
1536).
One can imagine performing several kinds of preprocessing to this data. Try each of the following
separately:
a. Standardize the columns so they all have mean 0 and unit variance.
b. Transform the features using log(xij + 0.1).
c. Binarize the features using I(xij > 0).
For each version of the data, ﬁt a logistic regression model. Use cross validation to choose the strength
of the 2 regularizer. Report the mean error rate on the training and test sets. You should get numbers
similar to this:
  method train        test
  stnd       0.082 0.079
  log        0.052 0.059
  binary     0.065 0.072
(The precise values will depend on what regularization value you choose.) Turn in your code and numerical
results.
(See also Exercise 8.2.
Exercise 8.2 Spam classiﬁcation using naive Bayes
We will re-examine the dataset from Exercise 8.1.
8.6. Generative vs discriminative classiﬁers                                                         277


a. Use naiveBayesFit and naiveBayesPredict on the binarized spam data. What is the training and
   test error? (You can try different settings of the pseudocount α if you like (this corresponds to the
   Beta(α, α) prior each θjc ), although the default of α = 1 is probably ﬁne.) Turn in your error rates.
b. Modify the code so it can handle real-valued features. Use a Gaussian density for each feature; ﬁt it
   with maximum likelihood. What are the training and test error rates on the standardized data and the
   log transformed data? Turn in your 4 error rates and code.

Exercise 8.3 Gradient and Hessian of log-likelihood for logistic regression
                  1
a. Let σ(a) =   1+e−a
                            be the sigmoid function. Show that
       dσ(a)
             = σ(a)(1 − σ(a))                                                                      (8.124)
        da
b. Using the previous result and the chain rule of calculus, derive an expression for the gradient of the
   log likelihood (Equation 8.5).
c. The Hessian can be written as H = XT SX, where S  diag(μ1 (1 − μ1 ), . . . , μn (1 − μn )). Show
   that H is positive deﬁnite. (You may assume that 0 < μi < 1, so the elements of S will be strictly
   positive, and that X is full rank.)

Exercise 8.4 Gradient and Hessian of log-likelihood for multinomial logistic regression
a. Let μik = S(η i )k . Prove that the Jacobian of the softmax is
       ∂μik
            = μik (δkj − μij )                                                                     (8.125)
       ∂ηij
   where δkj = I(k = j).
b. Hence show that
       ∇ wc    =            (yic − μic )xi                                                        (8.126)
                        i
                                                      
   Hint: use the chain rule and the fact that             c   yic = 1.
c. Show that the block submatrix of the Hessian for classes c and c is given by

       Hc,c    =   −            μic (δc,c − μi,c )xi xTi                                        (8.127)
                             i



Exercise 8.5 Symmetric version of 2 regularized multinomial logistic regression
(Source: Ex 18.3 of (Hastie et al. 2009).)
Multiclass logistic regression has the form

                     exp(wc0 + wcT x)
   p(y = c|x, W) = C               T
                                                                                                   (8.128)
                    k=1 exp(wk0 + wk x)

where W is a (D + 1) × C weight matrix. We can arbitrarily deﬁne wc = 0 for one of the classes, say
                                
c = C, since p(y = C|x, W) = 1 − C−1
                                   c=1 p(y = c|x, w). In this case, the model has the form

                                exp(wc0 + wcT x)
   p(y = c|x, W) =             C−1                                                                (8.129)
                            1 + k=1 exp(wk0 + wkT x)
278                                                                        Chapter 8. Logistic regression


If we don’t “clamp” one of the vectors to some constant value, the parameters will be unidentiﬁable.
However, suppose we don’t clamp wc = 0, so we are using Equation 8.128, but we add 2 regularization
by optimizing
      N                              C
            log p(yi |xi , W) − λ         ||wc ||22                                                  (8.130)
      i=1                           c=1
                                    
Show that at the optimum we have C     c=1 ŵcj = 0 for j = 1 : D. (For the unregularized ŵc0 terms, we
still need to enforce that w0C = 0 to ensure identiﬁability of the offset.)
Exercise 8.6 Elementary properties of 2 regularized logistic regression
(Source: Jaaakkola.). Consider minimizing

     J(w) = −(w, Dtrain ) + λ||w||22                                                                (8.131)
where
                    1
     (w, D) =                 log σ(yi xTi w)                                                       (8.132)
                   |D|   i∈D

is the average log-likelihood on data set D, for yi ∈ {−1, +1}. Answer the following true/ false questions.

a.   J(w) has multiple locally optimal solutions: T/F?
b.   Let ŵ = arg minw J(w) be a global optimum. ŵ is sparse (has many zero entries): T/F?
c.   If the training data is linearly separable, then some weights wj might become inﬁnite if λ = 0: T/F?
d.   (ŵ, Dtrain ) always increases as we increase λ: T/F?
e.   (ŵ, Dtest ) always increases as we increase λ: T/F?

Exercise 8.7 Regularizing separate terms in 2d logistic regression
(Source: Jaaakkola.)

a. Consider the data in Figure 8.13, where we ﬁt the model p(y = 1|x, w) = σ(w0 + w1 x1 + w2 x2 ).
   Suppose we ﬁt the model by maximum likelihood, i.e., we minimize
       J(w) = −(w, Dtrain )                                                                    (8.133)
   where (w, Dtrain ) is the log likelihood on the training set. Sketch a possible decision boundary
   corresponding to ŵ. (Copy the ﬁgure ﬁrst (a rough sketch is enough), and then superimpose your
   answer on your copy, since you will need multiple versions of this ﬁgure). Is your answer (decision
   boundary) unique? How many classiﬁcation errors does your method make on the training set?
b. Now suppose we regularize only the w0 parameter, i.e., we minimize
            J0 (w) = −(w, Dtrain ) + λw02                                                           (8.134)
   Suppose λ is a very large number, so we regularize w0 all the way to 0, but all other parameters are
   unregularized. Sketch a possible decision boundary. How many classiﬁcation errors does your method
   make on the training set? Hint: consider the behavior of simple linear regression, w0 + w1 x1 + w2 x2
   when x1 = x2 = 0.
c. Now suppose we heavily regularize only the w1 parameter, i.e., we minimize
            J1 (w) = −(w, Dtrain ) + λw12                                                           (8.135)
     Sketch a possible decision boundary. How many classiﬁcation errors does your method make on the
     training set?
8.6. Generative vs discriminative classiﬁers                                                    279




                         Figure 8.13 Data for logistic regression question.



d. Now suppose we heavily regularize only the w2 parameter. Sketch a possible decision boundary. How
   many classiﬁcation errors does your method make on the training set?
9     Generalized linear models and the
      exponential family



9.1   Introduction
      We have now encountered a wide variety of probability distributions: the Gaussian, the Bernoulli,
      the Student t, the uniform, the gamma, etc. It turns out that most of these are members of a
      broader class of distributions known as the exponential family.1 In this chapter, we discuss
      various properties of this family. This allows us to derive theorems and algorithms with very
      broad applicability.
         We will see how we can easily use any member of the exponential family as a class-conditional
      density in order to make a generative classiﬁer. In addition, we will discuss how to build
      discriminative models, where the response variable has an exponential family distribution, whose
      mean is a linear function of the inputs; this is known as a generalized linear model, and
      generalizes the idea of logistic regression to other kinds of response variables.

9.2   The exponential family
      Before deﬁning the exponential family, we mention several reasons why it is important:

      • It can be shown that, under certain regularity conditions, the exponential family is the only
        family of distributions with ﬁnite-sized sufficient statistics, meaning that we can compress
        the data into a ﬁxed-sized summary without loss of information. This is particularly useful
        for online learning, as we will see later.
      • The exponential family is the only family of distributions for which conjugate priors exist,
        which simpliﬁes the computation of the posterior (see Section 9.2.5).
      • The exponential family can be shown to be the family of distributions that makes the least
        set of assumptions subject to some user-chosen constraints (see Section 9.2.6).
      • The exponential family is at the core of generalized linear models, as discussed in Section 9.3.
      • The exponential family is at the core of variational inference, as discussed in Section 21.2.

      1. The exceptions are the Student t, which does not have the right form, and the uniform distribution, which does not
      have ﬁxed support independent of the parameter values.
          282                              Chapter 9. Generalized linear models and the exponential family


 9.2.1    Deﬁnition
          A pdf or pmf p(x|θ), for x = (x1 , . . . , xm ) ∈ X m and θ ∈ Θ ⊆ Rd , is said to be in the
          exponential family if it is of the form
                               1
             p(x|θ)   =            h(x) exp[θ T φ(x)]                                                 (9.1)
                              Z(θ)
                      =       h(x) exp[θ T φ(x) − A(θ)]                                               (9.2)

          where
                          
             Z(θ)     =          h(x) exp[θ T φ(x)]dx                                                 (9.3)
                           Xm
             A(θ)     =   log Z(θ)                                                                    (9.4)

          Here θ are called the natural parameters or canonical parameters, φ(x) ∈ Rd is called a
          vector of sufficient statistics, Z(θ) is called the partition function, A(θ) is called the log
          partition function or cumulant function, and h(x) is the a scaling constant, often 1. If
          φ(x) = x, we say it is a natural exponential family.
            Equation 9.2 can be generalized by writing
             p(x|θ) = h(x) exp[η(θ)T φ(x) − A(η(θ))]                                                  (9.5)

          where η is a function that maps the parameters θ to the canonical parameters η = η(θ). If
          dim(θ) < dim(η(θ)), it is called a curved exponential family, which means we have more
          sufficient statistics than parameters. If η(θ) = θ, the model is said to be in canonical form.
          We will assume models are in canonical form unless we state otherwise.

 9.2.2    Examples
          Let us consider some examples to make things clearer.

9.2.2.1   Bernoulli
          The Bernoulli for x ∈ {0, 1} can be written in exponential family form as follows:

             Ber(x|μ) = μx (1 − μ)1−x = exp[x log(μ) + (1 − x) log(1 − μ)] = exp[φ(x)T θ]            (9.6)

          where φ(x) = [I(x = 0), I(x = 1)] and θ = [log(μ), log(1 − μ)]. However, this representation
          is over-complete since there is a linear dependendence between the features:

             1T φ(x) = I(x = 0) + I(x = 1) = 1                                                        (9.7)
          Consequently θ is not uniquely identiﬁable. It is common to require that the representation be
          minimal, which means there is a unique θ associated with the distribution. In this case, we
          can just deﬁne
                                                    
                                                μ
             Ber(x|μ) = (1 − μ) exp x log                                                           (9.8)
                                              1−μ
          9.2. The exponential family                                                                                        283

                                             
          Now we have φ(x) = x, θ = log 1−μ μ
                                                , which is the log-odds ratio, and Z = 1/(1 − μ). We
          can recover the mean parameter μ from the canonical parameter using
                                     1
             μ = sigm(θ) =                                                                                                  (9.9)
                                  1 + e−θ

9.2.2.2   Multinoulli
          We can represent the multinoulli as a minimal exponential family as follows (where xk = I(x =
          k)):
                                             K             
                             K
                                  xk
                                               
              Cat(x|μ) =        μk = exp          xk log μk                                        (9.10)
                                  k=1                      k=1
                                         K−1                                                                 
                                                                         
                                                                          K−1                    
                                                                                                 K−1
                             =    exp           xk log μk +          1−         xk     log(1 −         μk )                 (9.11)
                                          k=1                             k=1                    k=1
                                         K−1                                                                 
                                                                    μk                          
                                                                                                 K−1
                             =    exp           xk log               K−1
                                                                                     + log(1 −         μk )                (9.12)
                                          k=1                  1−    j=1   μj                    k=1
                                         K−1                                  
                                                              μk
                             =    exp           xk log               + log μK                                              (9.13)
                                                               μK
                                          k=1

                                  K−1
          where μK = 1 −          k=1    μk . We can write this in exponential family form as follows:

             Cat(x|θ)        = exp(θ T φ(x) − A(θ))                                                                        (9.14)
                                    μ1               μK−1
                        θ    = [log    , . . . , log      ]                                                                (9.15)
                                    μK                μK
                  φ(x)       = [I(x = 1), . . . , I(x = K − 1)]                                                            (9.16)
          We can recover the mean parameters from the canonical parameters using
                                 e θk
             μk   =               K−1 θj
                                                                                                                           (9.17)
                            1+    j=1 e

          From this, we ﬁnd
                                        K−1 θj
                                        j=1 e                    1
             μK     =       1−            K−1 θj
                                                       =       K−1 θj
                                                                                                                           (9.18)
                                 1+       j=1 e                j=1 e

          and hence
                                         
                                         K−1
             A(θ)     =      log 1 +            e θk                                                                       (9.19)
                                          k=1

                                                                                                   K
          If we deﬁne θK = 0, we can write μ = S(θ) and A(θ) = log                                      θk
                                                                                                   k=1 e ,        where S is the
          softmax function in Equation 4.39.
          284                                    Chapter 9. Generalized linear models and the exponential family


9.2.2.3   Univariate Gaussian
          The univariate Gaussian can be written in exponential family form as follows:
                                           1          1
             N (x|μ, σ 2 )    =                  exp[−    (x − μ)2 ]                                          (9.20)
                                             1
                                    (2πσ 2 ) 2       2σ 2
                                        1             1 2       μ     1
                              =             1 exp[−     2
                                                          x + 2 x − 2 μ2 ]                                    (9.21)
                                    (2πσ )2 2        2σ        σ     2σ
                                      1
                              =            exp(θ T φ(x))                                                      (9.22)
                                    Z(θ)
          where
                               
                                   μ/σ 2
                     θ    =         −1                                                                        (9.23)
                                    2σ 2
                               
                                 x
                  φ(x)    =                                                                                   (9.24)
                                x2
                               √          μ2
             Z(μ, σ 2 )   =      2πσ exp[ 2 ]                                                                 (9.25)
                                         2σ
                               −θ12   1           1
                  A(θ)    =         − log(−2θ2 ) − log(2π)                                                    (9.26)
                               4θ2    2           2

9.2.2.4   Non-examples
          Not all distributions of interest belong to the exponential family. For example, the uniform
          distribution, X ∼ Unif(a, b), does not, since the support of the distribution depends on the
          parameters. Also, the Student T distribution (Section 11.4.5) does not belong, since it does not
          have the required form.

 9.2.3    Log partition function
          An important property of the exponential family is that derivatives of the log partition function
          can be used to generate cumulants of the sufficient statistics.2 For this reason, A(θ) is
          sometimes called a cumulant function. We will prove this for a 1-parameter distribution;
          this can be generalized to a K-parameter distribution in a straightforward way. For the ﬁrst

                                                     are its mean E [X] and variance var [X], whereas the ﬁrst and
          2. The ﬁrst and second cumulants of a distribution
          second moments are its mean E [X] and E X 2 .
          9.2. The exponential family                                                                     285


          derivative we have
                             
              dA         d
                    =         log exp(θφ(x))h(x)dx                                                      (9.27)
              dθ        dθ
                         d
                            )
                         dθ) exp(θφ(x))h(x)dx
                    =                                                                                   (9.28)
                             exp(θφ(x))h(x)dx
                        )
                           φ(x) exp(θφ(x))h(x)dx
                    =                                                                                   (9.29)
                                 exp(A(θ))
                        
                    =       φ(x) exp(θφ(x) − A(θ))h(x)dx                                                (9.30)
                        
                    =       φ(x)p(x)dx = E [φ(x)]                                                       (9.31)

            For the second derivative we have
                        
             d2 A
                    =      φ(x) exp (θφ(x) − A(θ)) h(x)(φ(x) − A (θ))dx                                (9.32)
             dθ2
                        
                    =      φ(x)p(x)(φ(x) − A (θ))dx                                                    (9.33)
                                                
                            2                
                    =      φ (x)p(x)dx − A (θ) φ(x)p(x)dx                                               (9.34)
                           2                  2
                    = E φ (X) − E [φ(x)] = var [φ(x)]                                                   (9.35)
          where we used the fact that A (θ) = dA
                                                dθ = E [φ(x)].
            In the multivariate case, we have that
              ∂2A
                     = E [φi (x)φj (x)] − E [φi (x)] E [φj (x)]                                         (9.36)
             ∂θi ∂θj
          and hence
             ∇2 A(θ) = cov [φ(x)]                                                                       (9.37)
          Since the covariance is positive deﬁnite, we see that A(θ) is a convex function (see Section 7.3.3).

9.2.3.1   Example: the Bernoulli distribution
          For example, consider the Bernoulli distribution. We have A(θ) = log(1 + eθ ), so the mean is
          given by
             dA    eθ        1
                =       =         = sigm(θ) = μ                                                         (9.38)
             dθ   1+e θ   1 + e−θ
          The variance is given by
             d2 A         d
                      =      (1 + e−θ )−1 = (1 + e−θ )−2 .e−θ                                           (9.39)
             dθ2          dθ
                            e−θ       1         1       1
                      =         −θ      −θ
                                           = θ                = (1 − μ)μ                                (9.40)
                          1+e 1+e             e + 1 1 + e−θ
        286                                       Chapter 9. Generalized linear models and the exponential family


9.2.4   MLE for the exponential family
        The likelihood of an exponential family model has the form
                      N         
                                                     N
           p(D|θ) =        h(xi ) g(θ)N exp η(θ)T [       φ(xi )]                                           (9.41)
                        i=1                                       i=1

        We see that the sufficient statistics are N and
                      
                      N                         
                                                N
           φ(D) = [         φ1 (xi ), . . . ,         φK (xi )]                                            (9.42)
                      i=1                       i=1

        For example, for the Bernoulli model we have φ = [ i I(xi = 1)], and for the univariate
        Gaussian, we have φ = [ i xi , i x2i ]. (We also need to know the sample size, N .)
           The Pitman-Koopman-Darmois theorem states that, under certain regularity conditions, the
        exponential family is the only family of distributions with ﬁnite sufficient statistics. (Here, ﬁnite
        means of a size independent of the size of the data set.)
           One of the conditions required in this theorem is that the support of the distribution not be
        dependent on the parameter. For a simple example of such a distribution, consider the uniform
        distribution
                                     1
           p(x|θ) = U (x|θ) =          I(0 ≤ x ≤ θ)                                                        (9.43)
                                     θ
        The likelihood is given by

           p(D|θ) = θ−N I(0 ≤ max{xi } ≤ θ)                                                                (9.44)

        So the sufficient statistics are N and s(D) = maxi xi . This is ﬁnite in size, but the uni-
        form distribution is not in the exponential family because its support set, X , depends on the
        parameters.
           We now descibe how to compute the MLE for a canonical exponential family model. Given
        N iid data points D = (x1 , . . . , xN ), the log-likelihood is
           log p(D|θ) = θ T φ(D) − N A(θ)                                                                  (9.45)

        Since −A(θ) is concave in θ, and θ T φ(D) is linear in θ, we see that the log likelihood is
        concave, and hence has a unique global maximum. To derive this maximum, we use the fact
        that the derivative of the log partition function yields the expected value of the sufficient statistic
        vector (Section 9.2.3):

           ∇θ log p(D|θ) = φ(D) − N E [φ(X)]                                                               (9.46)

           Setting this gradient to zero, we see that at the MLE, the empirical average of the sufficient
        statistics must equal the model’s theoretical expected sufficient statistics, i.e., θ̂ must satisfy

                         1 
                            N
           E [φ(X)] =          φ(xi )                                                                       (9.47)
                         N i=1
          9.2. The exponential family                                                                     287


          This is called moment matching. For example, in the Bernoulli distribution, we have φ(X) =
          I(X = 1), so the MLE satisﬁes

                                               1 
                                                  N
             E [φ(X)] = p(X = 1) = μ̂ =              I(xi = 1)                                          (9.48)
                                               N i=1

 9.2.5    Bayes for the exponential family *
          We have seen that exact Bayesian analysis is considerably simpliﬁed if the prior is conjugate to
          the likelihood. Informally this means that the prior p(θ|τ ) has the same form as the likelihood
          p(D|θ). For this to make sense, we require that the likelihood have ﬁnite sufficient statistics, so
          that we can write p(D|θ) = p(s(D)|θ). This suggests that the only family of distributions for
          which conjugate priors exist is the exponential family. We will derive the form of the prior and
          posterior below.

9.2.5.1   Likelihood
          The likelihood of the exponential family is given by
                                             
             p(D|θ) ∝ g(θ)N exp η(θ)T sN                                                                (9.49)
                           N
          where sN =       i=1   s(xi ). In terms of the canonical parameters this becomes
             p(D|η) ∝ exp(N η T s − N A(η))                                                             (9.50)
                       1
          where s =    N sN .


9.2.5.2   Prior
          The natural conjugate prior has the form
                                                  
             p(θ|ν0 , τ 0 ) ∝ g(θ)ν0 exp η(θ)T τ 0                                                      (9.51)
          Let us write τ 0 = ν0 τ 0 , to separate out the size of the prior pseudo-data, ν0 , from the mean of
          the sufficient statistics on this pseudo-data, τ 0 . In canonical form, the prior becomes
             p(η|ν0 , τ 0 ) ∝ exp(ν0 η T τ 0 − ν0 A(η))                                                 (9.52)

9.2.5.3   Posterior
          The posterior is given by
             p(θ|D) = p(θ|νN , τ N ) = p(θ|ν0 + N, τ 0 + sN )                                           (9.53)
          So we see that we just update the hyper-parameters by adding. In canonical form, this becomes
                                                                  
             p(η|D) ∝ exp η T (ν0 τ 0 + N s) − (ν0 + N )A(η))                                      (9.54)
                                         ν0 τ 0 + N s
                       = p(η|ν0 + N,                  )                                            (9.55)
                                           ν0 + N
          So we see that the posterior hyper-parameters are a convex combination of the prior mean
          hyper-parameters and the average of the sufficient statistics.
          288                                           Chapter 9. Generalized linear models and the exponential family


9.2.5.4   Posterior predictive density
          Let us derive a generic expression for the predictive density for future observables D =
          (x̃1 , . . . , x̃N  ) given past data D = (x1 , . . . , xN ) as follows. For notational brevity, we
          will combine the sufficient statistics with the size of the data, as follows: τ̃ 0 = (ν0 , τ 0 ),
          s̃(D) = (N, s(D)), and s̃(D ) = (N  , s(D )). So the prior becomes
                              1
             p(θ|τ̃ 0 ) =            g(θ)ν0 exp(η(θ)T τ 0 )                                                      (9.56)
                            Z(τ̃ 0 )
          The likelihood and posterior have a similar form. Hence
                            
             p(D |D) =        p(D |θ)p(θ|D)dθ                                                                  (9.57)
                            ⎡          ⎤
                              
                              N                             
                                                                   
                        = ⎣ h(x̃i )⎦ Z(τ̃ 0 + s̃(D))−1 g(θ)ν0 +N +N dθ                                           (9.58)
                                     i=1
                                          ⎛                                        ⎞
                                                         
                                                          N            N
                                                                       
                                    × exp ⎝   ηk (θ)(τk +   sk (xi ) +    sk (x̃i )⎠ dθ                          (9.59)
                                                  k                 i=1             i=1
                                    ⎡    
                                                   ⎤
                                        
                                        N
                                                        Z(τ̃ 0 + s̃(D) + s̃(D ))
                            =       ⎣        h(x̃i )⎦                                                            (9.60)
                                     i=1
                                                             Z(τ̃ 0 + s̃(D))

          If N = 0, this becomes the marginal likelihood of D , which reduces to the familiar form of
          normalizer of the posterior divided by the normalizer of the prior, multiplied by a constant.

9.2.5.5   Example: Bernoulli distribution
          As a simple example, let us revisit the Beta-Bernoulli model in our new notation.
            The likelihood is given by

                                                           θ   
             p(D|θ) = (1 − θ)N exp log(                      )   xi                                               (9.61)
                                                          1−θ i

          Hence the conjugate prior is given by
                                             
                                                 θ
            p(θ|ν0 , τ0 ) ∝ (1 − θ)ν0 exp log(      )τ0                                                          (9.62)
                                                1−θ
                                =       θτ0 (1 − θ)ν0 −τ0                                                        (9.63)
          If we deﬁne α = τ0 + 1 and β = ν0 − τ0 + 1, we see that this is a beta distribution.
             We can derive the posterior as follows, where s = i I(xi = 1) is the sufficient statistic:
             p(θ|D)    ∝        θτ0 +s (1 − θ)ν0 −τ0 +n−s                                                        (9.64)
                       =        θτn (1 − θ)νn −τn                                                                (9.65)
            We can derive the posterior predictive distribution as follows. Assume p(θ) = Beta(θ|α, β),
          and let s = s(D) be the number of heads in the past data. We can predict the probability of a
        9.2. The exponential family                                                                          289


        given sequence of future heads, D = (x̃1 , . . . , x̃m ), with sufficient statistic s =
                                                                                                    m
                                                                                                    i=1   I(x̃i =
        1), as follows:
                           1
                
            p(D |D) =         p(D |θ|Beta(θ|αn , βn )dθ                                                   (9.66)
                                   0
                                                
                                   Γ(αn + βn ) 1 αn +t −1               
                          =                        θ       (1 − θ)βn +m−t −1 dθ                            (9.67)
                                   Γ(αn )Γ(βn ) 0
                                   Γ(αn + βn ) Γ(αn+m )Γ(βn+m )
                          =                                                                                (9.68)
                                   Γ(αn )Γ(βn ) Γ(αn+m + βn+m )
        where
           αn+m       =       αn + s = α + s + s                                                         (9.69)
                                                                     
           βn+m       =       βn + (m − s ) = β + (n − s) + (m − s )                                       (9.70)

9.2.6   Maximum entropy derivation of the exponential family *
        Although the exponential family is convenient, is there any deeper justiﬁcation for its use? It
        turns out that there is: it is the distribution that makes the least number of assumptions about
        the data, subject to a speciﬁc set of user-speciﬁed constraints, as we explain below. In particular,
        suppose all we know is the expected values of certain features or functions:
           
               fk (x)p(x) = Fk                                                                         (9.71)
            x

        where Fk are known constants, and fk (x) is an arbitrary function. The principle of maximum
        entropy or maxent says we should pick the distribution with maximum entropy (closest to
        uniform), subject to the constraints that the moments of the distribution match the empirical
        moments of the speciﬁed functions.
          To maximize entropy subject to the constraints in Equation 9.71, and the constraints that
        p(x) ≥ 0 and x p(x) = 1, we need to use Lagrange multipliers. The Lagrangian is given by
                                                                           
           J(p, λ) = −       p(x) log p(x) + λ0 (1 −    p(x)) +     λk (Fk −      p(x)fk (x))   (9.72)
                               x                           x              k           x

        We can use the calculus of variations to take derivatives wrt the function p, but we will adopt
        a simpler approach and treat p as a ﬁxed length vector (since we are assuming x is discrete).
        Then we have
             ∂J                             
                  = −1 − log p(x) − λ0 −        λk fk (x)                                         (9.73)
            ∂p(x)
                                                    k

                   ∂J
        Setting   ∂p(x)   = 0 yields

                     1       
           p(x) =      exp(−   λk fk (x))                                                                  (9.74)
                     Z
                                       k
        290                               Chapter 9. Generalized linear models and the exponential family



                            w
                                                       g −1                      Ψ
                                             ηi                     μi                       θi
                                                         g                     Ψ−1
                            xi

           Figure 9.1 A visualization of the various features of a GLM. Based on Figure 8.3 of (Jordan 2007).



        where Z = e1+λ0 . Using the sum to one constraint, we have
                             1           
          1 =        p(x) =          exp(−     λk fk (x))                                                  (9.75)
                   x
                              Z x
                                                  k

        Hence the normalization constant is given by
                             
          Z =         exp(−       λk fk (x))                                                               (9.76)
                      x           k

        Thus the maxent distribution p(x) has the form of the exponential family (Section 9.2), also
        known as the Gibbs distribution.

 9.3    Generalized linear models (GLMs)
        Linear and logistic regression are examples of generalized linear models, or GLMs (McCullagh
        and Nelder 1989). These are models in which the output density is in the exponential family
        (Section 9.2), and in which the mean parameters are a linear combination of the inputs, passed
        through a possibly nonlinear function, such as the logistic function. We describe GLMs in more
        detail below. We focus on scalar outputs for notational simplicity. (This excludes multinomial
        logistic regression, but this is just to simplify the presentation.)

9.3.1   Basics
        To understand GLMs, let us ﬁrst consider the case of an unconditional dstribution for a scalar
        response variable:
                                                            
                                  yi θ − A(θ)
           p(yi |θ, σ 2 ) = exp               + c(yi , σ 2
                                                           )                                     (9.77)
                                       σ2
        where σ 2 is the dispersion parameter (often set to 1), θ is the natural parameter, A is the
        partition function, and c is a normalization constant. For example, in the case of logistic
                                                       μ
        regression, θ is the log-odds ratio, θ = log( 1−μ ), where μ = E [y] = p(y = 1) is the mean
        parameter (see Section 9.2.2.1). To convert from the mean parameter to the natural parameter
9.3. Generalized linear models (GLMs)                                                               291


                  Distrib.      Link g(μ)         θ   = ψ(μ)               μ = ψ −1 (θ) = E [y]
                  N (μ, σ 2 )   identity          θ   =μ                   μ=θ
                                                              μ
                  Bin(N, μ)     logit             θ   = log( 1−μ )         μ = sigm(θ)
                  Poi(μ)        log               θ   = log(μ)             μ = eθ

          Table 9.1 Canonical link functions ψ and their inverses for some common GLMs.


we can use a function ψ, so θ = Ψ(μ). This function is uniquely determined by the form of the
exponential family distribution. In fact, this is an invertible mapping, so we have μ = Ψ−1 (θ).
Furthermore, we know from Section 9.2.3 that the mean is given by the derivative of the partition
function, so we have μ = Ψ−1 (θ) = A (θ).
  Now let us add inputs/ covariates. We ﬁrst deﬁne a linear function of the inputs:
   ηi = w T x i                                                                                   (9.78)
We now make the mean of the distribution be some invertible monotonic function of this linear
combination. By convention, this function, known as the mean function, is denoted by g −1 , so
   μi = g −1 (ηi ) = g −1 (wT xi )                                                                (9.79)
See Figure 9.1 for a summary of the basic model.
   The inverse of the mean function, namely g(), is called the link function. We are free to
choose almost any function we like for g, so long as it is invertible, and so long as g −1 has the
appropriate range. For example, in logistic regression, we set μi = g −1 (ηi ) = sigm(ηi ).
   One particularly simple form of link function is to use g = ψ; this is called the canonical
link function. In this case, θi = ηi = wT xi , so the model becomes
                                                                  
                   2            yi wT xi − A(wT xi )            2
    p(yi |xi , w, σ ) = exp                           + c(yi , σ )                           (9.80)
                                         σ2
In Table 9.1, we list some distributions and their canonical link functions. We see that for the
Bernoulli/ binomial distribution, the canonical link is the logit function, g(μ) = log(η/(1 − η)),
whose inverse is the logistic function, μ = sigm(η).
   Based on the results in Section 9.2.3, we can show that the mean and variance of the response
variable are as follows:
       
     E y|xi , w, σ 2 = μi = A (θi )                                                         (9.81)
                   2         2           2
    var y|xi , w, σ      = σi = A (θi )σ                                                    (9.82)
  To make the notation clearer, let us consider some simple examples.

• For linear regression, we have

                                                μ2i           
                                     yi μ i −             1       yi2
      log p(yi |xi , w, σ 2 )   =               2
                                                      −               + log(2πσ 2 )               (9.83)
                                          σ2              2       σ2

   where yi ∈ R, and θi = μi = wT xi Here A(θ) = θ2 /2, so E [yi ] = μi and var [yi ] = σ 2 .
        292                                 Chapter 9. Generalized linear models and the exponential family


        • For binomial regression, we have
                                                                                    
                                                     πi                               Ni
                log p(yi |xi , w)    =   yi log(          ) + Ni log(1 − πi ) + log                   (9.84)
                                                   1 − πi                             yi

           where yi ∈ {0, 1, . . . , Ni }, πi = sigm(wT xi ), θi = log(πi /(1 − πi )) = wT xi , and σ 2 = 1.
           Here A(θ) = Ni log(1 + eθ ), so E [yi ] = Ni πi = μi , var [yi ] = Ni πi (1 − πi ).
        • For poisson regression, we have

                log p(yi |xi , w)    =   yi log μi − μi − log(yi !)                                   (9.85)

           where yi ∈ {0, 1, 2, . . .}, μi = exp(wT xi ), θi = log(μi ) = wT xi , and σ 2 = 1. Here
           A(θ) = eθ , so E [yi ] = var [yi ] = μi . Poisson regression is widely used in bio-statistical
           applications, where yi might represent the number of diseases of a given person or place,
           or the number of reads at a genomic location in a high-throughput sequencing context (see
           e.g., (Kuan et al. 2009)).

9.3.2   ML and MAP estimation
        One of the appealing properties of GLMs is that they can be ﬁt using exactly the same methods
        that we used to ﬁt logistic regression. In particular, the log-likelihood has the following form:

                                           1 
                                                N
           (w) = log p(D|w)         =             i                                                 (9.86)
                                           σ 2 i=1
                                i       θi yi − A(θi )                                              (9.87)
        We can compute the gradient vector using the chain rule as follows:
              di        di dθi dμi dηi
                    =                                                                                 (9.88)
              dwj        dθi dμi dηi dwj
                                         dθi dμi
                    =    (yi − A (θi ))         xij                                                  (9.89)
                                         dμi dηi
                                    dθi dμi
                    =    (yi − μi )          xij                                                      (9.90)
                                    dμi dηi
        If we use a canonical link, θi = ηi , this simpliﬁes to
                           N                 
                        1 
            ∇w (w) = 2          (yi − μi )xi                                                         (9.91)
                       σ i=1

        which is a sum of the input vectors, weighted by the errors. This can be used inside a (stochastic)
        gradient descent procedure, discussed in Section 8.5.2. However, for improved efficiency, we
        should use a second-order method. If we use a canonical link, the Hessian is given by

                     1  dμi
                        N
                                          1
           H=−        2
                               xi xTi = − 2 XT SX                                                     (9.92)
                     σ i=1 dθi           σ
        9.4. Probit regression                                                                        293


                            Name                       Formula
                                                                             eη
                            Logistic                   g −1 (η) = sigm(η) = 1+e η

                            Probit                     g −1 (η) = Φ(η)
                            Log-log                    g −1 (η) = exp(− exp(−η))
                            Complementary log-log      g −1 (η) = 1 − exp(− exp(η))

                     Table 9.2 Summary of some possible mean functions for binary regression.



        where S = diag( dμ   1          dμN
                          dθ1 , . . . , dθN ) is a diagonal weighting matrix. This can be used inside the
        IRLS algorithm (Section 8.3.4). Speciﬁcally, we have the following Newton update:
           wt+1    =    (XT St X)−1 XT St zt                                                        (9.93)
             zt    =    θt +     S−1
                                  t (y   − μt )                                                     (9.94)

        where θ t = Xwt and μt = g −1 (η t ).
           If we extend the derivation to handle non-canonical links, we ﬁnd that the Hessian has another
        term. However, it turns out that the expected Hessian is the same as in Equation 9.92; using
        the expected Hessian (known as the Fisher information matrix) instead of the actual Hessian is
        known as the Fisher scoring method.
           It is straightforward to modify the above procedure to perform MAP estimation with a Gaus-
        sian prior: we just modify the objective, gradient and Hessian, just as we added 2 regularization
        to logistic regression in Section 8.3.6.

9.3.3   Bayesian inference
        Bayesian inference for GLMs is usually conducted using MCMC (Chapter 24). Possible methods
        include Metropolis Hastings with an IRLS-based proposal (Gamerman 1997), Gibbs sampling
        using adaptive rejection sampling (ARS) for each full-conditional (Dellaportas and Smith 1993),
        etc. See e.g., (Dey et al. 2000) for futher information. It is also possible to use the Gaussian
        approximation (Section 8.4.1) or variational inference (Section 21.8.1.1).

 9.4    Probit regression
        In (binary) logistic regression, we use a model of the form p(y = 1|xi , w) = sigm(wT xi ). In
        general, we can write p(y = 1|xi , w) = g −1 (wT xi ), for any function g −1 that maps [−∞, ∞]
        to [0, 1]. Several possible mean functions are listed in Table 9.2.
           In this section, we focus on the case where g −1 (η) = Φ(η), where Φ(η) is the cdf of the
        standard normal. This is known as probit regression. The probit function is very similar to
        the logistic function, as shown in Figure 8.7(b). However, this model has some advantages over
        logistic regression, as we will see.
        294                                Chapter 9. Generalized linear models and the exponential family


9.4.1   ML/MAP estimation using gradient-based optimization
        We can ﬁnd the MLE for probit regression using standard gradient methods. Let μi = wT xi ,
        and let ỹi ∈ {−1, +1}. Then the gradient of the log-likelihod for a speciﬁc case is given by
                     d                      dμi d                          ỹi φ(μi )
           gi         log p(ỹi |wT xi ) =        log p(ỹi |wT xi ) = xi                              (9.95)
                    dw                      dw dμi                         Φ(ỹi μi )
        where φ is the standard normal pdf, and Φ is its cdf. Similarly, the Hessian for a single case is
        given by
                                                    
                   d                                   φ(μi )2      ỹi μi φ(μi )
           Hi =      2
                       log p(ỹ i |w T
                                       x i ) = −x i               +               xTi              (9.96)
                 dw                                   Φ(ỹi μi )2     Φ(ỹi μi )
        We can modify these expressions to compute the MAP estimate in a straightforward manner. In
        particular, if we use the prior p(w) = N (0, V0 ), the gradient and Hessian of the penalized
        log likelihood have the form i gi + 2V0−1 w and i Hi + 2V0−1 . These expressions can be
        passed to any gradient-based optimizer. See probitRegDemo for a demo.

9.4.2   Latent variable interpretation
        We can interpret the probit (and logistic) model as follows. First, let us associate each item
        xi with two latent utilities, u0i and u1i , corresponding to the possible choices of yi = 0 and
        yi = 1. We then assume that the observed choice is whichever action has larger utility. More
        precisely, the model is as follows:
           u0i         w0T xi + δ0i                                                                    (9.97)
           u1i         w1T xi + δ1i                                                                    (9.98)
              yi    =   I(u1i > u10 )                                                                   (9.99)
        where δ’s are error terms, representing all the other factors that might be relevant in decision
        making that we have chosen not to (or are unable to) model. This is called a random utility
        model or RUM (McFadden 1974; Train 2009).
           Since it is only the difference in utilities that matters, let us deﬁne zi = u1i − u0i + i , where
        i = δ1i − δ0i . If the δ’s have a Gaussian distribution, then so does i . Thus we can write
                   zi      w T xi + i                                                                (9.100)
                  ∼i       N (0, 1)                                                                    (9.101)
           yi = 1 =         I(zi ≥ 0)                                                                  (9.102)
        Following (Fruhwirth-Schnatter and Fruhwirth 2010), we call this the difference RUM or dRUM
        model.
          When we marginalize out zi , we recover the probit model:
                                 
           p(yi = 1|xi , w) =       I(zi ≥ 0)N (zi |wT xi , 1)dzi                              (9.103)

                                 =     p(wT xi +  ≥ 0) = p( ≥ −wT xi )                               (9.104)
                                 =     1 − Φ(−w xi ) = Φ(w xi )
                                                 T             T
                                                                                                       (9.105)
        9.4. Probit regression                                                                                        295


        where we used the symmetry of the Gaussian.3 This latent variable interpretation provides an
        alternative way to ﬁt the model, as discussed in Section 11.4.6.
            Interestingly, if we use a Gumbel distribution for the δ’s, we induce a logistic distibution for
        i , and the model reduces to logistic regression. See Section 24.5.1 for further details.

9.4.3   Ordinal probit regression *
        One advantage of the latent variable interpretation of probit regression is that it is easy to extend
        to the case where the response variable is ordinal, that is, it can take on C discrete values which
        can be ordered in some way, such as low, medium and high. This is called ordinal regression.
        The basic idea is as follows. We introduce C + 1 thresholds γj and set
           yi = j     if γj−1 < zi ≤ γj                                                                            (9.106)

        where γ0 ≤ · · · ≤ γC . For identiﬁability reasons, we set γ0 = −∞, γ1 = 0 and γC = ∞. For
        example, if C = 2, this reduces to the standard binary probit model, whereby zi < 0 produces
        yi = 0 and zi ≥ 0 produces yi = 1. If C = 3, we partition the real line into 3 intervals:
        (−∞, 0], (0, γ2 ], (γ2 , ∞). We can vary the parameter γ2 to ensure the right relative amount
        of probability mass falls in each interval, so as to match the empirical frequencies of each class
        label.
           Finding the MLEs for this model is a bit trickier than for binary probit regression, since
        we need to optimize for w and γ, and the latter must obey an ordering constraint. See e.g.,
        (Kawakatsu and Largey 2009) for an approach based on EM. It is also possible to derive a simple
        Gibbs sampling algorithm for this model (see e.g., (Hoff 2009, p216)).

9.4.4   Multinomial probit models *
        Now consider the case where the response variable can take on C unordered categorical values,
        yi ∈ {1, . . . , C}. The multinomial probit model is deﬁned as follows:
           zic    =    wT xic + ic                                                                                (9.107)
                 ∼    N (0, R)                                                                                    (9.108)
            yi    =    arg max zic                                                                                 (9.109)
                              c

        See e.g., (Dow and Endersby 2004; Scott 2009; Fruhwirth-Schnatter and Fruhwirth 2010) for
        more details on the model and its connection to multinomial logistic regression. (By deﬁning
        w = [w1 , . . . , wC ], and xic = [0, . . . , 0, xi , 0, . . . , 0], we can recover the more familiar
        formulation zic = xTi wc .) Since only relative utilities matter, we constrain R to be a correlation
        matrix. If instead of setting yi = argmaxc zic we use yic = I(zic > 0), we get a model known
        as multivariate probit, which is one way to model C correlated binary outcomes (see e.g.,
        (Talhouk et al. 2011)).
        3. Note that the assumption that the Gaussian noise term is zero mean and unit variance is made without loss of
        generality. To see why, suppose we used some other mean μ and variance σ 2 . Then we could easily rescale w and add
        an offset term without changing the likelihood. since P (N (0, 1) ≥ −wT x) = P (N (μ, σ 2 ) ≥ −(wT x + μ)/σ).
        296                              Chapter 9. Generalized linear models and the exponential family


 9.5    Multi-task learning
        Sometimes we want to ﬁt many related classiﬁcation or regression models. It is often reasonable
        to assume the input-output mapping is similar across these different models, so we can get
        better performance by ﬁtting all the parameters at the same time. In machine learning, this
        setup is often called multi-task learning (Caruana 1998), transfer learning (e.g., (Raina et al.
        2005)), or learning to learn (Thrun and Pratt 1997). In statistics, this is usually tackled using
        hierarchical Bayesian models (Bakker and Heskes 2003), as we discuss below, although there are
        other possible methods (see e.g., (Chai 2010)).

9.5.1   Hierarchical Bayes for multi-task learning
        Let yij be the response of the i’th item in group j, for i = 1 : Nj and j = 1 : J. For example,
        j might index schools, i might index students within a school, and yij might be the test score,
        as in Section 5.6.2. Or j might index people, and i might index purchaes, and yij might be
        the identity of the item that was purchased (this is known as discrete choice modeling (Train
        2009)). Let xij be a feature vector associated with yij . The goal is to ﬁt the models p(yj |xj )
        for all j.
           Although some groups may have lots of data, there is often a long tail, where the majority
        of groups have little data. Thus we can’t reliably ﬁt each model separately, but we don’t want
        to use the same model for all groups. As a compromise, we can ﬁt a separate model for
        each group, but encourage the model parameters to be similar across groups. More precisely,
        suppose E [yij |xij ] = g(xTij β j ), where g is the link function for the GLM. Furthermore, suppose
        β j ∼ N (β ∗ , σj2 I), and that β ∗ ∼ N (μ, σ∗2 I). In this model, groups with small sample
        size borrow statistical strength from the groups with larger sample size, because the β j ’s are
        correlated via the latent common parents β ∗ (see Section 5.5 for further discussion of this point).
        The term σj2 controls how much group j depends on the common parents and the σ∗2 term
        controls the strength of the overall prior.
           Suppose, for simplicity, that μ = 0, and that σj2 and σ∗2 are all known (e.g., they could be set
        by cross validation). The overall log probability has the form
                                                                                 
                                                                 ||β j − β ∗ ||2     ||β ∗ ||2
            log p(D|β) + log p(β) =             log p(Dj |β j ) −         2         −                  (9.110)
                                           j
                                                                        2σj             2σ∗2

        We can perform MAP estimation of β = (β 1:J , β ∗ ) using standard gradient methods. Alter-
        natively, we can perform an iterative optimization scheme, alternating between optimizing the
        β j and the β ∗ ; since the likelihood and prior are convex, this is guaranteed to converge to the
        global optimum. Note that once the models are trained, we can discard β ∗ , and use each model
        separately.

9.5.2   Application to personalized email spam ﬁltering
        An interesting application of multi-task learning is personalized spam ﬁltering. Suppose we
        want to ﬁt one classiﬁer per user, β j . Since most users do not label their email as spam or not,
        it will be hard to estimate these models independently. So we will let the β j have a common
        prior β ∗ , representing the parameters of a generic user.
        9.5. Multi-task learning                                                                       297


           In this case, we can emulate the behavior of the above model with a simple trick (Daume
        2007b; Attenberg et al. 2009; Weinberger et al. 2009): we make two copies of each feature xi ,
        one concatenated with the user id, and one not. The effect will be to learn a predictor of the
        form

           E [yi |xi , u] = (β ∗ , w1 , · · · , wJ )T [xi , I(u = 1)xi , · · · , I(u = J)xi ]        (9.111)

        where u is the user id. In other words,

           E [yi |xi , u = j] = (β T∗ + wj )T xi                                                     (9.112)

        Thus β ∗ will be estimated from everyone’s email, whereas wj will just be estimated from user
        j’s email.
           To see the correspondence with the above hierarchical Bayesian model, deﬁne wj = β j − β ∗ .
        Then the log probability of the original model can be rewritten as
                                                 
                                        ||wj ||2     ||β ∗ ||2
                  log p(Dj |β ∗ + wj ) −            −                                           (9.113)
             j
                                           2σj2         2σ∗2

        If we assume σj2 = σ∗2 , the effect is the same as using the augmented feature trick, with the
        same regularizer strength for both wj and β ∗ . However, one typically gets better performance
        by not requiring that σj2 be equal to σ∗2 (Finkel and Manning 2009).

9.5.3   Application to domain adaptation
        Domain adaptation is the problem of training a set of classiﬁers on data drawn from different
        distributions, such as email and newswire text. This problem is obviously a special case of
        multi-task learning, where the tasks are the same.
           (Finkel and Manning 2009) used the above hierarchical Bayesian model to perform domain
        adaptation for two NLP tasks, namely named entity recognition and parsing. They report reason-
        ably large improvements over ﬁtting separate models to each dataset, and small improvements
        over the approach of pooling all the data and ﬁtting a single model.

9.5.4   Other kinds of prior
        In multi-task learning, it is common to assume that the prior is Gaussian. However, sometimes
        other priors are more suitable. For example, consider the task of conjoint analysis, which
        requires ﬁguring out which features of a product customers like best. This can be modelled
        using the same hierarchical Bayesian setup as above, but where we use a sparsity-promoting
        prior on β j , rather than a Gaussian prior. This is called multi-task feature selection. See e.g.,
        (Lenk et al. 1996; Argyriou et al. 2008) for some possible approaches.
           It is not always reasonable to assume that all tasks are all equally similar. If we pool the
        parameters across tasks that are qualitatively different, the performance will be worse than not
        using pooling, because the inductive bias of our prior is wrong. Indeed, it has been found
        experimentally that sometimes multi-task learning does worse than solving each task separately
        (this is called negative transfer).
        298                                Chapter 9. Generalized linear models and the exponential family


           One way around this problem is to use a more ﬂexible prior, such as a mixture of Gaussians.
        Such ﬂexible priors can provide robustness against prior mis-speciﬁcation. See e.g., (Xue et al.
        2007; Jacob et al. 2008) for details. One can of course combine mixtures with sparsity-promoting
        priors (Ji et al. 2009). Many other variants are possible.

 9.6    Generalized linear mixed models *
        Suppose we generalize the multi-task learning scenario to allow the response to include infor-
        mation at the group level, xj , as well as at the item level, xij . Similarly, we can allow the
        parameters to vary across groups, β j , or to be tied across groups, α. This gives rise to the
        following model:
                                                                                                
            E [yij |xij , xj ] = g φ1 (xij )T β j + φ2 (xj )T β j + φ3 (xij )T α + φ4 (xj )T α   (9.114)

        where the φk are basis functions. This model can be represented pictorially as shown in
        Figure 9.2(a). (Such ﬁgures will be explained in Chapter 10.) Note that the number of β j
        parameters grows with the number of groups, whereas the size of α is ﬁxed.
           Frequentists call the terms β j random effects, since they vary randomly across groups, but
        they call α a ﬁxed effect, since it is viewed as a ﬁxed but unknown constant. A model with
        both ﬁxed and random effects is called a mixed model. If p(y|x) is a GLM, the overall model
        is called a generalized linear mixed effects model or GLMM. Such models are widely used in
        statistics.

9.6.1   Example: semi-parametric GLMMs for medical data
        Consider the following example from (Wand 2009). Suppose yij is the amount of spinal bone
        mineral density (SBMD) for person j at measurement i. Let xij be the age of person, and let
        xj be their ethnicity, which can be one of: White, Asian, Black, or Hispanic. The primary goal
        is to determine if there are signiﬁcant differences in the mean SBMD among the four ethnic
        groups, after accounting for age. The data is shown in the light gray lines in Figure 9.2(b). We
        see that there is a nonlinear effect of SBMD vs age, so we will use a semi-parametric model
        which combines linear regression with non-parametric regression (Ruppert et al. 2003). We also
        see that there is variation across individuals within each group, so we will use a mixed effects
        model. Speciﬁcally, we will use φ1 (xij ) = 1 to account for the random effect of each person;
        φ2 (xij ) = 0 since no other coefficients are person-speciﬁc; φ3 (xij ) = [bk (xij )], where bk is
        the k’th spline basis functions (see Section 15.4.6.2), to account for the nonlinear effect of age;
        and φ4 (xj ) = [I(xj = w), I(xj = a), I(xj = b), I(xj = h)] to account for the effect of the
        different ethnicities. Furthermore, we use a linear link function. The overall model is therefore

           E [yij |xij , xj ]   =   βj + αT b(xij ) + ij                                            (9.115)
                                       
                                    +αw  I(xj = w) + αa I(xj = a) + αb I(xj = b) + αh I(xj = h)   (9.116)

        where ij ∼ N (0, σy2 ). α contains the non-parametric part of the model related to age, α
        contains the parametric part of the model related to ethnicity, and βj is a random offset
        for person j. We endow all of these regression coefficients with separate Gaussian priors.
        We can then perform posterior inference to compute p(α, α , β, σ 2 |D) (see Section 9.6.2 for
9.6. Generalized linear mixed models *                                                                                                  299



                                                                                             μβ         σβ2



                                                                                                       βj

                                                          μα           α                                                   σy2
                                                                                                       y ij
                                                          σα2
                                                                                      xj
                                                                                                       xij
                                                                                                       Nj
                                                                                                              J

                                                                                           (a)
                                                                                                  10     15           20     25

                                                                      Hispanic                                White
                                                                                                                                  1.4


                                                                                                                                  1.2
              spinal bone mineral density (g/cm2)




                                                                                                                                  1.0


                                                                                                                                  0.8


                                                                                                                                  0.6

                                                                       Asian                                  Black
                                                    1.4


                                                    1.2


                                                    1.0


                                                    0.8


                                                    0.6


                                                            10   15              20    25
                                                                                       age in years

                                                                                           (b)

Figure 9.2 (a) Directed graphical model for generalized linear mixed effects model with J groups. (b)
Spinal bone mineral density vs age for four different ethnic groups. Raw data is shown in the light gray
lines. Fitted model shown in black (solid is the posterior predicted mean, dotted is the posterior predictive
variance). From Figure 9 of (Wand 2009). Used with kind permission of Matt Wand
        300                              Chapter 9. Generalized linear models and the exponential family


        computational details). After ﬁtting the model, we can compute the prediction for each group.
        See Figure 9.2(b) for the results. We can also perform signiﬁcance testing, by computing p(αg −
        αw |D) for each ethnic group g relative to some baseline (say, White), as we did in Section 5.2.3.

9.6.2   Computational issues
        The principle problem with GLMMs is that they can be difficult to ﬁt, for two reasons. First,
        p(yij |θ) may not be conjugate to the prior p(θ) where θ = (α, β). Second, there are two levels
        of unknowns in the model, namely the regression coefficients θ and the means and variances
        of the priors η = (μ, σ).
           One approach is to adopt fully Bayesian inference methods, such as variational Bayes (Hall
        et al. 2011) or MCMC (Gelman and Hill 2007). We discuss VB in Section 21.5, and MCMC in
        Section 24.1.
           An alternative approach is to use empirical Bayes, which we discuss in general terms in
        Section 5.6. In the context of a GLMM, we can use the EM algorithm (Section 11.4), where in the
        E step we compute p(θ|η, D), and in the M step we optimize η. If the linear regression setting,
        the E step can be performed exactly, but in general we need to use approximations. Traditional
        methods use numerical quadrature or Monte Carlo (see e.g., (Breslow and Clayton 1993)). A
        faster approach is to use variational EM; see (Braun and McAuliffe 2010) for an application of
        variational EM to a multi-level discrete choice modeling problem.
           In frequentist statistics, there is a popular method for ﬁtting GLMMs called generalized
        estimating equations or GEE (Hardin and Hilbe 2003). However, we do not recommend this
        approach, since it is not as statistically efficient as likelihood-based methods (see Section 6.4.3).
        In addition, it can only provide estimates of the population parameters α, but not the random
        effects β j , which are sometimes of interest in themselves.

 9.7    Learning to rank *
        In this section, we discuss the learning to rank or LETOR problem. That is, we want to learn a
        function that can rank order a set of items (we will be more precise below). The most common
        application is to information retrieval. Speciﬁcally, suppose we have a query q and a set of
        documents d1 , . . . , dm that might be relevant to q (e.g., all documents that contain the string q).
        We would like to sort these documents in decreasing order of relevance and show the top k to
        the user. Similar problems arise in other areas, such as collaborative ﬁltering. (Ranking players
        in a game or tournament setting is a slightly different kind of problem; see Section 22.5.5.)
           Below we summarize some methods for solving this problem, following the presentation of
        (Liu 2009). This material is not based on GLMs, but we include it in this chapter anyway for
        lack of a better place.
           A standard way to measure the relevance of a document d to a query q is to use a probabilistic
        language
        'n         model based on a bag of words model. That is, we deﬁne sim(q, d)  p(q|d) =
           i=1 p(qi |d), where qi is the i’th word or term, and p(qi |d) is a multinoulli distribution
        estimated from document d. In practice, we need to smooth the estimated distribution, for
        example by using a Dirichlet prior, representing the overall frequency of each word. This can be
        9.7. Learning to rank *                                                                                               301


        estimated from all documents in the system. More precisely, we can use
                                  TF(t, d)
            p(t|d) = (1 − λ)               + λp(t|background)                                                              (9.117)
                                  LEN(d)
        where TF(t, d) is the frequency of term t in document d, LEN(d) is the number of words in d,
        and 0 < λ < 1 is a smoothing parameter (see e.g., Zhai and Lafferty (2004) for details).
          However, there might be many other signals that we can use to measure relevance. For
        example, the PageRank of a web document is a measure of its authoritativeness, derived from
        the web’s link structure (see Section 17.2.4 for details). We can also compute how often and
        where the query occurs in the document. Below we discuss how to learn how to combine all
        these signals.4

9.7.1   The pointwise approach
        Suppose we collect some training data representing the relevance of a set of documents for each
        query. Speciﬁcally, for each query q, suppose that we retrieve m possibly relevant documents
        dj , for j = 1 : m. For each query document pair, we deﬁne a feature vector, x(q, d). For
        example, this might contain the query-document similarity score and the page rank score of the
        document. Furthermore, suppose we have a set of labels yj representing the degree of relevance
        of document dj to query q. Such labels might be binary (e.g., relevant or irrelevant), or they may
        represent a degree of relevance (e.g., very relevant, somewhat relevant, irrelevant). Such labels
        can be obtained from query logs, by thresholding the number of times a document was clicked
        on for a given query.
           If we have binary relevance labels, we can solve the problem using a standard binary clas-
        siﬁcation scheme to estimate, p(y = 1|x(q, d)). If we have ordered relevancy labels, we can
        use ordinal regression to predict the rating, p(y = r|x(q, d)). In either case, we can then sort
        the documents by this scoring metric. This is called the pointwise approach to LETOR, and
        is widely used because of its simplicity. However, this method does not take into account the
        location of each document in the list. Thus it penalizes errors at the end of the list just as much
        as errors at the beginning, which is often not the desired behavior. In addition, each decision
        about relevance is made very myopically.

9.7.2   The pairwise approach
        There is evidence (e.g., (Carterette et al. 2008)) that people are better at judging the relative
        relevance of two items rather than absolute relevance. Consequently, the data might tell us
        that dj is more relevant than dk for a given query, or vice versa. We can model this kind of
        data using a binary classiﬁer of the form p(yjk |x(q, dj ), x(q, dk )), where we set yjk = 1 if
        rel(dj , q) > rel(dk , q) and yjk = 0 otherwise.
           One way to model such a function is as follows:

            p(yjk = 1|xj , xk ) = sigm(f (xj ) − f (xk ))                                                                  (9.118)

        4. Rather surprisingly, Google does not (or at least, did not as of 2008) using such learning methods in its search engine.
        Source: Peter Norvig, quoted in http://anand.typepad.com/datawocky/2008/05/are-human-experts-less-p
        rone-to-catastrophic-errors-than-machine-learned-models.html.
        302                                    Chapter 9. Generalized linear models and the exponential family


        where f (x) is a scoring function, often taken to be linear, f (x) = wT x. This is a special
        kind of neural network known as RankNet (Burges et al. 2005) (see Section 16.5 for a general
        discussion of neural networks). We can ﬁnd the MLE of w by maximizing the log likelihood, or
        equivalently, by minimizing the cross entropy loss, given by
                               N 
                                mi 
                                    mi
                   L       =                   Lijk                                                     (9.119)
                               i=1 j=1 k=j+1

           −Lijk           =   I(yijk = 1) log p(yijk = 1|xij , xik , w)
                               +I(yijk = 0) log p(yijk = 0|xij , xik , w)                               (9.120)
        This can be optimized using gradient descent. A variant of RankNet is used by Microsoft’s Bing
        search engine.5

9.7.3   The listwise approach
        The pairwise approach suffers from the problem that decisions about relevance are made just
        based on a pair of items (documents), rather than considering the full context. We now consider
        methods that look at the entire list of items at the same time.
           We can deﬁne a total order on a list by specifying a permutation of its indices, π. To model
        our uncertainty about π, we can use the Plackett-Luce distribution, which derives its name
        from independent work by (Plackett 1975) and (Luce 1959). This has the following form:
                     m
                              sj
           p(π|s) =          m                                                                    (9.121)
                     j=1     u=j su

        where sj = s(π −1 (j)) is the score of the document ranked at the j’th position.
           To understand Equation 9.121, let us consider a simple example. Suppose π = (A, B, C).
        Then we have that p(π) is the probability of A being ranked ﬁrst, times the probability of B
        being ranked second given that A is ranked ﬁrst, times the probabilty of C being ranked third
        given that A and B are ranked ﬁrst and second. In other words,
                             sA             sB       sC
            p(π|s) =                  ×           ×                                            (9.122)
                      sA + sB + sC       sB + sC     sC
           To incorporate features, we can deﬁne s(d) = f (x(q, d)), where we often take f to be a
        linear function, f (x) = wT x. This is known as the ListNet model (Cao et al. 2007). To train
        this model, let yi be the relevance scores of the documents for query i. We then minimize the
        cross entropy term
              
            −         p(π|yi ) log p(π|si )                                                    (9.123)
               i       π
        Of course, as stated, this is intractable, since the i’th term needs to sum over mi ! permutations.
        To make this tractable, we can consider permutations over the top k positions only:
                                  
                                  k
                                         sj
           p(π 1:k |s1:m ) =            m                                                               (9.124)
                                  j=1   u=1 su

        5. Source: http://www.bing.com/community/site_blogs/b/search/archive/2009/06/01/user-needs-f
        eatures-and-the-science-behind-bing.aspx.
        9.7. Learning to rank *                                                                         303


        There are only m!/(m − k)! such permutations. If we set k = 1, we can evaluate each cross
        entropy term (and its derivative) in O(m) time.
           In the special case where only one document from the presented list is deemed relevant, say
        yi = c, we can instead use multinomial logistic regression:
                               exp(sc )
           p(yi = c|x) =      m                                                                      (9.125)
                                  exp(sc )
                              c =1

        This often performs at least as well as ranking methods, at least in the context of collaborative
        ﬁltering (Yang et al. 2011).

9.7.4   Loss functions for ranking
        There are a variety of ways to measure the performance of a ranking system, which we summa-
        rize below.

        • Mean reciprocal rank (MRR). For a query q, let the rank position of its ﬁrst relevant
          document be denoted by r(q). Then we deﬁne the mean reciprocal rank to be 1/r(q).
          This is a very simple performance measure.
        • Mean average precision (MAP). In the case of binary relevance labels, we can deﬁne the
          precision at k of some ordering as follows:
                           num. relevant documents in the top k positions of π
              P@k(π)                                                                                (9.126)
                                                   k
           We then deﬁne the average precision as follows:
                                 P@k(π) · Ik
              AP(π)               k
                                                                                                     (9.127)
                         num. relevant documents
          where Ik is 1 iff document k is relevant. For example, if we have the relevancy labels
          y = (1, 0, 1, 0, 1), then the AP is 13 ( 11 + 23 + 35 ) ≈ 0.76. Finally, we deﬁne the mean average
          precision as the AP averaged over all queries.
        • Normalized discounted cumulative gain (NDCG). Suppose the relevance labels have multi-
          ple levels. We can deﬁne the discounted cumulative gain of the ﬁrst k items in an ordering
          as follows:
                                       
                                       k
                                               ri
              DCG@k(r) = r1 +                                                                        (9.128)
                                       i=2
                                             log2 i

           where ri is the relevance of item i and the log2 term is used to discount items later in
           the list. Table 9.3 gives a simple numerical example. An alternative deﬁnition, that places
           stronger emphasis on retrieving relevant documents, uses
                             
                             k
                                     2ri − 1
              DCG@k(r) =                                                                             (9.129)
                             i=1
                                   log2 (1 + i)

           The trouble with DCG is that it varies in magnitude just because the length of a returned
           list may vary. It is therefore common to normalize this measure by the ideal DCG, which is
304                                      Chapter 9. Generalized linear models and the exponential family


                              i           1      2   3       4     5       6
                              ri          3      2   3       0     1       2
                              log2 i      0      1   1.59    2.0   2.32    2.59
                                ri
                              log2 i      N/A    2   1.887   0     0.431   0.772

Table 9.3 Illustration of how to compute NDCG, from http://en.wikipedia.org/wiki/Discounted
_cumulative_gain. The value ri is the relevance score of the item in position i. From this, we see
that DCG@6 = 3 + (2 + 1.887 + 0 + 0.431 + 0.772) = 8.09. The maximum DCG is obtained using the
ordering with scores 3, 3, 2, 2, 1, 0. Hence the ideal DCG is 8.693, and so the normalized DCG is 8.09 /
8.693 = 0.9306.


  the DCG obtained by using the optimal ordering: IDCG@k(r) = argmaxπ DCG@k(r). This
  can be easily computed by sorting r1:m and then computing DCG@k. Finally, we deﬁne
  the normalized discounted cumulative gain or NDCG as DCG/IDCG. Table 9.3 gives a
  simple numerical example. The NDCG can be averaged over queries to give a measure of
  performance.
• Rank correlation. We can measure the correlation between the ranked list, π, and the
  relevance judegment, π ∗ , using a variety of methods. One approach, known as the (weighted)
  Kendall’s τ statistics, is deﬁned in terms of the weighted pairwise inconsistency between the
  two lists:
                           wuv [1 + sgn(πu − πv )sgn(πu∗ − πv∗ )]
      τ (π, π ∗ ) = u<v                                                                  (9.130)
                                    2 u<v wuv
   A variety of other measures are commonly used.
   These loss functions can be used in different ways. In the Bayesian approach, we ﬁrst ﬁt the
model using posterior inference; this depends on the likelihood and prior, but not the loss. We
then choose our actions at test time to minimize the expected future loss. One way to do this is
to sample parameters from the posterior, θ s ∼ p(θ|D), and then evaluate, say, the precision@k
for different thresholds, averaging over θ s . See (Zhang et al. 2010) for an example of such an
approach.
   In the frequentist approach, we try to minimize the empirical loss on the training set. The
problem is that these loss functions are not differentiable functions of the model parameters.
We can either use gradient-free optimization methods, or we can minimize a surrogate loss
function instead. Cross entropy loss (i.e., negative log likelihood) is an example of a widely used
surrogate loss function.
   Another loss, known as weighted approximate-rank pairwise or WARP loss, proposed in
(Usunier et al. 2009) and extended in (Weston et al. 2010), provides a better approximation to
the precision@k loss. WARP is deﬁned as follows:
   WARP(f (x, :), y)          L(rank(f (x, :), y))                                               (9.131)
                               
      rank(f (x, :), y)   =        I(f (x, y  ) ≥ f (x, y))                                      (9.132)
                               y  =y

                               
                               k
                 L(k)                 αj , with α1 ≥ α2 ≥ · · · ≥ 0                              (9.133)
                               j=1
9.7. Learning to rank *                                                                              305


Here f (x, :) = [f (x, 1), . . . , f (x, |y|)] is the vector of scores for each possible output label,
or, in IR terms, for each possible document corresponding to input query x. The expression
rank(f (x, :), y) measures the rank of the true label y assigned by this scoring function. Finally,
L transforms the integer rank into a real-valued penalty. Using α1 = 1 and αj>1 = 0 would
optimize the proportion of top-ranked correct labels. Setting α1:k to be non-zero values would
optimize the top k in the ranked list, which will induce good performance as measured by
MAP or precision@k. As it stands, WARP loss is still hard to optimize, but it can be further
approximated by Monte Carlo sampling, and then optimized by gradient descent, as described
in (Weston et al. 2010).

Exercises
Exercise 9.1 Conjugate prior for univariate Gaussian in exponential family form
Derive the conjugate prior for μ and λ = 1/σ 2 for a univariate Gaussian using the exponential family,
by analogy to Section 9.2.5.5. By suitable reparameterization, show that the prior has the form p(μ, λ) =
N (μ|γ, λ(2α − 1))Ga(λ|α, β), and thus only has 3 free parameters.
Exercise 9.2 The MVN is in the exponential family
Show that we can write the MVN in exponential family form. Hint: use the information form deﬁned in
Section 4.3.3.
10        Directed graphical models (Bayes nets)



  10.1    Introduction
             I basically know of two principles for treating complicated systems in simple ways: the
             ﬁrst is the principle of modularity and the second is the principle of abstraction. I
             am an apologist for computational probability in machine learning because I believe that
             probability theory implements these two principles in deep and intriguing ways — namely
             through factorization and through averaging. Exploiting these two mechanisms as fully
             as possible seems to me to be the way forward in machine learning. — Michael Jordan,
             1997 (quoted in (Frey 1998)).

          Suppose we observe multiple correlated variables, such as words in a document, pixels in an
          image, or genes in a microarray. How can we compactly represent the joint distribution p(x|θ)?
          How can we use this distribution to infer one set of variables given another in a reasonable
          amount of computation time? And how can we learn the parameters of this distribution with a
          reasonable amount of data? These questions are at the core of probabilistic modeling, inference
          and learning, and form the topic of this chapter.

 10.1.1   Chain rule
          By the chain rule of probability, we can always represent a joint distribution as follows, using
          any ordering of the variables:

             p(x1:V ) = p(x1 )p(x2 |x1 )p(x3 |x2 , x1 )p(x4 |x1 , x2 , x3 ) . . . p(xV |x1:V −1 )          (10.1)

          where V is the number of variables, the Matlab-like notation 1 : V denotes the set {1, 2, . . . , V },
          and where we have dropped the conditioning on the ﬁxed parameters θ for brevity. The problem
          with this expression is that it becomes more and more complicated to represent the conditional
          distributions p(xt |x1:t−1 ) as t gets large.
             For example, suppose all the variables have K states. We can represent p(x1 ) as a table
          of O(K) numbers, representing a discrete distribution (there are actually only K − 1 free
          parameters, due to the sum-to-one constraint, but we write O(K) for simplicity). Similarly, we
          can represent p(x2 |x1 ) as a table of O(K 2 ) numbers by writing p(x2 = j|x1 = i) = Tij ; we
          say that T is a stochastic matrix, since it satisﬁes the constraint j Tij = 1 for all rows i,
          and 0 ≤ Tij ≤ 1 for all entries. Similarly, we can represent p(x3 |x1 , x2 ) as a 3d table with
         308                                             Chapter 10. Directed graphical models (Bayes nets)


         O(K 3 ) numbers. These are called conditional probability tables or CPTs. We see that there
         are O(K V ) parameters in the model. We would need an awful lot of data to learn so many
         parameters.
            One solution is to replace each CPT with a more parsimonius conditional probability distri-
         bution or CPD, such as multinomial logistic regression, i.e., p(xt = k|x1:t−1 ) = S(Wt x1:t−1 )k .
         The total number of parameters is now only O(K 2 V 2 ), making this a compact density model
         (Neal 1992; Frey 1998). This is adequate if all we want to do is evaluate the probability of a fully
         observed vector x1:T . For example, we can use this model to deﬁne a class-conditional density,
         p(x|y = c), thus making a generative classiﬁer (Bengio and Bengio 2000). However, this model
         is not useful for other kinds of prediction tasks, since each variable depends on all the previous
         variables. So we need another approach.

10.1.2   Conditional independence
         The key to efficiently representing large joint distributions is to make some assumptions about
         conditional independence (CI). Recall from Section 2.2.4 that X and Y are conditionally inde-
         pendent given Z, denoted X ⊥ Y |Z, if and only if (iff) the conditional joint can be written as
         a product of conditional marginals, i.e.,

            X ⊥ Y |Z ⇐⇒ p(X, Y |Z) = p(X|Z)p(Y |Z)                                                     (10.2)
            Let us see why this might help. Suppose we assume that xt+1 ⊥ x1:t−1 |xt , or in words,
         “the future is independent of the past given the present”. This is called the (ﬁrst order) Markov
         assumption. Using this assumption, plus the chain rule, we can write the joint distribution as
         follows:
                                
                                V
            p(x1:V ) = p(x1 )         p(xt |xt−1 )                                                     (10.3)
                                t=1

         This is called a (ﬁrst-order) Markov chain. They can be characterized by an initial distribution
         over states, p(x1 = i), plus a state transition matrix p(xt = j|xt−1 = i). See Section 17.2 for
         more information.

10.1.3   Graphical models
         Although the ﬁrst-order Markov assumption is useful for deﬁning distributions on 1d sequences,
         how can we deﬁne distributions on 2d images, or 3d videos, or, in general, arbitrary collections
         of variables (such as genes belonging to some biological pathway)? This is where graphical
         models come in.
            A graphical model (GM) is a way to represent a joint distribution by making CI assumptions.
         In particular, the nodes in the graph represent random variables, and the (lack of) edges represent
         CI assumptions. (A better name for these models would in fact be “independence diagrams”,
         but the term “graphical models” is now entrenched.) There are several kinds of graphical model,
         depending on whether the graph is directed, undirected, or some combination of directed and
         undirected. In this chapter, we just study directed graphs. We consider undirected graphs in
         Chapter 19.
         10.1. Introduction                                                                                    309



                                     1                                     1


                              2                3                    2                3


                                     4              5                      4              5
                                         (a)                                   (b)

         Figure 10.1 (a) A simple DAG on 5 nodes, numbered in topological order. Node 1 is the root, nodes 4 and
         5 are the leaves. (b) A simple undirected graph, with the following maximal cliques: {1, 2, 3}, {2, 3, 4},
         {3, 5}.



10.1.4   Graph terminology
         Before we continue, we must deﬁne a few basic terms, most of which are very intuitive.
            A graph G = (V, E) consists of a set of nodes or vertices, V = {1, . . . , V }, and a set
         of edges, E = {(s, t) : s, t ∈ V}. We can represent the graph by its adjacency matrix, in
         which we write G(s, t) = 1 to denote (s, t) ∈ E, that is, if s → t is an edge in the graph.
         If G(s, t) = 1 iff G(t, s) = 1, we say the graph is undirected, otherwise it is directed. We
         usually assume G(s, s) = 0, which means there are no self loops.
            Here are some other terms we will commonly use:

         • Parent For a directed graph, the parents of a node is the set of all nodes that feed into it:
           pa(s)  {t : G(t, s) = 1}.
         • Child For a directed graph, the children of a node is the set of all nodes that feed out of it:
           ch(s)  {t : G(s, t) = 1}.
         • Family For a directed graph, the family of a node is the node and its parents, fam(s) =
           {s} ∪ pa(s).
         • Root For a directed graph, a root is a node with no parents.
         • Leaf For a directed graph, a leaf is a node with no children.
         • Ancestors For a directed graph, the ancestors are the parents, grand-parents, etc of a node.
           That is, the ancestors of t is the set of nodes that connect to t via a trail: anc(t)  {s : s ;
           t}.
         • Descendants For a directed graph, the descendants are the children, grand-children, etc of
           a node. That is, the descendants of s is the set of nodes that can be reached via trails from
           s: desc(s)  {t : s ; t}.
         • Neighbors For any graph, we deﬁne the neighbors of a node as the set of all immediately
           connected nodes, nbr(s)  {t : G(s, t) = 1 ∨ G(t, s) = 1}. For an undirected graph, we
         310                                            Chapter 10. Directed graphical models (Bayes nets)


           write s ∼ t to indicate that s and t are neighbors (so (s, t) ∈ E is an edge in the graph).
         • Degree The degree of a node is the number of neighbors. For directed graphs, we speak of
           the in-degree and out-degree, which count the number of parents and children.
         • Cycle or loop For any graph, we deﬁne a cycle or loop to be a series of nodes such that
           we can get back to where we started by following edges, s1 − s2 · · · − sn − s1 , n ≥ 2. If the
           graph is directed, we may speak of a directed cycle. For example, in Figure 10.1(a), there are
           no directed cycles, but 1 → 2 → 4 → 3 → 1 is an undirected cycle.
         • DAG A directed acyclic graph or DAG is a directed graph with no directed cycles. See
           Figure 10.1(a) for an example.
         • Topological ordering For a DAG, a topological ordering or total ordering is a numbering
           of the nodes such that parents have lower numbers than their children. For example, in
           Figure 10.1(a), we can use (1, 2, 3, 4, 5), or (1, 3, 2, 5, 4), etc.
         • Path or trail A path or trail s ; t is a series of directed edges leading from s to t.
         • Tree An undirected tree is an undirectecd graph with no cycles. A directed tree is a DAG in
           which there are no directed cycles. If we allow a node to have multiple parents, we call it a
           polytree, otherwise we call it a moral directed tree.
         • Forest A forest is a set of trees.
         • Subgraph A (node-induced) subgraph GA is the graph created by using the nodes in A and
           their corresponding edges, GA = (VA , EA ).
         • Clique For an undirected graph, a clique is a set of nodes that are all neighbors of each
           other. A maximal clique is a clique which cannot be made any larger without losing the
           clique property. For example, in Figure 10.1(b), {1, 2} is a clique but it is not maximal, since
           we can add 3 and still maintain the clique property. In fact, the maximal cliques are as
           follows: {1, 2, 3}, {2, 3, 4}, {3, 5}.

10.1.5   Directed graphical models
         A directed graphical model or DGM is a GM whose graph is a DAG. These are more commonly
         known as Bayesian networks. However, there is nothing inherently “Bayesian” about Bayesian
         networks: they are just a way of deﬁning probability distributions. These models are also called
         belief networks. The term “belief” here refers to subjective probability. Once again, there is
         nothing inherently subjective about the kinds of probability distributions represented by DGMs.
         Finally, these models are sometimes called causal networks, because the directed arrows are
         sometimes interpreted as representing causal relations. However, there is nothing inherently
         causal about DGMs. (See Section 26.6.1 for a discussion of causal DGMs.) For these reasons, we
         use the more neutral (but less glamorous) term DGM.
            The key property of DAGs is that the nodes can be ordered such that parents come before
         children. This is called a topological ordering, and it can be constructed from any DAG. Given
         such an order, we deﬁne the ordered Markov property to be the assumption that a node only
         depends on its immediate parents, not on all predecessors in the ordering, i.e.,
               xs ⊥ xpred(s)\pa(s) |xpa(s)                                                            (10.4)
         where pa(s) are the parents of node s, and pred(s) are the predecessors of node s in the
         ordering. This is a natural generalization of the ﬁrst-order Markov property to from chains to
         general DAGs.
         10.2. Examples                                                                                    311


                                        Y                                     Y



                                                                X2                X1              X3
                       X1         X2        X3     X4                        X4
                                         (a)                                      (b)

         Figure 10.2 (a) A naive Bayes classiﬁer represented as a DGM. We assume there are D = 4 features,
         for simplicity. Shaded nodes are observed, unshaded nodes are hidden. (b) Tree-augmented naive Bayes
         classiﬁer for D = 4 features. In general, the tree topology can change depending on the value of y.



           For example, the DAG in Figure 10.1(a) encodes the following joint distribution:
            p(x1:5 )   =    p(x1 )p(x2 |x1 )p(x3 |x1 , 2 )p(x4 |
                                                       x         1 , x2 , x3 )p(x5 |
                                                                 x                  x  x
                                                                                      1,          x
                                                                                          2 , x3 , 4)   (10.5)
                       =    p(x1 )p(x2 |x1 )p(x3 |x1 )p(x4 |x2 , x3 )p(x5 |x3 )                          (10.6)
           In general, we have
                            
                            V
            p(x1:V |G) =          p(xt |xpa(t) )                                                         (10.7)
                            t=1

         where each term p(xt |xpa(t) ) is a CPD. We have written the distribution as p(x|G) to emphasize
         that this equation only holds if the CI assumptions encoded in DAG G are correct. However,
         we will usual drop this explicit conditioning for brevity. If each node has O(F ) parents and
         K states, the number of parameters in the model is O(V K F ), which is much less than the
         O(K V ) needed by a model which makes no CI assumptions.

 10.2    Examples
         In this section, we show a wide variety of commonly used probabilistic models can be conve-
         niently represented as DGMs.

10.2.1   Naive Bayes classiﬁers
         In Section 3.5, we introduced the naive Bayes classiﬁer. This assumes the features are condi-
         tionally independent given the class label. This assumption is illustrated in Figure 10.2(a). This
         allows us to write the joint distirbution as follows:
                             
                             D
            p(y, x) = p(y)         p(xj |y)                                                              (10.8)
                             j=1

            The naive Bayes assumption is rather naive, since it assumes the features are conditionally
         independent. One way to capture correlation between the features is to use a graphical model.
         In particular, if the model is a tree, the method is known as a tree-augmented naive Bayes
         312                                                     Chapter 10. Directed graphical models (Bayes nets)


                                                           ···                                                  ···
                      x1          x2           x3                     x1        x2         x3          x4
                                         (a)                                               (b)

                                       Figure 10.3 A ﬁrst and second order Markov chain.



                                               z1         z2                     zT

                                               x1        x2                     xT


                                                    Figure 10.4 A ﬁrst-order HMM.



         classiﬁer or TAN model (Friedman et al. 1997). This is illustrated in Figure 10.2(b). The reason
         to use a tree, as opposed to a generic graph, is two-fold. First, it is easy to ﬁnd the optimal
         tree structure using the Chow-Liu algorithm, as explained in Section 26.3. Second, it is easy to
         handle missing features in a tree-structured model, as we explain in Section 20.2.

10.2.2   Markov and hidden Markov models
         Figure 10.3(a) illustrates a ﬁrst-order Markov chain as a DAG. Of course, the assumption that the
         immediate past, xt−1 , captures everything we need to know about the entire history, x1:t−2 , is
         a bit strong. We can relax it a little by adding a dependence from xt−2 to xt as well; this is
         called a second order Markov chain, and is illustrated in Figure 10.3(b). The corresponding
         joint has the following form:

                                                                                          
                                                                                          T
               p(x1:T ) = p(x1 , x2 )p(x3 |x1 , x2 )p(x4 |x2 , x3 ) . . . = p(x1 , x2 )         p(xt |xt−1 , xt−2 )   (10.9)
                                                                                          t=3

         We can create higher-order Markov models in a similar way. See Section 17.2 for a more detailed
         discussion of Markov models.
            Unfortunately, even the second-order Markov assumption may be inadequate if there are long-
         range correlations amongst the observations. We can’t keep building ever higher order models,
         since the number of parameters will blow up. An alternative approach is to assume that there
         is an underlying hidden process, that can be modeled by a ﬁrst-order Markov chain, but that
         the data is a noisy observation of this process. The result is known as a hidden Markov model
         or HMM, and is illustrated in Figure 10.4. Here zt is known as a hidden variable at “time” t,
         and xt is the observed variable. (We put “time” in quotation marks, since these models can be
         applied to any kind of sequence data, such as genomics or language, where t represents location
         rather than time.) The CPD p(zt |zt−1 ) is the transition model, and the CPD p(xt |zt ) is the
         observation model.
         10.2. Examples                                                                                  313


                               h0       h1   h2   P (v = 0|h1 , h2 )   P (v = 1|h1 , h2 )
                                1       0    0            θ0                1 − θ0
                                1        1   0          θ0 θ1              1 − θ 0 θ1
                                1       0     1         θ0 θ2              1 − θ 0 θ2
                                1        1    1        θ0 θ1 θ2           1 − θ 0 θ1 θ2

         Table 10.1 Noisy-OR CPD for 2 parents augmented with leak node. We have omitted the t subscript for
         brevity.


            The hidden variables often represent quantities of interest, such as the identity of the word
         that someone is currently speaking. The observed variables are what we measure, such as the
         acoustic waveform. What we would like to do is estimate the hidden state given the data, i.e., to
         compute p(zt |x1:t , θ). This is called state estimation, and is just another form of probabilistic
         inference. See Chapter 17 for further details on HMMs.

10.2.3   Medical diagnosis
         Consider modeling the relationship between various variables that are measured in an intensive
         care unit (ICU), such as the breathing rate of a patient, their blood pressure, etc. The alarm
         network in Figure 10.5(a) is one way to represent these (in)dependencies (Beinlich et al. 1989).
         This model has 37 variables and 504 parameters.
            Since this model was created by hand, by a process called knowledge engineering, it is
         known as a probabilistic expert system. In Section 10.4, we discuss how to learn the parameters
         of DGMs from data, assuming the graph structure is known, and in Chapter 26, we discuss how
         to learn the graph structure itself.
            A different kind of medical diagnosis network, known as the quick medical reference or
         QMR network (Shwe et al. 1991), is shown in Figure 10.5(b). This was designed to model infectious
         diseases. The QMR model is a bipartite graph structure, with diseases (causes) at the top and
         symptoms or ﬁndings at the bottom. All nodes are binary. We can write the distribution as
         follows:
                                 
             p(v, h) =     p(hs )    p(vt |hpa(t) )                                                 (10.10)
                          s         t

         where hs represent the hidden nodes (diseases), and vt represent the visible nodes (symptoms).
            The CPD for the root nodes are just Bernoulli distributions, representing the prior probability
         of that disease. Representing the CPDs for the leaves (symptoms) using CPTs would require
         too many parameters, because the fan-in (number of parents) of many leaf nodes is very
         high. A natural alternative is to use logistic regression to model the CPD, p(vt = 1|hpa(t) ) =
         sigm(wtT hpa(t) ). (A DGM in which the CPDs are logistic regression distributions is known as a
         sigmoid belief net (Neal 1992).) However, since the parameters of this model were created by
         hand, an alternative CPD, known as the noisy-OR model, was used.
            The noisy-OR model assumes that if a parent is on, then the child will usually also be on
         (since it is an or-gate), but occasionally the “links” from parents to child may fail, independently
         at random. In this case, even if the parent is on, the child may be off. To model this more
         precisely, let θst = 1 − qst be the probability that the s → t link fails, so qst = 1 − θst = p(vt =
314                                                            Chapter 10. Directed graphical models (Bayes nets)




                                                                                               MinVolset
                                                                                  Disconnect                     VentMach
                                                               Intubation                          VentTube               Kinked
                                          Pulm
                                         Embolus                                                                           Tube


                              PAP                    Shunt            FIO2                              Press             VentLung

                    Hypo          Anaphy                                                MinVol                  VentAlv
                   Volemia         Laxis
        Stroke                                                       PVSAT
        Volume                                                                       Insuff
                                                                                     Anesth                   Artco2
                                                       SAO2
                                   TPR
       LvFailure
                             CO                                         Catechol
                                                                                                                          ExpCo2

      History                                      Errlow
                    Lved                                                     HR                ErrCauter
                                                   Output
                   Volume
      CVP
                                                   HRBP                                         HRSAT
                                    BP                                   HrEKG
                PCWP

                                                                (a)



                                                        GLVHDVHV



                                                              KHDUW
                                           IOX                                     ERWXOLVP
                                                             GLVHDVH




                                                              :%&                                  DEGRPHQ
                     VH[ )
                                                              FRXQW                                   SDLQ




                                                       V\PSWRPV



                                                               (b)

Figure 10.5 (a) The alarm network. Figure generated by visualizeAlarmNetwork. (b) The QMR
network.
         10.2. Examples                                                                                     315

                              Gp      Gm   p(X = a)    p(X = b)    p(X = o)    p(X = ab)
                               a       a      1           0           0            0
                               a       b      0           0           0            1
                               a       o      1           0           0            0
                               b       a      0           0           0            1
                               b       b      0           1           0            0
                               b       o      0           1           0            0
                               o       a      1           0           0            0
                               o       b      0           1           0            0
                               o       o      0           0           1            0

         Table 10.2 CPT which encodes a mapping from genotype to phenotype (bloodtype). This is a determin-
         istic, but many-to-one, mapping.



         1|hs = 1, h−s = 0) is the probability that s can activate t on its own (its “causal power”). The
         only way for the child to be off is if all the links from all parents that are on fail independently
         at random. Thus
                               I(h =1)
             p(vt = 0|h) =         θst s                                                                (10.11)
                            s∈pa(t)

         Obviously, p(vt = 1|h) = 1 − p(vt = 0|h).
            If we observe that vt = 1 but all its parents are off, then this contradicts the model. Such
         a data case would get probability zero under the model, which is problematic, because it is
         possible that someone exhibits a symptom but does not have any of the speciﬁed diseases. To
         handle this, we add a dummy leak node h0 , which is always on; this represents “all other
         causes”. The parameter q0t represents the probability that the background
                                                                             '         leak can cause the
                                                                                         hs
         effect on its own. The modiﬁed CPD becomes p(vt = 0|h) = θ0t s∈pa(t) θst           . See Table 10.1
         for a numerical example.
            If we deﬁne wst  log(θst ), we can rewrite the CPD as
                                               
            p(vt = 1|h) = 1 − exp w0t +             hs wst                                               (10.12)
                                                s

         We see that this is similar to a logistic regression model.
            Bipartite models with noisy-OR CPDs are called BN2O models. It is relatively easy to set the
         θst parameters by hand, based on domain expertise. However, it is also possible to learn them
         from data (see e.g, (Neal 1992; Meek and Heckerman 1997)). Noisy-OR CPDs have also proved
         useful in modeling human causal learning (Griffiths and Tenenbaum 2005), as well as general
         binary classiﬁcation settings (Yuille and Zheng 2009).

10.2.4   Genetic linkage analysis *
         Another important (and historically very early) application of DGMs is to the problem of genetic
         linkage analysis. We start with a pedigree graph, which is a DAG that representing the
         relationship between parents and children, as shown in Figure 10.6(a). We then convert this to a
         DGM, as we explain below. Finally we perform probabilistic inference in the resulting model.
316                                               Chapter 10. Directed graphical models (Bayes nets)




                                                    




                                                                




                                                                




                                                   (a)

                                 /RFXV                           /RFXV

                                         




                                                                       




                                                                              




                                                                        




                                                   (b)

Figure 10.6 Left: family tree, circles are females, squares are males. Individuals with the disease of
interest are highlighted. Right: DGM for two loci. Blue nodes Xij is the observed phenotype for individual
                                                              p/m
i at locus j. All other nodes are hidden. Orange nodes Gij is the paternal/ maternal allele. Small
            p/m
red nodes zijl are the paternal/ maternal selection switching variables. These are linked across loci,
 m      m            p     p
zij → zi,j+1  and zij  → zi,j+1 . The founder (root) nodes do not have any parents, and hence do no need
switching variables. Based on Figure 3 from (Friedman et al. 2000).
10.2. Examples                                                                                                    317


   In more detail, for each person (or animal) i and location or locus j along the genome, we
create three nodes: the observed marker Xij (which can be a property such as blood type,
                                                                                                    p
or just a fragment of DNA that can be measured), and two hidden alleles, Gm             ij and Gij , one
inherited from i’s mother (maternal allele) and the other from i’s father (paternal allele). Together,
                                       p
the ordered pair Gij = (Gm      ij , Gij ) constitutes i’s hidden genotype at locus j.
   Obviously we must add Gij → Xij and Gpij → Xij arcs representing the fact that genotypes
                                  m
                                                                                             p
cause phenotypes (observed manifestations of genotypes). The CPD p(Xij |Gm             ij , Gij ) is called
the penetrance model. As a very simple example, suppose Xij ∈ {A, B, O, AB} represents
                                                      p
person i’s observed bloodtype, and Gm          ij , Gij ∈ {A, B, O} is their genotype. We can repre-
sent the penetrance model using the deterministic CPD shown in Table 10.2. For example, A
dominates O, so if a person has genotype AO or OA, their phenotype will be A.
   In addition, we add arcs from i’s mother and father into Gij , reﬂecting the Mendelian
inheritance of genetic material from one’s parents. More precisely, let mi = k be i’s mother.
                                                       p
Then Gm                                      m
        ij could either be equal to Gkj or Gkj , that is, i’s maternal allele is a copy of one of its
                                m
mother’s two alleles. Let Zij be a hidden variable than speciﬁes the choice. We can model this
using the following CPD, known as the inheritance model:
                                  
                   p                  I(Gm          m        m
                                           ij = Gkj ) if Zij = m
    p(Gm   |Gm
                , G   , Z m
                             ) =                    p                                                 (10.13)
        ij   kj    kj     ij          I(Gij = Gkj ) if Zij
                                           m                 m
                                                               =p

We can deﬁne p(Gpij |Gm        p     p
                         kj , Gkj , Zij ) similarly, where k = pi is i’s father. The values of the Zij
are said to specify the phase of the genotype. The values of Gpi,j , Gm           p        m
                                                                           i,j , Zi,j and Zi,j constitute
the haplotype of person i at locus j.1
                                                                                      p
   Next, we need to specify the prior for the root nodes, p(Gm       ij ) and p(Gij ). This is called
the founder model, and represents the overall prevalence of difference kinds of alleles in the
population. We usually assume independence between the loci for these founder alleles.
   Finally, we need to specify priors for the switch variables that control the inheritance process.
These variables are spatially correlated, since adjacent sites on the genome are typically inherited
together (recombination events are rare). We can model this by imposing a two-state Markov
chain on the Z’s, where the probability of switching state at locus j is given by θj = 12 (1 −
e−2dj ), where dj is the distance between loci j and j + 1. This is called the recombination
model.
   The resulting DGM is shown in Figure 10.6(b): it is a series of replicated pedigree DAGs,
augmented with switching Z variables, which are linked using Markov chains. (There is a
related model known as phylogenetic HMM (Siepel and Haussler 2003), which is used to model
evolution amongst phylogenies.)
   As a simpliﬁed example of how this model can be used, suppose we only have one locus,
corresponding to blood type. For brevity, we will drop the j index. Suppose we observe xi = A.
Then there are 3 possible genotypes: Gi is (A, A), (A, O) or (O, A). There is ambiguity
because the genotype to phenotype mapping is many-to-one. We want to reverse this mapping.
This is known as an inverse problem. Fortunately, we can use the blood types of relatives to
help disambiguate the evidence. Information will “ﬂow” from the other xi ’s up to their Gi ’s,
then across to i’s Gi via the pedigree DAG. Thus we can combine our local evidence p(xi |Gi )

1. Sometimes the observed marker is equal to the unphased genotype, which is the unordered set {Gpij , Gm
                                                                                                        ij }; however,
the phased or hidden genotype is not directly measurable.
         318                                                       Chapter 10. Directed graphical models (Bayes nets)


         with an informative prior, p(Gi |x−i ), conditioned on the other data, to get a less entropic local
         posterior, p(Gi |x) ∝ p(xi |Gi )p(Gi |x−i ).
            In practice, the model is used to try to determine where along the genome a given disease-
         causing gene is assumed to lie — this is the genetic linkage analysis task. The method works as
         follows. First, suppose all the parameters of the model, including the distance between all the
         marker loci, are known. The only unknown is the location of the disease-causing gene. If there
         are L marker loci, we construct L + 1 models: in model , we postulate that the disease gene
         comes after marker , for 0 <  < L + 1. We can estimate the Markov switching parameter θ̂ ,
         and hence the distance d between the disease gene and its nearest known locus. We measure
         the quality of that model using its likelihood, p(D|θ̂ ). We then can then pick the model with
         highest likelihood (which is equivalent to the MAP model under a uniform prior).
            Note, however, that computing the likelihood requires marginalizing out all the hidden Z
         and G variables. See (Fishelson and Geiger 2002) and the references therein for some exact
         methods for this task; these are based on the variable elimination algorithm, which we discuss
         in Section 20.3. Unfortunately, for reasons we explain in Section 20.5, exact methods can be
         computationally intractable if the number of individuals and/or loci is large. See (Albers et al.
         2006) for an approximate method for computing the likelihood; this is based on a form of
         variational inference, which we will discuss in Section 22.4.1.

10.2.5   Directed Gaussian graphical models *
         Consider a DGM where all the variables are real-valued, and all the CPDs have the following
         form:
               p(xt |xpa(t) ) = N (xt |μt + wtT xpa(t) , σt2 )                                                                  (10.14)

         This is called a linear Gaussian CPD. As we show below, multiplying all these CPDs together
         results in a large joint Gaussian distribution of the form p(x) = N (x|μ, Σ). This is called a
         directed GGM, or a Gaussian Bayes net.
            We now explain how to derive μ and Σ from the CPD parameters, following (Shachter and
         Kenley 1989, App. B). For convenience, we will rewrite the CPDs in the following form:
                          
             x t = μt +         wts (xs − μs ) + σt zt                                           (10.15)
                           s∈pa(t)

         where zt ∼ N (0, 1), σt is the conditional standard deviation of xt given its parents, wts is the
         strength of the s → t edge, and μt is the local mean.2
            It is easy to see that the global mean is just the concatenation of the local means, μ =
         (μ1 , . . . , μD ). We now derive the global covariance, Σ. Let S  diag(σ) be a diagonal matrix
         containing the standard deviations. We can rewrite Equation 10.15 in matrix-vector form as
         follows:

               (x − μ) = W(x − μ) + Sz                                                                                          (10.16)
                                                                                     
         2. If we do not subtract off the parent’s mean (i.e., if we use xt = μt +       s∈pa(t)   wts xs + σt zt ), the derivation of Σ
         is much messier, as can be seen by looking at (Bishop 2006b, p370).
       10.3. Inference                                                                                 319


       Now let e be a vector of noise terms:
          e  Sz                                                                                    (10.17)
       We can rearrange this to get
          e = (I − W)(x − μ)                                                                        (10.18)
       Since W is lower triangular (because wts = 0 if t > s in the topological ordering), we have that
       I − W is lower triangular with 1s on the diagonal. Hence
                   ⎛                                     ⎞
          ⎛ ⎞           1                                  ⎛          ⎞
            e1     ⎜−w21                                 ⎟   x1 − μ1
          ⎜ e2 ⎟ ⎜              1                        ⎟ ⎜ x2 − μ2 ⎟
          ⎜ ⎟ ⎜−w32 −w31 1                               ⎟⎜           ⎟
          ⎜ .. ⎟ = ⎜                                     ⎟⎜       ..  ⎟                          (10.19)
          ⎝ . ⎠ ⎜ ..                           ..        ⎟ ⎝       .  ⎠
                   ⎝ .                            .      ⎠
            ed                                               xd − μ d
                     −wd1 −wd2 . . . −wd,d−1 1
         Since I − W is always invertible, we can write
          x − μ = (I − W)−1 e  Ue = USz                                                           (10.20)
                                           −1
       where we deﬁned U = (I − W) . Thus the regression weights correspond to a Cholesky
       decomposition of Σ, as we now show:
          Σ =      cov [x] = cov [x − μ]                                                            (10.21)
               =   cov [USz] = US cov [z] SUT = US2 UT                                             (10.22)

10.3   Inference
       We have seen that graphical models provide a compact way to deﬁne joint probability distribu-
       tions. Given such a joint distribution, what can we do with it? The main use for such a joint
       distribution is to perform probabilistic inference. This refers to the task of estimating unknown
       quantities from known quantities. For example, in Section 10.2.2, we introduced HMMs, and
       said that one of the goals is to estimate the hidden states (e.g., words) from the observations
       (e.g., speech signal). And in Section 10.2.4, we discussed genetic linkage analysis, and said that
       one of the goals is to estimate the likelihood of the data under various DAGs, corresponding to
       different hypotheses about the location of the disease-causing gene.
          In general, we can pose the inference problem as follows. Suppose we have a set of correlated
       random variables with joint distribution p(x1:V |θ). (In this section, we are assuming the
       parameters θ of the model are known. We discuss how to learn the parameters in Section 10.4.)
       Let us partition this vector into the visible variables xv , which are observed, and the hidden
       variables, xh , which are unobserved. Inference refers to computing the posterior distribution
       of the unknowns given the knowns:
                              p(xh , xv |θ)      p(xh , xv |θ)
          p(xh |xv , θ)   =                 =                                                     (10.23)
                                p(xv |θ)         x p(xh , xv |θ)
                                                  h

       Essentially we are conditioning on the data by clamping the visible variables to their observed
       values, xv , and then normalizing, to go from p(xh , xv ) to p(xh |xv ). The normalization constant
       p(xv |θ) is the likelihood of the data, also called the probability of the evidence.
         320                                                Chapter 10. Directed graphical models (Bayes nets)


            Sometimes only some of the hidden variables are of interest to us. So let us partition the
         hidden variables into query variables, xq , whose value we wish to know, and the remaining
         nuisance variables, xn , which we are not interested in. We can compute what we are interested
         in by marginalizing out the nuisance variables:
                             
             p(xq |xv , θ) =   p(xq , xn |xv , θ)                                                (10.24)
                            xn

         In Section 4.3.1, we saw how to perform all these operations for a multivariate Gaussian in
         O(V 3 ) time, where V is the number of variables. What if we have discrete random variables,
         with say K states each? If the joint distribution is represented as a multi-dimensional table,
         we can always perform these operations exactly, but this will take O(K V ) time. In Chapter 20,
         we explain how to exploit the factorization encoded by the GM to perform these operations in
         O(V K w+1 ) time, where w is a quantity known as the treewidth of the graph. This measures
         how “tree-like” the graph is. If the graph is a tree (or a chain), we have w = 1, so for these
         models, inference takes time linear in the number of nodes. Unfortunately, for more general
         graphs, exact inference can take time exponential in the number of nodes, as we explain in
         Section 20.5. We will therefore examine various approximate inference schemes later in the
         book.

 10.4    Learning
         In the graphical models literature, it is common to distinguish between inference and learning.
         Inference means computing (functions of) p(xh |xv , θ), where v are the visible nodes, h are the
         hidden nodes, and θ are the parameters of the model, assumed to be known. Learning usually
         means computing a MAP estimate of the parameters given data:
                          
                          N
            θ̂ = argmax         log p(xi,v |θ) + log p(θ)                                              (10.25)
                    θ     i=1

         where xi,v are the visible variables in case i. If we have a uniform prior, p(θ) ∝ 1, this reduces
         to the MLE, as usual.
            If we adopt a Bayesian view, the parameters are unknown variables and should also be
         inferred. Thus to a Bayesian, there is no distinction between inference and learning. In fact, we
         can just add the parameters as nodes to the graph, condition on D, and then infer the values
         of all the nodes. (We discuss this in more detail below.)
            In this view, the main difference between hidden variables and parameters is that the number
         of hidden variables grows with the amount of training data (since there is usually a set of hidden
         variables for each observed data case), whereas the number of parameters in usually ﬁxed (at
         least in a parametric model). This means that we must integrate out the hidden variables to avoid
         overﬁtting, but we may be able to get away with point estimation techniques for parameters,
         which are fewer in number.

10.4.1   Plate notation
         When inferring parameters from data, we often assume the data is iid. We can represent this
         assumption explicitly using a graphical model, as shown in Figure 10.7(a). This illustrates the
10.4. Learning                                                                                        321


                                θ                                      θ




                      X1               XN                             Xi
                                                                                N

Figure 10.7 Left: data points xi are conditionally independent given θ. Right: Plate notation. This
represents the same model as the one on the left, except the repeated xi nodes are inside a box, known as
a plate; the number in the lower right hand corner, N , speciﬁes the number of repetitions of the Xi node.



assumption that each data case was generated independently but from the same distribution.
Notice that the data cases are only independent conditional on the parameters θ; marginally,
the data cases are dependent. Nevertheless, we can see that, in this example, the order in which
the data cases arrive makes no difference to our beliefs about θ, since all orderings will have
the same sufficient statistics. Hence we say the data is exchangeable.
  To avoid visual clutter, it is common to use a form of syntactic sugar called plates: we
simply draw a little box around the repeated variables, with the convention that nodes within
the box will get repeated when the model is unrolled. We often write the number of copies or
repetitions in the bottom right corner of the box. See Figure 10.7(b) for a simple example. The
corresponding joint distribution has the form
                    N             
                     
   p(θ, D) = p(θ)         p(xi |θ)                                                         (10.26)
                       i=1

This DGM represents the CI assumptions behind the models we considered in Chapter 5.
   A slightly more complex example is shown in Figure 10.8. On the left we show a naive Bayes
classiﬁer that has been “unrolled” for D features, but uses a plate to represent repetition over
cases i = 1 : N . The version on the right shows the same model using nested plate notation.
When a variable is inside two plates, it will have two sub-indices. For example, we write θjc
to represent the parameter for feature j in class-conditional density c. Note that plates can
be nested or crossing. Notational devices for modeling more complex parameter tying patterns
can be devised (e.g., (Heckerman et al. 2004)), but these are not widely used. What is not clear
from the ﬁgure is that θjc is used to generate xij iff yi = c, otherwise it is ignored. This is an
example of context speciﬁc independence, since the CI relationship xij ⊥ θjc only holds if
yi = c.
         322                                                         Chapter 10. Directed graphical models (Bayes nets)

                                                                                                    π
                                             π

                                             Yi                                                Yi

                                                                                              Xij
                                     Xi1          ...          XiD                                        N
                                                                  N

                                     θc1          ...          θcD                                  θjc   C
                                                                  C                                           D

                                                  (a)                                               (b)

               Figure 10.8 Naive Bayes classiﬁer as a DGM. (a) With single plates. (b) WIth nested plates.



10.4.2   Learning from complete data
         If all the variables are fully observed in each case, so there is no missing data and there are no
         hidden variables, we say the data is complete. For a DGM with complete data, the likelihood is
         given by
                              
                              N                   N 
                                                   V                                   
                                                                                        V
            p(D|θ)    =              p(xi |θ) =             p(xit |xi,pa(t) , θ t ) =         p(Dt |θ t )         (10.27)
                              i=1                 i=1 t=1                               t=1

         where Dt is the data associated with node t and its parents, i.e., the t’th family. This is a
         product of terms, one per CPD. We say that the likelihood decomposes according to the graph
         structure.
            Now suppose that the prior factorizes as well:
                     
                     V
            p(θ) =         p(θ t )                                                                                (10.28)
                     t=1

         Then clearly the posterior also factorizes:
                                            
                                            V
            p(θ|D) ∝ p(D|θ)p(θ) =                 p(Dt |θ t )p(θ t )                                              (10.29)
                                            t=1

         This means we can compute the posterior of each CPD independently. In other words,
            factored prior plus factored likelihood implies factored posterior                                    (10.30)
            Let us consider an example, where all CPDs are tabular, thus extending the earlier results of
         Secion 3.5.1.2, where discussed Bayesian naive Bayes. We have a separate row (i.e., a separate
         multinoulli distribution) for each conditioning case, i.e., for each combination of parent values,
         as in Table 10.2. Formally, we can write the t’th CPT as xt |xpa(t) = c ∼ Cat(θ tc ), where
         θtck  p(xt = k|xpa(t) = c), for k = 1 : Kt , c = 1 : Ct and t = 1 : T . Here Kt is the number
         10.4. Learning                                                                               323

                                      '
         of states for node t, Ct  s∈pa(t) Ks is the number of parent combinations, and T is the
         number of nodes. Obviously k θtck = 1 for each row of each CPT.
            Let us put a separate Dirichlet prior on each row of each CPT, i.e., θ tc ∼ Dir(αtc ). Then we
         can compute the posterior by simply adding the pseudo counts to the empirical counts to get
         θ tc |D ∼ Dir(Ntc + αtc ), where Ntck is the number of times that node t is in state k while its
         parents are in state c:
                      
                      N
            Ntck           I(xi,t = k, xi,pa(t) = c)                                               (10.31)
                      i=1

         From Equation 2.77, the mean of this distribution is given by the following:
                        Ntck + αtck
            θtck =                                                                                 (10.32)
                       k (Ntck + αtck )
                                     


            For example, consider the DGM in Figure 10.1(a). Suppose the training data consists of the
         following 5 cases:
                                                x1      x2    x3   x4    x5
                                                0       0      1   0     0
                                                0        1     1    1     1
                                                 1       1    0     1    0
                                                0        1     1   0     0
                                                0        1     1    1    0

           Below we list all the sufficient statistics Ntck , and the posterior mean parameters θick under
         a Dirichlet prior with αick = 1 (corresponding to add-one smoothing) for the t = 4 node:

                                    x2    x3    Ntck=1       Ntck=0     θtck=1   θtck=0
                                    0     0       0            0          1/2      1/2
                                     1    0        1           0          2/3      1/3
                                    0      1      0             1         1/3      2/3
                                     1     1      2             1         3/5      2/5
            It is easy to show that the MLE has the same form as Equation 10.32, except without the αtck
         terms, i.e.,
                       Ntck
            θ̂tck =                                                                                (10.33)
                       k Ntck
                               


         Of course, the MLE suffers from the zero-count problem discussed in Section 3.3.4.1, so it is
         important to use a prior to regularize the estimation problem.

10.4.3   Learning with missing and/or latent variables
         If we have missing data and/or hidden variables, the likelihood no longer factorizes, and indeed
         it is no longer convex, as we explain in detail in Section 11.3. This means we will usually can
         only compute a locally optimal ML or MAP estimate. Bayesian inference of the parameters is
         even harder. We discuss suitable approximate inference techniques in later chapters.
         324                                            Chapter 10. Directed graphical models (Bayes nets)


 10.5    Conditional independence properties of DGMs
         At the heart of any graphical model is a set of conditional indepence (CI) assumptions. We write
         xA ⊥G xB |xC if A is independent of B given C in the graph G, using the semantics to be
         deﬁned below. Let I(G) be the set of all such CI statements encoded by the graph.
            We say that G is an I-map (independence map) for p, or that p is Markov wrt G, iff
         I(G) ⊆ I(p), where I(p) is the set of all CI statements that hold for distribution p. In other
         words, the graph is an I-map if it does not make any assertions of CI that are not true of the
         distribution. This allows us to use the graph as a safe proxy for p when reasoning about p’s CI
         properties. This is helpful for designing algorithms that work for large classes of distributions,
         regardless of their speciﬁc numerical parameters θ.
            Note that the fully connected graph is an I-map of all distributions, since it makes no CI
         assertions at all (since it is not missing any edges). We therefore say G is a minimal I-map of
         p if G is an I-map of p, and if there is no G ⊆ G which is an I-map of p.
            It remains to specify how to determine if xA ⊥G xB |xC . Deriving these independencies
         for undirected graphs is easy (see Section 19.2), but the DAG situation is somewhat complicated,
         because of the need to respect the orientation of the directed edges. We give the details below.

10.5.1   d-separation and the Bayes Ball algorithm (global Markov properties)
         First, we introduce some deﬁnitions. We say an undirected path P is d-separated by a set of
         nodes E (containing the evidence) iff at least one of the following conditions hold:
         1. P contains a chain, s → m → t or s ← m ← t, where m ∈ E
         2. P contains a tent or fork, s   m
                                                t, where m ∈ E
         3. P contains a collider or v-structure, s       m    t, where m is not in E and nor is any
            descendant of m.
         Next, we say that a set of nodes A is d-separated from a different set of nodes B given a
         third observed set E iff each undirected path from every node a ∈ A to every node b ∈ B is
         d-separated by E. Finally, we deﬁne the CI properties of a DAG as follows:
            xA ⊥G xB |xE ⇐⇒ A is d-separated from B given E                                         (10.34)
            The Bayes ball algorithm (Shachter 1998) is a simple way to see if A is d-separated from B
         given E, based on the above deﬁnition. The idea is this. We “shade” all nodes in E, indicating
         that they are observed. We then place “balls” at each node in A, let them “bounce around”
         according to some rules, and then ask if any of the balls reach any of the nodes in B. The three
         main rules are shown in Figure 10.9. Notice that balls can travel opposite to edge directions.
         We see that a ball can pass through a chain, but not if it is shaded in the middle. Similarly, a
         ball can pass through a fork, but not if it is shaded in the middle. However, a ball cannot pass
         through a v-structure, unless it is shaded in the middle.
            We can justify the 3 rules of Bayes ball as follows. First consider a chain structure X → Y →
         Z, which encodes
            p(x, y, z) = p(x)p(y|x)p(z|y)                                                           (10.35)
10.5. Conditional independence properties of DGMs                                                     325



                                                                                    Y
                X                 Y                Z


                                                                               X          Z
                                   (a)                                              (b)


           X              Z
                                                X                Y                 Z


                 Y
                  (c)                                             (d)


                                                             X             Z
                                   Y




                           X                Z                       Y
                                   (e)                               (f)

Figure 10.9 Bayes ball rules. A shaded node is one we condition on. If there is an arrow hitting a bar, it
means the ball cannot pass through; otherwise the ball can pass through. Based on (Jordan 2007).



When we condition on y, are x and z independent? We have
                        p(x)p(y|x)p(z|y)   p(x, y)p(z|y)
   p(x, z|y)    =                        =               = p(x|y)p(z|y)                            (10.36)
                              p(y)             p(y)
and therefore x ⊥ z|y. So observing the middle node of chain breaks it in two (as in a Markov
chain).
  Now consider the tent structure X ← Y → Z. The joint is
   p(x, y, z) = p(y)p(x|y)p(z|y)                                                                   (10.37)
326                                                Chapter 10. Directed graphical models (Bayes nets)


                                                                         x             z


                                                                             y
                    x         y                x          y
                                                                          y

                        (a)                        (b)                           (c)


Figure 10.10 (a-b) Bayes ball boundary conditions. (c) Example of why we need boundary conditions. y 
is an observed child of y, rendering y “effectively observed”, so the ball bounces back up on its way from
x to z.


When we condition on y, are x and z independent? We have
                     p(x, y, z)   p(y)p(x|y)p(z|y)
   p(x, z|y)    =               =                  = p(x|y)p(z|y)                                  (10.38)
                       p(y)             p(y)
and therefore x ⊥ z|y. So observing a root node separates its children (as in a naive Bayes
classiﬁer: see Section 3.5).
   Finally consider a v-structure X → Y ← Z. The joint is

   p(x, y, z) = p(x)p(z)p(y|x, z)                                                                  (10.39)

When we condition on y, are x and z independent? We have
                 p(x)p(z)p(y|x, z)
   p(x, z|y) =                                                                                     (10.40)
                       p(y)
so x ⊥ z|y. However, in the unconditional distribution, we have
   p(x, z) = p(x)p(z)                                                                              (10.41)

so we see that x and z are marginally independent. So we see that conditioning on a common
child at the bottom of a v-structure makes its parents become dependent. This important effect
is called explaining away, inter-causal reasoning, or Berkson’s paradox. As an example of
explaining away, suppose we toss two coins, representing the binary numbers 0 and 1, and we
observe the “sum” of their values. A priori, the coins are independent, but once we observe
their sum, they become coupled (e.g., if the sum is 1, and the ﬁrst coin is 0, then we know the
second coin is 1).
   Finally, Bayes Ball also needs the “boundary conditions” shown in Figure 10.10(a-b). To
understand where these rules come from, consider Figure 10.10(c). Suppose Y  is a noise-free
copy of Y . Then if we observe Y  , we effectively observe Y as well, so the parents X and Z
have to compete to explain this. So if we send a ball down X → Y → Y  , it should “bounce
back” up along Y  → Y → Z. However, if Y and all its children are hidden, the ball does not
bounce back.
         10.5. Conditional independence properties of DGMs                                               327


                                                 2                 4
                                        1                 5                  7
                                                 3                 6


                                                Figure 10.11 A DGM.



           For example, in Figure 10.11, we see that x2 ⊥ x6 |x5 , since the 2 → 5 → 6 path is blocked
         by x5 (which is observed), the 2 → 4 → 7 → 6 path is blocked by x7 (which is hidden), and
         the 2 → 1 → 3 → 6 path is blocked by x1 (which is hidden). However, we also see that
         x2 ⊥ x6 |x5 , x7 , since now the 2 → 4 → 7 → 6 path is no longer blocked by x7 (which is
         observed). Exercise 10.2 gives you some more practice in determining CI relationships for DGMs.

10.5.2   Other Markov properties of DGMs
         From the d-separation criterion, one can conclude that

            t ⊥ nd(t) \ pa(t)|pa(t)                                                                   (10.42)

         where the non-descendants of a node nd(t) are all the nodes except for its descendants,
         nd(t) = V \ {t ∪ desc(t)}. Equation 10.42 is called the directed local Markov property. For
         example, in Figure 10.11, we have nd(3) = {2, 4}, and pa(3) = 1, so 3 ⊥ 2, 4|1.
           A special case of this property is when we only look at predecessors of a node according to
         some topological ordering. We have

            t ⊥ pred(t) \ pa(t)|pa(t)                                                                 (10.43)

         which follows since pred(t) ⊆ nd(t). This is called the ordered Markov property, which
         justiﬁes Equation 10.7. For example, in Figure 10.11, if we use the ordering 1, 2, . . . , 7. we ﬁnd
         pred(3) = {1, 2} and pa(3) = 1, so 3 ⊥ 2|1.
            We have now described three Markov properties for DAGs: the directed global Markov property
         G in Equation 10.34, the ordered Markov property O in Equation 10.43, and the directed local
         Markov property L in Equation 10.42. It is obvious that G =⇒ L =⇒ O. What is less
         obvious, but nevertheless true, is that O =⇒ L =⇒ G (see e.g., (Koller and Friedman 2009)
         for the proof). Hence all these properties are equivalent.
            Furthermore, any distribution p that is Markov wrt G can be factorized as in Equation 10.7;
         this is called the factorization property F. It is obvious that O =⇒ F , but one can show that
         the converse also holds (see e.g., (Koller and Friedman 2009) for the proof).

10.5.3   Markov blanket and full conditionals
         The set of nodes that renders a node t conditionally independent of all the other nodes in
         the graph is called t’s Markov blanket; we will denote this by mb(t). One can show that the
         Markov blanket of a node in a DGM is equal to the parents, the children, and the co-parents,
       328                                                      Chapter 10. Directed graphical models (Bayes nets)


       i.e., other nodes who are also parents of its children:
           mb(t)  ch(t) ∪ pa(t) ∪ copa(t)                                                                           (10.44)
       For example, in Figure 10.11, we have
           mb(5) = {6, 7} ∪ {2, 3} ∪ {4} = {2, 3, 4, 6, 7}                                                           (10.45)
       where 4 is a co-parent of 5 because they share a common child, namely 7.
         To see why the co-parents are in the Markov blanket, note that when we derive p(xt |x−t ) =
       p(xt , x−t )/p(x−t ), all the terms that do not involve xt will cancel out between numerator and
       denominator, so we are left with a product of CPDs which contain xt in their scope. Hence
                                            
          p(xt |x−t ) ∝ p(xt |xpa(t) )           p(xs |xpa(s) )                                  (10.46)
                                               s∈ch(t)

       For example, in Figure 10.11 we have
           p(x5 |x−5 ) ∝ p(x5 |x2 , x3 )p(x6 |x3 , x5 )p(x7 |x4 , x5 , x6 )                                          (10.47)
       The resulting expression is called t’s full conditional, and will prove to be important when we
       study Gibbs sampling (Section 24.2).

10.6   Inﬂuence (decision) diagrams *
       We can represent multi-stage (Bayesian) decision problems by using a graphical notation known
       as a decision diagram or an inﬂuence diagram (Howard and Matheson 1981; Kjaerulff and
       Madsen 2008). This extends directed graphical models by adding decision nodes (also called ac-
       tion nodes), represented by rectangles, and utility nodes (also called value nodes), represented
       by diamonds. The original random variables are called chance nodes, and are represented by
       ovals, as usual.
          Figure 10.12(a) gives a simple example, illustrating the famous oil wild-catter problem.3 In
       this problem, you have to decide whether to drill an oil well or not. You have two possible
       actions: d = 1 means drill, d = 0 means don’t drill. You assume there are 3 states of nature:
       o = 0 means the well is dry, o = 1 means it is wet (has some oil), and o = 2 means it is
       soaking (has a lot of oil). Suppose your prior beliefs are p(o) = [0.5, 0.3, 0.2]. Finally, you must
       specify the utility function U (d, o). Since the states and actions are discrete, we can represent
       it as a table (analogous to a CPT in a DGM). Suppose we use the following numbers, in dollars:
                                                  o=0 o=1 o=2
                                         d=0         0        0       0
                                         d=1        -70      50      200
          We see that if you don’t drill, you incur no costs, but also make no money. If you drill a dry
       well, you lose $70; if you drill a wet well, you gain $50; and if you drill a soaking well, you gain
       $200. Your prior expected utility if you drill is given by
                             2
                             
           EU (d = 1) =            p(o)U (d, o) = 0.5 · (−70) + 0.3 · 50 + 0.2 · 200 = 20                            (10.48)
                             o=0

       3. This example is originally from (Raiffa 1968). Our presentation is based on some notes by Daphne Koller.
10.6. Inﬂuence (decision) diagrams *                                                              329


               Oil                                          Oil                Sound


                                        Drill                                  Drill

                                  Utility                                 Utility
                            (a)                                          (b)

                                                  Test


                                  Oil           Sound             Cost


                                                  Drill

                                            Utility

                                                      (c)

Figure 10.12 (a) Inﬂuence diagram for basic oil wild catter problem. (b) An extension in which we have
an information arc from the Sound chance node to the Drill decision node. (c) An extension in which we
get to decide whether to perform the test or not.



Your expected utility if you don’t drill is 0. So your maximum expected utility is

   M EU = max{EU (d = 0), EU (d = 1)} = max{0, 20} = 20                                        (10.49)

and therefore the optimal action is to drill:
   d∗ = arg max{EU (d = 0), EU (d = 1)} = 1                                                    (10.50)

   Now let us consider a slight extension to the model. Suppose you perform a sounding to
estimate the state of the well. The sounding observation can be in one of 3 states: s = 0 is
a diffuse reﬂection pattern, suggesting no oil; s = 1 is an open reﬂection pattern, suggesting
some oil; and s = 2 is a closed reﬂection pattern, indicating lots of oil. Since S is caused by O,
we add an O → S arc to our model. In addition, we assume that the outcome of the sounding
test will be available before we decide whether to drill or not; hence we add an information
arc from S to D. This is illustrated in Figure 10.12(b).
   Let us model the reliability of our sensor using the following conditional distribution for
p(s|o):
330                                               Chapter 10. Directed graphical models (Bayes nets)


                                             s=0     s=1      s=2
                                    o=0       0.6     0.3      0.1
                                    o=1       0.3     0.4      0.3
                                    o=2       0.1     0.4      0.5

  Suppose we do the sounding test and we observe s = 0. The posterior over the oil state is

   p(o|s = 0) = [0.732, 0.219, 0.049]                                                         (10.51)
Now your posterior expected utility of performing action d is
                       2
                       
   EU (d|s = 0) =            p(o|s = 0)U (o, d)                                              (10.52)
                       o=0

If d = 1, this gives

   EU (d = 1|s = 0) = 0.732 × (−70) + 0.219 × 50 + 0.049 × 200 = −30.5                       (10.53)

However, if d = 0, then EU (d = 0|s = 0) = 0, since not drilling incurs no cost. So if we
observe s = 0, we are better off not drilling, which makes sense.
   Now suppose we do the sounding test and we observe s = 1. By similar reasoning, one
can show that EU (d = 1|s = 1) = 32.9, which is higher than EU (d = 0|s = 1) = 0.
Similarly, if we observe s = 2, we have EU (d = 1|s = 2) = 87.5 which is much higher
than EU (d = 0|s = 2) = 0. Hence the optimal policy d∗ (s) is as follows: if s = 0, choose
d∗ (0) = 0 and get $0; if s = 1, choose d∗ (1) = 1 and get $32.9; and if s = 2, choose d∗ (2) = 1
and get $87.5.
   You can compute your expected proﬁt or maximum expected utility as follows:
              
    M EU =        p(s)EU (d∗ (s)|s)                                                         (10.54)
                 s

This is the expected utility given possible outcomes of the sounding test, assuming you act
optimally given the outcome. The prior marginal on the outcome of the test is
           
   p(s) =      p(o)p(s|o) = [0.41, 0.35, 0.24]                                       (10.55)
             o

Hence your maximum expected utility is

   M EU = 0.41 × 0 + 0.35 × 32.9 + 0.24 × 87.5 = 32.2                                        (10.56)

   Now suppose you can choose whether to do the test or not. This can be modelled as shown
in Figure 10.12(c), where we add a new test node T . If T = 1, we do the test, and S can enter 1
of 3 states, determined by O, exactly as above. If T = 0, we don’t do the test, and S enters a
special unknown state. There is also some cost associated with performing the test.
   Is it worth doing the test? This depends on how much our MEU changes if we know the
outcome of the test (namely the state of S). If you don’t do the test, we have M EU = 20
from Equation 10.49. If you do the test, you have M EU = 32.2 from Equation 10.56. So the
improvement in utility if you do the test (and act optimally on its outcome) is $12.2. This is
10.6. Inﬂuence (decision) diagrams *                                                             331

                               at                             at


                       xt                 xt+1


                       zt                 zt+1        xt                 xt+1

                                Rt                              Rt

                                    (a)                            (b)

Figure 10.13 (a) A POMDP, shown as an inﬂuence diagram. zt are hidden world states. We implicitly
make the no forgetting assumption, which effectively means that at has arrows coming into it from all
previous observations, x1:t . (b) An MDP, shown as an inﬂuence diagram.


called the value of perfect information (VPI). So we should do the test as long as it costs less
than $12.2.
   In terms of graphical models, the VPI of a variable T can be determined by computing the
MEU for the base inﬂuence diagram, I, and then computing the MEU for the same inﬂuence
diagram where we add information arcs from T to the action nodes, and then computing the
difference. In other words,
   VPI = MEU(I + T → D) − MEU(I)                                                              (10.57)
where D is the decision node and T is the variable we are measuring.
   It is possible to modify the variable elimination algorithm (Section 20.3) so that it computes
the optimal policy given an inﬂuence diagram. These methods essentially work backwards from
the ﬁnal time-step, computing the optimal decision at each step assuming all following actions
are chosen optimally. See e.g., (Lauritzen and Nilsson 2001; Kjaerulff and Madsen 2008) for
details.
   We could continue to extend the model in various ways. For example, we could imagine a
dynamical system in which we test, observe outcomes, perform actions, move on to the next
oil well, and continue drilling (and polluting) in this way. In fact, many problems in robotics,
business, medicine, public policy, etc. can be usefully formulated as inﬂuence diagrams unrolled
over time (Raiffa 1968; Lauritzen and Nilsson 2001; Kjaerulff and Madsen 2008).
   A generic model of this form is shown in Figure 10.13(a). This is known as a partially
observed Markov decision process or POMDP (pronounced “pom-d-p”). This is basically a
hidden Markov model (Section 17.3) augmented with action and reward nodes. This can be used
to model the perception-action cycle that all intelligent agents use (see e.g., (Kaelbling et al.
1998) for details).
   A special case of a POMDP, in which the states are fully observed, is called a Markov decision
process or MDP, shown in Figure 10.13(b). This is much easier to solve, since we only have
to compute a mapping from observed states to actions. This can be solved using dynamic
programming (see e.g., (Sutton and Barto 1998) for details).
   In the POMDP case, the information arc from xt to at is not sufficient to uniquely determine
332                                                           Chapter 10. Directed graphical models (Bayes nets)


                                                          G                   H                B            C

                                                          D           I
                                                                                  A       D         E       F
                                                                    E         F

                                                                                      G        H        I
                                                          B               C


                                                                A                     J

                             (a)                                (b)                           (c)

                                           Figure 10.14         Some DGMs.



the best action, since the state is not fully observed. Instead, we need to choose actions based
on our belief state, p(zt |x1:t , a1:t ). Since the belief updating process is deterministic (see
Section 17.4.2), we can compute a belief state MDP. For details on to compute the policies for
such models, see e.g., (Kaelbling et al. 1998; Spaan and Vlassis 2005).

Exercises
Exercise 10.1 Marginalizing a node in a DGM
(Source: Koller.)
Consider the DAG G in Figure 10.14(a). Assume it is a minimal I-map for p(A, B, C, D, E, F, X). Now
consider marginalizing out X. Construct a new DAG G which is a minimal I-map for p(A, B, C, D, E, F ).
Specify (and justify) which extra edges need to be added.
Exercise 10.2 Bayes Ball
(Source: Jordan.)
Here we compute some global independence statements from some directed graphical models. You can
use the “Bayes ball” algorithm, the d-separation criterion, or the method of converting to an undirected
graph (all should give the same results).

a. Consider the DAG in Figure 10.14(b). List all variables that are independent of A given evidence on B.
b. Consider the DAG in Figure 10.14(c). List all variables that are independent of A given evidence on J.

Exercise 10.3 Markov blanket for a DGM
Prove that the full conditional for node i in a DGM is given by

   p(Xi |X−i )       ∝   p(Xi |P a(Xi ))                 p(Yj |P a(Yj ))                                        (10.58)
                                           Yj ∈ch(Xi )


where ch(Xi ) are the children of Xi and P a(Yj ) are the parents of Yj .
Exercise 10.4 Hidden variables in DGMs
Consider the DGMs in Figure 11.1 which both deﬁne p(X1:6 ), where we number empty nodes left to right,
top to bottom. The graph on the left deﬁnes the joint as

   p(X1:6 ) =        p(X1 )p(X2 )p(X3 )p(H = h|X1:3 )p(X4 |H = h)p(X5 |H = h)p(X6 |H = h) (10.59)
                 h
10.6. Inﬂuence (decision) diagrams *                                                                  333




                            (a)                                           (b)

                              Figure 10.15 (a) Weather BN. (b) Fishing BN.


where we have marginalized over the hidden variable H. The graph on the right deﬁnes the joint as
   p(X1:6 ) = p(X1 )p(X2 )p(X3 )p(X4 |X1:3 )p(X5 |X1:4 )p(X6 |X1:5 )                               (10.60)

a. (5 points) Assuming all nodes (including H) are binary and all CPDs are tabular, prove that the model
   on the left has 17 free parameters.
b. (5 points) Assuming all nodes are binary and all CPDs are tabular, prove that the model on the right
   has 59 free parameters.
                                                 n
c. (5 points) Suppose we have a data set D = X1:6   for n = 1 : N , where we observe the Xs but not H,
   and we want to estimate the parameters of the CPDs using maximum likelihood. For which model is
   this easier? Explain your answer.

Exercise 10.5 Bayes nets for a rainy day
(Source: Nando de Freitas.). In this question you must model a problem with 4 binary variables: G =”gray”,
V =”Vancouver”, R =”rain” and S =”sad”. Consider the directed graphical model describing the relation-
ship between these variables shown in Figure 10.15(a).

a. Write down an expression for P (S = 1|V = 1) in terms of α, β, γ, δ.
b. Write down an expression for P (S = 1|V = 0). Is this the same or different to P (S = 1|V = 1)?
   Explain why.
c. Find maximum likelihood estimates of α, β, γ using the following data set, where each row is a training
   case. (You may state your answers without proof.)


        V    G    R   S
        1    1    1   1
                                                                                                    (10.61)
        1    1    0   1
        1    0    0   0

Exercise 10.6 Fishing nets
(Source: (Duda et al. 2001)..) Consider the Bayes net shown in Figure 10.15(b). Here, the nodes represent
the following variables
   X1 ∈ {winter, spring, summer, autumn}, X2 ∈ {salmon, sea bass}                                  (10.62)
                     X3 ∈ {light, medium, dark}, X4 ∈ {wide, thin}                                 (10.63)
334                                                        Chapter 10. Directed graphical models (Bayes nets)


                       Z1              Z2        Z3                    Z1         Z2        Z3



                  X1        X2    X3        X4        X5          X1        X2         X4



                                 (a)                                             (b)

      Figure 10.16 (a) A QMR-style network with some hidden leaves. (b) Removing the barren nodes.



The corresponding conditional probability tables are
                                                                    ⎞  ⎛
                                                             .9 .1
                                                         ⎜ .3 .7 ⎟
        p(x1 )   =       .25 .25 .25 .25 , p(x2 |x1 ) = ⎜  ⎝ .4 .6 ⎠
                                                                    ⎟                                   (10.64)
                                                             .8 .2
                                                               
                          .33 .33 .34                     .4   .6
   p(x3 |x2 )    =                      , p(x4 |x2 ) =                                                  (10.65)
                           .8  .1  .1                    .95 .05

Note that in p(x4 |x2 ), the rows represent x2 and the columns x4 (so each row sums to one and represents
the child of the CPD). Thus p(x4 = thin|x2 = sea bass) = 0.05, p(x4 = thin|x2 = salmon) = 0.6, etc.
Answer the following queries. You may use matlab or do it by hand. In either case, show your work.
a. Suppose the ﬁsh was caught on December 20 — the end of autumn and the beginning of winter —
   and thus let p(x1 ) = (.5, 0, 0, .5) instead of the above prior. (This is called soft evidence, since we
   do not know the exact value of X1 , but we have a distribution over it.) Suppose the lightness has not
   been measured but it is known that the ﬁsh is thin. Classify the ﬁsh as salmon or sea bass.
b. Suppose all we know is that the ﬁsh is thin and medium lightness. What season is it now, most likely?
   Use p(x1 ) = .25 .25 .25 .25

Exercise 10.7 Removing leaves in BN20 networks
a. Consider the QMR network, where only some of the symtpoms are observed. For example, in Fig-
   ure 10.16(a), X4 and X5 are hidden. Show that we can safely remove all the hidden leaf nodes without
   affecting the posterior over the disease nodes, i.e., prove that we can compute p(z1:3 |x1 , x2 , x4 ) using
   the network in Figure 10.16(b). This is called barren node removal, and can be applied to any DGM.
b. Now suppose we partition the leaves into three groups: on, off and unknown. Clearly we can remove the
   unknown leaves, since they are hidden and do not affect their parents. Show that we can analytically
   remove the leaves that are in the “off state”, by absorbing their effect into the prior of the parents.
   (This trick only works for noisy-OR CPDs.)

Exercise 10.8 Handling negative ﬁndings in the QMR network
Consider the QMR network. Let d be the hidden diseases, f − be the negative ﬁndings (leaf nodes that are
off), and f − be the positive ﬁndings (leaf nodes that are on). We can compute the posterior p(d|f , f + ) in
two steps: ﬁrst absorb the negative ﬁndings, p(d|f − ) ∝ p(d)p(f − |d), then absorb the positive ﬁndings,
p(d|f − , f + ) ∝ p(d|f − )p(f + |d). Show that the ﬁrst step can be done in O(|d||f − |) time, where |d| is
the number of dieases and |f − | is the number of negative ﬁndings. For simplicity, you can ignore leak
nodes. (Intuitively, the reason for this is that there is no correlation induced amongst the parents when
the ﬁnding is off, since there is no explaining away.)
10.6. Inﬂuence (decision) diagrams *                                                                335


Exercise 10.9 Moralization does not introduce new independence statements
Recall that the process of moralizing a DAG means connecting together all “unmarried” parents that share
a common child, and then dropping all the arrows. Let M be the moralization of DAG G. Show that
CI(M ) ⊆ CI(G), where CI are the set of conditional independence statements implied by the model.
11      Mixture models and the EM algorithm



 11.1   Latent variable models
        In Chapter 10 we showed how graphical models can be used to deﬁne high-dimensional joint
        probability distributions. The basic idea is to model dependence between two variables by
        adding an edge between them in the graph. (Technically the graph represents conditional
        independence, but you get the point.)
           An alternative approach is to assume that the observed variables are correlated because they
        arise from a hidden common “cause”. Model with hidden variables are also known as latent
        variable models or LVMs. As we will see in this chapter, such models are harder to ﬁt than
        models with no latent variables. However, they can have signiﬁcant advantages, for two main
        reasons. First, LVMs often have fewer parameters than models that directly represent correlation
        in the visible space. This is illustrated in Figure 11.1. If all nodes (including H) are binary and all
        CPDs are tabular, the model on the left has 17 free parameters, whereas the model on the right
        has 59 free parameters.
           Second, the hidden variables in an LVM can serve as a bottleneck, which computes a
        compressed representation of the data. This forms the basis of unsupervised learning, as we
        will see. Figure 11.2 illustrates some generic LVM structures that can be used for this purpose.
        In general there are L latent variables, zi1 , . . . , zIL , and D visible variables, xi1 , . . . , xiD ,
        where usually D  L. If we have L > 1, there are many latent factors contributing to each
        observation, so we have a many-to-many mapping. If L = 1, we we only have a single latent
        variable; in this case, zi is usually discrete, and we have a one-to-many mapping. We can
        also have a many-to-one mapping, representing different competing factors or causes for each
        observed variable; such models form the basis of probabilistic matrix factorization, discussed
        in Section 27.6.2. Finally, we can have a one-to-one mapping, which can be represented as
        zi → xi . By allowing zi and/or xi to be vector-valued, this representation can subsume all the
        others. Depending on the form of the likelihood p(xi |zi ) and the prior p(zi ), we can generate
        a variety of different models, as summarized in Table 11.1.

 11.2   Mixture models
        The simplest form of LVM is when zi ∈ {1, . . . , K}, representing a discrete latent state. We will
        use a discrete prior for this, p(zi ) = Cat(π). For the likelihood, we use p(xi |zi = k) = pk (xi ),
338                                                Chapter 11. Mixture models and the EM algorithm




                                       +




                             SDUDPHWHUV                    SDUDPHWHUV


Figure 11.1 A DGM with and without hidden variables. The leaves represent medical symptoms. The
roots represent primary causes, such as smoking, diet and exercise. The hidden variable can represent
mediating factors, such as heart disease, which might not be directly visible.


                         zi1 . . . ziL                                 zi


                xi1             ...          xiD        xi1            ...      xiD
                                 (a)                                   (b)

                                       zi1 . . . ziL            zi


                                             xi                 xi
                                             (c)                 (d)

Figure 11.2 A latent variable model represented as a DGM. (a) Many-to-many. (b) One-to-many. (c)
Many-to-one. (d) One-to-one.



where pk is the k’th base distribution for the observations; this can be of any type. The overall
model is known as a mixture model, since we are mixing together the K base distributions as
follows:
                
                K
   p(xi |θ) =         πk pk (xi |θ)                                                             (11.1)
                k=1

This is a convex combination of the pk ’s, since we are taking a weighted sum, where the
                                             K
mixing weights πk satisfy 0 ≤ πk ≤ 1 and k=1 πk = 1. We give some examples below.
         11.2. Mixture models                                                                                                   339


                      p(xi |zi )                       p(zi )                   Name                                 Section
                      MVN                              Discrete                 Mixture of Gaussians                 11.2.1
                      Prod. Discrete                   Discrete                 Mixture of multinomials              11.2.2
                      Prod. Gaussian                   Prod. Gaussian           Factor analysis/ probabilistic PCA   12.1.5
                      Prod. Gaussian                   Prod. Laplace            Probabilistic ICA/ sparse coding     12.6
                      Prod. Discrete                   Prod. Gaussian           Multinomial PCA                      27.2.3
                      Prod. Discrete                   Dirichlet                Latent Dirichlet allocation          27.3
                      Prod. Noisy-OR                   Prod. Bernoulli          BN20/ QMR                            10.2.3
                      Prod. Bernoulli                  Prod. Bernoulli          Sigmoid belief net                   27.7

         Table 11.1 Summary of some popular directed latent variable models. Here“Prod” means product, so
         “Prod. Discrete” in the likelihood means a factoreddistribution of the form j Cat(xij |zi ), and “Prod.
         Gaussian” means a factored distribution of the form j N (xij |zi ). “PCA” stands for “principal components
         analysis”. “ICA” stands for “indepedendent components analysis”.

                0.8




                0.7




                0.6




                0.5




                0.4




                0.3




                0.2

                        0.1   0.2   0.3   0.4    0.5    0.6   0.7   0.8   0.9



                                                (a)                                                   (b)

         Figure 11.3 A mixture of 3 Gaussians in 2d. (a) We show the contours of constant probability for each
         component in the mixture. (b) A surface plot of the overall density. Based on Figure 2.23 of (Bishop 2006a).
         Figure generated by mixGaussPlotDemo.



11.2.1   Mixtures of Gaussians
         The most widely used mixture model is the mixture of Gaussians (MOG), also called a Gaussian
         mixture model or GMM. In this model, each base distribution in the mixture is a multivariate
         Gaussian with mean μk and covariance matrix Σk . Thus the model has the form

                              
                              K
            p(xi |θ) =                πk N (xi |μk , Σk )                                                                      (11.2)
                              k=1

         Figure 11.3 shows a mixture of 3 Gaussians in 2D. Each mixture component is represented by a
         different set of eliptical contours. Given a sufficiently large number of mixture components, a
         GMM can be used to approximate any density deﬁned on RD .
         340                                                      Chapter 11. Mixture models and the EM algorithm


11.2.2   Mixture of multinoullis
         We can use mixture models to deﬁne density models on many kinds of data. For example,
         suppose our data consist of D-dimensional bit vectors. In this case, an appropriate class-
         conditional density is a product of Bernoullis:
                                   
                                   D                        
                                                            D
                                                                  μjkij (1 − μjk )1−xij
                                                                   x
            p(xi |zi = k, θ) =          Ber(xij |μjk ) =                                                    (11.3)
                                  j=1                       j=1

         where μjk is the probability that bit j turns on in cluster k.
            The latent variables do not have to any meaning, we might simply introduce latent variables
         in order to make the model more powerful. For example, one can show (Exercise 11.8) that the
         mean and covariance of the mixture distribution are given by
                           
              E [x] =          πk μ k                                                              (11.4)
                              k
                                                                      T
            cov [x]   =           πk [Σk + μk μTk ] − E [x] E [x]                                           (11.5)
                              k

         where Σk = diag(μjk (1 − μjk )). So although the component distributions are factorized,
         the joint distribution is not. Thus the mixture distribution can capture correlations between
         variables, unlike a single product-of-Bernoullis model.

11.2.3   Using mixture models for clustering
         There are two main applications of mixture models. The ﬁrst is to use them as a black-box
         density model, p(xi ). This can be useful for a variety of tasks, such as data compression, outlier
         detection, and creating generative classiﬁers, where we model each class-conditional density
         p(x|y = c) by a mixture distribution (see Section 14.7.3).
            The second, and more common, application of mixture models is to use them for clustering.
         We discuss this topic in detail in Chapter 25, but the basic idea is simple. We ﬁrst ﬁt the mixture
         model, and then compute p(zi = k|xi , θ), which represents the posterior probability that point
         i belongs to cluster k. This is known as the responsibility of cluster k for point i, and can be
         computed using Bayes rule as follows:
                                                   p(zi = k|θ)p(xi |zi = k, θ)
            rik  p(zi = k|xi , θ)       =       K
                                                                                                            (11.6)
                                                 k =1   p(zi = k  |θ)p(xi |zi = k  , θ)
         This procedure is called soft clustering, and is identical to the computations performed when
         using a generative classiﬁer. The difference between the two models only arises at training time:
         in the mixture case, we never observe zi , whereas with a generative classiﬁer, we do observe yi
         (which plays the role of zi ).
            We can represent the amount of uncertainty in the cluster assignment by using 1 − maxk rik .
         Assuming this is small, it may be reasonable to compute a hard clustering using the MAP
         estimate, given by
            zi∗ = arg max rik = arg max log p(xi |zi = k, θ) + log p(zi = k|θ)                              (11.7)
                          k                  k
11.2. Mixture models                                                                                            341

                              yeast microarray data                                         K−Means centroids
                      5

                      4

                      3

                      2

                      1




             genes
                      0

                     −1

                     −2

                     −3

                     −4

                     −5
                          0          9.5    11.5   13.5   15.5      18.5   20.5
                                       time


                                    (a)                                                             (b)

Figure 11.4 (a) Some yeast gene expression data plotted as a time series. (c) Visualizing the 16 cluster
centers produced by K-means. Figure generated by kmeansYeastDemo.

                                    0.12                         0.14             0.12   0.06          0.13




                                    0.07                         0.05             0.15   0.07          0.09




Figure 11.5 We ﬁt a mixture of 10 Bernoullis to the binarized MNIST digit data. We show the MLE for the
corresponding cluster means, μk . The numbers on top of each image represent the mixing weights π̂k .
No labels were used when training the model. Figure generated by mixBerMnistEM.



   Hard clustering using a GMM is illustrated in Figure 1.8, where we cluster some data rep-
resenting the height and weight of people. The colors represent the hard assignments. Note
that the identity of the labels (colors) used is immaterial; we are free to rename all the clusters,
without affecting the partitioning of the data; this is called label switching.
   Another example is shown in Figure 11.4. Here the data vectors xi ∈ R7 represent the
expression levels of different genes at 7 different time points. We clustered them using a GMM.
We see that there are several kinds of genes, such as those whose expression level goes up
monotonically over time (in response to a given stimulus), those whose expression level goes
down monotonically, and those with more complex response patterns. We have clustered the
series into K = 16 groups. (See Section 11.5 for details on how to choose K.) For example, we
can represent each cluster by a prototype or centroid. This is shown in Figure 11.4(b).
   As an example of clustering binary data, consider a binarized version of the MNIST handwrit-
ten digit dataset (see Figure 1.5(a)), where we ignore the class labels. We can ﬁt a mixture of
         342                                                      Chapter 11. Mixture models and the EM algorithm


         Bernoullis to this, using K = 10, and then visualize the resulting centroids, μ̂k , as shown in
         Figure 11.5. We see that the method correctly discovered some of the digit classes, but overall the
         results aren’t great: it has created multiple clusters for some digits, and no clusters for others.
         There are several possible reasons for these “errors”:

         • The model is very simple and does not capture the relevant visual characteristics of a digit.
           For example, each pixel is treated independently, and there is no notion of shape or a stroke.
         • Although we think there should be 10 clusters, some of the digits actually exhibit a fair degree
           of visual variety. For example, there are two ways of writing 7’s (with and without the cross
           bar). Figure 1.5(a) illustrates some of the range in writing styles. Thus we need K  10
           clusters to adequately model this data. However, if we set K to be large, there is nothing
           in the model or algorithm preventing the extra clusters from being used to create multiple
           versions of the same digit, and indeed this is what happens. We can use model selection
           to prevent too many clusters from being chosen but what looks visually appealing and what
           makes a good density estimator may be quite different.
         • The likelihood function is not convex, so we may be stuck in a local optimum, as we explain
           in Section 11.3.2.

            This example is typical of mixture modeling, and goes to show one must be very cautious
         trying to “interpret” any clusters that are discovered by the method. (Adding a little bit of
         supervision, or using informative priors, can help a lot.)

11.2.4   Mixtures of experts
         Section 14.7.3 described how to use mixture models in the context of generative classiﬁers. We
         can also use them to create discriminative models for classiﬁcation and regression. For example,
         consider the data in Figure 11.6(a). It seems like a good model would be three different linear
         regression functions, each applying to a different part of the input space. We can model this by
         allowing the mixing weights and the mixture densities to be input-dependent:
            p(yi |xi , zi = k, θ)     =   N (yi |wkT xi , σk2 )                                             (11.8)
                      p(zi |xi , θ)   =   Cat(zi |S(V xi ))
                                                         T
                                                                                                            (11.9)
         See Figure 11.7(a) for the DGM.
            This model is called a mixture of experts or MoE (Jordan and Jacobs 1994). The idea is that
         each submodel is considered to be an “expert” in a certain region of input space. The function
         p(zi = k|xi , θ) is called a gating function, and decides which expert to use, depending on
         the input values. For example, Figure 11.6(b) shows how the three experts have “carved up” the
         1d input space, Figure 11.6(a) shows the predictions of each expert individually (in this case, the
         experts are just linear regression models), and Figure 11.6(c) shows the overall prediction of the
         model, obtained using
                             
             p(yi |xi , θ) =     p(zi = k|xi , θ)p(yi |xi , zi = k, θ)                                (11.10)
                               k

         We discuss how to ﬁt this model in Section 11.4.3.
11.2. Mixture models                                                                                                                                                 343



                       expert predictions, fixed mixing weights=0                                                     gating functions, fixed mixing weights=0
              1.5
                                                                                                      1

                                                                                                   0.9
               1
                                                                                                   0.8

              0.5                                                                                  0.7

                                                                                                   0.6

               0                                                                                   0.5

                                                                                                   0.4
             −0.5                                                                                  0.3

                                                                                                   0.2
              −1
                                                                                                   0.1

                                                                                                      0
             −1.5
                −1     −0.5                0                   0.5               1                        −1          −0.5               0               0.5     1


                                        (a)                                                                                           (b)
                                                                     predicted mean and var, fixed mixing weights=0
                                                 1.5


                                                   1


                                                 0.5


                                                   0


                                                −0.5


                                                  −1


                                                −1.5


                                                  −2
                                                  −1.5               −1           −0.5            0            0.5            1


                                                                                         (c)

Figure 11.6 (a) Some data ﬁt with three separate regression lines. (b) Gating functions for three different
“experts”. (c) The conditionally weighted average of the three expert predictions. Figure generated by
mixexpDemo.




                                                                                                                                   xi
                                                               xi

                                                                                                                                   zi1
                                                               zi
                                                                                                                                   zi2


                                                               yi                                                                  yi

                                                         (a)                                                                 (b)

                Figure 11.7 (a) A mixture of experts. (b) A hierarchical mixture of experts.
           344                                                                      Chapter 11. Mixture models and the EM algorithm

                                        forwards problem                                                                        expert predictions
                        1.2                                                                     1.2


                         1                                                                       1


                        0.8                                                                     0.8


                        0.6                                                                     0.6


                        0.4                                                                     0.4


                        0.2                                                                     0.2


                         0                                                                       0


                       −0.2                                                                 −0.2
                              0   0.2   0.4          0.6     0.8          1                   −0.2          0       0.2           0.4         0.6    0.8   1   1.2


                                              (a)                                                                                       (b)
                                                                               prediction
                                                       1
                                                             mean
                                                     0.9     mode

                                                     0.8

                                                     0.7

                                                     0.6

                                                     0.5

                                                     0.4

                                                     0.3

                                                     0.2

                                                     0.1

                                                       0
                                                      −0.2   0      0.2       0.4         0.6         0.8       1         1.2


                                                                                    (c)

           Figure 11.8 (a) Some data from a simple forwards model. (b) Some data from the inverse model, ﬁt
           with a mixture of 3 linear regressions. Training points are color coded by their responsibilities. (c) The
           predictive mean (red cross) and mode (black square). Based on Figures 5.20 and 5.21 of (Bishop 2006b).
           Figure generated by mixexpDemoOneToMany.



              It should be clear that we can “plug in” any model for the expert. For example, we can use
           neural networks (Chapter 16) to represent both the gating functions and the experts. The result
           is known as a mixture density network. Such models are slower to train, but can be more
           ﬂexible than mixtures of experts. See (Bishop 1994) for details.
              It is also possible to make each expert be itself a mixture of experts. This gives rise to a
           model known as the hierarchical mixture of experts. See Figure 11.7(b) for the DGM, and
           Section 16.2.6 for further details.

11.2.4.1   Application to inverse problems
           Mixtures of experts are useful in solving inverse problems. These are problems where we have
           to invert a many-to-one mapping. A typical example is in robotics, where the location of the
           end effector (hand) y is uniquely determined by the joint angles of the motors, x. However,
           for any given location y, there are many settings of the joints x that can produce it. Thus the
           inverse mapping x = f −1 (y) is not unique. Another example is kinematic tracking of people
           from video (Bo et al. 2008), where the mapping from image appearance to pose is not unique,
           due to self occlusion, etc.
       11.3. Parameter estimation for mixture models                                                    345


                                      θz                              θz


                           z1                    zN                   zi
                                           ···
                           x1                    xN                   xi
                                                                                   N

                                      θx                             θx
                                         (a)                               (b)

       Figure 11.9 A LVM represented as a DGM. Left: Model is unrolled for N examples. Right: same model
       using plate notation.



          A simpler example, for illustration purposes, is shown in Figure 11.8(a). We see that this
       deﬁnes a function, y = f (x), since for every value x along the horizontal axis, there is a
       unique response y. This is sometimes called the forwards model. Now consider the problem
       of computing x = f −1 (y). The corresponding inverse model is shown in Figure 11.8(b); this is
       obtained by simply interchanging the x and y axes. Now we see that for some values along
       the horizontal axis, there are multiple possible outputs, so the inverse is not uniquely deﬁned.
       For example, if y = 0.8, then x could be 0.2 or 0.8. Consequently, the predictive distribution,
       p(x|y, θ) is multimodal.
          We can ﬁt a mixture of linear experts to this data. Figure 11.8(b) shows the prediction of each
       expert, and Figure 11.8(c) shows (a plugin approximation to) the posterior predictive mode and
       mean. Note that the posterior mean does not yield good predictions. In fact, any model which
       is trained to minimize mean squared error — even if the model is a ﬂexible nonlinear model,
       such as neural network — will work poorly on inverse problems such as this. However, the
       posterior mode, where the mode is input dependent, provides a reasonable approximation.

11.3   Parameter estimation for mixture models
       We have seen how to compute the posterior over the hidden variables given the observed
       variables, assuming the parameters are known. In this section, we discuss how to learn the
       parameters.
          In Section 10.4.2, we showed that when we have complete data and a factored prior, the
       posterior over the parameters also factorizes, making computation very simple. Unfortunately
       this is no longer true if we have hidden variables and/or missing data. The reason is apparent
       from looking at Figure 11.9. If the zi were observed, then by d-separation, we see that θ z ⊥ θ x |D,
       and hence the posterior will factorize. But since, in an LVM, the zi are hidden, the parameters
       are no longer independent, and the posterior does not factorize, making it much harder to
         346                                                      Chapter 11. Mixture models and the EM algorithm

            35                                                                  19.5



                                                                                14.5
            30


                                                                                 9.5
            25

                                                                                 4.5

            20




                                                                           2
                                                                          μ
                                                                                −0.5


            15
                                                                                −5.5



            10                                                                 −10.5



                                                                               −15.5
             5


                                                                                       −15.5   −10.5   −5.5     −0.5    4.5   9.5   14.5   19.5
            0                                                                                                       μ
            −25   −20   −15   −10   −5    0    5   10   15   20   25                                                1



                                         (a)                                                                  (b)

         Figure 11.10 Left: N = 200 data points sampled from a mixture of 2 Gaussians in 1d, with πk = 0.5,
         σk = 5, μ1 = −10 and μ2 = 10. Right: Likelihood surface p(D|μ1 , μ2 ), with all other parameters set
         to their true values. We see the two symmetric modes, reﬂecting the unidentiﬁability of the parameters.
         Figure generated by mixGaussLikSurfaceDemo.



         compute. This also complicates the computation of MAP and ML estimates, as we discus below.

11.3.1   Unidentiﬁability
         The main problem with computing p(θ|D) for an LVM is that the posterior may have multiple
         modes. To see why, consider a GMM. If the zi were all observed, we would have a unimodal
         posterior for the parameters:

                                         
                                         K
             p(θ|D) = Dir(π|D)                 NIW(μk , Σk |D)                                                                              (11.11)
                                         k=1

         Consequently we can easily ﬁnd the globally optimal MAP estimate (and hence globally optimal
         MLE).
            But now suppose the zi ’s are hidden. In this case, for each of the possible ways of “ﬁlling in”
         the zi ’s, we get a different unimodal likelihood. Thus when we marginalize out over the zi ’s, we
         get a multi-modal posterior for p(θ|D).1 These modes correspond to different labelings of the
         clusters. This is illustrated in Figure 11.10(b), where we plot the likelihood function, p(D|μ1 , μ2 ),
         for a 2D GMM with K = 2 for the data is shown in Figure 11.10(a). We see two peaks, one
         corresponding to the case where μ1 = −10, μ2 = 10, and the other to the case where μ1 = 10,
         μ2 = −10. We say the parameters are not identiﬁable, since there is not a unique MLE.
         Therefore there cannot be a unique MAP estimate (assuming the prior does not rule out certain
         labelings), and hence the posterior must be multimodal. The question of how many modes there

         1. Do not confuse multimodality of the parameter posterior, p(θ|D), with the multimodality deﬁned by the model,
         p(x|θ). In the latter case, if we have K clusters, we would expect to only get K peaks, although it is theoretically
         possible to get more than K, at least if D > 1 (Carreira-Perpinan and Williams 2003).
         11.3. Parameter estimation for mixture models                                                 347


         are in the parameter posterior is hard to answer. There are K! possible labelings, but some of
         the peaks might get merged. Nevertheless, there can be an exponential number, since ﬁnding
         the optimal MLE for a GMM is NP-hard (Aloise et al. 2009; Drineas et al. 2004).
            Unidentiﬁability can cause a problem for Bayesian inference. For example, suppose we
         draw some samples from the posterior, θ (s) ∼ p(θ|D), and then average them, to try to
         approximate the posterior mean, θ = S1 s=1 θ (s) . (This kind of Monte Carlo approach is
                                                        S

         explained in more detail in Chapter 24.) If the samples come from different modes, the average
         will be meaningless. Note, however, that it is reasonable to average the posterior predictive
         distributions, p(x) ≈ S1 s=1 p(x|θ (s) ), since the likelihood function is invariant to which
                                       S

         mode the parameters came from.
            A variety of solutions have been proposed to the unidentiﬁability problem. These solutions
         depend on the details of the model and the inference algorithm that is used. For example, see
         (Stephens 2000) for an approach to handling unidentiﬁability in mixture models using MCMC.
            The approach we will adopt in this chapter is much simpler: we just compute a single
         local mode, i.e., we perform approximate MAP estimation. (We say “approximate” since ﬁnding
         the globally optimal MLE, and hence MAP estimate, is NP-hard, at least for mixture models
         (Aloise et al. 2009).) This is by far the most common approach, because of its simplicity. It
         is also a reasonable approximation, at least if the sample size is sufficiently large. To see why,
         consider Figure 11.9(a). We see that there are N latent variables, each of which gets to “see”
         one data point each. However, there are only two latent parameters, each of which gets to
         see N data points. So the posterior uncertainty about the parameters is typically much less
         than the posterior uncertainty about the latent variables. This justiﬁes the common strategy
         of computing p(zi |xi , θ̂), but not bothering to compute p(θ|D). In Section 5.6, we will study
         hierarchical Bayesian models, which essentially put structure on top of the parameters. In such
         models, it is important to model p(θ|D), so that the parameters can send information between
         themselves. If we used a point estimate, this would not be possible.

11.3.2   Computing a MAP estimate is non-convex
         In the previous sections, we have argued, rather heuristically, that the likelihood function has
         multiple modes, and hence that ﬁnding an MAP or ML estimate will be hard. In this section, we
         show this result by more algebraic means, which sheds some additional insight into the problem.
         Our presentation is based in part on (Rennie 2004).
            Consider the log-likelihood for an LVM:
                                                      
                                     
             log p(D|θ) =       log      p(xi , zi |θ)                                              (11.12)
                            i        zi

         Unfortunately, this objective is hard to maximize. since we cannot push the log inside the sum.
         This precludes certain algebraic simplications, but does not prove the problem is hard.
           Now suppose the joint probability distribution p(zi , xi |θ) is in the exponential family, which
         means it can be written as follows:
                           1
            p(x, z|θ) =        exp[θ T φ(x, z)]                                                      (11.13)
                          Z(θ)
       348                                            Chapter 11. Mixture models and the EM algorithm


       where φ(x, z) are the sufficient statistics, and Z(θ) is the normalization constant (see Sec-
       tion 9.2 for more details). It can be shown (Exercise 9.2) that the MVN is in the exponential
       family, as are nearly all of the distributions we have encountered so far, including Dirichlet,
       multinomial, Gamma, Wishart, etc. (The Student distribution is a notable exception.) Further-
       more, mixtures of exponential families are also in the exponential family, providing the mixing
       indicator variables are observed (Exercise 11.11).
          With this assumption, the complete data log likelihood can be written as follows:
                                                 
          c (θ) =      log p(xi , zi |θ) = θ T (   φ(xi , zi )) − N Z(θ)                        (11.14)
                       i                          i

       The ﬁrst term is clearly linear in θ. One can show that Z(θ) is a convex function (Boyd and
       Vandenberghe 2004), so the overall objective is concave (due to the minus sign), and hence has
       a unique maximum.
          Now consider what happens when we have missing data. The observed data log likelihood
       is given by
                                                                       
                                                    T
                                                           θ φ(zi ,xi )
           (θ) =    log      p(xi , zi |θ) =   log      e                − N log Z(θ)          (11.15)
                   i       zi                 i        zi

       One can show that the log-sum-exp function is convex (Boyd and Vandenberghe 2004), and we
       know that Z(θ) is convex. However, the difference of two convex functions is not, in general,
       convex. So the objective is neither convex nor concave, and has local optima.
          The disadvantage of non-convex functions is that it is usually hard to ﬁnd their global op-
       timum. Most optimization algorithms will only ﬁnd a local optimum; which one they ﬁnd
       depends on where they start. There are some algorithms, such as simulated annealing (Sec-
       tion 24.6.1) or genetic algorithms, that claim to always ﬁnd the global optimum, but this is only
       under unrealistic assumptions (e.g., if they are allowed to be cooled “inﬁnitely slowly”, or al-
       lowed to run “inﬁnitely long”). In practice, we will run a local optimizer, perhaps using multiple
       random restarts to increase out chance of ﬁnding a “good” local optimum. Of course, careful
       initialization can help a lot, too. We give examples of how to do this on a case-by-case basis.
          Note that a convex method for ﬁtting mixtures of Gaussians has been proposed. The idea
       is to assign one cluster per data point, and select from amongst them, using a convex 1 -type
       penalty, rather than trying to optimize the locations of the cluster centers. See (Lashkari and
       Golland 2007) for details. This is essentially an unsupervised version of the approach used in
       sparse kernel logistic regression, which we will discuss in Section 14.3.2. Note, however, that the
       1 penalty, although convex, is not necessarily a good way to promote sparsity, as discussed in
       Chapter 13. In fact, as we will see in that Chapter, some of the best sparsity-promoting methods
       use non-convex penalties, and use EM to optimie them! The moral of the story is: do not be
       afraid of non-convexity.

11.4   The EM algorithm
       For many models in machine learning and statistics, computing the ML or MAP parameter
       estimate is easy provided we observe all the values of all the relevant random variables, i.e., if
         11.4. The EM algorithm                                                                         349


                              Model                                      Section
                              Mix. Gaussians                             11.4.2
                              Mix. experts                               11.4.3
                              Factor analysis                            12.1.5
                              Student T                                  11.4.5
                              Probit regression                          11.4.6
                              DGM with hidden variables                  11.4.4
                              MVN with missing data                      11.6.1
                              HMMs                                       17.5.2
                              Shrinkage estimates of Gaussian means      Exercise 11.13

         Table 11.2 Some models discussed in this book for which EM can be easily applied to ﬁnd the ML/ MAP
         parameter estimate.



         we have complete data. However, if we have missing data and/or latent variables, then computing
         the ML/MAP estimate becomes hard.
           One approach is to use a generic gradient-based optimizer to ﬁnd a local minimum of the
         negative log likelihood or NLL, given by
                              1
            NLL(θ) = −         log p(D|θ)                                                            (11.16)
                              N
         However, we often have to enforce constraints, such as the fact that covariance matrices must be
         positive deﬁnite, mixing weights must sum to one, etc., which can be tricky (see Exercise 11.5). In
         such cases, it is often much simpler (but not always faster) to use an algorithm called expectation
         maximization, or EM for short (Dempster et al. 1977; Meng and van Dyk 1997; McLachlan and
         Krishnan 1997). This is a simple iterative algorithm, often with closed-form updates at each step.
         Furthermore, the algorithm automatically enforce the required constraints.
            EM exploits the fact that if the data were fully observed, then the ML/ MAP estimate would be
         easy to compute. In particular, EM is an iterative algorithm which alternates between inferring
         the missing values given the parameters (E step), and then optimizing the parameters given the
         “ﬁlled in” data (M step). We give the details below, followed by several examples. We end with
         a more theoretical discussion, where we put the algorithm in a larger context. See Table 11.2 for
         a summary of the applications of EM in this book.

11.4.1   Basic idea
         Let xi be the visible or observed variables in case i, and let zi be the hidden or missing
         variables. The goal is to maximize the log likelihood of the observed data:
                                                                 
                     
                     N                 N        
            (θ) =      log p(xi |θ) =     log      p(xi , zi |θ)                             (11.17)
                    i=1                i=1        zi

         Unfortunately this is hard to optimize, since the log cannot be pushed inside the sum.
         350                                           Chapter 11. Mixture models and the EM algorithm


           EM gets around this problem as follows. Deﬁne the complete data log likelihood to be

                       
                       N
            c (θ)            log p(xi , zi |θ)                                                   (11.18)
                       i=1

         This cannot be computed, since zi is unknown. So let us deﬁne the expected complete data
         log likelihood as follows:
                                   (
            Q(θ, θ t−1 ) = E c (θ)(D, θ t−1                                                (11.19)

         where t is the current iteration number. Q is called the auxiliary function. The expectation
         is taken wrt the old parameters, θ t−1 , and the observed data D. The goal of the E step is to
         compute Q(θ, θ t−1 ), or rather, the terms inside of it which the MLE depends on; these are
         known as the expected sufficient statistics or ESS. In the M step, we optimize the Q function
         wrt θ:

            θ t = arg max Q(θ, θ t−1 )                                                             (11.20)
                           θ

         To perform MAP estimation, we modify the M step as follows:

            θ t = argmax Q(θ, θ t−1 ) + log p(θ)                                                   (11.21)
                       θ

         The E step remains unchanged.
           In Section 11.4.7 we show that the EM algorithm monotonically increases the log likelihood of
         the observed data (plus the log prior, if doing MAP estimation), or it stays the same. So if the
         objective ever goes down, there must be a bug in our math or our code. (This is a surprisingly
         useful debugging tool!)
           Below we explain how to perform the E and M steps for several simple models, that should
         make things clearer.

11.4.2   EM for GMMs
         In this section, we discuss how to ﬁt a mixture of Gaussians using EM. Fitting other kinds of
         mixture models requires a straightforward modiﬁcation — see Exercise 11.3. We assume the
         number of mixture components, K, is known (see Section 11.5 for discussion of this point).
           11.4. The EM algorithm                                                                            351


11.4.2.1   Auxiliary function
           The expected complete data log likelihood is given by
                                                         
                                    
                     (t−1)
              Q(θ, θ       )  E        log p(xi , zi |θ)                                                 (11.22)
                                               i
                                                                                              
                                                              
                                                               K
                               =               E log                 (πk p(xi |θ k ))I(zi =k)             (11.23)
                                       i                       k=1
                                       
                               =                       E [I(zi = k)] log[πk p(xi |θ k )]                  (11.24)
                                       i       k
                                       
                               =                       p(zi = k|xi , θ t−1 ) log[πk p(xi |θ k )]          (11.25)
                                       i       k
                                                                        
                               =                       rik log πk +                 rik log p(xi |θ k )   (11.26)
                                       i       k                            i   k

           where rik  p(zi = k|xi , θ (t−1) ) is the responsibility that cluster k takes for data point i.
           This is computed in the E step, described below.

11.4.2.2   E step
           The E step has the following simple form, which is the same for any mixture model:
                                           (t−1)
                           πk p(xi |θ k                )
              rik   =                    (t−1)
                                                                                                          (11.27)
                           k πk p(xi |θ k    )
                                



11.4.2.3   M step
           In the M step, we optimize Q wrt π and the θ k . For π, we obviously have
                        1           rk
               πk =           rik =                                                                       (11.28)
                        N i          N

           where rk  i rik is the weighted number of points assigned to cluster k.
             To derive the M step for the μk and Σk terms, we look at the parts of Q that depend on μk
           and Σk . We see that the result is
                               
              (μk , Σk ) =            rik log p(xi |θ k )                                        (11.29)
                                   k       i
                                  1     
                           =    −     rik log |Σk | + (xi − μk )T Σ−1
                                                                   k (xi − μk )                           (11.30)
                                  2 i
           This is just a weighted version of the standard problem of computing the MLEs of an MVN (see
           Section 4.1.3). One can show (Exercise 11.2) that the new parameter estimates are given by
                            i rik xi
              μk =                                                                                     (11.31)
                             rk
                            i rik (xi − μk )(xi − μk )          rik xi xTi
                                                       T
              Σk =                                       = i               − μk μTk                   (11.32)
                                        rk                       rk
           352                                            Chapter 11. Mixture models and the EM algorithm


           These equations make intuitive sense: the mean of cluster k is just the weighted average of all
           points assigned to cluster k, and the covariance is proportional to the weighted empirical scatter
           matrix.
             After computing the new estimates, we set θ t = (πk , μk , Σk ) for k = 1 : K, and go to the
           next E step.

11.4.2.4   Example
           An example of the algorithm in action is shown in Figure 11.11. We start with μ1 = (−1, 1),
           Σ1 = I, μ2 = (1, −1), Σ2 = I. We color code points such that blue points come from cluster
           1 and red points from cluster 2. More precisely, we set the color to
              color(i) = ri1 blue + ri2 red                                                            (11.33)

           so ambiguous points appear purple. After 20 iterations, the algorithm has converged on a good
           clustering. (The data was standardized, by removing the mean and dividing by the standard
           deviation, before processing. This often helps convergence.)

11.4.2.5   K-means algorithm
           There is a popular variant of the EM algorithm for GMMs known as the K-means algorithm,
           which we now discuss. Consider a GMM in which we make the following assumptions: Σk =
           σ 2 ID is ﬁxed, and πk = 1/K is ﬁxed, so only the cluster centers, μk ∈ RD , have to be
           estimated. Now consider the following delta-function approximation to the posterior computed
           during the E step:

              p(zi = k|xi , θ) ≈ I(k = zi∗ )                                                           (11.34)

           where zi ∗ = argmaxk p(zi = k|xi , θ). This is sometimes called hard EM, since we are making
           a hard assignment of points to clusters. Since we assumed an equal spherical covariance matrix
           for each cluster, the most probable cluster for xi can be computed by ﬁnding the nearest
           prototype:

              zi∗ = arg min ||xi − μk ||22                                                             (11.35)
                         k

           Hence in each E step, we must ﬁnd the Euclidean distance between N data points and K cluster
           centers, which takes O(N KD) time. However, this can be sped up using various techniques,
           such as applying the triangle inequality to avoid some redundant computations (Elkan 2003).
           Given the hard cluster assignments, the M step updates each cluster center by computing the
           mean of all points assigned to it:
                      1 
              μk =             xi                                                                (11.36)
                     Nk
                         i:zi =k

           See Algorithm 5 for the pseudo-code.
11.4. The EM algorithm                                                                                      353




                   2




                   0




                  −2



                       −2         0          2




                                (a)                                          (b)




                                (c)                                          (d)




                                (e)                                          (f)

Figure 11.11 Illustration of the EM for a GMM applied to the Old Faithful data. (a) Initial (random) values
of the parameters. (b) Posterior responsibility of each point computed in the ﬁrst E step. The degree of
redness indicates the degree to which the point belongs to the red cluster, and similarly for blue; this
purple points have a roughly uniform posterior over clusters. (c) We show the updated parameters after
the ﬁrst M step. (d) After 3 iterations. (e) After 5 iterations. (f) After 16 iterations. Based on (Bishop 2006a)
Figure 9.8. Figure generated by mixGaussDemoFaithful.
           354                                                       Chapter 11. Mixture models and the EM algorithm


            Algorithm 11.1: K-means algorithm
           1   initialize mk ;
           2   repeat
           3        Assign each data point to its closest cluster center: zi = arg mink ||xi − μk ||22 ;
           4        Update each cluster center by computing the mean of all points assigned to it:
                    μk = N1k i:zi =k xi ;
           5   until converged;

                                          K=2


                         20

                         40

                         60

                         80

                        100

                        120

                        140

                        160

                        180

                        200
                              50   100   150       200   250   300




                                         (a)                                             (b)

           Figure 11.12 An image compressed using vector quantization with a codebook of size K. (a) K = 2. (b)
           K = 4. Figure generated by vqDemo.


11.4.2.6   Vector quantization
           Since K-means is not a proper EM algorithm, it is not maximizing likelihood. Instead, it can be
           interpreted as a greedy algorithm for approximately minimizing a loss function related to data
           compression, as we now explain.
              Suppose we want to perform lossy compression of some real-valued vectors, xi ∈ RD . A very
           simple approach to this is to use vector quantization or VQ. The basic idea is to replace each
           real-valued vector xi ∈ RD with a discrete symbol zi ∈ {1, . . . , K}, which is an index into a
           codebook of K prototypes, μk ∈ RD . Each data vector is encoded by using the index of the
           most similar prototype, where similarity is measured in terms of Euclidean distance:
               encode(xi )    =    arg min ||xi − μk ||2                                                      (11.37)
                                               k

           We can deﬁne a cost function that measures the quality of a codebook by computing the
           reconstruction error or distortion it induces:
                                   1                                    1 
                                      N                                     N
               J(μ, z|K, X)             ||xi − decode(encode(xi ))||2 =       ||xi − μzi ||2                 (11.38)
                                   N i=1                                 N i=1
           where decode(k) = μk . The K-means algorithm can be thought of as a simple iterative scheme
           for minimizing this objective.
              Of course, we can achieve zero distortion if we assign one prototype to every data vector,
           but that takes O(N DC) space, where N is the number of real-valued data vectors, each of
           11.4. The EM algorithm                                                                         355


           length D, and C is the number of bits needed to represent a real-valued scalar (the quantization
           accuracy). However, in many data sets, we see similar vectors repeatedly, so rather than storing
           them many times, we can store them once and then create pointers to them. Hence we can
           reduce the space requirement to O(N log2 K + KDC): the O(N log2 K) term arises because
           each of the N data vectors needs to specify which of the K codewords it is using (the pointers);
           and the O(KDC) term arises because we have to store each codebook entry, each of which is
           a D-dimensional vector. Typically the ﬁrst term dominates the second, so we can approximate
           the rate of the encoding scheme (number of bits needed per object) as O(log2 K), which is
           typically much less than O(DC).
              One application of VQ is to image compression. Consider the N = 200 × 320 = 64, 000 pixel
           image in Figure 11.12; this is gray-scale, so D = 1. If we use one byte to represent each pixel
           (a gray-scale intensity of 0 to 255), then C = 8, so we need N C = 512, 000 bits to represent
           the image. For the compressed image, we need N log2 K + KC bits. For K = 4, this is about
           128kb, a factor of 4 compression. For K = 8, this is about 192kb, a factor of 2.6 compression,
           at negligible perceptual loss (see Figure 11.12(b)). Greater compression could be achieved if we
           modelled spatial correlation between the pixels, e.g., if we encoded 5x5 blocks (as used by JPEG).
           This is because the residual errors (differences from the model’s predictions) would be smaller,
           and would take fewer bits to encode.

11.4.2.7   Initialization and avoiding local minima
           Both K-means and EM need to be initialized. It is common to pick K data points at random, and
           to make these be the initial cluster centers. Or we can pick the centers sequentially so as to try
           to “cover” the data. That is, we pick the initial point uniformly at random. Then each subsequent
           point is picked from the remaining points with probability proportional to its squared distance
           to the points’s closest cluster center. This is known as farthest point clustering (Gonzales 1985),
           or k-means++ (Arthur and Vassilvitskii 2007; Bahmani et al. 2012). Surprisingly, this simple trick
           can be shown to guarantee that the distortion is never more than O(log K) worse than optimal
           (Arthur and Vassilvitskii 2007).
              An heuristic that is commonly used in the speech recognition community is to incrementally
           “grow” GMMs: we initially give each cluster a score based on its mixture weight; after each
           round of training, we consider splitting the cluster with the highest score into two, with the new
           centroids being random perturbations of the original centroid, and the new scores being half of
           the old scores. If a new cluster has too small a score, or too narrow a variance, it is removed.
           We continue in this way until the desired number of clusters is reached. See (Figueiredo and
           Jain 2002) for a similar incremental approach.

11.4.2.8   MAP estimation
           As usual, the MLE may overﬁt. The overﬁtting problem is particularly severe in the case of
           GMMs. To understand the problem, suppose for simplicity that Σk = σk2 I, and that K = 2. It
           is possible to get an inﬁnite likelihood by assigning one of the centers, say μ2 , to a single data
           point, say x1 , since then the 1st term makes the following contribution to the likelihood:
                                     1
              N (x1 |μ2 , σ22 I) =       e0                                                            (11.39)
                                    2πσ22
356                                                Chapter 11. Mixture models and the EM algorithm


                                                                                            1


                                                                                           0.9


                                                                                           0.8




                                                      fraction of times EM for GMM fails
                                                                                           0.7


                                                                                           0.6




 p(x)
                                                                                                                                                     MLE
                                                                                           0.5
                                                                                                                                                     MAP

                                                                                           0.4


                                                                                           0.3


                                                                                           0.2


                                                                                           0.1


                                                                                            0


                           x                                                                     10   20   30   40    50       60
                                                                                                                     dimensionality
                                                                                                                                      70   80   90    100




                       (a)                                                                                             (b)

Figure 11.13 (a) Illustration of how singularities can arise in the likelihood function of GMMs. Based on
(Bishop 2006a) Figure 9.7. Figure generated by mixGaussSingularity. (b) Illustration of the beneﬁt of
MAP estimation vs ML estimation when ﬁtting a Gaussian mixture model. We plot the fraction of times
(out of 5 random trials) each method encounters numerical problems vs the dimensionality of the problem,
for N = 100 samples. Solid red (upper curve): MLE. Dotted black (lower curve): MAP. Figure generated by
mixGaussMLvsMAP.


Hence we can drive this term to inﬁnity by letting σ2 → 0, as shown in Figure 11.13(a). We will
call this the “collapsing variance problem”.
   An easy solution to this is to perform MAP estimation. The new auxiliary function is the
expected complete data log-likelihood plus the log prior:
                                                               
                                                                          
  
Q (θ, θ ) =
         old
                          rik log πik +      rik log p(xi |θ k ) + log p(π) +   log p(θ k )(11.40)
                   i   k                   i   k                                                                                      k

Note that the E step remains unchanged, but the M step needs to be modiﬁed, as we now
explain.
   For the prior on the mixture weights, it is natural to use a Dirichlet prior, π ∼ Dir(α), since
this is conjugate to the categorical distribution. The MAP estimate is given by
                rk + α k − 1
    πk   =                                                                                                                                           (11.41)
              N + k αk − K
If we use a uniform prior, αk = 1, this reduces to Equation 11.28.
   The prior on the parameters of the class conditional densities, p(θ k ), depends on the form of
the class conditional densities. We discuss the case of GMMs below, and leave MAP estimation
for mixtures of Bernoullis to Exercise 11.3.
   For simplicity, let us consider a conjugate prior of the form

    p(μk , Σk ) = NIW(μk , Σk |m0 , κ0 , ν0 , S0 )                                                                                                   (11.42)
         11.4. The EM algorithm                                                                        357


         From Section 4.6.3, the MAP estimate is given by
                           rk xk + κ0 m0
            μ̂k    =                                                                                 (11.43)
                               rk + κ 0
                                                                                                     (11.44)
                                i rik xi
            xk                                                                                      (11.45)
                              rk
                           S0 + S k +           κ 0 rk
                                               κ0 +rk (xk   − m0 )(xk − m0 )T
            Σ̂k    =                                                                                 (11.46)
                                               ν 0 + rk + D + 2
                           
            Sk                   rik (xi − xk )(xi − xk )T                                          (11.47)
                            i

            We now illustrate the beneﬁts of using MAP estimation instead of ML estimation in the
         context of GMMs. We apply EM to some synthetic data in D dimensions, using either ML or
         MAP estimation. We count the trial as a “failure” if there are numerical issues involving singular
         matrices. For each dimensionality, we conduct 5 random trials. The results are illustrated in
         Figure 11.13(b) using N = 100. We see that as soon as D becomes even moderately large, ML
         estimation crashes and burns, whereas MAP estimation never encounters numerical problems.
            When using MAP estimation, we need to specify the hyper-parameters. Here we mention
         some simple heuristics for setting them (Fraley and Raftery 2007, p163). We can set κ0 = 0,
         so that the μk are unregularized, since the numerical problems only arise from Σk . In this
                                                                          S0 +Sk
         case, the MAP estimates simplify to μ̂k = xk and Σ̂k = ν0 +r       k +D+2
                                                                                   , which is not quite so
         scary-looking.
            Now we discuss how to set S0 . One possibility is to use
                       1
            S0 =                diag(s21 , . . . , s2D )                                             (11.48)
                   K 1/D
         where sj = (1/N ) i=1 (xij − xj )2 is the pooled variance for dimension j. (The reason
                                           N
                   1
         for the K 1/D      term is that the resulting volume of each ellipsoid is then given by |S0 | =
          1       2            2
         K |diag(s1 , . . . , sD )|.) The parameter ν0 controls how strongly we believe this prior. The
         weakest prior we can use, while still being proper, is to set ν0 = D + 2, so this is a common
         choice.

11.4.3   EM for mixture of experts
         We can ﬁt a mixture of experts model using EM in a straightforward manner. The expected
         complete data log likelihood is given by
                                      N 
                                       K
            Q(θ, θ old )        =                 rik log[πik N (yi |wkT xi , σk2 )]                 (11.49)
                                       i=1 k=1

                   πi,k              S(V xi )k
                                            T
                                                                                                     (11.50)
                    rik         ∝      old
                                      πik  N (yi |xTi wkold , (σkold )2 )                            (11.51)
         So the E step is the same as in a standard mixture model, except we have to replace πk with
         πi,k when computing rik .
         358                                                         Chapter 11. Mixture models and the EM algorithm


           In the M step, we need to maximize Q(θ, θ old ) wrt wk , σk2 and V. For the regression
         parameters for model k, the objective has the form
                          N                          *
                                       1
            Q(θ k , θ ) =
                     old
                              rik − 2 (yi − wk xi )
                                                  T
                                                                                            (11.52)
                          i=1
                                      σk
         We recognize this as a weighted least squares problem, which makes intuitive sense: if rik is
         small, then data point i will be downweighted when estimating model k’s parameters. From
         Section 8.3.4 we can immediately write down the MLE as
            wk = (XT Rk X)−1 XT Rk y                                                                          (11.53)
         where Rk = diag(r:,k ). The MLE for the variance is given by
                      N                     2
                      i=1 rik (yi − wk xi )
                                      T
            σk2 =             N
                                                                                                              (11.54)
                              i=1 rik

         We replace the estimate of the unconditional mixing weights π with the estimate of the gating
         parameters, V. The objective has the form
                       
            (V) =             rik log πi,k                                                     (11.55)
                            i       k

         We recognize this as equivalent to the log-likelihood for multinomial logistic regression in
         Equation 8.34, except we replace the “hard” 1-of-C encoding yi with the “soft” 1-of-K encoding
         ri . Thus we can estimate V by ﬁtting a logistic regression model to soft target labels.

11.4.4   EM for DGMs with hidden variables
         We can generalize the ideas behind EM for mixtures of experts to compute the MLE or MAP
         estimate for an arbitrary DGM. We could use gradient-based methods (Binder et al. 1997), but it
         is much simpler to use EM (Lauritzen 1995): in the E step, we just estimate the hidden variables,
         and in the M step, we will compute the MLE using these ﬁlled-in values. We give the details
         below.
            For simplicity of presentation, we will assume all CPDs are tabular. Based on Section 10.4.2,
         let us write each CPT as follows:
                                        Kpa(t) Kt
                                                      I(xit =i,xi,pa(t) =c)
            p(xit |xi,pa(t) , θ t ) =               θtck                                                      (11.56)
                                         c=1 k=1

         The log-likelihood of the complete data is given by
                                V K
                                        
                                   pa(t) Kt

            log p(D|θ) =                         Ntck log θtck                                                (11.57)
                                t=1 c=1 k=1
                                N
         where Ntck = i=1 I(xit = i, xi,pa(t) = c) are the empirical counts. Hence the expected
         complete data log-likelihood has the form
                                  
           E [log p(D|θ)] =                   N tck log θtck                              (11.58)
                                         t   c      k
         11.4. The EM algorithm                                                                          359


         where
                      
                      N
                                                        
            N tck =         E I(xit = i, xi,pa(t) = c) =   p(xit = k, xi,pa(t) = c|Di )                (11.59)
                      i=1                                     i

         where Di are all the visible variables in case i.
           The quantity p(xit , xi,pa(t) |Di , θ) is known as a family marginal, and can be computed
         using any GM inference algorithm. The N tjk are the expected sufficient statistics, and constitute
         the output of the E step.
           Given these ESS, the M step has the simple form
                          N tck
            θ̂tck =                                                                                    (11.60)
                          k N tjk
                                   


         This can be proved by adding Lagrange multipliers (to enforce the constraint   k θtjk = 1)
         to the expected complete data log likelihood, and then optimizing each parameter vector θ tc
         separately. We can modify this to perform MAP estimation with a Dirichlet prior by simply
         adding pseudo counts to the expected counts.

11.4.5   EM for the Student distribution *
         One problem with the Gaussian distribution is that it is sensitive to outliers, since the log-
         probability only decays quadratically with distance from the center. A more robust alternative is
         the Student t distribution, as discussed in Section ??.
            Unlike the case of a Gaussian, there is no closed form formula for the MLE of a Student, even
         if we have no missing data, so we must resort to iterative optimization methods. The easiest
         one to use is EM, since it automatically enforces the constraints that ν is positive and that Σ
         is symmetric positive deﬁnite. In addition, the resulting algorithm turns out to have a simple
         intuitive form, as we see below.
            At ﬁrst blush, it might not be apparent why EM can be used, since there is no missing data.
         The key idea is to introduce an “artiﬁcial” hidden or auxiliary variable in order to simplify the
         algorithm. In particular, we will exploit the fact that a Student distribution can be written as a
         Gaussian scale mixture:
                               
                                                         ν ν
             T (xi |μ, Σ, ν) = N (xi |μ, Σ/zi )Ga(zi | , )dzi                                         (11.61)
                                                          2 2
         (See Exercise 11.1 for a proof of this in the 1d case.) This can be thought of as an “inﬁnite”
         mixture of Gaussians, each one with a slightly different covariance matrix.
            Treating the zi as missing data, we can write the complete data log likelihood as
                            
                            N
            c (θ)    =           [log N (xi |μ, Σ/zi ) + log Ga(zi |ν/2, ν/2)]                        (11.62)
                            i=1
                            N 
                                  D             1          zi  ν ν      ν
                      =          − log(2π) − log |Σ| − δi + log − log Γ( )                             (11.63)
                            i=1
                                  2             2           2  2 2      2
                                                             
                              ν                 D
                            + (log zi − zi ) + ( − 1) log zi                                           (11.64)
                              2                 2
           360                                                        Chapter 11. Mixture models and the EM algorithm


           where we have deﬁned the Mahalanobis distance to be
              δi = (xi − μ)T Σ−1 (xi − μ)                                                                      (11.65)
           We can partition this into two terms, one involving μ and Σ, and the other involving ν. We
           have, dropping irrelevant constants,
                      c (θ)   =   LN (μ, Σ) + LG (ν)                                                          (11.66)
                                    1            1          
                                                            N
              LN (μ, Σ)           − N log |Σ| −                  zi δ i                                       (11.67)
                                    2            2          i=1

                                                                 1 
                                                                                    N
                                                  1
                    LG (ν)        −N log Γ(ν/2) + N ν log(ν/2) + ν    (log zi − zi )                          (11.68)
                                                  2              2 i=1

11.4.5.1   EM with ν known
           Let us ﬁrst derive the algorithm with ν assumed known, for simplicity. In this case, we can
           ignore the LG term, so we only need to ﬁgure out how to compute E [zi ] wrt the old parameters.
              From Section 4.6.2.2 we have
                                                  ν + D ν + δi
              p(zi |xi , θ)    =       Ga(zi |         ,       )                                               (11.69)
                                                    2     2
           Now if zi ∼ Ga(a, b), then E [zi ] = a/b. Hence the E step at iteration t is
                     +              ,   ν (t) + D
                (t)
              z i  E zi |xi , θ (t) =          (t)
                                                                                                               (11.70)
                                       ν (t) + δi
           The M step is obtained by maximizing E [LN (μ, Σ)] to yield
                                           (t)
                                       z i xi
              μ̂(t+1)      =       i
                                            (t)
                                                                                                                (11.71)
                                   zi  i
                   (t+1)       1      (t)
              Σ̂           =          z (xi − μ̂(t+1) )(xi − μ̂(t+1) )T                                        (11.72)
                               N i i
                                                                                   
                               1  (t)              N
                                                          (t)     (t+1)     (t+1) T
                           =           z i xi xi −
                                               T
                                                         zi    μ̂       (μ̂      )                             (11.73)
                               N    i               i=1

             These results are quite intuitive: the quantity z i is the precision of measurement i, so if it is
           small, the corresponding data point is down-weighted when estimating the mean and covariance.
           This is how the Student achieves robustness to outliers.

11.4.5.2   EM with ν unknown
           To compute the MLE for the degrees of freedom, we ﬁrst need to compute the expectation of
           LG (ν), which involves zi and log zi . Now if zi ∼ Ga(a, b), then one can show that
               (t)
                       +          ,
              i  E log zi |θ (t) = Ψ(a) − log b                                              (11.74)
           11.4. The EM algorithm                                                                                                                                     361


                                       14 errors using gauss (red=error)                                       4 errors using student (red=error)
                       3                                                                            2

                       2                                                                            1

                       1
                                                                                                    0

                       0
                                                                                                   −1
                      −1
                                                                                                   −2
                      −2
                                                                                                   −3
                      −3
                                                                                                   −4
                      −4

                                                                                                   −5
                      −5

                      −6                                                   Bankrupt                −6                                               Bankrupt
                                                                           Solvent                                                                  Solvent
                      −7                                                                           −7
                       −5   −4        −3        −2         −1          0   1          2             −5   −4   −3        −2          −1          0   1          2



                                                          (a)                                                                     (b)

           Figure 11.14 Mixture modeling on the bankruptcy data set. Left: Gaussian class conditional densities.
           Right: Student class conditional densities. Points that belong to class 1 are shown as triangles, points that
           belong to class 2 are shown as circles The estimated labels, based on the posterior probability of belonging
           to each mixture component, are computed. If these are incorrect, the point is colored red, otherwise it is
           colored blue. (Training data is in black.) Figure generated by mixStudentBankruptcyDemo.


                                  d
           where Ψ(x) =          dx   log Γ(x) is the digamma function. Hence, from Equation 11.69, we have
                                                                                            (t)
               (t)           ν (t) + D           ν (t) + δi
              i     =      Ψ(         ) − log(              )                                                                                                     (11.75)
                                  2                    2
                                (t)       ν (t) + D            ν (t) + D
                     = log(z i ) + Ψ(                 ) − log(           )                                                                                         (11.76)
                                               2                    2
           Substituting into Equation 11.68, we have
                                                                                          Nν            ν  (t)   (t)
              E [LG (ν)]         =         −N log Γ(ν/2) +                                   log(ν/2) +    ( − z i )                                              (11.77)
                                                                                           2            2 i i

           The gradient of this expression is equal to
                d                                         N          N            N   1  (t)   (t)
                  E [LG (ν)]           =             −      Ψ(ν/2) +   log(ν/2) +   +    ( − z i )                                                                (11.78)
               dν                                         2          2            2   2 i i

              This has a unique solution in the interval (0, +∞] which can be found using a 1d constrained
           optimizer.
              Performing a gradient-based optimization in the M step, rather than a closed-form update, is
           an example of what is known as the generalized EM algorithm. One can show that EM will still
           converge to a local optimum even if we only perform a “partial” improvement to the parameters
           in the M step.

11.4.5.3   Mixtures of Student distributions
           It is easy to extend the above methods to ﬁt a mixture of Student distributions. See Exercise 11.4
           for the details.
               Let us consider a small example from (Lo 2009, ch3). We have a N = 66, D = 2 data
           set regarding the bankrupty patterns of certain companies. The ﬁrst feature speciﬁes the ratio
         362                                             Chapter 11. Mixture models and the EM algorithm


         of retained earnings (RE) to total assets, and the second feature speciﬁes the ratio of earnings
         before interests and taxes (EBIT) to total assets. We ﬁt two models to this data, ignoring the
         class labels: a mixture of 2 Gaussians, and a mixture of 2 Students. We then use each ﬁtted
         model to classify the data. We compute the most probable cluster membership and treat this
         as ŷi . We then compare ŷi to the true labels yi and compute an error rate. If this is more
         than 50%, we permute the latent labels (i.e., we consider cluster 1 to represent class 2 and vice
         versa), and then recompute the error rate. Points which are misclassiﬁed are then shown in red.
         The result is shown in Figure 11.14. We see that the Student model made 4 errors, the Gaussian
         model made 21. This is because the class-conditional densities contain some extreme values,
         causing the Gaussian to be a poor choice.

11.4.6   EM for probit regression *
         In Section 9.4.2, we described the latent variable interpretation of probit regression. Recall that
         this has the form p(yi = 1|zi ) = I(zi > 0), where zi ∼ N (wT xi , 1) is latent. We now show
         how to ﬁt this model using EM. (Although it is possible to ﬁt probit regression models using
         gradient based methods, as shown in Section 9.4.1, this EM-based approach has the advantage
         that it generalized to many other kinds of models, as we will see later on.)
            The complete data log likelihood has the following form, assuming a N (0, V0 ) prior on w:

            (z, w|V0 )    =   log p(y|z) + log N (z|Xw, I) + log N (w|0, V0 )             (11.79)
                                                  1                       1
                           =       log p(yi |zi ) − (z − Xw)T (z − Xw) − wT V0−1 w + const (11.80)
                                 i
                                                   2                       2

           The posterior in the E step is a truncated Gaussian:
                                 
                                   N (zi |wT xi , 1)I(zi > 0) if yi = 1
            p(zi |yi , xi , w) =                                                                        (11.81)
                                   N (zi |wT xi , 1)I(zi < 0) if yi = 0
            In Equation 11.80, we see that w only depends linearly on z, so we just need to compute
         E [zi |yi , xi , w]. Exercise 11.15 asks you to show that the posterior mean is given by
                                -           φ(μi )           φ(μi )
                                   μi + 1−Φ(−μ     i)
                                                      = μi + Φ(μ  i)
                                                                     if yi = 1
             E [zi |w, xi ] =              φ(μi )           φ(μi )                                (11.82)
                                   μi − Φ(−μi ) = μi − 1−Φ(μi ) if yi = 0

         where μi = wT xi .
            In the M step, we estimate w using ridge regression, where μ = E [z] is the output we are
         trying to predict. Speciﬁcally, we have

            ŵ = (V0−1 + XT X)−1 XT μ                                                                   (11.83)

             The EM algorithm is simple, but can be much slower than direct gradient methods, as
         illustrated in Figure 11.15. This is because the posterior entropy in the E step is quite high, since
         we only observe that z is positive or negative, but are given no information from the likelihood
         about its magnitude. Using a stronger regularizer can help speed convergence, because it
         constrains the range of plausible z values. In addition, one can use various speedup tricks, such
         as data augmentation (van Dyk and Meng 2001), but we do not discuss that here.
           11.4. The EM algorithm                                                                                                            363

                                                                        probit regression with L2 regularizer of 0.100
                                                          70
                                                                                                                               em
                                                                                                                               minfunc
                                                          60


                                                          50




                                          penalized NLL
                                                          40


                                                          30


                                                          20


                                                          10


                                                           0
                                                               0   20            40           60          80             100         120
                                                                                             iter



           Figure 11.15 Fitting a probit regression model in 2d using a quasi-Newton method or EM. Figure generated
           by probitRegDemo.



 11.4.7    Theoretical basis for EM *
           In this section, we show that EM monotonically increases the observed data log likelihood until
           it reaches a local maximum (or saddle point, although such points are usually unstable). Our
           derivation will also serve as the basis for various generalizations of EM that we will discuss later.

11.4.7.1   Expected complete data log likelihood is a lower bound
           Consider an arbitrary distribution q(zi ) over the hidden variables. The observed data log
           likelihood can be written as follows:
                                                                                 
                       N                         N                p(xi , zi |θ)
               (θ)       log     p(xi , zi |θ) =     log     q(zi )                           (11.84)
                       i=1       z                 i=1       z
                                                                        q(zi )
                                     i                                                              i


           Now log(u) is a concave function, so from Jensen’s inequality (Equation 2.113) we have the
           following lower bound:
                                                         p(xi , zi |θ)
              (θ) ≥             qi (zi ) log                                                                                              (11.85)
                        i   zi
                                                             qi (zi )

             Let us denote this lower bound as follows:
                            
              Q(θ, q)           Eqi [log p(xi , zi |θ)] + H (qi )                                                                         (11.86)
                                 i

           where H (qi ) is the entropy of qi .
              The above argument holds for any positive distribution q. Which one should we choose?
           Intuitively we should pick the q that yields the tightest lower bound. The lower bound is a sum
           364                                                        Chapter 11. Mixture models and the EM algorithm


           over i of terms of the following form:
                                              p(xi , zi |θ)
              L(θ, qi ) =         qi (zi ) log                                                                 (11.87)
                               z
                                                 qi (zi )
                                    i
                                                      p(zi |xi , θ)p(xi |θ)
                          =             qi (zi ) log                                                           (11.88)
                                   zi
                                                              qi (zi )
                                                      p(zi |xi , θ) 
                          =             qi (zi ) log                +   qi (zi ) log p(xi |θ)                  (11.89)
                                   zi
                                                         qi (zi )     z  i

                          =       −KL (qi (zi )||p(zi |xi , θ)) + log p(xi |θ)                                 (11.90)
           The p(xi |θ) term is independent of qi , so we can maximize the lower bound by setting qi (zi ) =
           p(zi |xi , θ). Of course, θ is unknown, so instead we use qit (zi ) = p(zi |xi , θ t ), where θ t is our
           estimate of the parameters at iteration t. This is the output of the E step.
              Plugging this in to the lower bound we get
                                                                
               Q(θ, q t ) =         Eqit [log p(xi , zi |θ)] + H qit                                          (11.91)
                                    i

           We recognize the ﬁrst term as the expected complete data log likelihood. The second term is a
           constant wrt θ. So the M step becomes
                                                   
              θ t+1 = arg max Q(θ, θ t ) = arg max     Eqit [log p(xi , zi |θ)]                   (11.92)
                              θ                              θ
                                                                  i

           as usual.
              Now comes the punchline. Since we used qit (zi ) = p(zi |xi , θ t ), the KL divergence becomes
           zero, so L(θ t , qi ) = log p(xi |θ t ), and hence
                              
              Q(θ t , θ t ) =     log p(xi |θ t ) = (θ t )                                             (11.93)
                               i

           We see that the lower bound is tight after the E step. Since the lower bound “touches” the
           function, maximizing the lower bound will also “push up” on the function itself. That is, the
           M step is guaranteed to modify the parameters so as to increase the likelihood of the observed
           data (unless it is already at a local maximum).
              This process is sketched in Figure 11.16. The dashed red curve is the original function (the
           observed data log-likelihood). The solid blue curve is the lower bound, evaluated at θ t ; this
           touches the objective function at θ t . We then set θ t+1 to the maximum of the lower bound
           (blue curve), and ﬁt a new bound at that point (dotted green curve). The maximum of this new
           bound becomes θ t+2 , etc. (Compare this to Newton’s method in Figure 8.4(a), which repeatedly
           ﬁts and then optimizes a quadratic approximation.)

11.4.7.2   EM monotonically increases the observed data log likelihood
           We now prove that EM monotonically increases the observed data log likelihood until it reaches
           a local optimum. We have
              (θ t+1 ) ≥ Q(θ t+1 , θ t ) ≥ Q(θ t , θ t ) = (θ t )                                            (11.94)
           11.4. The EM algorithm                                                                                365


                                                   Q(θ,θt)
                                                   Q(θ,θt+1)
                                                   l(θ)




                                                             θt θt+1   θt+2



           Figure 11.16 Illustration of EM as a bound optimization algorithm. Based on Figure 9.14 of (Bishop 2006a).
           Figure generated by emLogLikelihoodMax.



           where the ﬁrst inequality follows since Q(θ, ·) is a lower bound on (θ); the second inequality
           follows since, by deﬁnition, Q(θt+1 , θ t ) = maxθ Q(θ, θ t ) ≥ Q(θ t , θ t ); and the ﬁnal equality
           follows Equation 11.93.
              As a consequence of this result, if you do not observe monotonic increase of the observed
           data log likelihood, you must have an error in your math and/or code. (If you are performing
           MAP estimation, you must add on the log prior term to the objective.) This is a surprisingly
           powerful debugging tool.

 11.4.8    Online EM
           When dealing with large or streaming datasets, it is important to be able to learn online, as
           we discussed in Section 8.5. There are two main approaches to online EM in the literature.
           The ﬁrst approach, known as incremental EM (Neal and Hinton 1998), optimizes the lower
           bound Q(θ, q1 , . . . , qN ) one qi at a time; however, this requires storing the expected sufficient
           statistics for each data case. The second approach, known as stepwise EM (Sato and Ishii 2000;
           Cappe and Mouline 2009; Cappe 2010), is based on stochastic approximation theory, and only
           requires constant memory use. We explain both approaches in more detail below, following the
           presentation of (Liang and Klein Liang and Klein).

11.4.8.1   Batch EM review
           Before explaining online EM, we review batch EM in a more abstract setting. Let φ(x, z) be a
           vector of sufficient statistics for a single data case. (For example, for a mixture of multinoullis,
           this would be the count vector a(j), which is the number of cluster j was used in z, plus the
           matrix B(j, v), which is of the number of times the hidden state was j and the observed letter
           was v.) Let si =        z p(z|xi , θ)φ(xi , z) be the expected sufficient statistics for case i, and
                   N
           μ = i=1 si be the sum of the ESS. Given μ, we can derive an ML or MAP estimate of the
           parameters in the M step; we will denote this operation by θ(μ). (For example, in the case of
           mixtures of multinoullis, we just need to normalize a and each row of B.) With this notation
           under our belt, the pseudo code for batch EM is as shown in Algorithm 8.
           366                                                        Chapter 11. Mixture models and the EM algorithm


            Algorithm 11.2: Batch EM algorithm
           1   initialize μ;
           2   repeat
           3        μnew = 0 ;
           4        for each example i = 1 : N do
           5            si := z p(z|xi , θ(μ))φ(xi , z) ;
           6            μnew := μnew + si ; ;
           7      μ := μnew ;
           8   until converged;



11.4.8.2   Incremental EM
           In incremental EM (Neal and Hinton 1998), we keep track of μ as well as the si . When we come
           to a data case, we swap out the old si and replace it with the new snew
                                                                                i  , as shown in the code
           in Algorithm 8. Note that we can exploit the sparsity of snew
                                                                     i   to speedup  the computation of θ,
           since most components of μ wil not have changed.

            Algorithm 11.3: Incremental EM algorithm
           1   initialize si for i = 1 : N ;
           2   μ = i si ;
           3   repeat
           4        for each example i = 1 : N in a random order do
           5            snew
                         i    := z p(z|xi , θ(μ))φ(xi , z) ;
           6            μ := μ + snew i  − si ;
           7            si := snew
                                i   ;
           8   until converged;


              This can be viewed as maximizing the lower bound Q(θ, q1 , . . . , qN ) by optimizing q1 , then
           θ, then q2 , then θ, etc. As such, this method is guaranteed to monotonically converge to a local
           maximum of the lower bound and to the log likelihood itself.

11.4.8.3   Stepwise EM
           In stepwise EM, whenever we compute a new si , we move μ towards it, as shown in Algorithm 7.2
           At iteration k, the stepsize has value ηk , which must satisfy the Robbins-Monro conditions in
           Equation 8.82. For example, (Liang and Klein Liang and Klein) use ηk = (2 + k)−κ for
           0.5 < κ ≤ 1. We can get somewhat better behavior by using a minibatch of size m before
           each update. It is possible to optimize m and κ to maximize the training set likelihood, by
                                                                                                                                   μ
           2. A detail: As written the update for μ does not exploit the sparsity of si . We can ﬁx this by storing m =     
                                                                                                                                j<k (1−ηj )
                                                                                    ηk
           instead of μ, and then using the sparse update m := m +                            si . This will not affect the results (i.e.,
                                                                                 j<k (1−ηj )
           θ(μ) = θ(m)), since scaling the counts by a global constant has no effect.
         11.4. The EM algorithm                                                                         367



                                            

                                            


                                            

                                            
                                             
         Figure 11.17 Illustration of deterministic annealing. Based on http://en.wikipedia.org/wiki/Grad
         uated_optimization.



         trying different values in parallel for an initial trial period; this can signiﬁcantly speed up the
         algorithm.

          Algorithm 11.4: Stepwise EM algorithm
         1   initialize μ; k = 0 ;
         2   repeat
         3        for each example i = 1 : N in a random order do
         4            si := z p(z|xi , θ(μ))φ(xi , z) ;
         5            μ := (1 − ηk )μ + ηk si ;
         6            k := k + 1
         7   until converged;


           (Liang and Klein Liang and Klein) compare batch EM, incremental EM, and stepwise EM
         on four different unsupervised language modeling tasks. They found that stepwise EM (using
         κ ≈ 0.7 and m ≈ 1000) was faster than incremental EM, and both were much faster than batch
         EM. In terms of accuracy, stepwise EM was usually as good or sometimes even better than batch
         EM; incremental EM was often worse than either of the other methods.

11.4.9   Other EM variants *
         EM is one of the most widely used algorithms in statistics and machine learning. Not surpris-
         ingly, many variations have been proposed. We brieﬂy mention a few below, some of which we
         will use in later chapters. See (McLachlan and Krishnan 1997) for more information.

         • Annealed EM In general, EM will only converge to a local maximum. To increase the chance
           of ﬁnding the global maximum, we can use a variety of methods. One approach is to use
           a method known as deterministic annealing (Rose 1998). The basic idea is to “smooth”
           the posterior “landscape” by raising it to a temperature, and then gradually cooling it, all the
           while slowly tracking the global maximum. See Figure 11.17. for a sketch. (A stochastic version
368                                                       Chapter 11. Mixture models and the EM algorithm

                                    true log−likelihood
                                                                                   true log−likelihood


                                           lower bound
                                                                                          lower bound




                          training time                                  training time

                              (a)                                            (b)

Figure 11.18 Illustration of possible behaviors of variational EM. (a) The lower bound increases at each
iteration, and so does the likelihood. (b) The lower bound increases but the likelihood decreases. In
this case, the algorithm is closing the gap between the approximate and true posterior. This can have a
regularizing effect. Based on Figure 6 of (Saul et al. 1996). Figure generated by varEMbound.



  of this algorithm is described in Section 24.6.1.) An annealed version of EM is described in
  (Ueda and Nakano 1998).
• Variational EM In Section 11.4.7, we showed that the optimal thing to do in the E step is to
  make qi be the exact posterior over the latent variables, qit (zi ) = p(zi |xi , θ t ). In this case,
  the lower bound on the log likelihood will be tight, so the M step will “push up” on the
  log-likelihood itself. However, sometimes it is computationally intractable to perform exact
  inference in the E step, but we may be able to perform approximate inference. If we can
  ensure that the E step is performing inference based on a a lower bound to the likelihood,
  then the M step can be seen as monotonically increasing this lower bound (see Figure 11.18).
  This is called variational EM (Neal and Hinton 1998). See Chapter 21 for some variational
  inference methods that can be used in the E step.
• Monte Carlo EM Another approach to handling an intractable E step is to use a Monte
  Carlo approximation to the expected sufficient statistics. That is, we draw samples from the
  posterior, zsi ∼ p(zi |xi , θ t ), and then compute the sufficient statistics for each completed
  vector, (xi , zsi ), and then average the results. This is called Monte Carlo EM or MCEM (Wei
  and Tanner 1990). (If we only draw a single sample, it is called stochastic EM (Celeux and
  Diebolt 1985).) One way to draw samples is to use MCMC (see Chapter 24). However, if we
  have to wait for MCMC to converge inside each E step, the method becomes very slow. An
  alternative is to use stochastic approximation, and only perform “brief” sampling in the E
  step, followed by a partial parameter update. This is called stochastic approximation EM
  (Delyon et al. 1999) and tends to work better than MCEM. Another alternative is to apply
  MCMC to infer the parameters as well as the latent variables (a fully Bayesian approach), thus
  eliminating the distinction between E and M steps. See Chapter 24 for details.
• Generalized EM Sometimes we can perform the E step exactly, but we cannot perform the
  M step exactly. However, we can still monotonically increase the log likelihood by performing
  a “partial” M step, in which we merely increase the expected complete data log likelihood,
  rather than maximizing it. For example, we might follow a few gradient steps. This is called
11.4. The EM algorithm                                                                                                                                                  369

                                                K=5, D=15, N=5000                                                           K=5, D=15, N=5000
                        −38.5                                                                         −36


                         −39
                                                                                                      −37


                        −39.5
                                                                                                      −38

                         −40




               loglik




                                                                                             loglik
                                                                                                      −39
                        −40.5

                                                                                                      −40
                                                                                                                                                     EM (1.315)
                         −41                                             EM (1.080)
                                                                                                                                                     OR(1) (1.368)
                                                                         OR(1) (1.358)
                                                                                                                                                     OR(1.25) (1.381)
                                                                         OR(1.25) (1.141)             −41
                        −41.5                                                                                                                        OR(2) (1.540)
                                                                         OR(2) (1.219)
                                                                                                                                                     OR(5) (1.474)
                                                                         OR(5) (1.433)
                         −42                                                                          −42
                                0   2   4   6       8       10      12    14     16     18                  0   2   4   6       8       10      12   14     16     18
                                                    iterations                                                                  iterations


                                                   (a)                                                                         (b)

Figure 11.19 Illustration of adaptive over-relaxed EM applied to a mixture of 5 Gaussians in 15 dimensions.
We show the algorithm applied to two different datasets, randomly sampled from a mixture of 10 Gaussians.
We plot the convergence for different update rates η. Using η = 1 gives the same results as regular EM.
The actual running time is printed in the legend. Figure generated by mixGaussOverRelaxedEmDemo.



  the generalized EM or GEM algorithm. (This is an unfortunate term, since there are many
  ways to generalize EM....)
• ECM(E) algorithm The ECM algorithm stands for “expectation conditional maximization”,
  and refers to optimizing the parameters in the M step sequentially, if they turn out to be
  dependent. The ECME algorithm, which stands for “ECM either” (Liu and Rubin 1995), is
  a variant of ECM in which we maximize the expected complete data log likelihood (the Q
  function) as usual, or the observed data log likelihood, during one or more of the conditional
  maximization steps. The latter can be much faster, since it ignores the results of the E step,
  and directly optimizes the objective of interest. A standard example of this is when ﬁtting
  the Student T distribution. For ﬁxed ν, we can update Σ as usual, but then to update ν,
  we replace the standard update of the form ν t+1 = arg maxν Q((μt+1 , Σt+1 , ν), θ t ) with
  ν t+1 = arg maxν log p(D|μt+1 , Σt+1 , ν). See (McLachlan and Krishnan 1997) for more
  information.
• Over-relaxed EM Vanilla EM can be quite slow, especially if there is lots of missing data. The
  adaptive overrelaxed EM algorithm (Salakhutdinov and Roweis 2003) performs an update
  of the form θ t+1 = θ t + η(M (θ t ) − θ t ), where η is a step-size parameter, and M (θ t ) is
  the usual update computed during the M step. Obviously this reduces to standard EM if
  η = 1, but using larger values of η can result in faster convergence. See Figure 11.19 for an
  illustration. Unfortunately, using too large a value of η can cause the algorithm to fail to
  converge.

  Finally, note that EM is in fact just a special case of a larger class of algorithms known as
bound optimization or MM algorithms (MM stands for minorize-maximize). See (Hunter and
Lange 2004) for further discussion.
         370                                           Chapter 11. Mixture models and the EM algorithm


 11.5    Model selection for latent variable models
         When using LVMs, we must specify the number of latent variables, which controls the model
         complexity. In particuarl, in the case of mixture models, we must specify K, the number
         of clusters. Choosing these parameters is an example of model selection. We discuss some
         approaches below.

11.5.1   Model selection for probabilistic models
         The optimal Bayesian approach, discussed in Section 5.3, is to pick the model with the largest
         marginal likelihood, K ∗ = argmaxk p(D|K).
            There are two problems with this. First, evaluating the marginal likelihood for LVMs is
         quite difficult. In practice, simple approximations, such as BIC, can be used (see e.g., (Fraley
         and Raftery 2002)). Alternatively, we can use the cross-validated likelihood as a performance
         measure, although this can be slow, since it requires ﬁtting each model F times, where F is the
         number of CV folds.
            The second issue is the need to search over a potentially large number of models. The usual
         approach is to perform exhaustive search over all candidate values of K. However, sometimes
         we can set the model to its maximal size, and then rely on the power of the Bayesian Occam’s
         razor to “kill off” unwanted components. An example of this will be shown in Section 21.6.1.6,
         when we discuss variational Bayes.
            An alternative approach is to perform stochastic sampling in the space of models. Traditional
         approaches, such as (Green 1998, 2003; Lunn et al. 2009), are based on reversible jump MCMC,
         and use birth moves to propose new centers, and death moves to kill off old centers. However,
         this can be slow and difficult to implement. A simpler approach is to use a Dirichlet process
         mixture model, which can be ﬁt using Gibbs sampling, but still allows for an unbounded number
         of mixture components; see Section 25.2 for details.
            Perhaps surprisingly, these sampling-based methods can be faster than the simple approach
         of evaluating the quality of each K separately. The reason is that ﬁtting the model for each
         K is often slow. By contrast, the sampling methods can often quickly determine that a certain
         value of K is poor, and thus they need not waste time in that part of the posterior.

11.5.2   Model selection for non-probabilistic methods
         What if we are not using a probabilistic model? For example, how do we choose K for the K-
         means algorithm? Since this does not correspond to a probability model, there is no likelihood,
         so none of the methods described above can be used.
            An obvious proxy for the likelihood is the reconstruction error. Deﬁne the squared recon-
         struction error of a data set D, using model complexity K, as follows:
                           1 
             E(D, K) =            ||xi − x̂i ||2                                                   (11.95)
                          |D|
                             i∈D

         In the case of K-means, the reconstruction is given by x̂i = μzi , where zi = argmink ||xi −
         μk ||22 , as explained in Section 11.4.2.6.
            Figure 11.20(a) plots the reconstruction error on the test set for K-means. We notice that the
         error decreases with increasing model complexity! The reason for this behavior is as follows:
11.5. Model selection for latent variable models                                                                                                                                                           371



                            MSE on test vs K for K−means                                                                                         NLL on test set vs K for GMM
            0.25                                                                                       1245

                                                                                                       1240

             0.2                                                                                       1235

                                                                                                       1230

            0.15                                                                                       1225

                                                                                                       1220

             0.1                                                                                       1215

                                                                                                       1210

            0.05                                                                                       1205

                                                                                                       1200

              0                                                                                        1195
                   2   4    6        8            10             12       14        16                           2               4           6            8         10             12      14         16


                                         (a)                                                                                                                  (b)

Figure 11.20 Test set performance vs K for data generated from a mixture of 3 Gaussians in 1d (data is
shown in Figure 11.21(a)). (a) MSE on test set for K-means. (b) Negative log likelihood on test set for GMM.
Figure generated by kmeansModelSel1d.




                                         Xtrain                                                               K=2, mse=0.2023                         K=3, mse=0.0818               K=4, mse=0.0562
              60                                                                                        1                                        1                            1

                                                                                                       0.8                                   0.8                             0.8

              50                                                                                       0.6                                   0.6                             0.6

                                                                                                       0.4                                   0.4                             0.4

              40                                                                                       0.2                                   0.2                             0.2

                                                                                                        0                                        0                            0
                                                                                                        −1                   0           1       −2            0         2    −2          0           2
              30
                                                                                                              K=5, mse=0.0368                         K=6, mse=0.0275              K=10, mse=0.0111
                                                                                                        1                                        1                            1

              20                                                                                       0.8                                   0.8                             0.8

                                                                                                       0.6                                   0.6                             0.6

              10                                                                                       0.4                                   0.4                             0.4

                                                                                                       0.2                                   0.2                             0.2

               0                                                                                        0                                        0                            0
               −3      −2       −1         0                 1            2          3                  −2                   0           2       −2            0         2    −2          0           2


                                         (a)                                                                                                              (b)
                                                             K=2, nll=1244.7882          K=3, nll=1198.9738                K=4, nll=1196.9937
                                                       0.5                         0.5                               0.5

                                                       0.4                         0.4                               0.4

                                                       0.3                         0.3                               0.3

                                                       0.2                         0.2                               0.2

                                                       0.1                         0.1                               0.1

                                                        0                           0                                 0
                                                        −2            0        2    −2           0           2        −2             0               2

                                                             K=5, nll=1202.5869          K=6, nll=1199.5574                K=10, nll=1203.2931
                                                       0.5                         0.5                               0.5

                                                       0.4                         0.4                               0.4

                                                       0.3                         0.3                               0.3

                                                       0.2                         0.2                               0.2

                                                       0.1                         0.1                               0.1

                                                        0                           0                                 0
                                                        −2            0        2    −2           0           2        −2             0               2


                                                                                              (c)

Figure 11.21 Synthetic data generated from a mixture of 3 Gaussians in 1d. (a) Histogram of training data.
(Test data looks essentially the same.) (b) Centroids estimated by K-means for K ∈ {2, 3, 4, 5, 6, 10}.
(c) GMM density model estimated by EM for for the same values of K. Figure generated by
kmeansModelSel1d.
       372                                             Chapter 11. Mixture models and the EM algorithm


       when we add more and more centroids to K-means, we can “tile” the space more densely, as
       shown in Figure 11.21(b). Hence any given test vector is more likely to ﬁnd a close prototype to
       accurately represent it as K increases, thus decreasing reconstruction error. However, if we use
       a probabilistic model, such as the GMM, and plot the negative log-likelihood, we get the usual
       U-shaped curve on the test set, as shown in Figure 11.20(b).
          In supervised learning, we can always use cross validation to select between non-probabilistic
       models of different complexity, but this is not the case with unsupervised learning. Although
       this is not a novel observation (e.g., it is mentioned in passing in (Hastie et al. 2009, p519), one
       of the standard references in this ﬁeld), it is perhaps not as widely appreciated as it should be.
       In fact, it is one of the more compelling arguments in favor of probabilistic models.
          Given that cross validation doesn’t work, and supposing one is unwilling to use probabilistic
       models (for some bizarre reason...), how can one choose K? The most common approach is to
       plot the reconstruction error on the training set versus K, and to try to identify a knee or kink
       in the curve. The idea is that for K < K ∗ , where K ∗ is the “true” number of clusters, the rate
       of decrease in the error function will be high, since we are splitting apart things that should
       not be grouped together. However, for K > K ∗ , we are splitting apart “natural” clusters, which
       does not reduce the error by as much.
          This kink-ﬁnding process can be automated by use of the gap statistic (Tibshirani et al.
       2001). Nevertheless, identifying such kinks can be hard, as shown in Figure 11.20(a), since the
       loss function usually drops off gradually. A different approach to “kink ﬁnding” is described in
       Section 12.3.2.1.

11.6   Fitting models with missing data
       Suppose we want to ﬁt a joint density model by maximum likelihood, but we have “holes” in our
       data matrix, due to missing data (usually represented by NaNs). More formally, let Oij = 1 if
       component j of data case i is observed, and let Oij = 0 otherwise. Let Xv = {xij : Oij = 1}
       be the visible data, and Xh = {xij : Oij = 0} be the missing or hidden data. Our goal is to
       compute
          θ̂ = argmax p(Xv |θ, O)                                                                    (11.96)
                   θ

       Under the missing at random assumption (see Section 8.6.2), we have
                              
                              N
          p(Xv |θ, O) =             p(xiv |θ)                                                        (11.97)
                              i=1

       where xiv is a vector created from row i and the columns indexed by the set {j : Oij = 1}.
       Hence the log-likelihood has the form
                          
         log p(Xv |θ) =       log p(xiv |θ)                                                 (11.98)
                               i

       where
                        
          p(xiv |θ) =         p(xiv , xih |θ)                                                        (11.99)
                        xih
           11.6. Fitting models with missing data                                                        373


           and xih is the vector of hidden variables for case i (assumed discrete for notational simplicity).
           Substituting in, we get
                                                          
                                        
              log p(Xv |θ) =       log     p(xiv , xih |θ)                                           (11.100)
                                  i          xih

           Unfortunately, this objective is hard to maximize. since we cannot push the log inside the sum.
           However, we can use the EM algorithm to compute a local optimum. We give an example of
           this below.

 11.6.1    EM for the MLE of an MVN with missing data
           Suppose we want to ﬁt an MVN by maximum likelihood, but we have missing data. We can use
           EM to ﬁnd a local maximum of the objective, as we explain below.

11.6.1.1   Getting started
           To get the algorithm started, we can compute the MLE based on those rows of the data ma-
           trix that are fully observed. If there are no such rows, we can use some ad-hoc imputation
           procedures, and then compute an initial MLE.

11.6.1.2   E step
           Once we have θ t−1 , we can compute the expected complete data log likelihood at iteration t as
           follows:
                                  N                             
                                    
               Q(θ, θ ) = E
                     t−1
                                       log N (xi |μ, Σ)|D, θ t−1
                                                                                                    (11.101)
                                           i=1
                                       N            1 
                              =       − log |2πΣ| −     E (xi − μ)T Σ−1 (xi − μ)                      (11.102)
                                       2            2 i
                                       N            1       
                              =       − log |2πΣ| − tr(Σ−1    E (xi − μ)(xi − μ)T                     (11.103)
                                       2            2       i
                                          N           ND          1
                              =       −     log |Σ| −    log(2π) − tr(Σ−1 E [S(μ)])                   (11.104)
                                          2            2          2
           where
                                                       T
                                                            
              E [S(μ)]        E xi xTi + μμT − 2μE [xi ]                                             (11.105)
                              i

           (We drop the conditioning of theexpectation on D and θ t−1 for brevity.) We see that we need
           to compute i E [xi ] and i E xi xTi ; these are the expected sufficient statistics.
              To compute these quantities, we use the results from Section 4.3.1. Speciﬁcally, consider case
           i, where components v are observed and components h are unobserved. We have
              xih |xiv , θ   ∼    N (mi , Vi )                                                        (11.106)
                      mi         μh + Σhv Σ−1
                                            vv (xiv − μv )                                            (11.107)
                      Vi         Σhh −      Σhv Σ−1
                                                  vv Σvh                                              (11.108)
           374                                                Chapter 11. Mixture models and the EM algorithm


           Hence the expected sufficient statistics are
              E [xi ] = (E [xih ] ; xiv ) = (mi ; xiv )                                               (11.109)
           where we have assumed (without loss of generality) that the unobserved variables come before
           the observed variables
                                 in the node ordering.                                 
             To compute E xi xTi , we use the result that cov [x] = E xxT − E [x] E xT . Hence
                                                        
                                     xih  T              E xih xTih     E [xih ] xTiv
                E xi xiT
                           = E              xih xiv =
                                                    T
                                                                                                 (11.110)
                                      xiv                   xiv E [xih ]
                                                                         T
                                                                             xiv xTiv
                                             T
              E xih xTih = E [xih ] E [xih ] + Vi                                                 (11.111)

11.6.1.3   M step
           By solving ∇Q(θ, θ (t−1) ) = 0, we can show that the M step is equivalent to plugging these
           ESS into the usual MLE equations to get
                         1 
              μt =             E [xi ]                                                          (11.112)
                        N i
                         1  
              Σt =             E xi xTi − μt (μt )T                                             (11.113)
                        N i
              Thus we see that EM is not equivalent to simply replacing variables by their expectations and
           applying the standard MLE formula; that would ignore the posterior variance and would result
           in an incorrect estimate. Instead we must compute the expectation of the sufficient statistics,
           and plug that into the usual equation for the MLE. We can easily modify the algorithm to
           perform MAP estimation, by plugging in the ESS into the equation for the MAP estimate. For an
           implementation, see gaussMissingFitEm.

11.6.1.4   Example
           As an example of this procedure in action, let us reconsider the imputation problem from
           Section 4.3.2.3, which had N = 100 10-dimensional data cases, with 50% missing data. Let
           us ﬁt the parameters using EM.
                                       + Call the  , resulting parameters θ̂. We can use our model for
           predictions by computing E xih |xiv , θ̂ . Figure 11.22(a-b) indicates that the results obtained
           using the learned parameters are almost as good as with the true parameters. Not surprisingly,
           performance improves with more data, or as the fraction of missing data is reduced.

11.6.1.5   Extension to the GMM case
           It is straightforward to ﬁt a mixture of Gaussians in the presence of partially observed data
           vectors xi . We leave the details as an exercise.

           Exercises
           Exercise 11.1 Student T as inﬁnite mixture of Gaussians
           Derive Equation 11.61. For simplicity, assume a one-dimensional distribution.
11.6. Fitting models with missing data                                                                                                                                            375

                                             imputation with true params                                                       imputation with em
                                       2                                        2                                  2                                          2
                                      R = 0.260                                R = 0.685                          R = 0.220                                  R = 0.609
                               10                                       20                                 10                                         20

                                5                                                                           5
                                                                        10                                                                            10




                     imputed




                                                              imputed




                                                                                                 imputed




                                                                                                                                            imputed
                                0                                                                           0
                                                                         0                                                                             0
                               −5                                                                          −5

                               −10                                      −10                                −10                                        −10
                                −10        0       10                    −20        0       20              −10        0         10                    −20        0       20
                                       2 truth                                  2 truth                            2 truth                                    2 truth
                                      R = 0.399                                R = 0.531                          R = 0.113                                  R = 0.532
                               10                                       10                                 10                                         10

                                5                                        5                                  5                                          5




                     imputed




                                                              imputed




                                                                                                 imputed




                                                                                                                                            imputed
                                0                                        0                                  0                                          0

                               −5                                       −5                                 −5                                         −5

                               −10                                      −10                                −10                                        −10
                                −10          0     10                    −10          0     10              −10          0       10                    −10          0     10
                                           truth                                    truth                              truth                                      truth


                                                        (a)                                                                           (b)

Figure 11.22 Illustration of data imputation. (a) Scatter plot of true values vs imputed values us-
ing true parameters. (b) Same as (b), but using parameters estimated with EM. Figure generated by
gaussImputationDemo.



Exercise 11.2 EM for mixtures of Gaussians
Show that the M step for ML estimation of a mixture of Gaussians is given by
               
                 i rik xi
   μk =                                                                                                                                                                        (11.114)
                  rk
                                           T              T          T
                 i rik (xi − μk )(xi − μk )       i rik xi xi − rk μk μk
   Σk =                                       =                                                                                                                                (11.115)
                             rk                             rk

Exercise 11.3 EM for mixtures of Bernoullis
• Show that the M step for ML estimation of a mixture of Bernoullis is given by
                  
                    i rik xij
       μkj =                                                                                                                                                                   (11.116)
                       i rik

•   Show that the M step for MAP estimation of a mixture of Bernoullis with a β(α, β) prior is given by
                    
                   ( i rik xij ) + α − 1
       μkj =                                                                                      (11.117)
                  ( i rik ) + α + β − 2

Exercise 11.4 EM for mixture of Student distributions
Derive the EM algorithm for ML estimation of a mixture of multivariate Student T distributions.
Exercise 11.5 Gradient descent for ﬁtting GMM
Consider the Gaussian mixture model

    p(x|θ) =            πk N (x|μk , Σk )                                                                                                                                      (11.118)
                 k

Deﬁne the log likelihood as
             N
    (θ) =         log p(xn |θ)                                                                                                                                                (11.119)
             n=1
376                                                                      Chapter 11. Mixture models and the EM algorithm

                                                                     p      q



                                                             Jn                 Kn



                                                                     xn
                                                                                N


                                                            μj                  σk

                                                                 m                   l



Figure 11.23 A mixture of Gaussians with two discrete latent indicators. Jn speciﬁes which mean to use,
and Kn speciﬁes which variance to use.


Deﬁne the posterior responsibility that cluster k has for datapoint n as follows:
                                               πk N (xn |μk , Σk )
   rnk  p(zn = k|xn , θ) = K                                                                                    (11.120)
                                            k =1 πk N (xn |μk , Σk )
                                                                   



a. Show that the gradient of the log-likelihood wrt μk is
        d
           (θ) =              rnk Σ−1
                                    k (xn − μk )                                                                  (11.121)
       dμk                 n

b. Derive the gradient of the log-likelihood wrt πk . (For now, ignore any constraints on πk .)
                                           
c. One way to handle the constraint that K   k=1 πk = 1 is to reparameterize using the softmax function:

                e wk
       πk   K       wk 
                                                                                                                  (11.122)
              k =1 e

   Here wk ∈ R are unconstrained parameters. Show that
        d
           (θ) =              rnk − πk                                                                           (11.123)
       dwk                 n

   (There may be a constant factor missing in the above expression...) Hint: use the chain rule and the
   fact that
        dπj      πj (1 − πj ) if j = k
             =                                                                                   (11.124)
       dwk       −πj πk         if j = k
   which follows from Exercise 8.4(1).
d. Derive the gradient of the log-likelihood wrt Σk . (For now, ignore any constraints on Σk .)
e. One way to handle the constraint that Σk be a symmetric positive deﬁnite matrix is to reparame-
   terize using a Cholesky decomposition, Σk = RTk R, where R is an upper-triangular, but otherwise
   unconstrained matrix. Derive the gradient of the log-likelihood wrt Rk .

Exercise 11.6 EM for a ﬁnite scale mixture of Gaussians
(Source: Jaakkola..) Consider the graphical model in Figure 11.23 which deﬁnes the following:
                m
                        l                   
   p(xn |θ) =         pj             qk N (xn |μj , σk2 )                                                         (11.125)
                j=1            k=1
11.6. Fitting models with missing data                                                                                   377


where θ = {p1 , . . . , pm , μ1 , . . . , μm , q1 , . . . , ql , σ12 , . . . , σl2 } are all the parameters. Here pj  P (Jn =
j) and qk  P (Kn = k) are the equivalent of mixture weights. We can think of this as a mixture
of m non-Gaussian components, where each component distribution is a scale mixture, p(x|j; θ) =
l                     2
   k=1 qk N (x; μj , σk ), combining Gaussians with different variances (scales).
We will now derive a generalized EM algorithm for this model. (Recall that in generalized EM, we do a
partial update in the M step, rather than ﬁnding the exact maximum.)

a. Derive an expression for the responsibilities, P (Jn = j, Kn = k|xn , θ), needed for the E step.
b. Write out a full expression for the expected complete log-likelihood
                                      N
        Q(θnew , θold ) = Eθold            log P (Jn , Kn , xn |θnew )                                                (11.126)
                                     n=1

c. Solving the M-step would require us to jointly optimize the means μ1 , . . . , μm and the variances
   σ12 , . . . , σl2 . It will turn out to be simpler to ﬁrst solve for the μj ’s given ﬁxed σj2 ’s, and subsequently
   solve for σj2 ’s given the new values of μj ’s. For brevity, we will just do the ﬁrst part. Derive an
   expression for the maximizing μj ’s given ﬁxed σ1:l      2
                                                               , i.e., solve ∂μ∂Q
                                                                                new = 0.




Exercise 11.7 Manual calculation of the M step for a GMM
(Source: de Freitas.) In this question we consider clustering 1D data with a mixture of 2 Gaussians using
the EM algorithm. You are given the 1-D data points x = [1        10     20]. Suppose the output of the E
step is the following matrix:
          ⎡             ⎤
              1     0
    R = ⎣ 0.4 0.6 ⎦                                                                                (11.127)
              0     1

where entry ri,c is the probability of obervation xi belonging to cluster c (the responsibility of cluster c for
data point i). You just have to compute the M step. You may state the equations for maximum likelihood
estimates of these quantities (which you should know) without proof; you just have to apply the equations
to this data set. You may leave your answer in fractional form. Show your work.

a. Write down the likelihood function you are trying to optimize.
b. After performing the M step for the mixing weights π1 , π2 , what are the new values?
c. After performing the M step for the means μ1 and μ2 , what are the new values?

Exercise 11.8 Moments of a mixture of Gaussians
Consider a mixture of K Gaussians
               K
    p(x) =          πk N (x|μk , Σk )                                                                                 (11.128)
              k=1



a. Show that
        E [x] =         πk μk                                                                                         (11.129)
                    k
378                                                                      Chapter 11. Mixture models and the EM algorithm

                                            5



                                            4



                                            3



                                            2



                                            1



                                            0



                                           −1



                                           −2
                                             0     2   4       6     8      10       12       14   16    18




          Figure 11.24 Some data points in 2d. Circles represent the initial guesses for m1 and m2 .


b. Show that
          cov [x]       =             πk [Σk + μk μTk ] − E [x] E [x]T                                            (11.130)
                                 k
                                         
   Hint: use the fact that cov [x] = E xxT − E [x] E [x]T .

Exercise 11.9 K-means clustering by hand
(Source: Jaakkola.)
In Figure 11.24, we show some data points which lie on the integer grid. (Note that the x-axis has been
compressed; distances should be measured using the actual grid coordinates.) Suppose we apply the K-
means algorithm to this data, using K = 2 and with the centers initialized at the two circled data points.
Draw the ﬁnal clusters obtained after K-means converges (show the approximate location of the new centers
and group together all the points assigned to each center). Hint: think about shortest Euclidean distance.
Exercise 11.10 Deriving the K-means cost function
Show that
                         K                                           K
                    1
   JW (z) =                                       (xi − xi )2 =          nk               (xi − xk )2            (11.131)
                    2
                        k=1 i:zi =k i :zi =k                      k=1          i:zi =k


Hint: note that, for any μ,

          (xi − μ)2          =            [(xi − x) − (μ − x)]2                                                   (11.132)
      i                               i

                             =            (xi − x)2 +          (x − μ)2 − 2                (xi − x)(μ − x)        (11.133)
                                      i                    i                          i

                             =       ns2 + n(x − μ)2                                                              (11.134)
           2    1
                    n                      2
where s =       n        i=1 (xi     − x) , since
                                                       %                         &
          (xi − x)(μ − x)              =         (μ − x) (         xi ) − nx         = (μ − x)(nx − nx) = 0       (11.135)
      i                                                        i


Exercise 11.11 Visible mixtures of Gaussians are in the exponential family
Show that the joint distribution p(x, z|θ) for a 1d GMM can be represented in exponential family form.
11.6. Fitting models with missing data                                                                                                      379

                                                           regression with censored data; red x = censored, green * = predicted
                                                 4.6
                                                                                                                             EM
                                                 4.4                                                                         OLS

                                                 4.2

                                                  4

                                                 3.8




                                 survival time
                                                 3.6

                                                 3.4

                                                 3.2

                                                  3

                                                 2.8

                                                 2.6
                                                       2       2.05      2.1     2.15      2.2    2.25       2.3      2.35         2.4
                                                                                  inverse temperature



Figure 11.25 Example of censored linear regression. Black circles are observed training points, red crosses
are observed but censored training points. Green stars are predicted values of the censored training points.
We also show the lines ﬁt by least squares (ignoring censoring) and by EM. Based on Figure 5.6 of (Tanner
1996). Figure generated by linregCensoredSchmeeHahnDemo, written by Hannes Bretschneider.



Exercise 11.12 EM for robust linear regression with a Student t likelihood
Consider a model of the form
   p(yi |xi , w, σ 2 , ν) = T (yi |wT xi , σ 2 , ν)                                                                                      (11.136)

Derive an EM algorithm to compute the MLE for w. You may assume ν and σ 2 are ﬁxed, for simplicity.
Hint: see Section 11.4.5.
Exercise 11.13 EM for EB estimation of Gaussian shrinkage model
Extend the results of Section 5.6.2.2 to the case where the σj2 are not equal (but are known). Hint: treat
the θj as hidden variables, and then to integrate them out in the E step, and maximize η = (μ, τ 2 ) in the
M step.
Exercise 11.14 EM for censored linear regression
Censored regression refers to the case where one knows the outcome is at least (or at most) a certain
value, but the precise value is unknown. This arises in many different settings. For example, suppose one
is trying to learn a model that can predict how long a program will take to run, for different settings of
its parameters. One may abort certain runs if they seem to be taking too long; the resulting run times are
said to be right censored. For such runs, all we know is that yi ≥ ci , where ci is the censoring time,
that is, yi = min(zi , ci ), where zi is the true running time and yi is the observed running time. We
can also deﬁne left censored and interval censored models.3 Derive an EM algorithm for ﬁtting a linear
regression model to right-censored data. Hint: use the results from Exercise 11.15. See Figure 11.25 for an
example, based on the data from (Schmee and Hahn 1979). We notice that the EM line is tilted upwards
more, since the model takes into account the fact that the truncated values are actually higher than the
observed values.

3. There is a closely related model in econometrics called the Tobit model, in which yi = max(zi , 0), so we only
get to observe positive outcomes. An example of this is when zi represents “desired investment”, and yi is actual
investment. Probit regression (Section 9.4) is another example.
380                                                      Chapter 11. Mixture models and the EM algorithm


Exercise 11.15 Posterior mean and variance of a truncated Gaussian
Let zi = μi + σi , where i ∼ N (0, 1). Sometimes, such as in probit regression or censored regression,
we do not observe zi , but we observe the fact that it is above some threshold, namely we observe the event
E = I(zi ≥ ci ) = I(i ≥ ci −μσ
                                i
                                  ). (See Exercise 11.14 for details on censored regression, and Section 11.4.6
for probit regression.) Show that
                                    c − μ 
                                       i     i
    E [zi |zi ≥ ci ] = μi + σH                                                                          (11.137)
                                         σ
and
                                                       c − μ 
                                                           i   i
   E zi2 |zi ≥ ci     =    μ2i + σ 2 + σ(ci + μi )H                                                      (11.138)
                                                             σ
where we have deﬁned
               φ(u)
   H(u)                                                                                                 (11.139)
             1 − Φ(u)
and where φ(u) is the pdf of a standard Gaussian, and Φ(u) is its cdf.
                             p(i ,E)
Hint 1: we have p(i |E) =    p(E)
                                      ,   where E is some event of interest.
Hint 2: It can be shown that
       d
         N (w|0, 1) = −wN (w|0, 1)                                                                       (11.140)
      dw
and hence
    c
       wN (w|0, 1) = N (b|0, 1) − N (c|0, 1)                                                             (11.141)
      b
12        Latent linear models



  12.1    Factor analysis
          One problem with mixture models is that they only use a single latent variable to generate the
          observations. In particular, each observation can only come from one of K prototypes. One can
          think of a mixture model as using K hidden binary variables, representing a one-hot encoding
          of the cluster identity. But because these variables are mutually exclusive, the model is still
          limited in its representational power.
             An alternative is to use a vector of real-valued latent variables, zi ∈ RL . The simplest prior
          to use is a Gaussian (we will consider other choices later):
             p(zi ) = N (zi |μ0 , Σ0 )                                                                 (12.1)
          If the observations are also continuous, so xi ∈ RD , we may use a Gaussian for the likelihood.
          Just as in linear regression, we will assume the mean is a linear function of the (hidden) inputs,
          thus yielding
             p(xi |zi , θ) = N (Wzi + μ, Ψ)                                                            (12.2)
          where W is a D ×L matrix, known as the factor loading matrix, and Ψ is a D ×D covariance
          matrix. We take Ψ to be diagonal, since the whole point of the model is to “force” zi to explain
          the correlation, rather than “baking it in” to the observation’s covariance. This overall model
          is called factor analysis or FA. The special case in which Ψ = σ 2 I is called probabilistic
          principal components analysis or PPCA. The reason for this name will become apparent later.
             The generative process, where L = 1, D = 2 and Ψ is diagonal, is illustrated in Figure 12.1.
          We take an isotropic Gaussian “spray can” and slide it along the 1d line deﬁned by wzi + μ.
          This induces an ellongated (and hence correlated) Gaussian in 2d.

 12.1.1   FA is a low rank parameterization of an MVN
          FA can be thought of as a way of specifying a joint density model on x using a small number
          of parameters. To see this, note that from Equation 4.126, the induced marginal distribution
          p(xi |θ) is a Gaussian:
                            
             p(xi |θ) =        N (xi |Wzi + μ, Ψ)N (zi |μ0 , Σ0 )dzi                             (12.3)

                        =   N (xi |Wμ0 + μ, Ψ + WΣ0 WT )                                               (12.4)
         382                                                                      Chapter 12. Latent linear models




                                                [                       Z          [
                                                             S [_]
                                                             ȝ                                  ȝ

                                                                 ]_Z_
                  S]                                                                                S[




                                       ]                                     [                                [
                            

         Figure 12.1 Illustration of the PPCA generative process, where we have L = 1 latent dimension generating
         D = 2 observed dimensions. Based on Figure 12.9 of (Bishop 2006b).


         From this, we see that we can set μ0 = 0 without loss of generality, since we can always absorb
         Wμ0 into μ. Similarly, we can set Σ0 = I without loss of generality, because we can always
                                                                                                    −1
         “emulate” a correlated prior by using deﬁning a new weight matrix, W̃ = WΣ0 2 . Then we
         ﬁnd
                                                −1         −1
            cov [x|θ] = W̃T + E T = (WΣ0 2 )Σ0 (WΣ0 2 )T + Ψ = WWT + Ψ                    (12.5)
           We thus see that FA approximates the covariance matrix of the visible vector using a low-rank
         decomposition:
            C  cov [x] = WWT + Ψ                                                                            (12.6)
         This only uses O(LD) parameters, which allows a ﬂexible compromise between a full covariance
         Gaussian, with O(D2 ) parameters, and a diagonal covariance, with O(D) parameters. Note that
         if we did not restrict Ψ to be diagonal, we could trivially set Ψ to a full covariance matrix; then
         we could set W = 0, in which case the latent factors would not be required.

12.1.2   Inference of the latent factors
         Although FA can be thought of as just a way to deﬁne a density on x, it is often used because
         we hope that the latent factors z will reveal something interesting about the data. To do this,
         we need to compute the posterior over the latent factors. We can use Bayes rule for Gaussians
         to give
            p(zi |xi , θ)       =   N (zi |mi , Σi )                                                         (12.7)
                      Σi           (Σ−1
                                      0  + W Ψ W)T     −1   −1
                                                                                                             (12.8)
                     mi            Σi (WT Ψ−1 (xi − μ) + Σ−1
                                                           0 μ0 )                                            (12.9)
         Note that in the FA model, Σi is actually independent of i, so we can denote it by Σ. Computing
         this matrix takes O(L3 + L2 D) time, and computing each mi = E [zi |xi , θ] takes O(L2 + LD)
         time. The mi are sometimes called the latent scores, or latent factors.
         12.1. Factor analysis                                                                                 383


                                                         rotation=none

                                       1

                                      0.8                                   Width
                                                                         Wheelbase
                                                                         Length Weight
                                                                                   Engine
                                      0.6                                            Cylinders

                                      0.4                         GMC Yukon XL 2500 SLT
                                                                Nissan Pathfinder Armada SE
                                                                                          Horsepower




                       Component 2
                                      0.2
                                                            Kia Sorento LX
                                                                        Mercedes−Benz G500
                                       0                                                       Retail
                                                                                               Dealer
                                                          Saturn Ion1                Mercedes−Benz CL600
                                     −0.2

                                     −0.4                   Honda Insight

                                     −0.6          CityMPG
                                                   HighwayMPG
                                                                                                 Porsche 911
                                     −0.8

                                      −1
                                            −1   −0.5        0                 0.5               1
                                                         Component 1


         Figure 12.2 2D projection of 2004 cars data based on factor analysis. The blue text are the names of cars
         corresponding to certain chosen points. Figure generated by faBiplotDemo.



            Let us give a simple example, based (Shalizi 2009). We consider a dataset of D = 11 variables
         and N = 387 cases describing various aspects of cars, such as the engine size, the number of
         cylinders, the miles per gallon (MPG), the price, etc. We ﬁrst ﬁt a L = 2 dimensional model. We
         can plot the mi scores as points in R2 , to visualize the data, as shown in Figure 12.2.
            To get a better understanding of the “meaning” of the latent factors, we can project unit vectors
         corresponding to each of the feature dimensions, e1 = (1, 0, . . . , 0), e2 = (0, 1, 0, . . . , 0), etc.
         into the low dimensional space. These are shown as blue lines in Figure 12.2; this is known as
         a biplot. We see that the horizontal axis represents price, corresponding to the features labeled
         “dealer” and “retail”, with expensive cars on the right. The vertical axis represents fuel efficiency
         (measured in terms of MPG) versus size: heavy vehicles are less efficient and are higher up,
         whereas light vehicles are more efficient and are lower down. We can “verify” this interpretation
         by clicking on some points, and ﬁnding the closest exemplars in the training set, and printing
         their names, as in Figure 12.2. However, in general, interpreting latent variable models is fraught
         with difficulties, as we discuss in Section 12.1.3.

12.1.3   Unidentiﬁability
         Just like with mixture models, FA is also unidentiﬁable. To see this, suppose R is an arbitrary
         orthogonal rotation matrix, satisfying RRT = I. Let us deﬁne W̃ = WR; then the likelihood
384                                                                        Chapter 12. Latent linear models


function of this modiﬁed matrix is the same as for the unmodiﬁed matrix, since
                                     
   cov [x] = W̃E zzT W̃T + E T                                                                           (12.10)
               =    WRR W + Ψ = WW + Ψ
                             T    T                  T
                                                                                                           (12.11)
Geometrically, multiplying W by an orthogonal matrix is like rotating z before generating x;
but since z is drawn from an isotropic Gaussian, this makes no difference to the likelihood.
Consequently, we cannot unique identify W, and therefore cannot uniquely identify the latent
factors, either.
   To ensure a unique solution, we need to remove L(L − 1)/2 degrees of freedom, since that
is the number of orthonormal matrices of size L × L.1 In total, the FA model has D + LD −
L(L − 1)/2 free parameters (excluding the mean), where the ﬁrst term arises from Ψ. Obviously
we require this to be less than or equal to D(D + 1)/2, which is the number of parameters in
an unconstrained (but symmetric) covariance matrix. This gives us an upper bound on L, as
follows:
                            √
    Lmax = D + 0.5(1 − 1 + 8D)                                                        (12.12)
For example, D = 6 implies L ≤ 3. But we usually never choose this upper bound, since it
would result in overﬁtting (see discussion in Section 12.3 on how to choose L).
   Unfortunately, even if we set L < Lmax , we still cannot uniquely identify the parameters,
since the rotational ambiguity still exists. Non-identiﬁability does not affect the predictive per-
formance of the model. However, it does affect the loading matrix, and hence the interpretation
of the latent factors. Since factor analysis is often used to uncover structure in the data, this
problem needs to be addressed. Here are some commonly used solutions:

• Forcing W to be orthonormal Perhaps the cleanest solution to the identiﬁability problem
  is to force W to be orthonormal, and to order the columns by decreasing variance of the
  corresponding latent factors. This is the approach adopted by PCA, which we will discuss in
  Section 12.2. The result is not necessarily more interpretable, but at least it is unique.
• Forcing W to be lower triangular One way to achieve identiﬁability, which is popular
  in the Bayesian community (e.g., (Lopes and West 2004)), is to ensure that the ﬁrst visible
  feature is only generated by the ﬁrst latent factor, the second visible feature is only generated
  by the ﬁrst two latent factors, and so on. For example, if L = 3 and D = 4, the correspond
  factor loading matrix is given by
             ⎛                  ⎞
               w11    0       0
             ⎜w21 w22         0 ⎟
      W=⎜    ⎝w31 w32 w33 ⎠
                                ⎟                                                            (12.13)
               w41 w42 w43
   We also require that wjj > 0 for j = 1 : L. The total number of parameters in this
   constrained matrix is D + DL − L(L − 1)/2, which is equal to the number of uniquely
   identiﬁable parameters. The disadvantage of this method is that the ﬁrst L visible variables,

1. To see this, note that there are L − 1 free parameters in R in the ﬁrst column (since the column vector must be
normalized to unit length), there are L − 2 free parameters in the second column (which must be orthogonal to the
ﬁrst), and so on.
         12.1. Factor analysis                                                                        385



                                             π


                                             qi          zi
                                                                                 μk
                                 Ψ                                               Wk
                                                        xi       N                K

                                     Figure 12.3 Mixture of factor analysers as a DGM.



           known as the founder variables, affect the interpretation of the latent factors, and so must
           be chosen carefully.
         • Sparsity promoting priors on the weights Instead of pre-specifying which entries in W
           are zero, we can encourage the entries to be zero, using 1 regularization (Zou et al. 2006),
           ARD (Bishop 1999; Archambeau and Bach 2008), or spike-and-slab priors (Rattray et al. 2009).
           This is called sparse factor analysis. This does not necessarily ensure a unique MAP estimate,
           but it does encourage interpretable solutions. See Section 13.8.
         • Choosing an informative rotation matrix There are a variety of heuristic methods that try
           to ﬁnd rotation matrices R which can be used to modify W (and hence the latent factors) so
           as to try to increase the interpretability, typically by encouraging them to be (approximately)
           sparse. One popular method is known as varimax (Kaiser 1958).
         • Use of non-Gaussian priors for the latent factors In Section 12.6, we will dicuss how re-
           placing p(zi ) with a non-Gaussian distribution can enable us to sometimes uniquely identify
           W as well as the latent factors. This technique is known as ICA.

12.1.4   Mixtures of factor analysers
         The FA model assumes that the data lives on a low dimensional linear manifold. In reality, most
         data is better modeled by some form of low dimensional curved manifold. We can approximate
         a curved manifold by a piecewise linear manifold. This suggests the following model: let the
         k’th linear subspace of dimensionality Lk be represented by Wk , for k = 1 : K. Suppose we
         have a latent indicator qi ∈ {1, . . . , K} specifying which subspace we should use to generate
         the data. We then sample zi from a Gaussian prior and pass it through the Wk matrix (where
         k = qi ), and add noise. More precisely, the model is as follows:
            p(xi |zi , qi = k, θ)    =   N (xi |μk + Wk zi , Ψ)                                     (12.14)
                          p(zi |θ)   =   N (zi |0, I)                                               (12.15)
                         p(qi |θ)    =   Cat(qi |π)                                                 (12.16)
         386                                                                                          Chapter 12. Latent linear models


                    1.5                                                        1.5


                     1                                                          1


                    0.5                                                        0.5


                     0                                                          0


                   −0.5                                                       −0.5


                    −1                                                         −1


                   −1.5                                                       −1.5



                          −2   −1.5   −1   −0.5     0     0.5   1   1.5   2          −2   −1.5   −1   −0.5     0   0.5   1    1.5   2


                                                  (a)                                                        (b)

         Figure 12.4 Mixture of 1d PPCAs ﬁt to a dataset, for K                                       = 1, 10.               Figure generated by
         mixPpcaDemoNetlab.



         This is called a mixture of factor analysers (MFA) (Hinton et al. 1997). The CI assumptions are
         represented in Figure 12.3.
            Another way to think about this model is as a low-rank version of a mixture of Gaussians. In
         particular, this model needs O(KLD) parameters instead of the O(KD2 ) parameters needed
         for a mixture of full covariance Gaussians. This can reduce overﬁtting. In fact, MFA is a good
         generic density model for high-dimensional real-valued data.

12.1.5   EM for factor analysis models
         Using the results from Chapter 4, it is straightforward to derive an EM algorithm to ﬁt an FA
         model. With just a little more work, we can ﬁt a mixture of FAs. Below we state the results
         without proof. The derivation can be found in (Ghahramani and Hinton 1996a); however, deriving
         these equations yourself is a useful exercise if you want to become proﬁcient at the math.
            To obtain the results for a single factor analyser, just set ric = 1 and c = 1 in the equations
         below. In Section 12.2.5 we will see a further simpliﬁcation of these equations that arises when
         ﬁtting a PPCA model, where the results will turn out to have a particularly simple and elegant
         intepretation.
            In the E step, we compute the posterior responsibility of cluster c for data point i using

            ric  p(qi = c|xi , θ) ∝ πc N (xi |μc , Wc WcT + Ψ)                                                                           (12.17)

         The conditional posterior for zi is given by
            p(zi |xi , qi = c, θ)          =            N (zi |mic , Σic )                                                                (12.18)
                             Σic                       (IL + WcT Ψ−1
                                                                    c Wc )
                                                                           −1
                                                                                                                                          (12.19)
                               mic                     Σic (WcT Ψ−1
                                                                  c (xi − μc ))                                                           (12.20)

           In the M step, it is easiest to estimate μc and Wc at the same time, by deﬁning W̃c =
         12.2. Principal components analysis (PCA)                                                    387


         (Wc , μc ), z̃ = (z, 1), Also, deﬁne
            bic        E [z̃|xi , qi = c] = [mic ; 1]                                              (12.21)
                                                  T
                           T                      E zz |xi , qi = c      E [z|xi , qi = c]
            Cic        E z̃z̃ |xi , qi = c =                         T                             (12.22)
                                                    E [z|xi , qi = c]            1
         Then the M step is as follows:
                                                −1
             ˆ                          
            W̃c =           ric xi bic
                                    T
                                           ric Cic                                                  (12.23)
                           i                 i
                               -                        .
                        1                   ˆ
                                                    
              Ψ̂ =        diag      ric xi − W̃c bic xi
                                                      T
                                                                                                    (12.24)
                        N        ic

                        1 
                           N
              π̂c   =         ric                                                                   (12.25)
                        N i=1

           Note that these updates are for “vanilla” EM. A much faster version of this algorithm, based
         on ECM, is described in (Zhao and Yu 2008).

12.1.6   Fitting FA models with missing data
         In many applications, such as collaborative ﬁltering, we have missing data. One virtue of the
         EM approach to ﬁtting an FA/PPCA model is that it is easy to extend to this case. However,
         overﬁtting can be a problem if there is a lot of missing data. Consequently it is important to
         perform MAP estimation or to use Bayesian inference. See e.g., (Ilin and Raiko 2010) for details.

 12.2    Principal components analysis (PCA)
         Consider the FA model where we constrain Ψ = σ 2 I, and W to be orthonormal. It can
         be shown (Tipping and Bishop 1999) that, as σ 2 → 0, this model reduces to classical (non-
         probabilistic) principal components analysis ( PCA), also known as the Karhunen Loeve
         transform. The version where σ 2 > 0 is known as probabilistic PCA (PPCA) (Tipping and
         Bishop 1999), or sensible PCA (Roweis 1997). (An equivalent result was derived independently,
         from a different perspective, in (Moghaddam and Pentland 1995).)
            To make sense of this result, we ﬁrst have to learn about classical PCA. We then connect PCA
         to the SVD. And ﬁnally we return to discuss PPCA.

12.2.1   Classical PCA: statement of the theorem
         The synthesis view of classical PCA is summarized in the forllowing theorem.
         Theorem 12.2.1. Suppose we want to ﬁnd an orthogonal set of L linear basis vectors wj ∈ RD ,
         and the corresponding scores zi ∈ RL , such that we minimize the average reconstruction error

                          1 
                             N
            J(W, Z) =           ||xi − x̂i ||2                                                     (12.26)
                          N i=1
388                                                                      Chapter 12. Latent linear models


                                                              4
                 4
                                                              3
                 3
                                                              2
                 2
                                                              1
                 1
                                                              0

                 0                                           −1

                −1                                           −2

                −2                                           −3

                                                             −4
                −3
                                                             −5
                 −5              0        5                   −4   −3   −2   −1         0   1   2   3




                               (a)                                                (b)

Figure 12.5 An illustration of PCA and PPCA where D = 2 and L = 1. Circles are the original data
points, crosses are the reconstructions. The red star is the data mean. (a) PCA. The points are orthogonally
projected onto the line. Figure generated by pcaDemo2d. (b) PPCA. The projection is no longer orthogonal:
the reconstructions are shrunk towards the data mean (red star). Based on Figure 7.6 of (Nabney 2001).
Figure generated by ppcaDemo2d.


where x̂i = Wzi , subject to the constraint that W is orthonormal. Equivalently, we can write this
objective as follows:
   J(W, Z) = ||X − WZT ||2F                                                                             (12.27)
where Z is an N × L matrix with the zi in its rows, and ||A||F is the Frobenius norm of matrix
A, deﬁned by
             /
             0             2
             0m   n
   ||A||F = 1        a2ij = tr(AT A) = ||A(:)||2                                        (12.28)
                     i=1 j=1


   The optimal solution is obtained by setting Ŵ = VL , where VL contains the L eigenvectors
with largest eigenvalues of the empirical covariance matrix, Σ̂ = N1 i=1 xi xTi . (We assume the
                                                                         N

xi have zero mean, for notational simplicity.) Furthermore, the optimal low-dimensional encoding
of the data is given by ẑi = WT xi , which is an orthogonal projection of the data onto the column
space spanned by the eigenvectors.
   An example of this is shown in Figure 12.5(a) for D = 2 and L = 1. The diagonal line is the
vector w1 ; this is called the ﬁrst principal component or principal direction. The data points
xi ∈ R2 are orthogonally projected onto this line to get zi ∈ R. This is the best 1-dimensional
approximation to the data. (We will discuss Figure 12.5(b) later.)
   In general, it is hard to visualize higher dimensional data, but if the data happens to be a
set of images, it is easy to do so. Figure 12.6 shows the ﬁrst three principal vectors, reshaped
as images, as well as the reconstruction of a speciﬁc image using a varying number of basis
vectors. (We discuss how to choose L in Section 11.5.)
   Below we will show that the principal directions are the ones along which the data shows
maximal variance. This means that PCA can be “misled” by directions in which the variance
is high merely because of the measurement scale. Figure 12.7(a) shows an example, where the
vertical axis (weight) uses a large range than the horizontal axis (height), resulting in a line that
looks somewhat “unnatural”. It is therefore standard practice to standardize the data ﬁrst, or
         12.2. Principal components analysis (PCA)                                                                                                                     389

                                           mean                          principal basis 1     reconstructed with 2 bases            reconstructed with 10 bases




                                    principal basis 2                    principal basis 3    reconstructed with 100 bases          reconstructed with 506 bases




                                                              (a)                                                            (b)

         Figure 12.6 (a) The mean and the ﬁrst three PC basis vectors (eigendigits) based on 25 images of the digit
         3 (from the MNIST dataset). (b) Reconstruction of an image based on 2, 10, 100 and all the basis vectors.
         Figure generated by pcaImageDemo.

                             300                                                                            5

                                                                                                            4
                             250                                                                            3

                                                                                                            2
                             200
                                                                                                            1
                    weight




                                                                                                  weight
                                                                                                            0
                             150
                                                                                                           −1

                             100                                                                           −2

                                                                                                           −3

                              50                                                                           −4
                               55     60          65     70         75       80          85                 −4   −3   −2     −1      0      1       2       3      4
                                                        height                                                                     height



                                                        (a)                                                                        (b)

         Figure 12.7 Effect of standardization on PCA applied to the height/ weight dataset. Left: PCA of raw data.
         Right: PCA of standardized data. Figure generated by pcaDemoHeightWeight.



         equivalently, to work with correlation matrices instead of covariance matrices. The beneﬁts of
         this are apparent from Figure 12.7(b).

12.2.2   Proof *
         Proof. We use wj ∈ RD to denote the j’th principal direction, xi ∈ RD to denote the i’th
         high-dimensional observation, zi ∈ RL to denote the i’th low-dimensional representation, and
         z̃j ∈ RN to denote the [z1j , . . . , zN j ], which is the j’th component of all the low-dimensional
         vectors.
            Let us start by estimating the best 1d solution, w1 ∈ RD , and the corresponding projected
         points z̃1 ∈ RN . We will ﬁnd the remaining bases w2 , w3 , etc. later. The reconstruction error
390                                                                    Chapter 12. Latent linear models


is given by

                          1                        1 
                             N                         N
   J(w1 , z1 )    =             ||xi − zi1 w1 ||2 =       (xi − zi1 w1 )T (xi − zi1 w1 )         (12.29)
                          N i=1                     N i=1

                          1  T
                             N
                                                      2
                  =            [x xi − 2zi1 w1T xi + zi1 w1T w1 ]                                (12.30)
                          N i=1 i

                          1  T
                             N
                                                      2
                  =            [x xi − 2zi1 w1T xi + zi1 ]                                        (12.31)
                          N i=1 i

since w1T w1 = 1 (by the orthonormality assumption). Taking derivatives wrt zi1 and equating
to zero gives
    ∂                1
        J(w1 , z1 ) = [−2w1T xi + 2zi1 ] = 0 ⇒ zi1 = w1T xi                                       (12.32)
   ∂zi1              N
So the optimal reconstruction weights are obtained by orthogonally projecting the data onto the
ﬁrst principal direction, w1 (see Figure 12.5(a)). Plugging back in gives

                  1  T                        1  2
                     N                            N
                                2
   J(w1 )     =        [x xi − zi1 ] = const −      z                                             (12.33)
                  N i=1 i                      N i=1 i1

Now the variance of the projected coordinates is given by
                                      1  2
                                          N
   var [z̃1 ] = E z̃21 − (E [z̃1 ])2 =      z −0                                                  (12.34)
                                       N i=1 i1
since
                               T
   E [zi1 ] = E xTi w1 = E [xi ] w1 = 0                                                           (12.35)
because the data has been centered. From this, we see that minimizing the reconstruction error
is equivalent to maximizing the variance of the projected data, i.e.,
   arg min J(w1 ) = arg max var [z̃1 ]                                                           (12.36)
        w1                        w1

This is why it is often said that PCA ﬁnds the directions of maximal variance. This is called the
analysis view of PCA.
  The variance of the projected data can be written as

   1  2       1  T
      N           N
         zi1 =      w xi xTi w1 = w1T Σ̂w1                                                        (12.37)
   N i=1       N i=1 1

where Σ̂ = N1 i=1
                      N
                             i   xi xTi is the empirical covariance matrix (or correlation matrix if the
data is standardized).
12.2. Principal components analysis (PCA)                                                    391


   We can trivially maximize the variance of the projection (and hence minimize the recon-
struction error) by letting ||w1 || → ∞, so we impose the constraint ||w1 || = 1 and instead
maximize
   ˜ 1 ) = wT Σ̂w1 + λ1 (wT w1 − 1)
   J(w                                                                                    (12.38)
            1             1

where λ1 is the Lagrange multiplier. Taking derivatives and equating to zero we have
    ∂ ˜
       J(w1 )      =       2Σ̂w1 − 2λ1 w1 = 0                                             (12.39)
   ∂w1
          Σ̂w1     =       λ1 w 1                                                         (12.40)
Hence the direction that maximizes the variance is an eigenvector of the covariance matrix. Left
multiplying by w1 (and using w1T w1 = 1) we ﬁnd that the variance of the projected data is
   w1T Σ̂w1 = λ1                                                                          (12.41)
Since we want to maximize the variance, we pick the eigenvector which corresponds to the
largest eigenvalue.
   Now let us ﬁnd another direction w2 to further minimize the reconstruction error, subject to
w1T w2 = 0 and w2T w2 = 1. The error is

                             1 
                                N
   J(w1 , z1 , w2 , z2 ) =         ||xi − zi1 w1 − zi2 w2 ||2                             (12.42)
                             N i=1

Optimizing wrt w1 and z1 gives the same solution as before. Exercise 12.4 asks you to show
     ∂J
that ∂z 2
          = 0 yields zi2 = w2T xi . In other words, the second principal encoding is gotten by
projecting onto the second principal direction. Substituting in yields

                  1 T
                       N
   J(w2 )    =         [x xi − w1T xi xTi w1 − w2T xi xTi w2 ] = const − w2T Σ̂w2         (12.43)
                  n i=1 i

Dropping the constant term and adding the constraints yields
   ˜ 2 ) = −wT Σ̂w2 + λ2 (wT w2 − 1) + λ12 (wT w1 − 0)
   J(w                                                                                    (12.44)
             2             2                 2

Exercise 12.4 asks you to show that the solution is given by the eigenvector with the second
largest eigenvalue:
   Σ̂w2 = λ2 w2                                                                           (12.45)
The proof continues in this way. (Formally one can use induction.)
         392                                                            Chapter 12. Latent linear models


12.2.3   Singular value decomposition (SVD)
         We have deﬁned the solution to PCA in terms of eigenvectors of the covariance matrix. However,
         there is another way to obtain the solution, based on the singular value decomposition, or
         SVD. This basically generalizes the notion of eigenvectors from square matrices to any kind of
         matrix.
           In particular, any (real) N × D matrix X can be decomposed as follows
                X = 3456
               3456      S 3456
                     U 3456 VT                                                                     (12.46)
            N ×D       N ×N N ×D D×D

         where U is an N × N matrix whose columns are orthornormal (so UT U = IN ), V is D × D
         matrix whose rows and columns are orthonormal (so VT V = VVT = ID ), and S is a N × D
         matrix containing the r = min(N, D) singular values σi ≥ 0 on the main diagonal, with 0s
         ﬁlling the rest of the matrix. The columns of U are the left singular vectors, and the columns
         of V are the right singular vectors. See Figure 12.8(a) for an example.
            Since there are at most D singular values (assuming N > D), the last N − D columns of U
         are irrelevant, since they will be multiplied by 0. The economy sized SVD, or thin SVD, avoids
         computing these unnecessary elements. Let us denote this decomposition by ÛŜV̂. If N > D,
         we have
                X = 3456
               3456  Û 3456 V̂T
                         Ŝ 3456                                                                   (12.47)
            N ×D       N ×D D×D D×D

         as in Figure 12.8(a). If N < D, we have
                     Û 3456
                X = 3456
               3456          V̂T
                         Ŝ 3456                                                                   (12.48)
            N ×D       N ×N N ×N N ×D

         Computing the economy-sized SVD takes O(N D min(N, D)) time (Golub and van Loan 1996,
         p254).
            The connection between eigenvectors and singular vectors is the following. For an arbitrary
         real matrix X, if X = USVT , we have
            XT X       =   VST UT USVT = V(ST S)VT = VDVT                                          (12.49)
         where D = S2 is a diagonal matrix containing the squares singular values. Hence
            (XT X)V        =   VD                                                                  (12.50)
         so the eigenvectors of XT X are equal to V, the right singular vectors of X, and the eigenvalues
         of XT X are equal to D, the squared singular values. Similarly
                 XXT       =   USVT VST UT = U(SST )UT                                             (12.51)
            (XX )U T
                           =   U(SS ) = UD
                                    T
                                                                                                   (12.52)
         so the eigenvectors of XXT are equal to U, the left singular vectors of X. Also, the eigenvalues
         of XXT are equal to the squared singular values. We can summarize all this as follows:
            U = evec(XXT ), V = evec(XT X), S2 = eval(XXT ) = eval(XT X)                           (12.53)
12.2. Principal components analysis (PCA)                                                                    393


                         D                D       N −D                       D                    D
                                                                        σ1
                                                                             ..                        D
                                                                                  .
                                                                                      σD
                  N              =
                                                                             0


                        X        =            U                              S                    VT

                                                   (a)
                             D                L               L                             D
                                                         σ1
                                                              ..                                  L
                                                                   .σ
                                                                    L


                       N              




                             X               UL          SL                               V TL

                                                   (b)


Figure 12.8 (a) SVD decomposition of non-square matrices X = USVT . The shaded parts of S, and all
the off-diagonal terms, are zero. The shaded entries in U and S are not computed in the economy-sized
version, since they are not needed. (b) Truncated SVD approximation of rank L.



   Since the eigenvectors are unaffected by linear scaling of a matrix, we see that the right
singular vectors of X are equal to the eigenvectors of the empirical covariance Σ̂. Furthermore,
the eigenvalues of Σ̂ are a scaled version of the squared singular values. This means we can
perform PCA using just a few lines of code (see pcaPmtk).
   However, the connection between PCA and SVD goes deeper. From Equation 12.46, we can
represent a rank r matrix as follows:
            ⎛ ⎞                               ⎛ ⎞
               |                               |               
    X = σ1 ⎝u1 ⎠ − v1T − + · · · + σr ⎝ur ⎠ − vrT −                                        (12.54)
               |                                 |
If the singular values die off quickly as in Figure 12.10, we can produce a rank L approximation
to the matrix as follows:

   X ≈ U:,1:L S1:L,1:L V:,1:L
                        T
                                                                                                           (12.55)

This is called a truncated SVD (see Figure 12.8(b)). The total number of parameters needed to
represent an N × D matrix using a rank L approximation is

   N L + LD + L = L(N + D + 1)                                                                             (12.56)
394                                                                                         Chapter 12. Latent linear models



                       rank 200                                                                      rank 2




                         (a)                                                                          (b)
                        rank 5                                                                       rank 20




                         (c)                                                                          (d)

Figure 12.9 Low rank approximations to an image. Top left: The original image is of size 200 × 320, so
has rank 200. Subsequent images have ranks 2, 5, and 20. Figure generated by svdImageDemo.




                                           10
                                                                                        original
                                                                                        randomized
                                            9




                                            8
                                 log(σi)




                                            7




                                            6




                                            5




                                            4
                                                0   10   20   30   40   50   60   70   80    90      100
                                                                        i



Figure 12.10 First 50 log singular values for the clown image (solid red line), and for a data matrix
obtained by randomly shuffling the pixels (dotted green line). Figure generated by svdImageDemo.
         12.2. Principal components analysis (PCA)                                                    395


         As an example, consider the 200 × 320 pixel image in Figure 12.9(top left). This has 64,000
         numbers in it. We see that a rank 20 approximation, with only (200 + 320 + 1) × 20 = 10, 420
         numbers is a very good approximation.
           One can show that the error in this approximation is given by
            ||X − XL ||F ≈ σL+1                                                                     (12.57)
         Furthermore, one can show that the SVD offers the best rank L approximation to a matrix (best
         in the sense of minimizing the above Frobenius norm).
            Let us connect this back to PCA. Let X = USVT be a truncated SVD of X. We know that
         Ŵ = V, and that Ẑ = XŴ, so
            Ẑ = USVT V = US                                                                       (12.58)
         Furthermore, the optimal reconstruction is given by X̂ = ZŴT , so we ﬁnd
            X̂ = USVT                                                                              (12.59)
         This is precisely the same as a truncated SVD approximation! This is another illustration of the
         fact that PCA is the best low rank approximation to the data.

12.2.4   Probabilistic PCA
         We are now ready to revisit PPCA. One can show the following remarkable result.
         Theorem 12.2.2 ((Tipping and Bishop 1999)). Consider a factor analysis model in which Ψ = σ 2 I
         and W is orthogonal. The observed data log likelihood is given by

                                                         1  T −1
                                                           N
                                              N                           N
            log p(X|W, σ 2 )      =       −     ln |C| −       xi C xi = − ln |C| + tr(C−1 Σ̂)     (12.60)
                                              2          2 i=1            2

         where C = WWT + σ 2 I and S = N1 i=1 xi xTi = (1/N )XT X. (We are assuming centered
                                                         N

         data, for notational simplicity.) The maxima of the log-likelihood are given by
                                  1
            Ŵ = V(Λ − σ 2 I) 2 R                                                                   (12.61)
         where R is an arbitrary L × L orthogonal matrix, V is the D × L matrix whose columns are the
         ﬁrst L eigenvectors of S, and Λ is the corresponding diagonal matrix of eigenvalues. Without loss
         of generality, we can set R = I. Furthermore, the MLE of the noise variance is given by

                      1  
                         D
            σ̂ 2 =         λj                                                                      (12.62)
                     D−L
                             j=L+1

         which is the average variance associated with the discarded dimensions.
           Thus, as σ 2 → 0, we have Ŵ → V, as in classical PCA. What about Ẑ? It is easy to see that
         the posterior over the latent factors is given by
            p(zi |xi , θ̂)   =   N (zi |F̂−1 ŴT xi , σ 2 F̂−1 )                                   (12.63)
                                                 2
                       F̂       Ŵ Ŵ + σ̂ I
                                      T
                                                                                                    (12.64)
         396                                                              Chapter 12. Latent linear models


         (Do not confuse F = WT W + σ 2 I with C = WWT + σ 2 I.) Hence, as σ 2 → 0, we ﬁnd
         Ŵ → V, F̂ → I and ẑi → VT xi . Thus the posterior mean is obtained by an orthogonal
         projection of the data onto the column space of V, as in classical PCA.
           Note, however, that if σ 2 >, the posterior mean is not an orthogonal projection, since it is
         shrunk somewhat towards the prior mean, as illustrated in Figure 12.5(b). This sounds like an
         undesirable property, but it means that the reconstructions will be closer to the overall data
         mean, μ̂ = x.

12.2.5   EM algorithm for PCA
         Although the usual way to ﬁt a PCA model uses eigenvector methods, or the SVD, we can also
         use EM, which will turn out to have some advantages that we discuss below. EM for PCA relies
         on the probabilistic formulation of PCA. However the algorithm continues to work in the zero
         noise limit, σ 2 = 0, as shown by (Roweis 1997).
            Let Z̃ be a L × N matrix storing the posterior means (low-dimensional representations)
         along its columns. Similarly, let X̃ = XT store the original data along its columns. From
         Equation 12.63, when σ 2 = 0, we have
            Z̃ = (WT W)−1 WT X̃                                                                      (12.65)

         This constitutes the E step. Notice that this is just an orthogonal projection of the data.
           From Equation 12.23, the M step is given by
                                                            −1
                                      T
                                                            T
            Ŵ =            xi E [zi ]       E [zi ] E [zi ]                                         (12.66)
                         i                 i

         where we exploited the fact that Σ = cov [zi |xi , θ] = 0I when σ 2 = 0. It is worth comparing
         this expression to the MLE for multi-output linear regression (Equation 7.89), which has the form
         W = ( i yi xTi )( i xi xTi )−1 . Thus we see that the M step is like linear regression where we
         replace the observed inputs by the expected values of the latent variables.
            In summary, here is the entire algorithm:

         • E step Z̃ = (WT W)−1 WT X̃
         • M step W = X̃Z̃T (Z̃Z̃T )−1

            (Tipping and Bishop 1999) showed that the only stable ﬁxed point of the EM algorithm is the
         globally optimal solution. That is, the EM algorithm converges to a solution where W spans
         the same linear subspace as that deﬁned by the ﬁrst L eigenvectors. However, if we want W
         to be orthogonal, and to contain the eigenvectors in descending order of eigenvalue, we have
         to orthogonalize the resulting matrix (which can be done quite cheaply). Alternatively, we can
         modify EM to give the principal basis directly (Ahn and Oh 2003).
            This algorithm has a simple physical analogy in the case D = 2 and L = 1 (Roweis 1997).
         Consider some points in R2 attached by springs to a rigid rod, whose orientation is deﬁned by a
         vector w. Let zi be the location where the i’th spring attaches to the rod. In the E step, we hold
         the rod ﬁxed, and let the attachment points slide around so as to minimize the spring energy
         (which is proportional to the sum of squared residuals). In the M step, we hold the attachment
12.2. Principal components analysis (PCA)                                                                397


                           E step 1                                          M step 1
       2.5                                                2.5

         2                                                 2

       1.5                                                1.5

         1                                                 1

       0.5                                                0.5

         0                                                 0

      −0.5                                               −0.5

       −1                                                 −1

      −1.5                                               −1.5

       −2                                                 −2

      −2.5                                               −2.5
         −3    −2    −1       0       1   2      3          −3    −2    −1       0      1    2      3

                           (a)                                                (b)
                           E step 2                                          M step 2
        2.5                                                3

         2
                                                           2
        1.5

         1
                                                           1
        0.5

         0                                                 0

       −0.5
                                                          −1
        −1

       −1.5
                                                          −2
        −2

       −2.5                                               −3
          −3   −2     −1         0    1    2     3         −3    −2     −1      0       1   2      3

                            (c)                                               (d)

Figure 12.11 Illustration of EM for PCA when D = 2 and L = 1. Green stars are the original data points,
black circles are their reconstructions. The weight vector w is represented by blue line. (a) We start with
a random initial guess of w. The E step is represented by the orthogonal projections. (b) We update the
rod w in the M step, keeping the projections onto the rod (black circles) ﬁxed. (c) Another E step. The
black circles can ’slide’ along the rod, but the rod stays ﬁxed. (d) Another M step. Based on Figure 12.12 of
(Bishop 2006b). Figure generated by pcaEmStepByStep.



points ﬁxed and let the rod rotate so as to minimize the spring energy. See Figure 12.11 for an
illustration.
    Apart from this pleasing intuitive interpretation, EM for PCA has the following advantages
over eigenvector methods:

• EM can be faster. In particular, assuming N, D  L, the dominant cost of EM is the pro-
  jection operation in the E step, so the overall time is O(T LN D), where T is the number of
         398                                                                     Chapter 12. Latent linear models




               (a)               (b)                (c)                (d)                (e)                (f)

         Figure 12.12 Illustration of estimating the effective dimensionalities in a mixture of factor analysers using
         VBEM. The blank columns have been forced to 0 via the ARD mechanism. The data was generated from
         6 clusters with intrinsic dimensionalities of 7, 4, 3, 2, 2, 1, which the method has successfully estimated.
         Source: Figure 4.4 of (Beal 2003). Used with kind permission of Matt Beal.



            iterations. (Roweis 1997) showed experimentally that the number of iterations is usually very
            small (the mean was 3.6), regardless of N or D. (This results depends on the ratio of eigenval-
            ues of the empirical covariance matrix.) This is much faster than the O(min(N D2 , DN 2 ))
            time required by straightforward eigenvector methods, although more sophisticated eigenvec-
            tor methods, such as the Lanczos algorithm, have running times comparable to EM.

         • EM can be implemented in an online fashion, i.e., we can update our estimate of W as the
           data streams in.

         • EM can handle missing data in a simple way (see Section 12.1.6).
         • EM can be extended to handle mixtures of PPCA/ FA models.

         • EM can be modiﬁed to variational EM or to variational Bayes EM to ﬁt more complex models.

 12.3    Choosing the number of latent dimensions
         In Section 11.5, we discussed how to choose the number of components K in a mixture model.
         In this section, we discuss how to choose the number of latent dimensions L in a FA/PCA model.

12.3.1   Model selection for FA/PPCA
         If we use a probabilistic model, we can in principle compute L∗ = argmaxL p(L|D). However,
         there are two problems with this. First, evaluating the marginal likelihood for LVMs is quite
         difficult. In practice, simple approximations, such as BIC or variational lower bounds (see
         Section 21.5), can be used (see also (Minka 2000a)). Alternatively, we can use the cross-validated
         likelihood as a performance measure, although this can be slow, since it requires ﬁtting each
         model F times, where F is the number of CV folds.
            The second issue is the need to search over a potentially large number of models. The usual
         approach is to perform exhaustive search over all candidate values of L. However, sometimes
         we can set the model to its maximal size, and then use a technique called automatic relevancy
         determination (Section 13.7), combined with EM, to automatically prune out irrelevant weights.
         12.3. Choosing the number of latent dimensions                                                          399


                              number of points                   intrinsic dimensionalities
                               per cluster              1        7        4        3        2        2

                                         8                            2                          1
                                         8                   1                         2
                                        16              1                      4                     2
                                        32              1        6        3        3        2        2
                                        64              1        7        4        3        2        2
                                       128              1        7        4        3        2        2

         Figure 12.13 We show the estimated number of clusters, and their estimated dimensionalities, as a
         function of sample size. The VBEM algorithm found two different solutions when N = 8. Note that more
         clusters, with larger effective dimensionalities, are discovered as the sample sizes increases. Source: Table
         4.1 of (Beal 2003). Used with kind permission of Matt Beal.



         This technique will be described in a supervised context in Chapter 13, but can be adapted to
         the (M)FA context as shown in (Bishop 1999; Ghahramani and Beal 2000).
            Figure 12.12 illustrates this approach applied to a mixture of FAs ﬁt to a small synthetic dataset.
         The ﬁgures visualize the weight matrices for each cluster, using Hinton diagrams, where where
         the size of the square is proportional to the value of the entry in the matrix.2 We see that
         many of them are sparse. Figure 12.13 shows that the degree of sparsity depends on the amount
         of training data, in accord with the Bayesian Occam’s razor. In particular, when the sample
         size is small, the method automatically prefers simpler models, but as the sample size gets
         sufficiently large, the method converges on the “correct” solution, which is one with 6 subspaces
         of dimensionality 1, 2, 2, 3, 4 and 7.
            Although the ARD/ EM method is elegant, it still needs to perform search over K. This is
         done using “birth” and “death” moves (Ghahramani and Beal 2000). An alternative approach is to
         perform stochastic sampling in the space of models. Traditional approaches, such as (Lopes and
         West 2004), are based on reversible jump MCMC, and also use birth and death moves. However,
         this can be slow and difficult to implement. More recent approaches use non-parametric priors,
         combined with Gibbs sampling, see e.g., (Paisley and Carin 2009).

12.3.2   Model selection for PCA
         Since PCA is not a probabilistic model, we cannot use any of the methods described above. An
         obvious proxy for the likelihood is the reconstruction error:
                         1 
            E(D, L) =            ||xi − x̂i ||2                                                 (12.67)
                        |D|
                                 i∈D

         In the case of PCA, the reconstruction is given by by x̂i = Wzi + μ, where zi = WT (xi − μ)
         and W and μ are estimated from Dtrain .

         2. Geoff Hinton is an English professor of computer science at the University of Toronto.
400                                                                                                      Chapter 12. Latent linear models

                                   train set reconstruction error                                     test set reconstruction error
                   60                                                                  60



                   50                                                                  50



                   40                                                                  40




            rmse




                                                                                rmse
                   30                                                                  30



                   20                                                                  20



                   10                                                                  10



                    0                                                                   0
                        0   100         200             300         400   500               0   100       200             300         400   500
                                              num PCs                                                           num PCs


                                              (a)                                                               (b)

Figure 12.14 Reconstruction error on MNIST vs number of latent dimensions used by PCA. (a) Training
set. (b) Test set. Figure generated by pcaOverfitDemo.



   Figure 12.14(a) plots E(Dtrain , L) vs L on the MNIST training data in Figure 12.6. We see that
it drops off quite quickly, indicating that we can capture most of the empirical correlation of the
pixels with a small number of factors, as illustrated qualitatively in Figure 12.6.
   Exercise 12.5 asks you to prove that the residual error from only using L terms is given by the
sum of the discarded eigenvalues:

                                     
                                     D
   E(Dtrain , L)            =                       λj                                                                                            (12.68)
                                  j=L+1

Therefore an alternative to plotting the error is to plot the retained eigenvalues, in decreasing
order. This is called a scree plot, because “the plot looks like the side of a mountain, and ’scree’
refers to the debris fallen from a mountain and lying at its base”.3 This will have the same shape
as the residual error plot.
   A related quantity is the fraction of variance explained, deﬁned as
                                    L
                                    j=1 λj
   F (Dtrain , L) =               Lmax
                                                                                                                                                  (12.69)
                                  j  =1 λj
                                            



This captures the same information as the scree plot.
   Of course, if we use L = rank(X), we get zero reconstruction error on the training set.
To avoid overﬁtting, it is natural to plot reconstruction error on the test set. This is shown in
Figure 12.14(b). Here we see that the error continues to go down even as the model becomes
more complex! Thus we do not get the usual U-shaped curve that we typically expect to see.
   What is going on? The problem is that PCA is not a proper generative model of the data.
It is merely a compression technique. If you give it more latent dimensions, it will be able to
approximate the test data more accurately. By contrast, a probabilistic model enjoys a Bayesian
Occam’s razor effect (Section 5.3.1), in that it gets “punished” if it wastes probability mass on
parts of the space where there is little data. This is illustrated in Figure 12.15, which plots the

3. Quotation from http://janda.org/workshop/factoranalysis/SPSSrun/SPSS08.htm.
           12.3. Choosing the number of latent dimensions                                                                                                                       401

                                               6         train set negative loglik                                          6         test set negative loglik
                                          x 10                                                                          x 10
                                    2.2                                                                           2.5

                                    2.1
                                                                                                                  2.4

                                     2
                                                                                                                  2.3
                                    1.9

                                                                                                                  2.2




                        negloglik




                                                                                                      negloglik
                                    1.8

                                    1.7                                                                           2.1

                                    1.6
                                                                                                                   2
                                    1.5

                                                                                                                  1.9
                                    1.4

                                    1.3                                                                           1.8
                                          0        100     200             300       400    500                         0       100     200             300      400   500
                                                                 num PCs                                                                      num PCs


                                                                 (a)                                                                          (b)

           Figure 12.15 Negative log likelihood on MNIST vs number of latent dimensions used by PPCA. (a) Training
           set. (b) Test set. Figure generated by pcaOverfitDemo.


           negative log likelihood, computed using PPCA, vs L. Here, on the test set, we see the usual
           U-shaped curve.
             These results are analogous to those in Section 11.5.2, where we discussed the issue of choosing
           K in the K-means algorithm vs using a GMM.

12.3.2.1   Proﬁle likelihood
           Although there is no U-shape, there is sometimes a “regime change” in the plots, from relatively
           large errors to relatively small. One way to automate the detection of this is described in (Zhu
           and Ghodsi 2006). The idea is this. Let λk be some measure of the error incurred by a model of
           size k, such that λ1 ≥ λ2 ≥ · · · ≥ λLmax . In PCA, these are the eigenvalues, but the method can
           also be applied to K-means. Now consider partitioning these values into two groups, depending
           on whether k < L or k > L, where L is some threshold which we will determine. To measure
           the quality of L, we will use a simple change-point model, where λk ∼ N (μ1 , σ 2 ) if k ≤ L,
           and λk ∼ N (μ2 , σ 2 ) if k > L. (It is important that σ 2 be the same in both models, to prevent
           overﬁtting in the case where one regime has less data than the other.) Within each of the two
           regimes, we assume the λk are iid, which is obviously incorrect, but is adequate for our present
           purposes. We can ﬁt this model for each L = 1 : Lmax by partitioning the data and computing
           the MLEs, using a pooled estimate of the variance:
                                                   k≤L   λk                λk              k>L
              μ1 (L)    =                                      , μ2 (L) =                                                                                                    (12.70)
                                                    L                  N −L
                                                                    2                       2
                                                      (λ
                                                   k≤L k − μ 1 (L))   +   k>L (λk − μ2 (L))
              σ 2 (L)   =                                                                                                                                                    (12.71)
                                                N
           We can then evaluate the proﬁle log likelihood
                        
                        L                                                                         
                                                                                                  K
              (L) =                          log N (λk |μ1 (L), σ 2 (L)) +                           log N (λk |μ2 (L), σ 2 (L))                                            (12.72)
                        k=1                                                                  k=L+1

           Finally, we choose L∗ = arg max (L). This is illustrated in Figure 12.16. On the left, we plot
           the scree plot, which has the same shape as in Figure 12.14(a). On the right, we plot the proﬁle
       402                                                                                                                              Chapter 12. Latent linear models

                                      x 10
                                          5                       scree plot                                           −5450
                                 4


                                3.5                                                                                    −5500


                                 3
                                                                                                                       −5550




                                                                                              profile log likelihood
                                2.5




                   eigenvalue
                                                                                                                       −5600
                                 2


                                1.5
                                                                                                                       −5650

                                 1
                                                                                                                       −5700
                                0.5


                                 0                                                                                     −5750
                                      0           10         20                30   40   50                                    0   10    20             30   40   50
                                                                  num PCs                                                                     num PCs


                                                                  (a)                                                                     (b)

       Figure 12.16 (a) Scree plot for training set, corresponding to Figure 12.14(a). (b) Proﬁle likelihood. Figure
       generated by pcaOverfitDemo.


       likelihood. Rather miraculously, we see a fairly well-determined peak.

12.4   PCA for categorical data
       In this section, we consider extending the factor analysis model to the case where the observed
       data is categorical rather than real-valued. That is, the data has the form yij ∈ {1, . . . , C},
       where j = 1 : R is the number of observed response variables. We assume each yij is generated
       from a latent variable zi ∈ RL , with a Gaussian prior, which is passed through the softmax
       function as follows:
                 p(zi )                       =        N (0, I)                                                                                                        (12.73)
                                                       
                                                       R
          p(yi |zi , θ)                       =              Cat(yir |S(WrT zi + w0r ))                                                                                (12.74)
                                                       r=1

       where Wr ∈ RL×M is the factor loading matrix for response j, and w0r ∈ RM is the offset
       term for response r, and θ = (Wr , w0r )R   r=1 . (We need an explicit offset term, since clamping
       one element of zi to 1 can cause problems when computing the posterior covariance.) As in
       factor analysis, we have deﬁned the prior mean to be m0 = 0 and the prior covariance V0 = I,
       since we can capture non-zero mean by changing w0j and non-identity covariance by changing
       Wr . We will call this categorical PCA. See Chapter 27 for a discussion of related models.
          It is interesting to study what kinds of distributions we can induce on the observed variables
       by varying the parameters. For simplicity, we assume there is a single ternary response variable,
       so yi lives in the 3d probability simplex. Figure 12.17 shows what happens when we vary the
       parameters of the prior, m0 and V0 , which is equivalent to varying the parameters of the
       likelihood, W1 and w01 . We see that this can deﬁne fairly complex distributions over the
       simplex. This induced distribution is known as the logistic normal distribution (Aitchison
       1982).
          We can ﬁt this model to data using a modiﬁed version of EM. The basic idea is to infer
       a Gaussian approximation to the posterior p(zi |yi , θ) in the E step, and then to maximize θ
       in the M step. The details for the multiclass case, can be found in (Khan et al. 2010) (see
12.4. PCA for categorical data                                                                           403




Figure 12.17 Some examples of the logistic normal distribution deﬁned on the 3d simplex. (a) Diagonal
covariance and non-zero mean. (b) Negative correlation between states 1 and 2. (c) Positive correlation
between states 1 and 2. Source: Figure 1 of (Blei and Lafferty 2007). Used with kind permission of David
Blei.


                                                            2


            20                                             1.5


            40
                                                            1

            60
                                                           0.5

            80
                                                            0

           100
                                                          −0.5

           120
                                                           −1
           140
                                                          −1.5
                 2   4   6   8     10   12   14   16        −1.5   −1   −0.5   0         0.5   1   1.5



                                 (a)                                               (b)

Figure 12.18 Left: 150 synthetic 16 dimensional bit vectors. Right: the 2d embedding learned by binary
PCA, using variational EM. We have color coded points by the identity of the true “prototype” that generated
them. Figure generated by binaryFaDemoTipping.



also Section 21.8.1.1). The details for the binary case for the the sigmoid link can be found in
Exercise 21.9, and for the probit link in Exercise 21.10.
   One application of such a model is to visualize high dimensional categorical data. Fig-
ure 12.18(a) shows a simple example where we have 150 6-dimensional bit vectors. It is clear that
each sample is just a noisy copy of one of three binary prototypes.  + We ﬁt, a 2d catFA to this
model, yielding approximate MLEs θ̂. In Figure 12.18(b), we plot E zi |xi , θ̂ . We see that there
are three distinct clusters, as is to be expected.
   In (Khan et al. 2010), we show that this model outperforms ﬁnite mixture models on the task
of imputing missing entries in design matrices consisting of real and categorical data. This is
useful for analysing social science survey data, which often has missing data and variables of
mixed type.
       404                                                                                   Chapter 12. Latent linear models


                                  wy          Wx                                       Wx            Wy


                                        zi                                      z xi          z si




                                  yi          xi N                  Bx                 xi            yi   N

                                       (a)                                             (b)

                                                            Wx          Wy


                                                     z xi        z si        z yi




                                             Bx             xi          yi     N        By

                                                                 (c)

       Figure 12.19 Gaussian latent factor models for paired data. (a) Supervised PCA. (b) Partial least squares.
       (c) Canonical correlation analysis.



12.5   PCA for paired and multi-view data
       It is common to have a pair of related datasets, e.g., gene expression and gene copy number, or
       movie ratings by users and movie reviews. It is natural to want to combine these together into a
       low-dimensional embedding. This is an example of data fusion. In some cases, we might want
       to predict one element of the pair, say xi1 , from the other one, xi2 , via the low-dimensional
       “bottleneck”.
          Below we discuss various latent Gaussian models for these tasks, following the presentation
       of (Virtanen 2010). The models easily generalize from pairs to sets of data, xim , for m = 1 : M .
       We focus on the case where xim ∈ RDm . In this case, the joint distribution is multivariate
       Gaussian, so we can easily ﬁt the models using EM, or Gibbs sampling.
          We can generalize the models to handle discrete and count data by using the exponential
       family as a response distribution instead of the Gaussian, as we explain in Section 27.2.2.
       However, this will require the use of approximate inference in the E step (or an analogous
       modiﬁcation to MCMC).
         12.5. PCA for paired and multi-view data                                                           405


12.5.1   Supervised PCA (latent factor regression)
         Consider the following model, illustrated in Figure 12.19(a):

              p(zi )     =   N (0, IL )                                                                  (12.75)
            p(yi |zi )   =   N (wyT zi + μy , σy2 )                                                      (12.76)
            p(xi |zi )   =   N (Wx zi + μx , σx2 ID )                                                    (12.77)

         In (Yu et al. 2006), this is called supervised PCA. In (West 2003), this is called Bayesian factor
         regression. This model is like PCA, except that the target variable yi is taken into account when
         learning the low dimensional embedding. Since the model is jointly Gaussian, we have
            yi |xi   ∼   N (xTi w, σy2 + wyT Cwy )                                                       (12.78)

         where w = Ψ−1 Wx Cwy , Ψ = σx2 ID , and C−1 = I + WxT Ψ−1 Wx . So although this is a
         joint density model of (yi , xi ), we can infer the implied conditional distribution.
            We now show an interesting connection to Zellner’s g-prior. Suppose p(wy ) = N (0, g1 Σ2 ),
         and let X = RVT be the SVD of X, where VT V = I and RT R = Σ2 = diag(σj2 ) contains
         the squared singular values. Then one can show (West 2003) that
            p(w) = N (0, gV−T Σ−2 V−1 ) = N (0, g(XT X)−1 )                                              (12.79)

         So the dependence of the prior for w on X arises from the fact that w is derived indirectly by
         a joint model of X and y.
            The above discussion focussed on regression. (Guo 2009) generalizes CCA to the exponential
         family, which is more appropriate if xi and/or yi are discrete. Although we can no longer
         compute the conditional p(yi |xi , θ) in closed form, the model has a similar interpretation to
         the regression case, namely that we are predicting the response via a latent “bottleneck”.
            The basic idea of compressing xi to predict yi can be formulated using information theory.
         In particular, we might want to ﬁnd an encoding distribution p(z|x) such that we minimize

            I (X; Z) − βI (X; Y )                                                                        (12.80)
         where β ≥ 0 is some parameter controlling the tradeoff between compression and predictive
         accuracy. This is known as the information bottleneck (Tishby et al. 1999). Often Z is taken to
         be discrete, as in clustering. However, in the Gaussian case, IB is closely related to CCA (Chechik
         et al. 2005).
            We can easily generalize CCA to the case where yi is a vector of responses to be predicted, as
         in multi-label classiﬁcation. (Ma et al. 2008; Williamson and Ghahramani 2008) used this model
         to perform collaborative ﬁltering, where the goal is to predict yij ∈ {1, . . . , 5}, the rating person
         i gives to movie j, where the “side information” xi takes the form of a list of i’s friends. The
         intuition behind this approach is that knowledge of who your friends are, as well as the ratings
         of all other users, should help predict which movies you will like. In general, any setting where
         the tasks are correlated could beneﬁt from CCA. Once we adopt a probabilistic view, various
         extensions are straightforward. For example, we can easily generalize to the semi-supervised
         case, where we do not observe yi for all i (Yu et al. 2006).
           406                                                                 Chapter 12. Latent linear models


12.5.1.1   Discriminative supervised PCA
           One problem with this model is that it puts as much weight on predicting the inputs xi as the
           outputs yi . This can be partially alleviated by using a weighted objective of the following form
           (Rish et al. 2008):
                        
               (θ) =      p(yi |η iy )αy p(xi |η ix )αx                                               (12.81)
                           i

           where the αm control the relative importance of the data sources, and η im = Wm zi . For
           Gaussian data, we can see that αm just controls the noise variance:
                               1                         1
             (θ) ∝      exp(− αx ||xTi − η ix ||2 ) exp(− αy ||yiT − η iy ||2 )             (12.82)
                      i
                                2                         2

           This interpretation holds more generally for the exponential family. Note, however, that it is hard
           to estimate the αm parameters, because changing them changes the normalization constant of
           the likelihood. We give an alternative approach to weighting y more heavily below.

12.5.2     Partial least squares
           The technique of partial least squares (PLS) (Gustafsson 2001; Sun et al. 2009) is an asym-
           metric or more “discriminative” form of supervised PCA. The key idea is to allow some of the
           (co)variance in the input features to be explained by its own subspace, zxi , and to let the rest of
           the subspace, zsi , be shared between input and output. The model has the form
                 p(zi )        =   N (zsi |0, ILs )N (zxi |0, ILx )                                      (12.83)
                                                        2
              p(yi |zi )       =   N (Wy zsi   + μ y , σ I Dy )                                          (12.84)
                                                                      2
              p(xi |zi )       =   N (Wx zsi   +   Bx zxi   + μ x , σ I Dx )                             (12.85)

           See Figure 12.19(b). The corresponding induced distribution on the visible variables has the form
                          
              p(vi |θ) = N (vi |Wzi + μ, σ 2 I)N (zi |0, I)dzi = N (vi |μ, WWT + σ 2 I)               (12.86)

           where vi = (xi ; yi ), μ = (μy ; μx ) and
                             
                               Wy 0
                  W =                                                                                    (12.87)
                               W x Bx
                             
                               Wy WyT           Wx WxT
             WWT =                                                                                       (12.88)
                               Wx Wx Wx WxT + Bx BTx
                                      T


           We should choose L large enough so that the shared subspace does not capture covariate-
           speciﬁc variation.
             This model can be easily generalized to discrete data using the exponential family (Virtanen
           2010).
         12.6. Independent Component Analysis (ICA)                                                    407


12.5.3   Canonical correlation analysis
         Canonical correlation analysis or CCA is like a symmetric unsupervised version of PLS: it
         allows each view to have its own “private” subspace, but there is also a shared subspace. If we
         have two observed variables, xi and yi , then we have three latent variables, zsi ∈ RL0 which is
         shared, zxi ∈ RLx and zyi ∈ RLy which are private. We can write the model as follows (Bach
         and Jordan 2005):
                 p(zi )   =   N (zsi |0, ILs )N (zxi |0, ILx )N (zyi |0, ILy )                      (12.89)
            p(xi |zi )    =   N (xi |Bx zxi   + Wx zsi + μx , σ 2 IDx )                             (12.90)
            p(yi |zi )    =   N (yi |By zyi   + Wy zsi + μy , σ 2 IDy )                              (12.91)
         See Figure 12.19(c). The corresponding observed joint distribution has the form
                        
            p(vi |θ) = N (vi |Wzi + μ, σ 2 I)N (zi |0, I)dzi = N (vi |μ, WWT + σ 2 ID )             (12.92)

         where
                              
                                W x Bx 0
                  W       =                                                                         (12.93)
                                W y 0 By
                              
                               Wx WxT + Bx BTx             Wx WyT
            WWT           =                                                                         (12.94)
                                   Wy WyT               Wy WyT + By BTy
         One can compute the MLE for this model using EM. (Bach and Jordan 2005) show that the
         resulting MLE is equivalent (up to rotation and scaling) to the classical, non-probabilistic view.
         However, the advantages of the probabilistic view are many: we can trivially generalize to M > 2
         observed variables; we can create mixtures of CCA (Viinikanoja et al. 2010); we can create sparse
         versions of CCA using ARD (Archambeau and Bach 2008); we can generalize to the exponential
         family (Klami et al. 2010); we can perform Bayesian inference of the parameters (Wang 2007;
         Klami and Kaski 2008); we can handle non-parametric sparsity-promoting priors for W and B
         (Rai and Daume 2009); and so on.

 12.6    Independent Component Analysis (ICA)
         Consider the following situation. You are in a crowded room and many people are speaking.
         Your ears essentially act as two microphones, which are listening to a linear combination of the
         different speech signals in the room. Your goal is to deconvolve the mixed signals into their
         constituent parts. This is known as the cocktail party problem, and is an example of blind
         signal separation (BSS), or blind source separation, where “blind” means we know “nothing”
         about the source of the signals. Besides the obvious applications to acoustic signal processing,
         this problem also arises when analysing EEG and MEG signals, ﬁnancial data, and any other
         dataset (not necessarily temporal) where latent sources or factors get mixed together in a linear
         way.
            We can formalize the problem as follows. Let xt ∈ RD be the observed signal at the sensors
         at “time” t, and zt ∈ RL be the vector of source signals. We assume that
            xt = Wzt + t                                                                           (12.95)
408                                                                      Chapter 12. Latent linear models


                               truth                                       observed signals
  2                                                       10

  0                                                        0

 −2                                                      −10
      0     100          200           300   400   500         0   100       200         300   400     500
  5                                                        5

  0                                                        0

 −5                                                      −5
      0     100          200           300   400   500         0   100       200         300   400     500
  2                                                       10

  0                                                        0

 −2                                                      −10
      0     100          200           300   400   500         0   100       200         300   400     500
 10                                                        5

  0                                                        0

−10                                                      −5
      0     100          200           300   400   500         0   100       200         300   400     500

                                (a)                                                (b)

                        PCA estimate                                        ICA estimate
 10                                                        5

  0                                                        0

−10                                                      −5
      0     100          200           300   400   500         0   100       200         300   400     500
  5                                                       10

  0                                                        0

 −5                                                      −10
      0     100          200           300   400   500         0   100       200         300   400     500
  2                                                        2

  0                                                        0

 −2                                                      −2
      0     100          200           300   400   500         0   100       200         300   400     500
  1                                                        2

  0                                                        0

 −1                                                      −2
      0     100          200           300   400   500         0   100       200         300   400     500

                                (c)                                                (d)

Figure 12.20 Illustration of ICA applied to 500 iid samples of a 4d source signal. (a) Latent signals. (b)
Observations. (c) PCA estimate. (d) ICA estimate. Figure generated by icaDemo, written by Aapo Hyvarinen.


where W is an D × L matrix, and t ∼ N (0, Ψ). In this section, we treat each time point
as an independent observation, i.e., we do not model temporal correlation (so we could replace
the t index with i, but we stick with t to be consistent with much of the ICA literature). The
goal is to infer the source signals, p(zt |xt , θ), as illustrated in Figure 12.20. In this context, W
is called the mixing matrix. If L = D (number of sources = number of sensors), it will be a
square matrix. Often we will assume the noise level, |Ψ|, is zero, for simplicity.
   So far, the model is identical to factor analysis (or PCA if there is no noise, except we don’t in
general require orthogonality of W). However, we will use a different prior for p(zt ). In PCA,
we assume each source is independent, and has a Gaussian distribution
                  
                  L
      p(zt ) =         N (ztj |0, 1)                                                                 (12.96)
                 j=1

We will now relax this Gaussian assumption and let the source distributions be any non-Gaussian
12.6. Independent Component Analysis (ICA)                                                                                      409


                            uniform data                                         uniform data after linear mixing
   3                                                             3



   2                                                             2



   1                                                             1



   0                                                             0



  −1                                                            −1



  −2                                                            −2



  −3                                                            −3
       −3      −2      −1        0         1        2       3        −3    −2        −1         0         1         2     3

                               (a)                                                           (b)
            PCA applied to mixed data from uniform source                 ICA applied to mixed data from uniform source
   3                                                             3



   2                                                             2



   1                                                             1



   0                                                             0



  −1                                                            −1



  −2                                                            −2



  −3                                                            −3
       −3      −2      −1        0         1        2       3        −3    −2        −1         0         1         2     3

                               (c)                                                           (d)

Figure 12.21 Illustration of ICA and PCA applied to 100 iid samples of a 2d source signal with a uniform
distribution. (a) Latent signals. (b) Observations. (c) PCA estimate. (d) ICA estimate. Figure generated by
icaDemoUniform, written by Aapo Hyvarinen.


distribution
               
               L
   p(zt ) =          pj (ztj )                                                                                                (12.97)
               j=1

Without loss of generality, we can constrain the variance of the source distributions to be 1,
because any other variance can be modelled by scaling the rows of W appropriately. The
resulting model is known as independent component analysis or ICA.
   The reason the Gaussian distribution is disallowed as a source prior in ICA is that it does not
permit unique recovery of the sources, as illustrated in Figure 12.20(c). This is because the PCA
likelihood is invariant to any orthogonal transformation of the sources zt and mixing matrix W.
PCA can recover the best linear subspace in which the signals lie, but cannot uniquely recover
the signals themselves.
         410                                                                          Chapter 12. Latent linear models


           To illustrate this, suppose we have two independent sources with uniform distributions, as
         shown in Figure 12.21(a). Now suppose we have the following mixing matrix
                   
                     2 3
            W=                                                                                 (12.98)
                     2 1
         Then we observe the data shown in Figure 12.21(b) (assuming no noise). If we apply PCA followed
         by scaling to this, we get the result in Figure 12.21(c). This corresponds to a whitening of the
         data. To uniquely recover the sources, we need to perform an additional rotation. The trouble
         is, there is no information in the symmetric Gaussian posterior to tell us which angle to rotate
         by. In a sense, PCA solves “half” of the problem, since it identiﬁes the linear subspace; all
         that ICA has to do is then to identify the appropriate rotation. (Hence we see that ICA is not
         that different from methods such as varimax, which seek good rotations of the latent factors to
         enhance interpretability.)
            Figure 12.21(d) shows that ICA can recover the source, up to a permutation of the indices and
         possible sign change. ICA requires that W is square and hence invertible. In the non-square
         case (e.g., where we have more sources than sensors), we cannot uniquely recover the true signal,
         but we can compute the posterior p(zt |xt , Ŵ), which represents our beliefs about the source.
         In both cases, we need to estimate W as well as the source distributions pj . We discuss how
         to do this below.

12.6.1   Maximum likelihood estimation
         In this section, we discuss ways to estimate square mixing matrices W for the noise-free ICA
         model. As usual, we will assume that the observations have been centered; hence we can also
         assume z is zero-mean. In addition, we assume the observations have been whitened, which
         can be done with PCA.                              
            If the data is centered and whitened, we have E xxT = I. But in the noise free case, we
         also have
                                       
             cov [x] = E xxT = WE zzT WT = WWT                                                  (12.99)

         Hence we see that W must be orthogonal. This reduces the number of parameters we have to
         estimate from D2 to D(D − 1)/2. It will also simplify the math and the algorithms.
            Let V = W−1 ; these are often called the recognition weights, as opposed to W, which are
         the generative weights.4
            Since x = Wz, we have, from Equation 2.89,

               px (Wzt ) = pz (zt )| det(W−1 )| = pz (Vxt )| det(V)|                                                 (12.100)

         Hence we can write the log-likelihood, assuming T iid samples, as follows:

                                              1 
                                                 L T
               1
                 log p(D|V) = log | det(V)| +           log pj (vjT xt )                                              (12.101)
               T                              T j=1 t=1

         4. In the literature, it is common to denote the generative weights by A and the recognition weights by W, but we are
         trying to be consistent with the notation used earlier in this chapter.
         12.6. Independent Component Analysis (ICA)                                                       411


         where vj is the j’th row of V. Since we are constraining V to be orthogonal, the ﬁrst term is a
         constant, so we can drop it. We can also replace the average over the data with an expectation
         operator to get the following objective
                         
                         L
            NLL(V) =           E [Gj (zj )]                                                          (12.102)
                         j=1

         where zj = vjT x and Gj (z)  − log pj (z). We want to minimize this subject to the constraint
         that the rows of V are orthogonal. We also want them to be unit norm, since this ensures
         that the variance of the factors is unity (since, with whitened data, E vjT x = ||vj ||2 ), which is
         necessary to ﬁx the scale of the weights. In otherwords, V should be an orthonormal matrix.
            It is straightforward to derive a gradient descent algorithm to ﬁt this model; however, it
         is rather slow. One can also derive a faster algorithm that follows the natural gradient; see
         e.g., (MacKay 2003, ch 34) for details. A popular alternative is to use an approximate Newton
         method, which we discuss in Section 12.6.2. Another approach is to use EM, which we discuss
         in Section 12.6.3.

12.6.2   The FastICA algorithm
         We now describe the fast ICA algorithm, based on (Hyvarinen and Oja 2000), which we will
         show is an approximate Newton method for ﬁtting ICA models.
           For simplicity of presentation, we initially assume there is only one latent factor. In addition,
         we initially assume all source distributions are known and are the same, so we can just write
         G(z) = − log p(z). Let g(z) = dz     d
                                                G(z). The constrained objective, and its gradient and
         Hessian, are given by
                             
              f (v) = E G(vT x) + λ(1 − vT v)                                                        (12.103)
                             
            ∇f (v) = E xg(v x) − βvT
                                                                                                     (12.104)
                              T  T
             H(v) = E xx g (v x) − βI                                                                (12.105)
         where β = 2λ is a Lagrange multiplier. Let us make the approximation
                                                       
           E xxT g  (vT x) ≈ E xxT E g  (vT x) = E g  (vT x)                                      (12.106)
         This makes the Hessian very easy to invert, giving rise to the following Newton update:
                        
              ∗       E xg(vT x) − βv
            v v−                                                                                (12.107)
                        E [g  (vT x)] − β
         One can rewrite this in the following way
                                    
           v∗  E xg(vT x) − E g  (vT x) v                                                          (12.108)
         (In practice, the expectations can be replaced by Monte Carlo estimates from the training set,
         which gives an efficient online learning algorithm.) After performing this update, one should
         project back onto the constraint surface using
                       v∗
            vnew                                                                                    (12.109)
                     ||v∗ ||
412                                                                             Chapter 12. Latent linear models

 0.5                                                                                        Gaussian

0.45
                                                                  3
 0.4
                                                                  2
0.35

 0.3                                                              1

0.25
                                                                  0

 0.2
                                                              −1
0.15
                                                              −2
 0.1

0.05                                                          −3

  0
  −4         −3   −2   −1         0   1       2   3    4              −4   −3    −2   −1         0     1       2   3       4

                             (a)                                                             (b)
                            Laplace                                                        Uniform
 10

  8                                                         1.5

  6
                                                             1

  4
                                                            0.5
  2
                                                             0
  0
                                                           −0.5
 −2

                                                            −1
 −4

 −6                                                        −1.5


 −8
       −10        −5         0            5       10                  −2        −1           0             1           2

                            (c)                                                            (d)

Figure 12.22 Illustration of Gaussian, sub-Gaussian (uniform) and super-Gaussian (Laplace) distributions
in 1d and 2d. Figure generated by subSuperGaussPlot, written by Kevin Swersky.



One iterates this algorithm until convergence. (Due to the sign ambiguity of v, the values of v
may not converge, but the direction deﬁned by this vector should converge, so one can assess
convergence by monitoring |vT vnew |, which should approach 1.)
   Since the objective is not convex, there are multiple local optima. We can use this fact to
learn multiple different weight vectors or features. We can either learn the features sequentially
and then project out the part of vj that lies in the subspace deﬁned by earlier features, or
we can learn them in parallel, and orthogonalize V in parallel. This latter approach is usually
preferred, since, unlike PCA, the features are not ordered in any way. So the ﬁrst feature is not
“more important” than the second, and hence it is better to treat them symmetrically.
           12.6. Independent Component Analysis (ICA)                                                      413


12.6.2.1   Modeling the source densities
           So far, we have assumed that G(z) = − log p(z) is known. What kinds of models might be
           reasonable as signal priors? We know that using Gaussians (which correspond to quadratic
           functions for G) won’t work. So we want some kind of non-Gaussian distribution. In general,
           there are several kinds of non-Gaussian distributions, such as the following:

           • Super-Gaussian distributions These are distributions which have a big spike at the mean,
             and hence (in order to ensure unit variance) have heavy tails. The Laplace distribution is
             a classic example. See Figure 12.22. Formally, we say a distribution is super-Gaussian or
             leptokurtic (“lepto” coming from the Greek for “thin”) if kurt(z) > 0, where kurt(z) is the
             kurtosis of the distribution, deﬁned by
                            μ4
                kurt(z)  4 − 3                                                                  (12.110)
                            σ
             where σ is the standard deviation, and μk is the k’th central moment, or moment about
             the mean:
                         
                μk  E (X − E [X])k                                                               (12.111)
             (So μ1 = μ is the mean, and μ2 = σ 2 is the variance.) It is conventional to subtract 3 in the
             deﬁnition of kurtosis to make the kurtosis of a Gaussian variable equal to zero.
           • Sub-Gaussian distributions A sub-Gaussian or platykurtic (“platy” coming from the Greek
             for “broad”) distribution has negative kurtosis. These are distributions which are much ﬂatter
             than a Gaussian. The uniform distribution is a classic example. See Figure 12.22.
           • Skewed distributions Another way to “be non-Gaussian” is to be asymmetric. One measure
             of this is skewness, deﬁned by
                             μ3
                 skew(z)  3                                                                         (12.112)
                             σ
             An example of a (right) skewed distribution is the gamma distribution (see Figure 2.9).

              When one looks at the empirical distribution of many natural signals, such as images and
           speech, when passed through certain linear ﬁlters, they tend to be very super-Gaussian. This
           result holds both for the kind of linear ﬁlters found in certain parts of the brain, such as the
           simple cells found in the primary visual cortex, as well as for the kinds of linear ﬁlters used in
           signal processing, such as wavelet transforms. One obvious choice for modeling natural signals
           with ICA is therefore the Laplace distribution. For mean zero and variance 1, this has a log pdf
           given by
                            √            √
              log p(z) = − 2|z| − log( 2)                                                              (12.113)
           Since the Laplace prior is not differentiable at the origin, it is more common to use other,
           smoother super-Gaussian distributions. One example is the logistic distribution. The corre-
           sponding
                √
                      log pdf, for the case where the mean is zero and the variance is 1 (so μ = 0 and
           s = π3 ), is given by the following:
                                                      √
                                          π          4 3
              log p(z) = −2 log cosh( √ z) − log                                                 (12.114)
                                         2 3          π
         414                                                                            Chapter 12. Latent linear models




                                                      μ1k                         μDk
                                                                      π
                                                      σ1k                         σDk




                                                            qt1             qtD


                                                            zt1             ztD
                                                                                        W

                                                      xt1                 xtD
                                                                                  T


                                                                  ψ



         Figure 12.23 Modeling the source distributions using a mixture of univariate Gaussians (the independent
         factor analysis model of (Moulines et al. 1997; Attias 1999)).



            Various ways of estimating G(Z) = − log p(z) are discussed in the seminal paper (Pham and
         Garrat 1997). However, when ﬁtting ICA by maximum likelihood, it is not critical that the exact
         shape of the source distribution be known (although it is important√to know whether it is sub
         or super Gaussian). Consequently, it is common to just use G(z) = z or G(z) = log cosh(z)
         instead of the more complex expressions above.

12.6.3   Using EM
         An alternative to assuming a particular form for G(z), or equivalently for p(z), is to use a
         ﬂexible non-parametric density estimator, such as a mixture of (uni-variate) Gaussians:

                  p(qj = k)    =   πk                                                                            (12.115)
                                              2
               p(zj |qj = k)   =   N (μj,k , σj,k )                                                              (12.116)
                     p(x|z)    =   N (Wz, Ψ)                                                                     (12.117)
         This approach was proposed in (Moulines et al. 1997; Attias 1999), and the corresponding graph-
         ical model is shown in Figure 12.23.
            It is possible to derive an exact EM algorithm for this model. The key observation is that
         it is possible to compute E [zt |xt , θ] exactly by summing over all K L combinations of the qt
         variables, where K is the number of mixture components per source. (If this is too expensive,
         one can use a variational mean ﬁeld approximation (Attias 1999).) We can then estimate all the
         source distributions in parallel by ﬁtting a standard GMM to E [zt ]. When the source GMMs are
           12.6. Independent Component Analysis (ICA)                                                     415


           known, we can compute the marginals pj (zj ) very easily, using

                           
                           K
                                                     2
              pj (zj ) =         πj,k N (zj |μj,k , σj,k )                                            (12.118)
                           k=1

           Given the pj ’s, we can then use an ICA algorithm to estimate W. Of course, these steps should
           be interleaved. The details can be found in (Attias 1999).

 12.6.4    Other estimation principles *
           It is quite common to estimate the parameters of ICA models using methods that seem different
           to maximum likelihood. We will review some of these methods below, because they give
           additional insight into ICA. However, we will also see that these methods in fact are equivalent
           to maximum likelihood after all. Our presentation is based on (Hyvarinen and Oja 2000).

12.6.4.1   Maximizing non-Gaussianity
           An early approach to ICA was to ﬁnd a matrix V such that the distribution z = Vx is as far
           from Gaussian as possible. (There is a related approach in statistics called projection pursuit.)
           One measure of non-Gaussianity is kurtosis, but this can be sensitive to outliers. Another
           measure is the negentropy, deﬁned as
                                           
              negentropy(z)  H N (μ, σ 2 ) − H (z)                                                  (12.119)

           where μ = E [z] and σ 2 = var [z]. Since the Gaussian is the maximum entropy distribution,
           this measure is always non-negative and becomes large for distributions that are highly non-
           Gaussian.
              We can deﬁne our objective as maximizing
                                                            
               J(V) =      negentropy(zj ) =    H N (μj , σj2 ) − H (zj )                        (12.120)
                           j                            j

           where z = Vx. If we ﬁx V to be orthogonal, and if we whiten the data, the covariance of z
           will be I independently of V, so the ﬁrst term is a constant. Hence
                                              
               J(V) =      −H (zj ) + const =      E [log p(zj )] + const                     (12.121)
                           j                                 j

           which we see is equal (up to a sign change, and irrelevant constants) to the log-likelihood in
           Equation 12.102.

12.6.4.2   Minimizing mutual information
           One measure of dependence of a set of random variables is the multi-information:
                        ⎛               ⎞
                                             
             I(z)  KL ⎝p(z)|| p(zj )⎠ =          H(zj ) − H(z)                                       (12.122)
                                         j                   j
           416                                                                  Chapter 12. Latent linear models


           We would like to minimize this, since we are trying to ﬁnd independent components. Put
           another way, we want the best possible factored approximation to the joint distribution.
             Now since z = Vx, we have
                     
              I(z) =     H(zj ) − H(Vx)                                                             (12.123)
                          j

           If we constrain V to be orthogonal, we can drop the last term, since then H(Vx) = H(x)
           (since multiplying by V does not change the shape of the distribution), and H(x) is a constant
           which is is solely determined by the empirical distribution. Hence we have I(z) = j H(zj ).
           Minimizing this is equivalent to maximizing the negentropy, which is equivalent to maximum
           likelihood.

12.6.4.3   Maximizing mutual information (infomax)
           Instead of trying to minimize the mutual information between the components of z, let us
           imagine a neural network where x is the input and yj = φ(vjT x) +  is the noisy output, where
           φ is some nonlinear scalar function, and  ∼ N (0, 1). It seems reasonable to try to maximize
           the information ﬂow through this system, a principle known as infomax. (Bell and Sejnowski
           1995). That is, we want to maximize the mutual information between y (the internal neural
           representation) and x (the observed input signal). We have I(x; y) = H(y) − H(y|x), where
           the latter term is constant if we assume the noise has constant variance. One can show that we
           can approximate the former term as follows

                          
                          L
                                 
                 H(y) =         E log φ (vjT x) + log | det(V)|                                          (12.124)
                          j=1

           where, as usual, we can drop the last term if V is orthogonal. If we deﬁne φ(z) to be a cdf,
           then φ (z) is its pdf, and the above expression is equivalent to the log likelihood. In particular,
           if we use a logistic nonlinearity, φ(z) = sigm(z), then the corresponding pdf is the logistic
           distribution, and log φ (z) = log cosh(z) (ignoring irrelevant constants). Thus we see that
           infomax is equivalent to maximum likelihood.

           Exercises
           Exercise 12.1 M step for FA
           For the FA model, show that the MLE in the M step for W is given by Equation 12.23.
           Exercise 12.2 MAP estimation for the FA model
           Derive the M step for the FA model using conjugate priors for the parameters.
           Exercise 12.3 Heuristic for assessing applicability of PCA
           (Source: (Press 2005, Q9.8).). Let the empirical covariance matrix Σ have eigenvalues λ1 ≥ λ2 ≥ · · · ≥
                                                                      
           λd > 0. Explain why the variance of the evalues, σ 2 = d1 di=1 (λi − λ)2 is a good measure of whether
           or not PCA would be useful for analysing the data (the higher the value of σ 2 the more useful PCA).
12.6. Independent Component Analysis (ICA)                                                                                        417


Exercise 12.4 Deriving the second principal component
a. Let
                                  n
                            1
         J(v2 , z2 ) =                (xi − zi1 v1 − zi2 v2 )T (xi − zi1 v1 − zi2 v2 )                                       (12.125)
                            n   i=1

   Show that      ∂J
                  ∂z2
                          = 0 yields zi2 = v2T xi .
b. Show that the value of v2 that minimizes
      ˜ 2 ) = −v2T Cv2 + λ2 (v2T v2 − 1) + λ12 (v2T v1 − 0)
      J(v                                                                                                                   (12.126)
   is given by the eigenvector of C with the second largest eigenvalue. Hint: recall that Cv1 = λ1 v1 and
    ∂xT Ax
      ∂x
            = (A + AT )x.

Exercise 12.5 Deriving the residual error for PCA
a. Prove that
                  K                                K
         ||xi −           zij vj ||2 = xTi xi −          vjT xi xTi vj                                                       (12.127)
                  j=1                              j=1

   Hint: ﬁrst consider the case K = 2. Use the fact that vjT vj = 1 and vjT vk = 0 for k = j. Also,
   recall zij = xTi vj .
b. Now show that
                       n
                         %           K
                                                      &     n            K
                   1        T            T       T       1
       JK                 xi x i −     vj x i x i v j =       xTi xi −     λj               (12.128)
                   n i=1            j=1
                                                         n i=1          j=1

   Hint: recall vjT Cvj = λj vjT vj = λj .
c. If K = d there is no truncation, so Jd = 0. Use this to show that the error from only using K < d
   terms is given by
                      d
         JK =                λj                                                                                             (12.129)
                  j=K+1
                                      d                 K               d
   Hint: partition the sum               j=1   λj into     j=1   λj and     j=K+1    λj .


Exercise 12.6 Derivation of Fisher’s linear discriminant
                                                  w T SB w
Show that the maximum of J(w) =                   w T SW w
                                                              is given by SB w = λSW w
           w T SB w                                                                                         d f (x)       f  g−f g 
where   λ= w TS     . Hint: recall that the derivative             of a ratio of two scalars is given by   dx g(x)
                                                                                                                      =        g2
                                                                                                                                      ,
                Ww
where    
        f = dx f (x) and g  = dx
             d                   d
                                    g(x). Also, recall             that    d
                                                                          dx
                                                                             xT Ax   = (A + AT )x.

Exercise 12.7 PCA via successive deﬂation
Let v1 , v2 , . . . , vk be the ﬁrst k eigenvectors with largest eigenvalues of C =               1
                                                                                                  n
                                                                                                    XT X,     i.e., the principal
basis vectors. These satisfy

                   0        if j = k
   vjT vk =                                                                                                                 (12.130)
                   1        if j = k

We will construct a method for ﬁnding the vj sequentially.
418                                                                    Chapter 12. Latent linear models


As we showed in class, v1 is the ﬁrst principal eigenvector of C, and satisﬁes Cv1 = λ1 v1 . Now deﬁne
x̃i as the orthogonal projection of xi onto the space orthogonal to v1 :

      x̃i = P⊥v1 xi = (I − v1 v1T )xi                                                                (12.131)

Deﬁne X̃ = [x̃1 ; ...; x̃n ] as the deﬂated matrix of rank d − 1, which is obtained by removing from the d
dimensional data the component that lies in the direction of the ﬁrst principal direction:

      X̃ = (I − v1 v1T )T X = (I − v1 v1T )X                                                         (12.132)

a. Using the facts that XT Xv1 = nλ1 v1 (and hence v1T XT X = nλ1 v1T ) and v1T v1 = 1, show that
   the covariance of the deﬂated matrix is given by
                1 T      1
         C̃      X̃ X̃ = XT X − λ1 v1 v1T                                                           (12.133)
                n        n
b. Let u be the principal eigenvector of C̃. Explain why u = v2 . (You may assume u is unit norm.)
c. Suppose we have a simple method for ﬁnding the leading eigenvector and eigenvalue of a pd matrix,
   denoted by [λ, u] = f (C). Write some pseudo code for ﬁnding the ﬁrst K principal basis vectors of
   X that only uses the special f function and simple vector arithmetic, i.e., your code should not use
   SVD or the eig function. Hint: this should be a simple iterative routine that takes 2–3 lines to write.
   The input is C, K and the function f , the output should be vj and λj for j = 1 : K. Do not worry
   about being syntactically correct.
Exercise 12.8 Latent semantic indexing
(Source: de Freitas.). In this exercise, we study a technique called latent semantic indexing, which applies
SVD to a document by term matrix, to create a low-dimensional embedding of the data that is designed to
capture semantic similarity of words.
The ﬁle lsiDocuments.pdf contains 9 documents on various topics. A list of all the 460 unique
words/terms that occur in these documents is in lsiWords.txt. A document by term matrix is in
lsiMatrix.txt.

a. Let X be the transpose of lsiMatrix, so each column represents a document. Compute the SVD of X
   and make an approximation to it X̂ using the ﬁrst 2 singular values/ vectors. Plot the low dimensional
   representation of the 9 documents in 2D. You should get something like Figure 12.24.
b. Consider ﬁnding documents that are about alien abductions. If If you look at lsiWords.txt, there
   are 3 versions of this word, term 23 (“abducted”), term 24 (“abduction”) and term 25 (“abductions”).
   Suppose we want to ﬁnd documents containing the word “abducted”. Documents 2 and 3 contain it,
   but document 1 does not. However, document 1 is clearly related to this topic. Thus LSI should also
   ﬁnd document 1. Create a test document q containing the one word “abducted”, and project it into
   the 2D subspace to make q̂. Now compute the cosine similarity between q̂ and the low dimensional
   representation of all the documents. What are the top 3 closest matches?

Exercise 12.9 Imputation in a FA model
Derive an expression for p(xh |xv , θ) for a FA model.
Exercise 12.10 Efficiently evaluating the PPCA density
Derive an expression for p(x|Ŵ, σ̂ 2 ) for the PPCA model based on plugging in the MLEs and using the
matrix inversion lemma.
12.6. Independent Component Analysis (ICA)                                                                419


                                 0.6


                                                         4
                                 0.4


                                          6
                                 0.2                    7
                                                        8

                                   0
                                                                                    5


                                −0.2
                                                        9

                                                             2
                                −0.4
                                                                        3
                                                                    1
                                −0.6



                                −0.8
                                  −0.45       −0.4   −0.35   −0.3           −0.25       −0.2




      Figure 12.24 Projection of 9 documents into 2 dimensions. Figure generated by lsiCode.



Exercise 12.11 PPCA vs FA
(Source: Exercise 14.15 of (Hastie et al. 2009), due to Hinton.). Generate 200 observations from the following
model, where zi ∼ N (0, I): xi1 = zi1 , xi2 = zi1 + 0.001zi2 , xi3 = 10zi3 . Fit a FA and PCA model
with 1 latent factor. Hence show that the corresponding weight vector w aligns with the maximal variance
direction (dimension 3) in the PCA case, but with the maximal correlation direction (dimensions 1+2) in the
case of FA.
13      Sparse linear models



 13.1   Introduction
        We introduced the topic of feature selection in Section 3.5.4, where we discussed methods for
        ﬁnding input variables which had high mutual information with the output. The trouble with
        this approach is that it is based on a myopic strategy that only looks at one variable at a time.
        This can fail if there are interaction effects. For example, if y = xor(x1 , x2 ), then neither x1 nor
        x2 on its own can predict the response, but together they perfectly predict the response. For a
        real-world example of this, consider genetic association studies: sometimes two genes on their
        own may be harmless, but when present together they cause a recessive disease (Balding 2006).
           In this chapter, we focus on selecting sets of variables at a time using a model-based approach.
        If the model is a generalized linear model, of the form p(y|x) = p(y|f (wT x)) for some link
        function f , then we can perform feature selection by encouraging the weight vector w to be
        sparse, i.e., to have lots of zeros. This approach turns out to offer signiﬁcant computational
        advantages, as we will see below.
           Here are some applications where feature selection/ sparsity is useful:

        • In many problems, we have many more dimensions D than training cases N . The cor-
          responding design matrix is short and fat, rather than tall and skinny. This is called the
          small N , large D problem. This is becoming increasingly prevalent as we develop more
          high throughput measurement devices, For example, with gene microarrays, it is common
          to measure the expression levels of D ∼ 10, 000 genes, but to only get N ∼ 100 such
          examples. (It is perhaps a sign of the times that even our data seems to be getting fatter...)
          We may want to ﬁnd the smallest set of features that can accurately predict the response
          (e.g., growth rate of the cell) in order to prevent overﬁtting, to reduce the cost of building a
          diagnostic device, or to help with scientiﬁc insight into the problem.
        • In Chapter 14, we will use basis functions centered on the training examples, so φ(x) =
          [κ(x, x1 ), . . . , κ(x, xN )], where κ is a kernel function. The resulting design matrix has size
          N × N . Feature selection in this context is equivalent to selecting a subset of the training
          examples, which can help reduce overﬁtting and computational cost. This is known as a
          sparse kernel machine.
        • In signal processing, it is common to represent signals (images, speech, etc.) in terms of
          wavelet basis functions. To save time and space, it is useful to ﬁnd a sparse representation
       422                                                             Chapter 13. Sparse linear models


          of the signals, in terms of a small number of such basis functions. This allows us to estimate
          signals from a small number of measurements, as well as to compress the signal. See
          Section 13.8.3 for more information.
          Note that the topic of feature selection and sparsity is currently one of the most active areas
       of machine learning/ statistics. In this chapter, we only have space to give an overview of the
       main results.

13.2   Bayesian variable selection
       A natural way to pose the variable selection problem is as follows. Let γj = 1 if feature j is
       “relevant”, and let γj = 0 otherwise. Our goal is to compute the posterior over models
                        e−f (γ)
          p(γ|D) =           −f (γ  )
                                                                                                    (13.1)
                        γ e

       where f (γ) is the cost function:
          f (γ)  −[log p(D|γ) + log p(γ)]                                                          (13.2)
          For example, suppose we generate N = 20 samples from a D = 10 dimensional linear
       regression model, yi ∼ N (wT xi , σ 2 ), in which K = 5 elements of w are non-zero. In
       particular, we use w = (0.00, −1.67, 0.13, 0.00, 0.00, 1.19, 0.00, −0.04, 0.33, 0.00) and σ 2 =
       1. We enumerate all 210 = 1024 models and compute p(γ|D) for each one (we give the
       equations for this below). We order the models in Gray code order, which ensures consecutive
       vectors differ by exactly 1 bit (the reasons for this are computational, and are discussed in
       Section 13.2.3).
          The resulting set of bit patterns is shown in Figure 13.1(a). The cost of each model, f (γ), is
       shown in Figure 13.1(b). We see that this objective function is extremely “bumpy”. The results
       are easier to interpret if we compute the posterior distribution over models, p(γ|D). This is
       shown in Figure 13.1(c). The top 8 models are listed below:
                                             model prob members
                                             4        0.447 2,
                                             61       0.241 2, 6,
                                             452      0.103 2, 6, 9,
                                             60       0.091 2, 3, 6,
                                             29       0.041 2, 5,
                                             68       0.021 2, 6, 7,
                                             36       0.015 2, 5, 6,
                                             5        0.010 2, 3,
          The “true” model is {2, 3, 6, 8, 9}. However, the coefficients associated with features 3 and 8
       are very small (relative to σ 2 ). so these variables are harder to detect. Given enough data, the
       method will converge on the true model (assuming the data is generated from a linear model),
       but for ﬁnite data sets, there will usually be considerable posterior uncertainty.
          Interpreting the posterior over a large number of models is quite difficult, so we will seek
       various summary statistics. A natural one is the posterior mode, or MAP estimate
          γ̂ = argmax p(γ|D) = argmin f (γ)                                                         (13.3)
13.2. Bayesian variable selection                                                                                                                        423

                                                                                                                log p(model, data)
     1

     2                                                                                 −40

     3                                                                                 −60

     4                                                                                 −80

                                                                                      −100
     5
                                                                                      −120
     6
                                                                                      −140
     7
                                                                                      −160
     8
                                                                                      −180
     9
                                                                                      −200
    10
                                                                                      −220
                   100   200     300   400     500    600    700   800   900   1000          0       200        400         600           800    1000

                                               (a)                                                                    (b)
                                             p(model|data)                                                     p(gamma(j)|data
         0.1                                                                           1

      0.09                                                                            0.9

      0.08                                                                            0.8

      0.07                                                                            0.7

      0.06                                                                            0.6

      0.05                                                                            0.5

      0.04                                                                            0.4

      0.03                                                                            0.3

      0.02                                                                            0.2

      0.01                                                                            0.1

          0                                                                            0
               0           200          400            600         800         1000          1   2   3     4    5     6     7     8   9     10

                                                (c)                                                                 (d)

Figure 13.1 (a) All possible bit vectors of length 10 enumerated in Gray code order. (b) Score function for
all possible models. (c) Posterior over all 1024 models. Vertical scale has been truncated at 0.1 for clarity.
(d) Marginal inclusion probabilities. Figure generated by linregAllsubsetsGraycodeDemo.


However, the mode is often not representative of the full posterior mass (see Section 5.2.1.3). A
better summary is the median model (Barbieri and Berger 2004; Carvahlo and Lawrence 2007),
computed using
   γ̂ = {j : p(γj = 1|D) > 0.5}                                                                                                                         (13.4)
This requires computing the posterior marginal inclusion probabilities, p(γj = 1|D). These
are shown in Figure 13.1(d). We see that the model is conﬁdent that variables 2 and 6 are
included; if we lower the decision threshold to 0.1, we would add 3 and 9 as well. However, if
we wanted to “capture” variable 8, we would incur two false positives (5 and 7). This tradeoff
between false positives and false negatives is discussed in more detail in Section 5.7.2.1.
   The above example illustrates the “gold standard” for variable selection: the problem was
sufficiently small (only 10 variables) that we were able to compute the full posterior exactly.
Of course, variable selection is most useful in the cases where the number of dimensions is
large. Since there are 2D possible models (bit vectors), it will be impossible to compute the
full posterior in general, and even ﬁnding summaries, such as the MAP estimate or marginal
         424                                                                  Chapter 13. Sparse linear models


         inclusion probabilities, will be intractable. We will therefore spend most of this chapter focussing
         on algorithmic speedups. But before we do that, we will explain how we computed p(γ|D) in
         the above example.

13.2.1   The spike and slab model
         The posterior is given by
            p(γ|D) ∝ p(γ)p(D|γ)                                                                          (13.5)
         We ﬁrst consider the prior, then the likelihood.
          It is common to use the following prior on the bit vector:
                     
                     D
                                           ||γ||0
            p(γ) =         Ber(γj |π0 ) = π0        (1 − π0 )D−||γ||0                                    (13.6)
                     j=1

                                                                               D
         where π0 is the probability a feature is relevant, and ||γ||0 = j=1 γj is the 0 pseudo-norm,
         that is, the number of non-zero elements of the vector. For comparison with later models, it is
         useful to write the log prior as follows:
            log p(γ|π0 )     =   ||γ||0 log π0 + (D − ||γ||0 ) log(1 − π0 )                               (13.7)
                             =   ||γ||0 (log π0 − log(1 − π0 )) + const                                  (13.8)
                             =   −λ||γ||0 + const                                                        (13.9)
         where λ  log 1−π 0
                        π0 controls the sparsity of the model.
           We can write the likelihood as follows:
                                     
           p(D|γ) = p(y|X, γ) =           p(y|X, w, γ)p(w|γ, σ 2 )p(σ 2 )dwdσ 2                         (13.10)

         For notational simplicity, we have assumed the response is centered, (i.e., y = 0), so we can
         ignore any offset term μ.
            We now discuss the prior p(w|γ, σ 2 ). If γj = 0, feature j is irrelevant, so we expect wj = 0.
         If γj = 1, we expect wj to be non-zero. If we standardize the inputs, a reasonable prior is
                    2
         N (0, σ 2 σw ), where σw 2
                                     controls how big we expect the coefficients associated with the relevant
         variables to be (which is scaled by the overall noise level σ 2 ). We can summarize this prior as
         follows:
                                
                                   δ0 (wj )           if γj = 0
             p(wj |σ 2 , γj ) =                                                                         (13.11)
                                                  2
                                   N (wj |0, σ 2 σw ) if γj = 1
                                                       2
         The ﬁrst term is a “spike” at the origin. As σw → ∞, the distribution p(wj |γj = 1) approaches
         a uniform distribution, which can be thought of as a “slab” of constant height. Hence this is
         called the spike and slab model (Mitchell and Beauchamp 1988).
            We can drop the coefficients wj for which wj = 0 from the model, since they are clamped
         to zero under the prior. Hence Equation 13.10 becomes the following (assuming a Gaussian
         likelihood):
                        
             p(D|γ) =                                               2
                             N (y|Xγ wγ , σ 2 IN )N (wγ |0Dγ , σ 2 σw IDγ )p(σ 2 )dwγ dσ 2        (13.12)
         13.2. Bayesian variable selection                                                                                  425


         where Dγ = ||γ||0 is the number of non-zero elements in γ. In what follows, we will generalize
         this slightly by deﬁning a prior of the form p(w|γ, σ 2 ) = N (wγ |0Dγ , σ 2 Σγ ) for any positive
         deﬁnite matrix Σγ .1
            Given these priors, we can now compute the marginal likelihood. If the noise variance is
         known, we can write down the marginal likelihood (using Equation 13.151) as follows:
                               
             p(D|γ, σ 2 ) =       N (y|Xγ wγ , σ 2 I)N (wγ |0, σ 2 Σγ )dwγ = N (y|0, Cγ )            (13.13)

                      Cγ          σ 2 Xγ Σγ XTγ + σ 2 IN                                                                 (13.14)
           If the noise is unknown, we can put a prior on it and integrate it out. It is common to use
         p(σ 2 ) = IG(σ 2 |aσ , bσ ). Some guidelines on setting a, b can be found in (Kohn et al. 2001). If
         we use a = b = 0, we recover the Jeffrey’s prior, p(σ 2 ) ∝ σ −2 . When we integrate out the noise,
         we get the following more complicated expression for the marginal likelihood (Brown et al. 1998):
                             
            p(D|γ) =                p(y|γ, wγ , σ 2 )p(wγ |γ, σ 2 )p(σ 2 )dwγ dσ 2                    (13.15)
                                                     1         1
                          ∝    |XTγ Xγ + Σ−1
                                          γ |
                                              −2
                                                 |Σγ |− 2 (2bσ + S(γ))−(2aσ +N −1)/2                                     (13.16)
         where S(γ) is the RSS:
             S(γ)            yT y − yT Xγ (XTγ Xγ + Σ−1
                                                      γ )
                                                          −1 T
                                                            Xγ y                                                          (13.17)
         See also Exercise 13.4.
            When the marginal likelihood cannot be computed in closed form (e.g., if we are using logistic
         regression or a nonlinear model), we can approximate it using BIC, which has the form
                                                   ||γ||0
            log p(D|γ) ≈ log p(y|X, ŵγ , σ̂ 2 ) −        log N                                     (13.18)
                                                     2
         where ŵγ is the ML or MAP estimate based on Xγ , and ||γ||0 is the “degrees of freedom” of
         the model (Zou et al. 2007). Adding the log prior, the overall objective becomes
                                                   ||γ||0
            log p(γ|D) ≈ log p(y|X, ŵγ , σ̂ 2 ) −        log N − λ||γ||0 + const                   (13.19)
                                                     2
         We see that there are two complexity penalties: one arising from the BIC approximation to
         the marginal likelihood, and the other arising from the prior on p(γ). Obviously these can be
         combined into one overall complexity parameter, which we will denote by λ.

13.2.2   From the Bernoulli-Gaussian model to                       0   regularization
         Another model that is sometimes used (e.g., (Kuo and Mallick 1998; Zhou et al. 2009; Soussen
         et al. 2010)) is the following:
                                         
             yi |xi , w, γ, σ 2 ∼ N (      γj wj xij , σ 2 )                                    (13.20)
                                              j
                              γj   ∼    Ber(π0 )                                                                          (13.21)
                                               2
                              wj   ∼    N (0, σw )                                                                       (13.22)
         1. It is common to use a g-prior of the form Σγ = g(XT     γ Xγ )
                                                                            −1 for reasons explained in Section 7.6.3.1 (see also

         Exercise 13.4). Various approaches have been proposed for setting g, including cross validation, empirical Bayes (Minka
         2000b; George and Foster 2000), hierarchical Bayes (Liang et al. 2008), etc.
         426                                                              Chapter 13. Sparse linear models


         In the signal processing literature (e.g., (Soussen et al. 2010)), this is called the Bernoulli-
         Gaussian model, although we could also call it the binary mask model, since we can think of
         the γj variables as “masking out” the weights wj .
            Unlike the spike and slab model, we do not integrate out the “irrelevant” coefficients; they
         always exist. In addition, the binary mask model has the form γj → y ← wj , whereas the spike
         and slab model has the form γj → wj → y. In the binary mask model, only the product γj wj
         can be identiﬁed from the likelihood.
            One interesting aspect of this model is that it can be used to derive an objective function that
         is widely used in the (non-Bayesian) subset selection literature. First, note that the joint prior
         has the form
                               2       ||γ||0
            p(γ, w) ∝ N (w|0, σw I)π0           (1 − π0 )D−||γ||0                                    (13.23)
         Hence the scaled unnormalized negative log posterior has the form
            f (γ, w)        −2σ 2 log p(γ, w, y|X) = ||y − X(γ. ∗ w)||2
                              σ2
                             + 2 ||w||2 + λ||γ||0 + const                                            (13.24)
                              σw
         where
                            1 − π0
            λ  2σ 2 log(          )                                                                 (13.25)
                              π0
         Let us split w into two subvectors, w−γ and wγ , indexed by the zero and non-zero entries of
         γ respectively. Since X(γ. ∗ w) = Xγ wγ , we can just set w−γ = 0.
                                             2
            Now consider the case where σw     → ∞, so we do not regularize the non-zero weights (so
         there is no complexity penalty coming from the marginal likelihood or its BIC approximation).
         In this case, the objective becomes
            f (γ, w) = ||y − Xγ wγ ||22 + λ||γ||0                                                    (13.26)
         This is similar to the BIC objective above.
            Instead of keeping track of the bit vector γ, we can deﬁne the set of relevant variables to
         be the support, or set of non-zero entries, of w. Then we can rewrite the above equation as
         follows:
            f (w) = ||y − Xw||22 + λ||w||0                                                           (13.27)
         This is called 0 regularization. We have converted the discrete optimization problem (over
         γ ∈ {0, 1}D ) into a continuous one (over w ∈ RD ); however, the 0 pseudo-norm makes the
         objective very non smooth, so this is still hard to optimize. We will discuss different solutions
         to this in the rest of this chapter.

13.2.3   Algorithms
         Since there are 2D models, we cannot explore the full posterior, or ﬁnd the globally optimal
         model. Instead we will have to resort to heuristics of one form or another. All of the methods
         we will discuss involve searching through the space of models, and evaluating the cost f (γ) at
           13.2. Bayesian variable selection                                                                                                                        427

                                                                                                                       all subsets on prostate cancer
                                            {1, 2, 3, 4}                                                1.4



                                                                                                        1.2
                               {1, 2, 3} {2, 3, 4} {1, 3, 4} {1, 2, 4}




                                                                                   training set error
                                                                                                         1

                      {1, 2}    {1, 3}    {1, 4}        {2, 3}   {2, 4}   {3, 4}
                                                                                                        0.8


                                 {1}       {2}           {3}      {4}                                   0.6



                                                   {}                                                   0.4
                                                                                                           0   1   2        3       4         5         6   7   8
                                                                                                                                subset size



                                                 (a)                                                                             (b)

           Figure 13.2 (a) A lattice of subsets of {1, 2, 3, 4}. (b) Residual sum of squares versus subset size, on the
           prostate cancer data set. The lower envelope is the best RSS achievable for any set of a given size. Based
           on Figure 3.5 of (Hastie et al. 2001). Figure generated by prostateSubsets.



           each point. This requires ﬁtting the)model (i.e., computing argmax p(D|w)), or evaluating its
           marginal likelihood (i.e., computing p(D|w)p(w)dw) at each step. This is sometimes called
           the wrapper method, since we “wrap” our search for the best model (or set of good models)
           around a generic model-ﬁtting procedure.
              In order to make wrapper methods efficient, it is important that we can quickly evaluate the
           score function for some new model, γ  , given the score of a previous model, γ. This can be
           done provided we can efficiently update the sufficient statistics needed to compute f (γ). This
           is possible provided γ  only differs from γ in one bit (corresponding to adding or removing
           a single variable), and provided f (γ) only depends on the data via Xγ . In this case, we can
           use rank-one matrix updates/ downdates to efficiently compute XTγ Xγ  from XTγ Xγ . These
           updates are usually applied to the QR decomposition of X. See e.g., (Miller 2002; Schniter et al.
           2008) for details.

13.2.3.1   Greedy search
           Suppose we want to ﬁnd the MAP model. If we use the 0 -regularized objective in Equation 13.27,
           we can exploit properties of least squares to derive various efficient greedy forwards search
           methods, some of which we summarize below. For further details, see (Miller 2002; Soussen
           et al. 2010).

           • Single best replacement The simplest method is to use greedy hill climbing, where at each
             step, we deﬁne the neighborhood of the current model to be all models than can be reached
             by ﬂipping a single bit of γ, i.e., for each variable, if it is currently out of the model, we
             consider adding it, and if it is currently in the model, we consider removing it. In (Soussen
             et al. 2010), they call this the single best replacement (SBR). Since we are expecting a
             sparse solution, we can start with the empty set, γ = 0. We are essentially moving through
             the lattice of subsets, shown in Figure 13.2(a). We continue adding or removing until no
             improvement is possible.
           • Orthogonal least squares If we set λ = 0 in Equation 13.27, so there is no complexity
             penalty, there will be no reason to perform deletion steps. In this case, the SBR algorithm is
             equivalent to orthogonal least squares (Chen and Wigger 1995), which in turn is equivalent
428                                                              Chapter 13. Sparse linear models


    to greedy forwards selection. In this algorithm, we start with the empty set and add the
    best feature at each step. The error will go down monotonically with ||γ||0 , as shown in
    Figure 13.2(b). We can pick the next best feature j ∗ to add to the current set γ t by solving
       j ∗ = arg min min ||y − (Xγ t ∪j )w||2                                               (13.28)
                 j∈γ t   w


  We then update the active set by setting γ (t+1) = γ (t) ∪ {j ∗ }. To choose the next feature to
  add at step t, we need to solve D − Dt least squares problems at step t, where Dt = |γ t | is
  the cardinality of the current active set. Having chosen the best feature to add, we need to
  solve an additional least squares problem to compute wt+1 ).
• Orthogonal matching pursuits Orthogonal least squares is somewhat expensive. A simpli-
  ﬁcation is to “freeze” the current weights at their current value, and then to pick the next
  feature to add by solving

       j ∗ = arg min min ||y − Xwt − βx:,j ||2                                              (13.29)
                 j∈γ t   β

    This inner optimization is easy to solve: we simply set β = xT:,j rt /||x:,j ||2 , where rt =
    y − Xwt is the current residual vector. If the columns are unit norm, we have
       j ∗ = arg max xT:,j rt                                                               (13.30)

    so we are just looking for the column that is most correlated with the current residual. We
    then update the active set, and compute the new least squares estimate wt+1 using Xγ t+1 .
    This method is called orthogonal matching pursuits or OMP (Mallat et al. 1994). This only
    requires one least squares calculation per iteration and so is faster than orthogonal least
    squares, but is not quite as accurate (Blumensath and Davies 2007).
•   Matching pursuits An even more aggressive approximation is to just greedily add the feature
    that is most correlated with the current residual. This is called matching pursuits (Mallat
    and Zhang 1993). This is also equivalent to a method known as least squares boosting
    (Section 16.4.6).
•   Backwards selection Backwards selection starts with all variables in the model (the so-
    called saturated model), and then deletes the worst one at each step. This is equivalent
    to performing a greedy search from the top of the lattice downwards. This can give better
    results than a bottom-up search, since the decision about whether to keep a variable or
    not is made in the context of all the other variables that might depende on it. However,
    this method is typically infeasible for large problems, since the saturated model will be too
    expensive to ﬁt.
•   FoBa The forwards-backwards algorithm of (Zhang 2008) is similar to the single best
    replacement algorithm presented above, except it uses an OMP-like approximation when
    choosing the next move to make. A similar “dual-pass” algorithm was described in (Moghad-
    dam et al. 2008).
•   Bayesian Matching pursuit The algorithm of (Schniter et al. 2008) is similiar to OMP except
    it uses a Bayesian marginal likelihood scoring criterion (under a spike and slab model) instead
    of a least squares objective. In addition, it uses a form of beam search to explore multiple
    paths through the lattice at once.
           13.3. 1 regularization: basics                                                               429


13.2.3.2   Stochastic search
           If we want to approximate the posterior, rather than just computing a mode (e.g. because we
           want to compute marginal inclusion probabilities), one option is to use MCMC. The standard
           approach is to use Metropolis Hastings, where the proposal distribution just ﬂips single bits.
           This enables us to efficiently compute p(γ  |D) given p(γ|D). The probability of a state (bit
           conﬁguration) is estimated by counting how many times the random walk visits this state. See
           (O’Hara and Sillanpaa 2009) for a review of such methods, and (Bottolo and Richardson 2010)
           for a very recent method based on evolutionary MCMC.
              However, in a discrete state space, MCMC is needlessly inefficient, since we can compute the
           (unnormalized) probability of a state directly using p(γ, D) = exp(−f (γ)); thus there is no
           need to ever revisit a state. A much more efficient alternative is to use some kind of stochastic
           search algorithm, to generate a set S of high scoring models, and then to make the following
           approximation

                                e−f (γ)
                p(γ|D) ≈              −f (γ  )
                                                                                                       (13.31)
                             γ  ∈S e

           See (Heaton and Scott 2009) for a review of recent methods of this kind.

13.2.3.3   EM and variational inference *
           It is tempting to apply EM to the spike and slab model, which has the form γj → wj → y. We
           can compute p(γj = 1|wj ) in the E step, and optimize w in the M step. However, this will not
           work, because when we compute p(γj = 1|wj ), we are comparing a delta-function, δ0 (wj ), with
                                         2
           a Gaussian pdf, N (wj |0, σw    ). We can replace the delta function with a narrow Gaussian, and
           then the E step amounts to classifying wj under the two possible Gaussian models. However,
           this is likely to suffer from severe local minima.
              An alternative is to apply EM to the Bernoulli-Gaussian model, which has the form γj → y ←
           wj . In this case, the posterior p(γ|D, w) is intractable to compute because all the bits become
           correlated due' to explaining away. However, it is possible to derive a mean ﬁeld approximation
           of the form j q(γj )q(wj ) (Huang et al. 2007; Rattray et al. 2009).

   13.3     1   regularization: basics
           When we have many variables, it is computationally difficult to ﬁnd the posterior mode of
           p(γ|D). And although greedy algorithms often work well (see e.g., (Zhang 2008) for a theoretical
           analysis), they can of course get stuck in local optima.
              Part of the problem is due to the fact that the γj variables are discrete, γj ∈ {0, 1}. In
           the optimization community, it is common to relax hard constraints of this form by replacing
           discrete variables with continuous variables. We can do this by replacing the spike-and-slab style
           prior, that assigns ﬁnite probability mass to the event that wj = 0, to continuous priors that
           “encourage” wj = 0 by putting a lot of probability density near the origin, such as a zero-mean
           Laplace distribution. This was ﬁrst introduced in Section 7.4 in the context of robust linear
           regression. There we exploited the fact that the Laplace has heavy tails. Here we exploit the fact
         430                                                                     Chapter 13. Sparse linear models




         Figure 13.3 Illustration of 1 (left) vs 2 (right) regularization of a least squares problem. Based on Figure
         3.12 of (Hastie et al. 2001).


         that it has a spike near μ = 0. More precisely, consider a prior of the form
                         
                         D                            
                                                      D
            p(w|λ) =           Lap(wj |0, 1/λ) ∝           e−λ|wj |                                             (13.32)
                         j=1                         j=1

         We will use a uniform prior on the offset term, p(w0 ) ∝ 1. Let us perform MAP estimation with
         this prior. The penalized negative log likelihood has the form
            f (w) = − log p(D|w) − log p(w|λ) = NLL(w) + λ||w||1                                                (13.33)
                                   D
         where ||w||1 = j=1 |wj | is the 1 norm of w. For suitably large λ, the estimate ŵ will be
         sparse, for reasons we explain below. Indeed, this can be thought of as a convex approximation
         to the non-convex 0 objective
            argmin NLL(w) + λ||w||0                                                                             (13.34)
                w

         In the case of linear regression, the 1 objective becomes
                             
                             N
                                        1
            f (w)    =             −        (yi − (w0 + wT xi ))2 + λ||w||1                                     (13.35)
                             i=1
                                       2σ 2
                     =       RSS(w) + λ ||w||1                                                                 (13.36)
         where λ = 2λσ 2 . This method is known as basis pursuit denoising or BPDN (Chen et al. 1998).
         The reason for this term will become clear later. In general, the technique of putting a zero-mean
         Laplace prior on the parameters and performing MAP estimation is called 1 regularization.
         It can be combined with any convex or non-convex NLL term. Many different algorithms have
         been devised for solving such problems, some of which we review in Section 13.4.

13.3.1   Why does        1   regularization yield sparse solutions?
         We now explain why 1 regularization results in sparse solutions, whereas 2 regularization does
         not. We focus on the case of linear regression, although similar arguments hold for logistic
         regression and other GLMs.
         13.3. 1 regularization: basics                                                                                431


           The objective is the following non-smooth objective function:
            min RSS(w) + λ||w||1                                                                                     (13.37)
              w

         We can rewrite this as a constrained but smooth objective (a quadratic function with linear
         constraints):
            min RSS(w)          s.t.    ||w||1 ≤ B                                                                  (13.38)
              w

         where B is an upper bound on the 1 -norm of the weights: a small (tight) bound B corresponds
         to a large penalty λ, and vice versa.2 Equation 13.38 is known as lasso, which stands for “least
         absolute shrinkage and selection operator” (Tibshirani 1996). We will see why it has this name
         later.
            Similarly, we can write ridge regression
            min RSS(w) + λ||w||22                                                                                   (13.39)
              w

         or as a bound constrained form:
            min RSS(w)           s.t.    ||w||22 ≤ B                                                                (13.40)
              w

            In Figure 13.3, we plot the contours of the RSS objective function, as well as the contours of
         the 2 and 1 constraint surfaces. From the theory of constrained optimization, we know that
         the optimal solution occurs at the point where the lowest level set of the objective function
         intersects the constraint surface (assuming the constraint is active). It should be geometrically
         clear that as we relax the constraint B, we “grow” the 1 “ball” until it meets the objective; the
         corners of the ball are more likely to intersect the ellipse than one of the sides, especially in high
         dimensions, because the corners “stick out” more. The corners correspond to sparse solutions,
         which lie on the coordinate axes. By contrast, when we grow the 2 ball, it can intersect the
         objective at any point; there are no “corners”, so there is no preference for sparsity.
                                                                                                  √ solution,
            To see this another away, notice that, with ridge regression, the prior cost of a sparse       √
         such as w = (1, 0), is the same as the cost of a dense solution, such as w = (1/ 2, 1/ 2),
         as long as they have the same 2 norm:
                                √     √
             ||(1, 0)||2 = ||(1/ 2, 1/ 2||2 = 1                                                           (13.41)
                                                                                    √       √
         However, for lasso, setting w = (1, 0) is cheaper than setting w = (1/ 2, 1/ 2), since
                                    √      √         √
             ||(1, 0)||1 = 1 < ||(1/ 2, 1/ 2||1 = 2                                                      (13.42)
           The most rigorous way to see that 1 regularization results in sparse solutions is to examine
         conditions that hold at the optimum. We do this in Section 13.3.2.

13.3.2   Optimality conditions for lasso
         The lasso objective has the form
            f (θ) = RSS(θ) + λ||w||1                                                                                (13.43)

         2. Equation 13.38 is an example of a quadratic program or QP, since we have a quadratic objective subject to linear
         inequality constraints. Its Lagrangian is given by Equation 13.37.
432                                                                               Chapter 13. Sparse linear models




                                                                                                     cʼ


                                                                                                     c


                                                                                   f(x) − f(x0)

                                                                                         c(x − x0)


                                                                     X0      X




Figure 13.4 Illustration of some sub-derivatives of a function at point x0 . Based on a ﬁgure at http:
//en.wikipedia.org/wiki/Subderivative. Figure generated by subgradientPlot.



Unfortunately, the ||w||1 term is not differentiable whenever wj = 0. This is an example of a
non-smooth optimization problem.
  To handle non-smooth functions, we need to extend the notion of a derivative. We deﬁne a
subderivative or subgradient of a (convex) function f : I → R at a point θ0 to be a scalar g
such that
    f (θ) − f (θ0 ) ≥ g(θ − θ0 ) ∀θ ∈ I                                                                         (13.44)

where I is some interval containing θ0 . See Figure 13.4 for an illustration.3 We deﬁne the set of
subderivatives as the interval [a, b] where a and b are the one-sided limits
                  f (θ) − f (θ0 )            f (θ) − f (θ0 )
    a = lim                       , b = lim+                                                                    (13.46)
          θ→θ0−       θ − θ0           θ→θ0      θ − θ0

The set [a, b] of all subderivatives is called the subdifferential of the function f at θ0 and
is denoted ∂f (θ)|θ0 . For example, in the case of the absolute value function f (θ) = |θ|, the
subderivative is given by
             ⎧
             ⎨ {−1} if θ < 0
    ∂f (θ) =     [−1, 1] if θ = 0                                                        (13.47)
             ⎩
                  {+1} if θ > 0
                                                                 (θ)
If the function is everywhere differentiable, then ∂f (θ) = { dfdθ   }. By analogy to the standard
calculus result, one can show that the point θ̂ is a local minimum of f iff 0 ∈ ∂f (θ)|θ̂.

3. In general, for a vector valued function, we say that g is a subgradient of f at θ 0 if for all vectors θ,

    f (θ) − f (θ 0 ) ≥ (θ − θ 0 )T g                                                                             (13.45)

so g is a linear lower bound to the function at θ 0 .
13.3. 1 regularization: basics                                                                        433




                                                FN                                                FN




                         (a)                                                   (b)

 Figure 13.5 Left: soft thresholding. The ﬂat region is the interval [−λ, +λ]. Right: hard thresholding.



  Let us apply these concepts to the lasso problem. Let us initially ignore the non-smooth
penalty term. One can show (Exercise 13.1) that
    ∂
       RSS(w)        =     aj w j − c j                                                            (13.48)
   ∂wj
                               
                               n
               aj    =     2         x2ij                                                          (13.49)
                               i=1
                               n
                cj   =     2         xij (yi − w−j
                                                T
                                                   xi,−j )                                         (13.50)
                               i=1

where w−j is w without component j, and similarly for xi,−j . We see that cj is (proportional
to) the correlation between the j’th feature x:,j and the residual due to the other features,
r−j = y − X:,−j w−j . Hence the magnitude of cj is an indication of how relevant feature j is
for predicting y (relative to the other features and the current parameters).
   Adding in the penalty term, we ﬁnd that the subderivative is given by

   ∂wj f (w)    =    (aj wj − cj ) + λ∂wj ||w||1                                                   (13.51)
                     ⎧
                     ⎨ {aj wj − cj − λ} if wj < 0
                =        [−cj − λ, −cj + λ] if wj = 0                                              (13.52)
                     ⎩
                          {aj wj − cj + λ} if wj > 0
We can write this in a more compact           fashion as follows:
                      ⎧
                      ⎨ {−λ}     if           wj < 0
  XT (Xw − y)j ∈        [−λ, λ] if            wj = 0                                               (13.53)
                      ⎩
                          {λ}    if           wj > 0

   Depending on the value of cj , the solution to ∂wj f (w) = 0 can occur at 3 different values
of wj , as follows:
434                                                               Chapter 13. Sparse linear models


1. If cj < −λ, so the feature is strongly negatively correlated with the residual, then the
                                c +λ
   subgradient is zero at ŵj = jaj < 0.

2. If cj ∈ [−λ, λ], so the feature is only weakly correlated with the residual, then the subgradient
   is zero at ŵj = 0.
3. If cj > λ, so the feature is strongly positively correlated with the residual, then the subgra-
                          c −λ
   dient is zero at ŵj = jaj > 0.

  In summary, we have
               ⎧
               ⎨ (cj + λ)/aj             if cj < −λ
   ŵj (cj ) =        0               if cj ∈ [−λ, λ]                                        (13.54)
               ⎩
                 (cj − λ)/aj              if cj > λ
We can write this as follows:
                          cj λ
   ŵj   =       soft(      ; )                                                              (13.55)
                          aj aj
where

   soft (a; δ)            sign(a) (|a| − δ)+                                                (13.56)

and x+ = max(x, 0) is the positive part of x. This is called soft thresholding. This is
illustrated in Figure 13.5(a), where we plot ŵj vs cj . The dotted line is the line wj = cj /aj
corresponding to the least squares ﬁt. The solid line, which represents the regularized estimate
ŵj (cj ), shifts the dotted line down (or up) by λ, except when −λ ≤ cj ≤ λ, in which case it
sets wj = 0.
    By contrast, in Figure 13.5(b), we illustrate hard thresholding. This sets values of wj to
0 if −λ ≤ cj ≤ λ, but it does not shrink the values of wj outside of this interval. The
slope of the soft thresholding line does not coincide with the diagonal, which means that even
large coefficients are shrunk towards zero; consequently lasso is a biased estimator. This is
undesirable, since if the likelihood indicates (via cj ) that the coefficient wj should be large, we
do not want to shrink it. We will discuss this issue in more detail in Section 13.6.2.
    Now we ﬁnally can understand why Tibshirani invented the term “lasso” in (Tibshirani 1996):
it stands for “least absolute selection and shrinkage operator”, since it selects a subset of the
variables, and shrinks all the coefficients by penalizing the absolute values. If λ = 0, we get the
OLS solution (of minimal 1 norm). If λ ≥ λmax , we get ŵ = 0, where

   λmax = ||XT y||∞ = max |yT x:,j |                                                         (13.57)
                                  j

This value is computed using the fact that 0 is optimal if (XT y)j ∈ [−λ, λ] for all j. In general,
the maximum penalty for an 1 regularized objective is
   λmax = max |∇j N LL(0)|                                                                   (13.58)
                  j
         13.3. 1 regularization: basics                                                                435


13.3.3   Comparison of least squares, lasso, ridge and subset selection
         We can gain further insight into 1 regularization by comparing it to least squares, and 2 and
         0 regularized least squares. For simplicity, assume all the features of X are orthonormal, so
         XT X = I. In this case, the RSS is given by
            RSS(w)        =   ||y − Xw||2 = yT y + wT XT Xw − 2wT XT y                               (13.59)
                                                
                          =   const +    wk2 − 2      wk xik yi                                      (13.60)
                                        k         k    i

         so we see this factorizes into a sum of terms, one per dimension. Hence we can write down the
         MAP and ML estimates analytically, as follows:
         • MLE The OLS solution is given by
               ŵkOLS = xT:k y                                                                        (13.61)
           where x:k is the k’th column of X. This follows trivially from Equation 13.60. We see
           that ŵkOLS is just the orthogonal projection of feature k onto the response vector (see
           Section 7.3.2).
         • Ridge One can show that the ridge estimate is given by
                               ŵkOLS
               ŵkridge   =                                                                          (13.62)
                               1+λ
         • Lasso From Equation 13.55, and using the fact that ak = 2 and ŵkOLS = ck /2, we have
                                       
                                                    λ
              ŵklasso = sign(ŵkOLS ) |ŵkOLS | −                                             (13.63)
                                                    2 +
           This corresponds to soft thresholding, shown in Figure 13.5(a).
         • Subset selection If we pick the best K features using subset selection, the parameter
           estimate is as follows
                            OLS
                 SS           ŵk     if rank(|wkOLS |) ≤ K
               ŵk    =                                                                    (13.64)
                                 0           otherwise
            where rank refers to the location in the sorted list of weight magnitudes. This corresponds
            to hard thresholding, shown in Figure 13.5(b).
            Figure 13.6(a) plots the MSE vs λ for lasso for a degree 14 polynomial, and Figure 13.6(b) plots
         the MSE vs polynomial order. We see that lasso gives similar results to the subset selection
         method.
            As another example, consider a data set concerning prostate cancer. We have D = 8 features
         and N = 67 training cases; the goal is to predict the log prostate-speciﬁc antigen levels (see
         (Hastie et al. 2009, p4) for more biological details). Table 13.1 shows that lasso gives better
         prediction accuracy (at least on this particular data set) than least squares, ridge, and best
         subset regression. (In each case, the strength of the regularizer was chosen by cross validation.)
         Lasso also gives rise to a sparse solution. Of course, for other problems, ridge may give better
         predictive accuracy. In practice, a combination of lasso and ridge, known as the elastic net,
         often performs best, since it provides a good combination of sparsity and regularization (see
         Section 13.5.3).
         436                                                                                                                    Chapter 13. Sparse linear models

                                                                                                                                  performance of MLE
                          35                                                                                   35
                                                                                     train                                                                       train
                                                                                     test                                                                        test
                          30                                                                                   30


                          25                                                                                   25


                          20                                                                                   20




                    mse




                                                                                                         mse
                          15                                                                                   15


                          10
                                                                                                               10

                           5
                                                                                                                5

                            0
                          103.249   10   1     0.5            0.1   0.01    0.0001           0                  0
                                                     lambda                                                         0   2   4     6      8       10    12   14           16
                                                                                                                                       degree


                                                     (a)                                                                               (b)

         Figure 13.6 (a) MSE vs λ for lasso for a degree 14 polynomial. Note that λ decreases as we move to
         the right. Figure generated by linregPolyLassoDemo. (b) MSE versus polynomial degree. Note that the
         model order increases as we move to the right. See Figure 1.18 for a plot of some of these polynomial
         regression models. Figure generated by linregPolyVsDegree.

                                                Term                         LS                  Best Subset            Ridge         Lasso
                                             Intercept                      2.452                   2.481                2.479         2.480
                                               lcavol                       0.716                   0.651                0.656        0.653
                                              lweight                       0.293                   0.380               0.300          0.297
                                                 age                       -0.143                  -0.000               -0.129        -0.119
                                                lbph                        0.212                  -0.000                0.208        0.200
                                                 svi                        0.310                  -0.000                0.301        0.289
                                                 lcp                       -0.289                  -0.000               -0.260        -0.236
                                              gleason                      -0.021                  -0.000               -0.019        0.000
                                               pgg45                        0.277                   0.178                0.256         0.226
                                             Test Error                    0.586                    0.572               0.580          0.564

         Table 13.1 Results of different methods on the prostate cancer data, which has 8 features and 67 training
         cases. Methods are: LS = least squares, Subset = best subset regression, Ridge, Lasso. Rows represent
         the coefficients; we see that subset regression and lasso give sparse solutions. Bottom row is the mean
         squared error on the test set (30 cases). Based on Table 3.3. of (Hastie et al. 2009). Figure generated by
         prostateComparison.



13.3.4   Regularization path
         As we increase λ, the solution vector ŵ(λ) will tend to get sparser, although not necessarily
         monotonically. We can plot the values ŵj (λ) vs λ for each feature j; this is known as the
         regularization path.
            This is illustrated for ridge regression in Figure 13.7(a), where we plot ŵj (λ) as the regularizer
         λ decreases. We see that when λ = ∞, all the coefficients are zero. But for any ﬁnite value of
         λ, all coefficients are non-zero; furthermore, they increase in magnitude as λ is decreased.
            In Figure 13.7(b), we plot the analogous result for lasso. As we move to the right, the upper
         bound on the 1 penalty, B, increases. When B = 0, all the coefficients are zero. As we increase
13.3. 1 regularization: basics                                                                                                                              437

            0.6                                                                     0.7
                                lcavol                                                                                                        lcavol
                                lweight                                             0.6                                                       lweight
            0.5                 age                                                                                                           age
                                lbph                                                                                                          lbph
                                svi                                                 0.5                                                       svi
            0.4
                                lcp                                                                                                           lcp
                                gleason                                             0.4                                                       gleason
            0.3                 pgg45                                                                                                         pgg45
                                                                                    0.3
            0.2
                                                                                    0.2
            0.1
                                                                                    0.1

             0
                                                                                      0

           −0.1                                                                    −0.1

           −0.2                                                                    −0.2
                  0              5             10    15       20         25   30          0            5           10           15       20             25


                                                    (a)                                                                 (b)

Figure 13.7 (a) Proﬁles of ridge coefficients for the prostate cancer example vs bound on 2 norm of w,
so small t (large λ) is on the left. The vertical line is the value chosen by 5-fold CV using the 1SE rule.
Based on Figure 3.8 of (Hastie et al. 2009). Figure generated by ridgePathProstate. (b) Proﬁles of lasso
coefficients for the prostate cancer example vs bound on 1 norm of w, so small t (large λ) is on the left.
Based on Figure 3.10 of (Hastie et al. 2009). Figure generated by lassoPathProstate.

                      0.7                                                           0.7
                                     lcavol                                                       lcavol
                      0.6            lweight                                        0.6           lweight
                                     age                                                          age
                                     lbph                                                         lbph
                      0.5            svi                                            0.5           svi
                                     lcp                                                          lcp
                      0.4            gleason                                        0.4           gleason
                                     pgg45                                                        pgg45
                      0.3                                                           0.3

                      0.2                                                           0.2

                      0.1                                                           0.1

                       0                                                             0

                  −0.1                                                             −0.1

                  −0.2                                                             −0.2
                            0              0.5            1        1.5         2          1   2            3   4        5       6    7    8      9
                                                          τ                                                         lars step


                                                     (a)                                                            (b)

Figure 13.8 Illustration of piecewise linearity of regularization path for lasso on the prostate cancer
example. (a) We plot ŵj (B) vs B for the critical values of B. (b) We plot vs steps of the LARS algorithm.
Figure generated by lassoPathProstate.



B, the coefficients gradually “turn on”. But for any value between 0 and Bmax = ||ŵOLS ||1 ,
the solution is sparse.4
   Remarkably, it can be shown that the solution path is a piecewise linear function of B (Efron
et al. 2004). That is, there are a set of critical values of B where the active set of non-zero
coefficients changes. For values of B between these critical values, each non-zero coefficient
increases or decreases in a linear fashion. This is illustrated in Figure 13.8(a). Furthermore,
one can solve for these critical values analytically. This is the basis of the LARS algorithm
(Efron et al. 2004), which stands for “least angle regression and shrinkage” (see Section 13.4.2
for details). Remarkably, LARS can compute the entire regularization path for roughly the same

4. It is common to plot the solution versus the shrinkage factor, deﬁned as s(B) = B/Bmax , rather than against B.
This merely affects the scale of the horizontal axis, not the shape of the curves.
438                                                                  Chapter 13. Sparse linear models



                           Original (D = 4096, number of nonzeros = 160)
                     1
                     0
                   −1
                      0           1000         2000         3000         4000
                   L1 reconstruction (K0 = 1024, lambda = 0.0516, MSE = 0.0027)
                     1
                     0
                   −1
                      0           1000         2000         3000         4000
                                    Debiased (MSE = 3.26e−005)
                     1
                     0
                   −1
                      0           1000         2000         3000         4000
                              Minimum norm solution (MSE = 0.0292)
                   0.5
                     0
                  −0.5
                      0           1000         2000         3000         4000


Figure 13.9 Example of recovering a sparse signal using lasso. See text for details. Based on Figure 1 of
(Figueiredo et al. 2007). Figure generated by sparseSensingDemo, written by Mario Figueiredo.



computational cost as a single least squares ﬁt (namely O(min(N D2 , DN 2 )).
   In Figure 13.8(b), we plot the coefficients computed at each critical value of B. Now the
piecewise linearity is more evident. Below we display the actual coefficient values at each step
along the regularization path (the last line is the least squares solution):

                             Listing 13.1 Output of lassoPathProstate
           0          0           0           0           0           0            0           0
      0.4279          0           0           0           0           0            0           0
      0.5015     0.0735           0           0           0           0            0           0
      0.5610     0.1878           0           0      0.0930           0            0           0
      0.5622     0.1890           0      0.0036      0.0963           0            0           0
      0.5797     0.2456           0      0.1435      0.2003           0            0      0.0901
      0.5864     0.2572     -0.0321      0.1639      0.2082           0            0      0.1066
      0.6994     0.2910     -0.1337      0.2062      0.3003     -0.2565            0      0.2452
      0.7164     0.2926     -0.1425      0.2120      0.3096     -0.2890      -0.0209      0.2773

    By changing B from 0 to Bmax , we can go from a solution in which all the weights are zero
to a solution in which all weights are non-zero. Unfortunately, not all subset sizes are achievable
using lasso. One can show that, if D > N , the optimal solution can have at most N variables in
it, before reaching the complete set corresponding to the OLS solution of minimal 1 norm. In
Section 13.5.3, we will see that by using an 2 regularizer as well as an 1 regularizer (a method
known as the elastic net), we can achieve sparse solutions which contain more variables than
training cases. This lets us explore model sizes between N and D.
         13.3. 1 regularization: basics                                                                   439


13.3.5   Model selection
         It is tempting to use 1 regularization to estimate the set of relevant variables. In some cases,
         we can recover the true sparsity pattern of w∗ , the parameter vector that generated the data.
         A method that can recover the true model in the N → ∞ limit is called model selection
         consistent. The details on which methods enjoy this property, and when, are beyond the scope
         of this book; see e.g., (Buhlmann and van de Geer 2011) for details.
            Instead of going into a theoretical discussion, we will just show a small example. We ﬁrst
         generate a sparse signal w∗ of size D = 4096, consisting of 160 randomly placed ±1 spikes.
         Next we generate a random design matrix X of size N × D, where N = 1024. Finally we
         generate a noisy observation y = Xw∗ + , where i ∼ N (0, 0.012 ). We then estimate w from
         y and X.
            The original w∗ is shown in the ﬁrst row of Figure 13.9. The second row is the 1 estimate
         ŵL1 using λ = 0.1λmax . We see that this has “spikes” in the right places, but they are too
         small. The third row is the least squares estimate of the coefficients which are estimated to be
         non-zero based on supp(ŵL1 ). This is called debiasing, and is necessary because lasso shrinks
         the relevant coefficients as well as the irrelevant ones. The last row is the least squares estimate
         for all the coefficients jointly, ignoring sparsity. We see that the (debiased) sparse estimate
         is an excellent estimate of the original signal. By contrast, least squares without the sparsity
         assumption performs very poorly.
            Of course, to perform model selection, we have to pick λ. It is common to use cross validation.
         However, it is important to note that cross validation is picking a value of λ that results in good
         predictive accuracy. This is not usually the same value as the one that is likely to recover the
         “true” model. To see why, recall that 1 regularization performs selection and shrinkage, that is,
         the chosen coefficients are brought closer to 0. In order to prevent relevant coefficients from
         being shrunk in this way, cross validation will tend to pick a value of λ that is not too large. Of
         course, this will result in a less sparse model which contains irrelevant variables (false positives).
         Indeed, it was proved in (Meinshausen and Buhlmann 2006) that the prediction-optimal value
         of λ does not result in model selection consistency. In Section 13.6.2, we will discuss some
         adaptive mechanisms for automatically tuning λ on a per-dimension basis that does result in
         model selection consistency.
            A downside of using 1 regularization to select variables is that it can give quite different
         results if the data is perturbed slightly. The Bayesian approach, which estimates posterior
         marginal inclusion probabilities, p(γj = 1|D), is much more robust. A frequentist solution to
         this is to use bootstrap resampling (see Section 6.2.1), and to rerun the estimator on different
         versions of the data. By computing how often each variable is selected across different trials,
         we can approximate the posterior inclusion probabilities. This method is known as stability
         selection (Meinshausen and BÃijhlmann 2010).
            We can threshold the stability selection (bootstrap) inclusion probabilities at some level, say
         90%, and thus derive a sparse estimator. This is known as bootstrap lasso or bolasso (Bach
         2008). It will include a variable if it occurs in at least 90% of sets returned by lasso (for a ﬁxed
         λ). This process of intersecting the sets is a way of eliminating the false positives that vanilla
         lasso produces. The theoretical results in (Bach 2008) prove that bolasso is model selection
         consistent under a wider range of conditions than vanilla lasso.
            As an illustration, we reproduced the experiments in (Bach 2008). In particular, we created
         440                                                                                                                                                     Chapter 13. Sparse linear models

                                                                                                                  bolasso on sign inconsistent data                                            lasso vs bolasso on sign inconsistent data
                                           lasso on sign inconsistent data
                                                                                                                           128 bootstraps                                                       nbootstraps = [0,2,4,8,16,32,64,128,256]
                                                                                  1
                                                                                                                                                           1                              1
                                  2                                               0.9                                                                                                                                                       lasso
                                                                                                         2                                                 0.9                                                                              bolasso
                                  4                                               0.8                                                                      0.8
                                                                                                         4
                                                                                  0.7




                                                                                                                                                                    P(correct support)
                                                                                                                                                           0.7
                                  6




                 variable index




                                                                                        variable index
                                                                                                         6
                                                                                  0.6                                                                      0.6
                                  8                                                                      8
                                                                                  0.5                                                                      0.5                           0.5
                                  10                                              0.4                    10                                                0.4

                                  12                                              0.3                                                                      0.3
                                                                                                         12
                                                                                  0.2                                                                      0.2
                                  14                                                                     14
                                                                                  0.1                                                                      0.1
                                  16                                                                     16
                                                                                  0                                                                        0                              0
                                       0       5                   10        15                               0        5                   10         15                                   0           5                      10                      15
                                                     −log(λ)                                                                 −log(λ)                                                                           −log(λ)



                                                           (a)                                                                    (b)                                                                         (c)

         Figure 13.10 (a) Probability of selection of each variable (white = large probabilities, black = small proba-
         bilities) vs. regularization parameter for Lasso. As we move from left to right, we decrease the amount of
         regularization, and therefore select more variables. (b) Same as (a) but for bolasso. (c) Probability of correct
         sign estimation vs. regularization parameter. Bolasso (red, dashed) and Lasso (black, plain): The number
         of bootstrap replications is in {2, 4, 8, 16, 32, 64, 128, 256}. Based on Figures 1-3 of (Bach 2008). Figure
         generated by bolassoDemo.



         256 datasets of size N = 1000 with D = 16 variables, of which 8 are relevant. See (Bach 2008)
         for more detail on the experimental setup. For dataset n, variable j, and sparsity level k, deﬁne
         S(j, k, n) = I(ŵj (λk , Dn ) = 0). Now deﬁneP (j, k) be the average of S(j, k, n) over the 256
         datasets. In Figure 13.10(a-b), we plot P vs − log(λ) for lasso and bolasso. We see that for
         bolasso, there is a large range of λ where the true variables are selected, but this is not the
         case for lasso. This is emphasized in Figure 13.10(c), where we plot the empirical probability that
         the correct set of variables is recovered, for lasso and for bolasso with an increasing number of
         bootstrap samples. Of course, using more samples takes longer. In practice, 32 bootstraps seems
         to be a good compromise between speed and accuracy.
            With bolasso, there is the usual issue of picking λ. Obviously we could use cross validation,
         but plots such as Figure 13.10(b) suggest another heuristic: shuffle the rows to create a large
         black block, and then pick λ to be in the middle of this region. Of course, operationalizing this
         intuition may be tricky, and will require various ad-hoc thresholds (it is reminiscent of the “ﬁnd
         the knee in the curve” heuristic discussed in Section 11.5.2 when discussing how to pick K for
         mixture models). A Bayesian approach provides a more principled method for selecting λ.

13.3.6   Bayesian inference for linear models with Laplace priors
         We have been focusing on MAP estimation in sparse linear models. It is also possible to perform
         Bayesian inference (see e.g., (Park and Casella 2008; Seeger 2008)). However, the posterior mean
         and median, as well as samples from the posterior, are not sparse; only the mode is sparse. This
         is another example of the phenomenon discussed in Section 5.2.1, where we said that the MAP
         estimate is often untypical of the bulk of the posterior.
            Another argument in favor of using the posterior mean comes from Equation 5.108, which
         showed that that plugging in the posterior mean, rather than the posterior mode, is the optimal
         thing to do if we want to minimize squared prediction error. (Schniter et al. 2008) shows
         experimentally, and (Elad and Yavnch 2009) shows theoretically, that using the posterior mean
         with a spike-and-slab prior results in better prediction accuracy than using the posterior mode
         with a Laplace prior, albeit at slightly higher computational cost.
         13.4. 1 regularization: algorithms                                                             441


 13.4        1   regularization: algorithms
         In this section, we give a brief review of some algorithms that can be used to solve 1 regularized
         estimation problems. We focus on the lasso case, where we have a quadratic loss. However,
         most of the algorithms can be extended to more general settings, such as logistic regression (see
         (Yaun et al. 2010) for a comprehensive review of 1 regularized logistic regression). Note that this
         area of machine learning is advancing very rapidly, so the methods below may not be state of
         the art by the time you read this chapter. (See (Schmidt et al. 2009; Yaun et al. 2010; Yang et al.
         2010) for some recent surveys.)

13.4.1   Coordinate descent
         Sometimes it is hard to optimize all the variables simultaneously, but it easy to optimize them
         one by one. In particular, we can solve for the j’th coefficient with all the others held ﬁxed:
                 wj∗ = argmin f (w + zej ) − f (w)                                                    (13.65)
                          z

         where ej is the j’th unit vector. We can either cycle through the coordinates in a deterministic
         fashion, or we can sample them at random, or we can choose to update the coordinate for
         which the gradient is steepest.
            The coordinate descent method is particularly appealing if each one-dimensional optimization
         problem can be solved analytically For example, the shooting algorithm (Fu 1998; Wu and Lange
         2008) for lasso uses Equation 13.54 to compute the optimal value of wj given all the other
         coefficients. See Algorithm 7 for the pseudo code (and LassoShooting for some Matlab code).
            See (Yaun et al. 2010) for some extensions of this method to the logistic regression case. The
         resulting algorithm was the fastest method in their experimental comparison, which concerned
         document classiﬁcation with large sparse feature vectors (representing bags of words). Other
         types of data (e.g., dense features and/or regression problems) might call for different algorithms.

          Algorithm 13.1: Coordinate descent for lasso (aka shooting algorithm)
         1   Initialize w = (XT X + λI)−1 XT y;
         2   repeat
         3        for j = 1, . . . , D do
                      aj = 2 i=1 x2ij ;
                                  n
         4
                                  n
         5            cj = 2 i=1 xij (yi − wT xi + wj xij ) ;
                                     c
         6            wj = soft( ajj , aλj );
         7   until converged;



13.4.2   LARS and other homotopy methods
         The problem with coordinate descent is that it only updates one variable at a time, so can be
         slow to converge. Active set methods update many variables at a time. Unfortunately, they are
         442                                                               Chapter 13. Sparse linear models


         more complicated, because of the need to identify which variables are constrained to be zero,
         and which are free to be updated.
            Active set methods typically only add or remove a few variables at a time, so they can take a
         long if they are started far from the solution. But they are ideally suited for generating a set of
         solutions for different values of λ, starting with the empty set, i.e., for generating regularization
         path. These algorithms exploit the fact that one can quickly compute ŵ(λk ) from ŵ(λk−1 )
         if λk ≈ λk−1 ; this is known as warm starting. In fact, even if we only want the solution for
         a single value of λ, call it λ∗ , it can sometimes be computationally more efficient to compute
         a set of solutions, from λmax down to λ∗ , using warm-starting; this is called a continuation
         method or homotopy method. This is often much faster than directly “cold-starting” at λ∗ ; this
         is particularly true if λ∗ is small.
            Perhaps the most well-known example of a homotopy method in machine learning is the
         LARS algorithm, which stands for “least angle regression and shrinkage” (Efron et al. 2004) (a
         similar algorithm was independently invented in (Osborne et al. 2000b,a)). This can compute
         ŵ(λ) for all possible values of λ in an efficient manner.
            LARS works as follows. It starts with a large value of λ, such that only the variable that is most
         correlated with the response vector y is chosen. Then λ is decreased until a second variable
         is found which has the same correlation (in terms of magnitude) with the current residual as
         the ﬁrst variable, where the residual at step k is deﬁned as rk = y − X:,Fk wk , where Fk is
         the current active set (c.f., Equation 13.50). Remarkably, one can solve for this new value of
         λ analytically, by using a geometric argument (hence the term “least angle”). This allows the
         algorithm to quickly “jump” to the next point on the regularization path where the active set
         changes. This repeats until all the variables are added.
            It is necessary to allow variables to be removed from the active set if we want the sequence of
         solutions to correspond to the regularization path of lasso. If we disallow variable removal, we
         get a slightly different algorithm called LAR, which tends to be faster. In particular, LAR costs
         the same as a single ordinary least squares ﬁt, namely O(N D min(N, D)), which is O(N D2 )
         if N > D, and O(N 2 D) if D > N . LAR is very similar to greedy forward selection, and a
         method known as least squares boosting (see Section 16.4.6).
            There have been many attempts to extend the LARS algorithm to compute the full regulariza-
         tion path for 1 regularized GLMs, such as logistic regression. In general, one cannot analytically
         solve for the critical values of λ. Instead, the standard approach is to start at λmax , and then
         slowly decrease λ, tracking the solution as we go; this is called a continuation method or
         homotopy method. These methods exploit the fact that we can quickly compute ŵ(λk ) from
         ŵ(λk−1 ) if λk ≈ λk−1 ; this is known as warm starting. Even if we don’t want the full path,
         this method is often much faster than directly “cold-starting” at the desired value of λ (this is
         particularly true if λ is small).
            The method described in (Friedman et al. 2010) combines coordinate descent with this warm-
         starting strategy, and computes the full regularization path for any 1 regularized GLM. This has
         been implemented in the glmnet package, which is bundled with PMTK.

13.4.3   Proximal and gradient projection methods
         In this section, we consider some methods that are suitable for very large scale problems, where
         homotopy methods made be too slow. These methods will also be easy to extend to other kinds
           13.4. 1 regularization: algorithms                                                            443


           of regularizers, beyond 1 , as we will see later. Our presentation in this section is based on
           (Vandenberghe 2011; Yang et al. 2010).
              Consider a convex objective of the form

              f (θ) = L(θ) + R(θ)                                                                      (13.66)
           where L(θ) (representing the loss) is convex and differentiable, and R(θ) (representing the
           regularizer) is convex but not necessarily differentiable. For example, L(θ) = RSS(θ) and
           R(θ) = λ||θ||1 corresponds to the BPDN problem. As another example, the lasso problem can
           be formulated as follows: L(θ) = RSS(θ) and R(θ) = IC (θ), where C = {θ : ||θ||1 ≤ B},
           and IC (θ) is the indicator function of a convex set C, deﬁned as
                         
                            0     θ∈C
              IC (θ)                                                                            (13.67)
                            +∞ otherwise
              In some cases, it is easy to optimize functions of the form in Equation 13.66. For example,
           suppose L(θ) = RSS(θ), and the design matrix is simply X = I. Then the obective becomes
           f (θ) = R(θ) + 12 ||θ − y|22 . The minimizer of this is given by proxR (y), which is the proximal
           operator for the convex function R, deﬁned by
                                    
                                               1
               proxR (y) = argmin R(z) + ||z − y||22                                                   (13.68)
                               z               2
           Intuitively, we are returning a point that minimizes R but which is also close (proximal) to y.
           In general, we will use this operator inside an iterative optimizer, in which case we want to stay
           close to the previous iterate. In this case, we use
                                      
                                                  1
              proxR (θ k ) = argmin R(z) + ||z − θ k ||22                                              (13.69)
                                 z                2
              The key issues are: how do we efficiently compute the proximal operator for different regu-
           larizers R, and how do we extend this technique to more general loss functions L? We discuss
           these issues below.

13.4.3.1   Proximal operators
           If R(θ) = λ||θ||1 , the proximal operator is given by componentwise soft-thresholding:

              proxR (θ) = soft(θ, λ)                                                                   (13.70)

           as we showed in Section 13.3.2. If R(θ) = λ||θ||0 , the proximal operator is given by componen-
           twise hard-thresholding:
                                    √
              proxR (θ) = hard(θ, 2λ)                                                                (13.71)

           where hard(u, a)  uI(|u| > a).
             If R(θ) = IC (θ), the proximal operator is given by the projection onto the set C:

              proxR (θ) = argmin ||z − θ||22 = projC (θ)                                               (13.72)
                             z∈C
           444                                                                    Chapter 13. Sparse linear models




           Figure 13.11 Illustration of projected gradient descent. The step along the negative gradient, to θ k − gk ,
           takes us outside the feasible set. If we project that point onto the closest point in the set we get
           θ k+1 = projΘ (θ k − gk ). We can then derive the implicit update direction using dk = θ k+1 − θ k . Used
           with kind permission of Mark Schmidt.



             For some convex sets, it is easy to compute the projection operator. For example, to project
           onto the rectangular set deﬁned by the box constraints C = {θ : j ≤ θj ≤ uj } we can use
                            ⎧
                            ⎨ j θ j ≤  j
              projC (θ)j =     θj j ≤ θj ≤ uj                                                     (13.73)
                            ⎩
                               uj θj ≥ uj

           To project onto the Euclidean ball C = {θ : ||θ||2 ≤ 1} we can use
                            θ
                               ||θ||2 ||θ||2 > 1
              projC (θ) =                                                                                       (13.74)
                              θ       ||θ||2 ≤ 1

           To project onto the 1-norm ball C = {θ : ||θ||1 ≤ 1} we can use

              projC (θ) = soft(θ, λ)                                                                            (13.75)
           where λ = 0 if ||θ||1 ≤ 1, and otherwise λ is the solution to the equation

              
              D
                       max(|θj | − λ, 0) = 1                                                                    (13.76)
                 j=1

           We can implement the whole procedure in O(D) time, as explained in (Duchi et al. 2008).
             We will see an application of these different projection methods in Section 13.5.1.2.

13.4.3.2   Proximal gradient method
           We now discuss how to use the proximal operator inside of a gradient descent routine. The
           basic idea is to minimize a simple quadratic approximation to the loss function, centered on the
           13.4. 1 regularization: algorithms                                                             445


           θk :
                                                                           1
                  θ k+1   =    argmin R(z) + L(θ k ) + gkT (z − θ k ) +       ||z − θ k ||22            (13.77)
                                  z                                       2tk
           where gk = ∇L(θ k ) is the gradient of the loss, tk is a constant discussed below, and the last
           term arises from a simple approximation to the Hessian of the loss of the form ∇2 L(θ k ) ≈ t1k I.
              Dropping terms that are independent of z, and multiplying by tk , we can rewrite the above
           expression in terms of a proximal operator as follows:
                                                           
                                              1           2
              θ k+1 = argmin tk R(z) + ||z − uk ||2 = proxtk R (uk )                                 (13.78)
                              z               2
                 u k = θ k − t k gk                                                                  (13.79)
                 gk = ∇L(θ k )                                                                       (13.80)
           If R(θ) = 0, this is equivalent to gradient descent. If R(θ) = IC (θ), the method is equivalent
           to projected gradient descent, sketched in Figure 13.11. If R(θ) = λ||θ||1 , the method is
           known as iterative soft thresholding.
              There are several ways to pick tk , or equivalently, αk = 1/tk . Given that αk I is an approxi-
           mation to the Hessian ∇2 L, we require that
                  αk (θ k − θ k−1 ) ≈ gk − gk−1                                                         (13.81)
           in the least squares sense. Hence
                                                                       (θ k − θ k−1 )T (gk − gk−1 )
                  αk = argmin ||α(θ k − θ k−1 ) − (gk − gk−1 )||22 =                                    (13.82)
                           α                                           (θ k − θ k−1 )T (θ k − θ k−1 )
           This is known as the Barzilai-Borwein (BB) or spectral stepsize (Barzilai and Borwein 1988;
           Fletcher 2005; Raydan 1997). This stepsize can be used with any gradient method, whether
           proximal or not. It does not lead to monotonic decrease of the objective, but it is much faster
           than standard line search techniques. (To ensure convergence, we require that the objective
           decrease “on average”, where the average is computed over a sliding window of size M + 1.)
              When we combine the BB stepsize with the iterative soft thresholding technique (for R(θ) =
           λ||θ||1 ), plus a continuation method that gradually reduces λ, we get a fast method for the
           BPDN problem known as the SpaRSA algorithm, which stands for “sparse reconstruction by
           separable approximation” (Wright et al. 2009). However, we will call it the iterative shrinkage and
           thresholding algorithm. See Algorithm 12 for some pseudocode, and SpaRSA for some Matlab
           code. See also Exercise 13.11 for a related approach based on projected gradient descent.

13.4.3.3   Nesterov’s method
           A faster version of proximal gradient descent can be obtained by epxanding the quadratic
           approximation around a point other than the most recent parameter value. In particular, consider
           performing updates of the form
                  θ k+1   =    proxtk R (φk − tk gk )                                                   (13.83)
                     gk   =    ∇L(φk )                                                                  (13.84)
                                    k−1
                    φk    =    θk +     (θ k − θ k−1 )                                                  (13.85)
                                    k+2
446                                                                Chapter 13. Sparse linear models


 Algorithm 13.2: Iterative Shrinkage-Thresholding Algorithm (ISTA)
 1   Input: X ∈ RN ×D , y ∈ RN , parameters λ ≥ 0, M ≥ 1, 0 < s < 1 ;
2    Initialize θ 0 = 0, α = 1, r = y, λ0 = ∞;
3    repeat
4         λt = max(s||XT r||∞ , λ) // Adapt the regularizer ;
5         repeat
6             g = ∇L(θ);
7             u = θ − α1 g;
8             θ = soft(u, λαt );
9             Update α using BB stepsize in Equation 13.82 ;
10        until f (θ) increased too much within the past M steps;
11        r = y − Xθ // Update residual ;
12   until λt = λ;



                                                   γ


                                                        τj


                                                        wj
                                                             D


                                                        yi
                                       2
                                   σ
                                                        xi
                                                             N


                Figure 13.12 Representing lasso using a Gaussian scale mixture prior.



This is known as Nesterov’s method (Nesterov 2004; Tseng 2008). As before, there are a variety
of ways of setting tk ; typically one uses line search.
   When this method is combined with the iterative soft thresholding technique (for R(θ) =
λ||θ||1 ), plus a continuation method that gradually reduces λ, we get a fast method for the
BPDN problem known as the fast iterative shrinkage thesholding algorithm or FISTA (Beck
and Teboulle 2009).
           13.4. 1 regularization: algorithms                                                                                  447


 13.4.4    EM for lasso
           In this section, we show how to solve the lasso problem using lasso. At ﬁrst sight, this might
           seem odd, since there are no hidden variables. The key insight is that we can represent the
           Laplace distribution as a Gaussian scale mixture (GSM) (Andrews and Mallows 1974; West 1987)
           as follows:
                                              
                                  γ                                  γ2
               Lap(wj |0, 1/γ) = e−γ|wj | = N (wj |0, τj2 )Ga(τj2 |1, )dτj2                         (13.86)
                                   2                                  2
           Thus the Laplace is a GSM where the mixing distibution on the variances is the exponential
                                       2               2
           distribution, Expon(τj2 | γ2 = Ga(τj2 |1, γ2 ). Using this decomposition, we can represent the
           lasso model as shown in Figure 13.12. The corresponding joint distribution has the form
               p(y, w, τ , σ 2 |X)      =     N (y|Xw, σ 2 IN ) N (w|0, Dτ )
                                                                ⎡                   ⎤
                                                                  
                                              IG(σ 2 |aσ , bσ ) ⎣ Ga(τj2 |1, γ 2 /2)⎦                                        (13.87)
                                                                     j

           where Dτ = diag(τj2 ), and where we have assumed for notational simplicity that X is stan-
           dardized and that y is centered (so we can ignore the offset term μ). Expanding out, we
           get
                                                   
                            2
                                     2 −N/2          1                      1
               p(y, w, τ , σ |X) ∝ σ          exp − 2 ||y − Xw||22 |Dτ |− 2
                                                      2σ
                                        
                                            1
                                    exp − wT Dτ w (σ 2 )−(aσ +1)
                                            2
                                                          γ2
                                    exp(−bσ /σ 2 )   exp(− τj2 )                               (13.88)
                                                   j
                                                            2

             Below we describe how to apply the EM algorithm to the model in Figure 13.12.5 In brief, in
           the E step we infer τj2 and σ 2 , and in the M step we estimate w. The resulting estimate ŵ is
           the same as the lasso estimator. This approach was ﬁrst proposed in (Figueiredo 2003) (see also
           (Griffin and Brown 2007; Caron and Doucet 2008; Ding and Harrison 2010) for some extensions).

13.4.4.1   Why EM?
           Before going into the details of EM, it is worthwhile asking why we are presenting this approach
           at all, given that there are a variety of other (often much faster) algorithms that directly solve the
           1 MAP estimation problem (see linregFitL1Test for an empirical comparison). The reason
           is that the latent variable perspective brings several advantages, such as the following:
           • It provides an easy way to derive an algorithm to ﬁnd 1 -regularized parameter estimates for
             a variety of other models, such as robust linear regression (Exercise 11.12) or probit regression
             (Exercise 13.9).
           5. To ensure the posterior is unimodal, one can follow (Park and Casella 2008) and slightly modify the model by
           making the prior variance for the weights depend on the observation noise: p(wj |τj2 , σ 2 ) = N (wj |0, σ 2 τj2 ). The EM
           algorithm is easy to modify.
           448                                                                     Chapter 13. Sparse linear models


           • It suggests trying other priors on the variances besides Ga(τj2 |1, γ 2 /2). We will consider
             various extensions below.

           • It makes it clear how we can compute the full posterior, p(w|D), rather than just a MAP
             estimate. This technique is known as the Bayesian lasso (Park and Casella 2008; Hans 2009).

13.4.4.2   The objective function
           From Equation 13.88, the complete data penalized log likelihood is as follows (dropping terms
           that do not depend on w)
                                 1                 1
              c (w)    =   −      2
                                     ||y − Xw||22 − wT Λw + const                                              (13.89)
                                2σ                 2
           where Λ = diag( τ12 ) is the precision matrix for w.
                                j



13.4.4.3   The E step
                                      +             ,
                                           1
           The key is to compute E        τj2
                                              |wj    . We can derive this directly (see Exercise 13.8). Alternatively,
           we can derive the full posterior, which is given by the following (Park and Casella 2008):
                                                       7
                                                          γ2 2
              p(1/τj2 |w, D) = InverseGaussian                ,γ                                      (13.90)
                                                          wj2

           (Note that the inverse Gaussian distribution is also known as the Wald distribution.) Hence
                        
                   1           γ
              E 2 |wj =                                                                             (13.91)
                  τj          |wj |
                                          
           Let Λ = diag(E 1/τ12 , . . . , E 1/τD2
                                                   ) denote the result of this E step.
                                    2
             We also need to infer σ . It is easy to show that that the posterior is
                                                 1
              p(σ 2 |D, w) = IG(aσ + (N )/2, bσ + (y − Xŵ)T (y − Xŵ)) = IG(aN , bN )                         (13.92)
                                                 2
           Hence
                      aN
             E 1/σ 2 =    ω                                                                                   (13.93)
                       bN

13.4.4.4   The M step
           The M step consists of computing
                           1               1
              ŵ = argmax − ω||y − Xw||22 − wT Λw                                                              (13.94)
                      w    2               2
           This is just MAP estimation under a Gaussian prior:

              ŵ = (σ 2 Λ + XT X)−1 XT y                                                                       (13.95)
           13.5. 1 regularization: extensions                                                           449


           However, since we expect many wj = 0, we will have τj2 = 0 for many j, making inverting Λ
           numerically unstable. Fortunately, we can use the SVD of X, given by X = UDVT , as follows:
                                              1 −2 −1 −1 T
                ŵ   =    ΨV(VT ΨV +            D ) D U y                                             (13.96)
                                              ω
           where
                         −1             1              |wj |
                Ψ=Λ           = diag(       ) = diag(       )                                       (13.97)
                                     E 1/τj2          π (wj )

13.4.4.5   Caveat
           Since the lasso objective is convex, this method should always ﬁnd the global optimum. Unfor-
           tunately, this sometimes does not happen, for numerical reasons. In particular, suppose that in
           the true solution, wj∗ = 0. Further, suppose that we set ŵj = 0 in an M step. In the following E
           step we infer that τj2 = 0, so then we set ŵj = 0 again; thus we can never “undo” our mistake.
           Fortunately, in practice, this situation seems to be rare. See (Hunter and Li 2005) for further
           discussion.

  13.5      1   regularization: extensions
           In this section, we discuss various extensions of “vanilla” 1 regularization.

 13.5.1    Group Lasso
           In standard 1 regularization, we assume that there is a 1:1 correspondence between parameters
           and variables, so that if ŵj = 0, we interpret this to mean that variable j is excluded. But
           in more complex models, there may be many parameters associated with a given variable. In
           particular, we may have a vector of weights for each input, wj . Here are some examples:

           • Multinomial logistic regression Each feature is associated with C different weights, one
             per class.
           • Linear regression with categorical inputs Each scalar input is one-hot encoded into a
             vector of length C.
           • Multi-task learning In multi-task learning, we have multiple related prediction problems.
             For example, we might have C separate regression or binary classiﬁcation problems. Thus
             each feature is associated with C different weights. We may want to use a feature for all of
             the tasks or none of the tasks, and thus select weights at the group level (Obozinski et al.
             2007).

              If we use an 1 regularizer of the form ||w|| = j c |wjc |, we may end up with with some
           elements of wj,: being zero and some not. To prevent this kind of situation, we partition the
           parameter vector into G groups. We now minimize the following objective
                                       
                                       G
                J(w) = NLL(w) +              λg ||wg ||2                                              (13.98)
                                       g=1
           450                                                                           Chapter 13. Sparse linear models


           where
                            7
               ||wg ||2 =               wj2                                                                        (13.99)
                               j∈g

           is the 2-norm of the group weight vector. If the NLL is least squares, this method is called
           group lasso (Yuan and Lin 2006).                                      
              We often use a larger penalty for larger groups, by setting λg = λ dg , where dg is the
           number of elements in group g. For example, if we have groups {1, 2} and {3, 4, 5}, the
           objective becomes
                                     2                                        
                                     √                    √ 2
               J(w) = NLL(w) + λ       2 (w12 + w22 |) + 3 (w32 + w42 + w52 )                   (13.100)

           Note that if we had used the square of the 2-norms, the model would become equivalent to
           ridge regression, since
               
               G                   
                     ||wg ||22 =               wj2 = ||w||22                                                      (13.101)
               g=1                  g    j∈g

           By using the square root, we are penalizing the radius of a ball containing the group’s weight
           vector: the only way for the radius to be small is if all elements are small. Thus the square root
           results in group sparsity.
              A variant of this technique replaces the 2-norm with the inﬁnity-norm (Turlach et al. 2005;
           Zhao et al. 2005):
               ||wg ||∞ = max |wj |                                                                               (13.102)
                              j∈g

           It is clear that this will also result in group sparsity.
              An illustration of the difference is shown in Figures 13.13 and 13.14. In both cases, we have a
           true signal w of size D = 212 = 4096, divided into 64 groups each of size 64. We randomly
           choose 8 groups of w and assign them non-zero values. In the ﬁrst example, the values are
           drawn from a N (0, 1). In the second example, the values are all set to 1. We then pick a random
           design matrix X of size N × D, where N = 210 = 1024. Finally, we generate y = Xw + ,
           where  ∼ N (0, 10−4 IN ). Given this data, we estimate the support of w using 1 or group 1 ,
           and then estimate the non-zero values using least squares. We see that group lasso does a much
           better job than vanilla lasso, since it respects the known group structure.6 We also see that the
           ∞ norm has a tendency to make all the elements within a block to have similar magnitude.
           This is appropriate in the second example, but not the ﬁrst. (The value of λ was the same in all
           examples, and was chosen by hand.)

13.5.1.1   GSM interpretation of group lasso
           Group lasso is equivalent to MAP estimation using the following prior
                                               γ
                                                  G
               p(w|γ, σ 2 ) ∝ exp −                  ||wg ||2                                                     (13.103)
                                               σ g=1

           6. The slight non-zero “noise” in the ∞ group lasso results is presumably due to numerical errors.
13.5. 1 regularization: extensions                                                                               451

                                       Original (D = 4096, number groups = 64, active groups = 8)
                            2

                            0

                        −2
                             0   500       1000      1500       2000       2500      3000       3500   4000
                                         Standard L1 (debiased 1, tau = 0.385, MSE = 0.06929)

                            2

                            0

                        −2

                             0   500       1000      1500       2000       2500      3000       3500   4000

                                                                (a)
                                        Block−L2 (debiased 1, tau = 0.385, MSE = 0.000351)

                        2

                        0

                       −2

                         0       500      1000       1500      2000       2500       3000       3500   4000
                                         Block−Linf (debiased 1, tau = 0.385, MSE = 0.053)

                        2

                        0

                       −2

                         0       500      1000       1500      2000       2500       3000       3500   4000


                                                                (b)

Figure 13.13 Illustration of group lasso where the original signal is piecewise Gaussian. Top left: original
signal. Bottom left:: vanilla lasso estimate. Top right: group lasso estimate using a 2 norm on the blocks.
Bottom right: group lasso estimate using an ∞ norm on the blocks. Based on Figures 3-4 of (Wright et al.
2009). Figure generated by groupLassoDemo, based on code by Mario Figueiredo.



Now one can show (Exercise 13.10) that this prior can be written as a GSM, as follows:
   wg |σ 2 , τg2   ∼   N (0, σ 2 τg2 Idg )                                                                    (13.104)
                           dg + 1 γ
          τg2 |γ   ∼   Ga(           , )                                                                      (13.105)
                              2        2
where dg is the size of group g. So we see that there is one variance term per group, each
of which comes from a Gamma prior, whose shape parameter depends on the group size, and
whose rate parameter is controlled by γ. Figure 13.15 gives an example, where we have 2 groups,
one of size 2 and one of size 3.
   This picture also makes it clearer why there should be a grouping effect. Suppose w1,1 is
small; then τ12 will be estimated to be small, which will force w1,2 to be small. Converseley,
suppose w1,1 is large; then τ12 will be estimated to be large, which will allow w1,2 to be become
large as well.
452                                                                                          Chapter 13. Sparse linear models



                                    Original (D = 4096, number groups = 64, active groups = 8)
                        1


                       0.5


                        0
                         0    500       1000        1500     2000        2500        3000    3500    4000
                                       Standard L1 (debiased 1, tau = 0.356, MSE = 0.1206)
                        1

                       0.5

                        0
                         0    500       1000        1500     2000        2500        3000    3500    4000

                                                              (a)
                                      Block−L2 (debiased 1, tau = 0.356, MSE = 0.000342)
                        1

                       0.5

                        0
                         0    500       1000        1500     2000        2500        3000     3500   4000
                                      Block−Linf (debiased 1, tau = 0.356, MSE = 0.000425)
                        1

                       0.5

                        0
                         0    500       1000        1500     2000        2500        3000     3500   4000


                                                              (b)

          Figure 13.14 Same as Figure 13.13, except the original signal is piecewise constant.




                                                               γ


                                               τ1                               τ2


                                         w11         w12            w21         w22         w23


                                                                    yi
                                          σ2
                                                                    xi



Figure 13.15 Graphical model for group lasso with 2 groups, the ﬁrst has size G1 = 2, the second has
size G2 = 3.
           13.5. 1 regularization: extensions                                                            453


13.5.1.2   Algorithms for group lasso
           There are a variety of algorithms for group lasso. Here we brieﬂy mention two. The ﬁrst
           approach is based on proximal gradient descent, discussed in Section 13.4.3. Since the regularizer
           is separable, R(w) = g ||wg ||p , the proximal operator decomposes into G separate operators
           of the form
              proxR (b) = argmin ||z − b||22 + λ||z||p                                               (13.106)
                             z∈RDg

           where b = θ kg − tk gkg . If p = 2, one can show (Combettes and Wajs 2005) that this can be
           implemented as follows
              proxR (b) = b − projλC (b)                                                              (13.107)
           where C = {z : ||z||2 ≤ 1} is the 2 ball. Using Equation 13.74, if ||b||2 < λ, we have
              proxR (b) = b − b = 0                                                                  (13.108)
           otherwise we have
                                     b       ||b||2 − λ
              proxR (b) = b − λ           =b                                                          (13.109)
                                   ||b||2       ||b||2
           We can combine these into a vectorial soft-threshold function as follows (Wright et al. 2009):
                                max(||b||2 − λ, 0)
              proxR (b) = b                                                                           (13.110)
                               max(||b||2 − λ, 0) + λ
           If p = ∞, we use C = {z : ||z||1 ≤ 1}, which is the 1 ball. We can project onto this in O(dg )
           time using an algorithm described in (Duchi et al. 2008).
              Another approach is to modify the EM algorithm. The method is almost the same as for
                                             2
           vanilla lasso. If we deﬁne τj2 = τg(j) , where g(j) is the group to which dimension j belongs,
           we can use the same full conditionals for σ 2 and w as before. The only changes are as follows:
           • We must modify the full conditional for the weight precisions, which are estimated based on
             a shared set of weights:
                                                        7
                  1          2                             γ 2 σ2
                     |γ, w, σ , y, X ∼ InverseGaussian(             , γ2)                          (13.111)
                 τg2                                      ||wg ||22

              where ||wg ||22 = j∈g wjg2
                                         . For the E step, we can use
                   
                     1          γσ
                E 2 =                                                                                 (13.112)
                    τg        ||wg ||2

           • We must modify the full conditional for the tuning parameter, which is now only estimated
             based on G values of τg2 :

                                              1 2
                                                        G
                     2
                 p(γ |τ ) = Ga(aγ + G/2, bγ +     τ )                                                 (13.113)
                                              2 g g
         454                                                                                                                                                 Chapter 13. Sparse linear models



                                  ●          ●
                                      ●
                                       ●                                   ●                 ●




                0.5
                                                          ●                                   ●       ●
                              ●
                                   ●                             ● ●          ●              ●
                                             ●●         ●       ●●
                                                                               ●
                        ●
                         ●                       ●    ●
                                                           ●              ●                              ●● ●        ●●
                              ●
                              ●    ●   ●●● ●          ●       ●                                  ●         ●●●       ●
                          ●          ●          ● ●                               ●
                       ●         ● ●           ●●● ●● ●          ●  ●     ●                                 ●     ●
                             ●● ●●● ● ● ●
                               ● ●      ● ●  ●● ● ●●●● ●         ● ● ●
                                                                                  ●                                   ●
                            ●                       ● ●●● ●                                ●    ●




                0.0
                           ●●    ●●●●● ● ●● ● ●●       ●           ●           ● ●
                                    ● ●●          ●●●●●  ● ●              ●      ●● ●     ●● ●             ●       ●
                         ●●●                        ●                                               ●
                       ●●●●●●●● ● ●● ●          ●● ● ● ●                               ●      ●             ●       ●●
                                                                                                                    ●
                                              ● ●● ●          ●     ●        ●                         ●
                           ● ●●         ●●●●● ●●       ●●●
                                                             ●
                                                                   ●
                                                                         ● ●            ●●        ● ●      ● ●
                                                                                                               ●
                                                                                                                ●
                                                                                                                    ●
                                          ●●           ● ●                                            ●
                         ●● ●●● ●     ●
                                            ●●           ● ●● ●      ●● ●      ● ●●        ●●
                                                                                                         ●●     ●
                                                        ●                    ● ● ●          ●●
                                                                                            ●               ●
                                                  ● ●           ●
                                                               ●●●     ●     ●                      ●
                                                                                    ●● ● ● ● ●●●● ● ● ● ●          ●
                        ● ●                   ●                             ●●        ●                 ●
                                                            ●     ● ● ●● ● ●                                      ●
                                                                                                                  ●● ●




          CGH
                                                                                        ●●         ●●




                −0.5
                                                                       ●●●      ●                 ●●            ●
                        ●                                 ●
                                                          ●                     ●      ●
                                                                                       ● ●                     ●●●
                                                             ●● ● ●
                                                             ●          ● ● ●         ● ● ●            ● ● ●
                                                                                                       ●       ●●
                                                                                                               ●
                                                   ●              ●● ●          ●        ● ●● ● ●
                                                           ●●                 ● ● ●            ●              ● ● ●
                                                                     ●● ● ●       ●● ●● ●                ●
                                                                                                     ● ●● ●         ●●
                                                                           ●●
                                                                            ●      ● ●
                                                                                         ●                       ●
                                                                         ●                      ●       ●     ● ●●
                                                               ● ● ● ●                                   ●
                                                   ●          ● ● ●                                    ●
                                                                                                   ●    ●
                                                                      ●                        ●




                −1.0
                                ●                             ●                        ●                           ●
                                           ●                                                    ●
                                                                                     ●●          ● ●
                                                                                                  ●
                                                                               ●                                       ●
                                                                                                     ●




                −1.5
                                                               ●



                       0                     100                     200                     300                      400

                                                                   Index




                                                              (a)                                                                      (b)                                  (c)

         Figure 13.16 (a) Example of the fused lasso. The vertical axis represents array CGH (chromosomal genome
         hybridization) intensity, and the horizontal axis represents location along a genome. Source: Figure 1 of
         (Hoeﬂing 2010). (b) Noisy image. (c) Fused lasso estimate using 2d lattice prior. Source: Figure 2 of
         (Hoeﬂing 2010). Used with kind permission of Holger Hoeﬂing.



13.5.2   Fused lasso
         In some problem settings (e.g., functional data analysis), we want neighboring coefficients to be
         similar to each other, in addition to being sparse. An example is given in Figure 13.16(a), where
         we want to ﬁt a signal that is mostly “off”, but in addition has the property that neighboring
         locations are typically similar in value. We can model this by using a prior of the form
                             ⎛                                        ⎞
                                   λ1 D
                                                  λ2 
                                                     D−1
            p(w|σ 2 ) ∝ exp ⎝−            |wj | −        |wj+1 − wj |⎠                               (13.114)
                                   σ j=1           σ j=1

         This is known as the fused lasso penalty. In the context of functional data analysis, we often
         use X = I, so there is one coefficient for each location in the signal (see Section 4.4.2.3). In this
         case, the overall objective has the form

                                                                                           
                                                                                           N                                   
                                                                                                                               N                  
                                                                                                                                                  N −1
                 J(w, λ1 , λ2 ) =                                                                           (yi − wi )2 + λ1         |wi | + λ2          |wi+1 − wi |                 (13.115)
                                                                                            i=1                                i=1                i=1

         This is a sparse version of Equation 4.148.
           It is possible to generalize this idea beyond chains, and to consider other graph structures,
         using a penalty of the form
                                                                
            J(w, λ1 , λ2 ) =     (ys − ws )2 + λ1      |ws | + λ2      |ws − wt |                (13.116)
                                                                                           s∈V                                 s∈V                 (s,t)∈E

         This is called graph-guided fused lasso (see e.g., (Chen et al. 2010)). The graph might come
         from some prior knowledge, e.g., from a database of known biological pathways. Another
         example is shown in Figure 13.16(b-c), where the graph structure is a 2d lattice.
           13.5. 1 regularization: extensions                                                             455


13.5.2.1   GSM interpretation of fused lasso
           One can show (Kyung et al. 2010) that the fused lasso model is equivalent to the following
           hierarchical model

              w|σ 2 , τ , ω   ∼   N (0, σ 2 Σ(τ , ω))                                                  (13.117)
                                           γ2
                    τj2 |γ1   ∼   Expon( 1 ), j = 1 : D                                                (13.118)
                                            2
                                           γ22
                    ωj2 |γ2   ∼   Expon( ), j = 1 : D − 1                                              (13.119)
                                            2
           where Σ = Ω−1 , and Ω is a tridiagonal precision matrix with
                                        1     1   1
              main diagonal       =   {     + 2 + 2}                                                   (13.120)
                                       τj2   ωj−1 ωj
                                           1
                off diagonal      =   {− 2 }                                                           (13.121)
                                          ωj

           where we have deﬁned ω0−2 = ωD     −2
                                                 = 0. This is very similar to the model in Section 4.4.2.3,
           where we used a chain-structured Gaussian Markov random ﬁeld as the prior, with ﬁxed vari-
           ance. Here we just let the variance be random. In the case of graph-guided lasso, the structure
           of the graph is reﬂected in the zero pattern of the Gaussian precision matrix (see Section 19.4.4).

13.5.2.2   Algorithms for fused lasso
           It is possible to generalize the EM algorithm to ﬁt the fused lasso model, by exploiting the
           Markov structure of the Gaussian prior for efficiency. Direct solvers (which don’t use the latent
           variable trick) can also be derived (see e.g., (Hoeﬂing 2010)). However, this model is undeniably
           more expensive to ﬁt than the other variants we have considered.

 13.5.3    Elastic net (ridge and lasso combined)
           Although lasso has proved to be effective as a variable selection technique, it has several
           problems (Zou and Hastie 2005), such as the following:

           • If there is a group of variables that are highly correlated (e.g., genes that are in the same
             pathway), then the lasso tends to select only one of them, chosen rather arbitrarily. (This
             is evident from the LARS algorithm: once one member of the group has been chosen, the
             remaining members of the group will not be very correlated with the new residual and hence
             will not be chosen.) It is usually better to select all the relevant variables in a group. If we
             know the grouping structure, we can use group lasso, but often we don’t know the grouping
             structure.
           • In the D > N case, lasso can select at most N variables before it saturates.

           • If N > D, but the variables are correlated, it has been empirically observed that the
             prediction performance of ridge is better than that of lasso.
           456                                                               Chapter 13. Sparse linear models


              Zou and Hastie (Zou and Hastie 2005) proposed an approach called the elastic net, which is
           a hybrid between lasso and ridge regression, which solves all of these problems. It is apparently
           called the “elastic net” because it is “like a stretchable ﬁshing net that retains ’all the big ﬁsh”’
           (Zou and Hastie 2005).

13.5.3.1   Vanilla version
           The vanilla version of the model deﬁnes the following objective function:
              J(w, λ1 , λ2 ) = ||y − Xw||2 + λ2 ||w||22 + λ1 ||w||1                                     (13.122)
           Notice that this penalty function is strictly convex (assuming λ2 > 0) so there is a unique global
           minimum, even if X is not full rank.
              It can be shown (Zou and Hastie 2005) that any strictly convex penalty on w will exhibit
           a grouping effect, which means that the regression coefficients of highly correlated variables
           tend to be equal (up to a change of sign if they are negatively correlated). For example, if two
           features are equal, so X:j = X:k , one can show that their estimates are also equal, ŵj = ŵk .
           By contrast, with lasso, we may have that ŵj = 0 and ŵk = 0 or vice versa.

13.5.3.2   Algorithms for vanilla elastic net
           It is simple to show (Exercise 13.5) that the elastic net problem can be reduced to a lasso problem
           on modiﬁed data. In particular, deﬁne
                                          
                            X                   y
                X̃ = c √          , ỹ =                                                                (13.123)
                           λ 2 ID            0D×1
                                 1
           where c = (1 + λ2 )− 2 . Then we solve
              w̃ = arg min ||ỹ − X̃w̃||2 + cλ1 ||w̃||1                                                  (13.124)
                         w̃

           and set w = cw̃.
              We can use LARS to solve this subproblem; this is known as the LARS-EN algorithm. If we
           stop the algorithm after m variables have been included, the cost is O(m3 + Dm2 ). Note that
           we can use m = D if we wish, since X̃ has rank D. This is in contrast to lasso, which cannot
           select more than N variables (before jumping to the OLS solution) if N < D.
              When using LARS-EN (or other 1 solvers), one typically uses cross-validation to select λ1 and
           λ2 .

13.5.3.3   Improved version
           Unfortunately it turns out that the “vanilla” elastic net does not produce functions that predict
           very accurately, unless it is very close to either pure ridge or pure lasso. Intuitively the reason
           is that it performs shrinkage twice: once due to the 2 penalty and again due to the 1 penalty.
           The solution is simple: undo the 2 shrinkage by scaling up the estimates from the vanilla
           version. In other words, if w∗ is the solution of Equation 13.124, then a better estimate is
                     
               ŵ = 1 + λ2 w̃                                                                           (13.125)
           13.6. Non-convex regularizers                                                                     457


           We will call this a corrected estimate.
            One can show that the corrected estimates are given by
                                   T
                                    X X + λ2 I
             ŵ = arg min w     T
                                                   w − 2yT Xw + λ1 ||w||1                              (13.126)
                          w            1 + λ2
           Now
              X T X + λ2 I
                           = (1 − ρ)Σ̂ + ρI                                                            (13.127)
                 1 + λ2
           where ρ = λ2 /(1 + λ2 ). So the the elastic net is like lasso but where we use a version of
           Σ̂ that is shrunk towards I. (See Section 4.2.6 for more discussion of regularized estimates of
           covariance matrices.)

13.5.3.4   GSM interpretation of elastic net
           The implicit prior being used by the elastic net obviously has the form
                               ⎛                              ⎞
                                   γ1 D
                                                   γ2  D
              p(w|σ 2 ) ∝ exp ⎝−          |wj | − 2        w2 ⎠                                        (13.128)
                                    σ j=1         2σ j=1 j

           which is just a product of Gaussian and Laplace distributions.
             This can be written as a hierarchical prior as follows (Kyung et al. 2010; Chen et al. 2011):
              wj |σ 2 , τj2   ∼   N (0, σ 2 (τj−2 + γ2 )−1 )                                           (13.129)
                                           γ12
                   τj2 |γ1    ∼   Expon(         )                                                     (13.130)
                                           2
           Clearly if γ2 = 0, this reduces to the regular lasso.
             It is possible to perform MAP estimation in this model using EM, or Bayesian inference using
           MCMC (Kyung et al. 2010) or variational Bayes (Chen et al. 2011).

  13.6     Non-convex regularizers
           Although the Laplace prior results in a convex optimization problem, from a statistical point
           of view this prior is not ideal. There are two main problems with it. First, it does not put
           enough probability mass near 0, so it does not sufficiently suppress noise. Second, it does
           not put enough probability mass on large values, so it causes shrinkage of relevant coefficients,
           corresponding to “signal”. (This can be seen in Figure 13.5(a): we see that 1 estimates of large
           coefficients are signiﬁcantly smaller than their ML estimates, a phenomenon known as bias.)
              Both problems can be solved by going to more ﬂexible kinds of priors which have a larger
           spike at 0 and heavier tails. Even though we cannot ﬁnd the global optimum anymore, these
           non-convex methods often outperform 1 regularization, both in terms of predictive accuracy
           and in detecting relevant variables (Fan and Li 2001; Schniter et al. 2008). We give some examples
           below.
         458                                                                Chapter 13. Sparse linear models


13.6.1   Bridge regression
         A natural generalization of 1 regularization, known as bridge regression (Frank and Friedman
         1993), has the form
                                
            ŵ = NLL(w) + λ         |wj |b                                                       (13.131)
                                  j

         for b ≥ 0. This corresponds to MAP estimation using a exponential power distribution given
         by
                                                                      b
                                             b                |x − μ|
            ExpPower(w|μ, a, b)                      exp −                                            (13.132)
                                     2aΓ(1 + 1/b)                 a
                                                                     √
         If b = 2, we get the Gaussian distribution (with a = σ 2), corresonding to ridge regression; if
         we set b = 1, we get the Laplace distribution, corresponding to lasso; if we set b = 0, we get
         0 regression, which is equivalent to best subset selection. Unfortunately, the objective is not
         convex for b < 1, and is not sparsity promoting for b > 1. So the 1 norm is the tightest convex
         approximation to the 0 norm.
            The effect of changing b is illustrated in Figure 13.17, where we plot the prior for b = 2, b = 1
         and b = 0.4; we assume p(w) = p(w1 )p(w2 ). We also plot the posterior after seeing a single
         observation, (x, y), which imposes a single linear constraint of the form, y = wT x, with a
         certain tolerance controlled by the observation noise (compare to Figure 7.11). We see see that
         the mode of the Laplace is on the vertical axis, corresponding to w1 = 0. By contrast, there are
         two modes when using b = 0.4, corresponding to two different sparse solutions. When using
         the Gaussian, the MAP estimate is not sparse (the mode does not lie on either of the coordinate
         axes).

13.6.2   Hierarchical adaptive lasso
         Recall that one of the principal problems with lasso is that it results in biased estimates.
         This is because it needs to use a large value of λ to “squash” the irrelevant parameters, but
         this then over-penalizes the relevant parameters. It would be better if we could associate a
         different penalty parameter with each parameter. Of course, it is completely infeasible to tune
         D parameters by cross validation, but this poses no problem to the Bayesian: we simply make
         each τj2 have its own private tuning parameter, γj , which are now treated as random variables
         coming from the conjugate prior γj ∼ IG(a, b). The full model is as follows:
                γj    ∼   IG(a, b)                                                                     (13.133)
             2
            τj |γj    ∼   Ga(1, γj2 /2)                                                                (13.134)
            wj |τj2   ∼   N (0, τj2 )                                                                  (13.135)
         See Figure 13.18(a). This has been called the hierarchical adaptive lasso (HAL) (Lee et al. 2010)
         (see also (Lee et al. 2011; Cevher 2009; Armagan et al. 2011)). We can integrate out τj2 , which
         induces a Lap(wj |0, 1/γj ) distribution on wj as before. The result is that p(wj ) is now a
         scaled mixture of Laplacians. It turns out that we can ﬁt this model (i.e., compute a local
         posterior mode) using EM, as we explain below. The resulting estimate, ŵHAL , often works
           13.6. Non-convex regularizers                                                                          459




           Figure 13.17 Top: plot of log prior for three different distributions with unit variance: Gaussian, Laplace
           and exponential power. Bottom: plot of log posterior after observing a single observation, corresponding
           to a single linear constraint. The precision of this observation is shown by the diagonal lines in the top
           ﬁgure. In the case of the Gaussian prior, the posterior is unimodal and symmetric. In the case of the
           Laplace prior, the posterior is unimodal and asymmetric (skewed). In the case of the exponential prior, the
           posterior is bimodal. Based on Figure 1 of (Seeger 2008). Figure generated by sparsePostPlot, written
           by Florian Steinke.


           much better than the estimate returned by lasso, ŵL1 , in the sense that it is more likely to
           contain zeros in the right places (model selection consistency) and more likely to result in good
           predictions (prediction consistency) (Lee et al. 2010). We give an explanation for this behavior in
           Section 13.6.2.2.

13.6.2.1   EM for HAL
           Since the inverse Gamma is conjugate to the Laplace, we ﬁnd that the E step for γj is given by
              p(γj |wj ) = IG(a + 1, b + |wj |)                                                               (13.136)
                             2
           The E step for σ is the same as for vanilla lasso.
             The prior for w has the following form:
                          1
              p(w|γ) =           exp(−|wj |/γj )                                                              (13.137)
                          j
                            2γj

           Hence the M step must optimize
                                                           
              ŵ(t+1) = argmax log N (y|Xw, σ 2 ) −              |wj |E [1/γj ]                               (13.138)
                             w
                                                             j
           460                                                                                        Chapter 13. Sparse linear models

                                                 a       b                                           HAL
                                                                   1
                                                                                                                         a=1, b=0.01
                                                                                                                         a=1, b=0.10
                                                                  0.8                                                    a=1, b=1.00


                                                       γj         0.6


                                                                  0.4
                                                       τj2
                                                                  0.2


                                                       wj          0

                                                        D
                                                                 −0.2
                             aσ
                                      σ2                         −0.4
                                                       yi
                             bσ                                  −0.6

                                                       xi        −0.8
                                                         N
                                                                  −1
                                                                   −1   −0.8   −0.6   −0.4   −0.2     0    0.2   0.4   0.6   0.8       1


                                           (a)                                                      (b)

           Figure 13.18 (a) DGM for hierarchical adaptive lasso. (b) Contours of Hierarchical adpative Laplace. Based
           on Figure 1 of (Lee et al. 2010). Figure generated by normalGammaPenaltyPlotDemo.



           The expectation is given by
                              a+1                (t)
              E [1/γj ] =           (t)
                                            sj                                                                                            (13.139)
                            b+    |wj |

           Thus the M step becomes a weighted lasso problem:
                                              (t)
             ŵ(t+1) = argmin ||y − Xw||22 +      sj |wj |                                                                                 (13.140)
                             w
                                                             j

           This is easily solved using standard methods (e.g., LARS). Note that if the coefficient was esti-
                                                                (t)                                   (t)
           mated to be large in the previous iteration (so wj is large), then the scaling factor sj will
           be small, so large coefficients are not penalized heavily. Conversely, small coefficients do get
           penalized heavily. This is the way that the algorithm adapts the penalization strength of each
           coefficient. The result is an estimate that is often much sparser than returned by lasso, but also
           less biased.
              Note that if we set a = b = 0, and we only perform 1 iteration of EM, we get a method that
           is closely related to the adaptive lasso of (Zou 2006; Zou and Li 2008). This EM algorithm is
           also closely related to some iteratively reweighted 1 methods proposed in the signal processing
           community (Chartrand and Yin 2008; Candes et al. 2008).

13.6.2.2   Understanding the behavior of HAL
           We can get a better understanding of HAL by integrating out γj to get the following marginal
           distribution,
                                         −(a+1)
                             a |wj |
               p(wj |a, b) =         +1                                                         (13.141)
                             2b   b
13.6. Non-convex regularizers                                                                                                                  461

                                   Lasso                                                                HAL
       10                                                                  10


        8                                                                   8


        6                                                                   6


        4                                                                   4


        2                                                                   2




 MAP




                                                                     MAP
        0                                                                   0

  w




                                                                      w
       −2                                                                  −2


       −4                                                                  −4


       −6                                                                  −6


       −8                                                                  −8                                                 b = 0.010, a=1
                                                                                                                              b = 0.100, a=1
                                                                                                                              b = 1.000, a=1
       −10                                                                 −10
        −10   −8   −6   −4   −2         0   2   4   6   8   10              −10   −8   −6   −4   −2         0     2   4   6         8          10
                                   wMLE                                                                w
                                                                                                            MLE



                                  (a)                                                                 (b)

Figure 13.19 Thresholding behavior of two penalty functions (negative log priors). (a) Laplace.
(b) Hierarchical adaptive Laplace. Based on Figure 2 of (Lee et al. 2010). Figure generated by
normalGammaThresholdPlotDemo.


This is an instance of the generalized t distribution (McDonald and Newey 1988) (in (Cevher
2009; Armagan et al. 2011), this is called the double Pareto distribution) deﬁned as
                                                           −(a+1/q)
                                 q               |w − μ|q
   GT(w|μ, a, c, q)                         1 +                                     (13.142)
                        2ca1/q B(1/q, a)            acq

                                            √ the degree of sparsity), and a is related to the
where c is the scale parameter (which controls
degrees of freedom. When q = 2 and c = 2 we recover the standard t distribution; when
a → ∞, we recover the exponential power distribution; and when q = 1 and a = ∞ we
get the Laplace distribution. In the context of the current model, we see that p(wj |a, b) =
GT(wj |0, a, b/a, 1).
  The resulting penalty term has the form
                                                                 |wj |
       πλ (wj )  − log p(wj ) = (a + 1) log(1 +                       ) + const                                                    (13.143)
                                                                  b
where λ = (a, b) are the tuning parameters. We plot this penalty in 2d (i.e., we plot πλ (w1 ) +
πλ (w2 )) in Figure 13.18(b) for various values of b. Compared to the diamond-shaped Laplace
penalty, shown in Figure 13.3(a), we see that the HAL penalty looks more like a “star ﬁsh”: it
puts much more density along the “spines”, thus enforcing sparsity more aggressively. Note that
this penalty is clearly not convex.
   We can gain further understanding into the behavior of this penalty function by considering
applying it to the problem of linear regression with an orthogonal design matrix. In this case,
            462                                                                 Chapter 13. Sparse linear models


         p(τj2 )           p(γj )       p(wj )             Ref
                    2
         Ga(1, γ2 )        Fixed        Lap(0, 1/γ)        (Andrews and Mallows 1974; West 1987)
                    2
         Ga(1, γ2 )        IG(a, b)     GT(0, a, b/a, 1)   (Lee et al. 2010, 2011; Cevher 2009; Armagan et al. 2011)
                    2
         Ga(1, γ2 )        Ga(a, b)     NEG(a, b)          (Griffin and Brown 2007, 2010; Chen et al. 2011)
                   2
         Ga(δ, γ2 )        Fixed        NG(δ, γ)           (Griffin and Brown 2007, 2010)
         Ga(τj2 |0, 0)     -            NJ(wj )            (Figueiredo 2003)
                      2
         IG( 2δ , δγ2 )    Fixed        T (0, δ, γ)        (Andrews and Mallows 1974; West 1987)
         C + (0, γ)        C + (0, b)   horseshoe(b)       (Carvahlo et al. 2010)

            Table 13.2 Some scale mixtures of Gaussians. Abbreviations: C + = half-rectiﬁed Cauchy; Ga = Gamma
            (shape and rate parameterization); GT = generalized t; IG = inverse Gamma; NEG = Normal-Exponential-
            Gamma; NG = Normal-Gamma; NJ = Normal-Jeffreys. The horseshoe distribution is the name we give
            to the distribution induced on wj by the prior described in (Carvahlo et al. 2010); this has no simple
            analytic form. The deﬁnitions of the NEG and NG densities are a bit complicated, but can be found in the
            references. The other distributions are deﬁned in the text.


            one can show that the objective becomes

                               1                D
                   J(w)   =      ||y − Xw||22 +     πλ (|wj |)                                              (13.144)
                               2                j=1

                                              1  mle           
                                                 D               D
                               1           2                 2
                          =      ||y − ŷ|| +      (ŵ − wj ) +     πλ (|wj |)                              (13.145)
                               2              2 j=1 j           j=1

            where ŵmle = XT y is the MLE and ŷ = Xŵmle . Thus we can compute the MAP estimate
            one dimension at a time by solving the following 1d optimization problem:
                               1
                   ŵj = argmin (ŵjmle − wj )2 + πλ (wj )                                                  (13.146)
                           wj  2

            In Figure 13.19(a) we plot the lasso estimate, ŵL1 , vs the ML estimate, ŵmle . We see that the
            1 estimator has the usual soft-thresholding behavior seen earlier in Figure 13.5(a). However,
            this behavior is undesirable since the large magnitude coefficients are also shrunk towards 0,
            whereas we would like them to be equal to their unshrunken ML estimates.
               In Figure 13.19(b) we plot the HAL estimate, ŵHAL , vs the ML estimate ŵmle . We see that
            this approximates the more desirable hard thresholding behavior seen earlier in Figure 13.5(b)
            much more closely.

13.6.3      Other hierarchical priors
            Many other hierarchical sparsity-promoting priors have been proposed; see Table 13.2 for a brief
            summary. In some cases, we can analytically derive the form of the marginal prior for wj .
            Generally speaking, this prior is not concave.
               A particularly interesting prior is the improper Normal-Jeffreys prior, which has been used
            in (Figueiredo 2003). This puts a non-informative Jeffreys prior on the variance, Ga(τj2 |0, 0) ∝
         13.7. Automatic relevance determination (ARD)/sparse Bayesian learning (SBL)                   463


         1/τj2 ; the resulting marginal has the form p(wj ) = NJ(wj ) ∝ 1/|wj |. This gives rise to a
         thresholding rule that looks very similar to HAL in Figure 13.19(b), which in turn is very similar
         to hard thresholding. However, this prior has no free parameters, which is both a good thing
         (nothing to tune) and a bad thing (no ability to adapt the level of sparsity).

 13.7    Automatic relevance determination (ARD)/sparse Bayesian learning (SBL)
         All the methods we have considered so far (except for the      ' spike-and-slab methods in Sec-
         tion 13.2.1) have used a factorial prior of the form p(w) = j p(wj ). We have seen how these
         priors can be represented in terms of Gaussian scale mixtures of the form wj ∼ N (0, τj2 ), where
         τj2 has one of the priors listed in Table 13.2. Using these latent variances, we can represent the
         model in the form τj2 → wj → y ← X. We can then use EM to perform MAP estimation,
         where in the E step we infer p(τj2 |wj ), and in the M step we estimate w from y, X and τ .
         This M step either involves a closed-form weighted 2 optimization (in the case of Gaussian
         scale mixtures), or a weighted 1 optimization (in the case of Laplacian scale mixtures). We also
         discussed how to perform Bayesian inference in such models, rather than just computing MAP
         estimates.
            In this section, we discuss an alternative approach based on type II ML estimation (empirical
         Bayes), whereby we integrate out w and maximize the marginal likelihood wrt τ . This EB
         procedure can be implemented via EM, or via a reweighted 1 scheme, as we will explain below.
         Having estimated the variances, we plug them in to compute the posterior mean of the weights,
         E [w|τ̂ , D]; rather surprisingly (in view of the Gaussian prior), the result is an (approximately)
         sparse estimate, for reasons we explain below.
            In the context of neural networks, this this method is called called automatic relevance
         determination or ARD (MacKay 1995b; Neal 1996): see Section 16.5.7.5. In the context of the
         linear models we are considering in this chapter, this method is called sparse Bayesian learning
         or SBL (Tipping 2001). Combining ARD/SBL with basis function expansion in a linear model
         gives rise to a technique called the relevance vector machine (RVM), which we will discuss in
         Section 14.3.2.

13.7.1   ARD for linear regression
         We will explain the procedure in the context of linear regression; ARD for GLMs requires the use
         of the Laplace (or some other) approximation. case can be It is conventional, when discussing
         ARD / SBL, to denote the weight precisions by αj = 1/τj2 , and the measurement precision
         by β = 1/σ 2 (do not confuse this with the use of β in statistics to represent the regression
         coefficients!). In particular, we will assume the following model:

            p(y|x, w, β)   =    N (y|wT x, 1/β)                                                      (13.147)
                                           −1
                   p(w)    =    N (w|0, A       )                                                    (13.148)
464                                                                         Chapter 13. Sparse linear models


where A = diag(α). The marginal likelihood can be computed analytically as follows:
                    
  p(y|X, α, β) =       N (y|Xw, βIN )N (w|0, A)dw                                   (13.149)

                       =    N (y|0, βIN + XA−1 XT )                                                       (13.150)
                                            1      1
                       =    (2π)−N/2 |Cα |− 2 exp(− yT C−1
                                                        α y)                                               (13.151)
                                                   2
where
   Cα  β −1 IN + XA−1 XT                                                                                  (13.152)
Compare this to the marginal likelihood in Equation 13.13 in the spike and slab model; modulo
the β = 1/σ 2 factor missing from the second term, the equations are the same, except we have
replaced the binary γj ∈ {0, 1} with continuous αj ∈ R+ . In log form, the objective becomes
                1
   (α, β)  − log p(y|X, α, β) = log |Cα | + yT C−1  α y                              (13.153)
                2
  To regularize the problem, we may put a conjugate prior on each precision, αj ∼ Ga(a, b)
and β ∼ Ga(c, d). The modiﬁed objective becomes
                    1                    
   (α, β)  − log p(y|X, α, β) +            log Ga(αj |a, b) + log Ga(β|c, d)          (13.154)
                    2                     j
                                         
             = log |Cα | + yT C−1 α y+      (a log αj − bαj ) + c log β − dβ           (13.155)
                                                   j

This is useful when performing Bayesian inference for α and β (Bishop and Tipping 2000).
However, when performing (type II) point estimation, we will use the improper prior a = b =
c = d = 0, which results in maximal sparsity.
   Below we describe how to optimize (α, β) wrt the precision terms α and β.7 This is a
proxy for ﬁnding the most probable model setting of γ in the spike and slab model, which in
turn is closely related to 0 regularization. In particular, it can be shown (Wipf et al. 2010) that
the objective in Equation 13.153 has many fewer local optima than the 0 objective, and hence
is much easier to optimize.
   Once we have estimated α and β, we can compute the posterior over the parameters using
   p(w|D, α̂, β̂) = N (μ, Σ)                                                                              (13.156)
                 −1
              Σ       = β̂XT X + A                                                                         (13.157)
                  μ = β̂ΣX y   T
                                                                                                          (13.158)
The fact that we compute a posterior over w, while simultaneously encouraging sparsity, is why
the method is called “sparse Bayesian learning”. Nevertheless, since there are many ways to be
sparse and Bayesian, we will use the “ARD” term instead, even in the linear model context. (In
addition, SBL is only “being Bayesian” about the values of the coefficients, rather than reﬂecting
uncertainty about the set of relevant variables, which is typically of more interest.)
7. An alternative approach to optimizing β is to put a Gamma prior on β and to integrate it out to get a Student
posterior for w (Buntine and Weigend 1991). However, it turns out that this results in a less accurate estimate for
α (MacKay 1999). In addition, working with Gaussians is easier than working with the Student distribution, and the
Gaussian case generalizes more easily to other cases such as logistic regression.
         13.7. Automatic relevance determination (ARD)/sparse Bayesian learning (SBL)                             465


                          x
                                                                                                   y
                                                    y           C




                                     (a)                                       (b)

         Figure 13.20 Illustration of why ARD results in sparsity. The vector of inputs x does not point towards
         the vector of outputs y, so the feature should be removed. (a) For ﬁnite α, the probability density is spread
         in directions away from y. (b) When α = ∞, the probability density at y is maximized. Based on Figure
         8 of (Tipping 2001).


13.7.2   Whence sparsity?
         If α̂j ≈ 0, we ﬁnd ŵj ≈ ŵjmle , since the Gaussian prior shrinking wj towards 0 has zero
         precision. However, if we ﬁnd that α̂j ≈ ∞, then the prior is very conﬁdent that wj = 0, and
         hence that feature j is “irrelevant”. Hence the posterior mean will have ŵj ≈ 0. Thus irrelevant
         features automatically have their weights “turned off” or “pruned out”.
            We now give an intuitive argument, based on (Tipping 2001), about why ML-II should encour-
         age αj → ∞ for irrelevant features. Consider a 1d linear regression with 2 training examples,
         so X = x = (x1 , x2 ), and y = (y1 , y2 ). We can plot x and y as vectors in the plane, as
         shown in Figure 13.20. Suppose the feature is irrelevant for predicting the response, so x points
         in a nearly orthogonal direction to y. Let us see what happens to the marginal likelihood as we
         change α. The marginal likelihood is given by p(y|x, α, β) = N (y|0, C), where
                   1    1
            C=       I + xxT                                                                                  (13.159)
                   β    α
         If α is ﬁnite, the posterior will be elongated along the direction of x, as in Figure 13.20(a).
         However, if α = ∞, we ﬁnd C = β1 I, so C is spherical, as in Figure 13.20(b). If |C| is held
         constant, the latter assigns higher probability density to the observed response vector y, so this
         is the preferred solution. In other words, the marginal likelihood “punishes” solutions where αj
         is small but X:,j is irrelevant, since these waste probability mass. It is more parsimonious (from
         the point of view of Bayesian Occam’s razor) to eliminate redundant dimensions.

13.7.3   Connection to MAP estimation
         ARD seems quite different from the MAP estimation methods we have been considering earlier
         in this chapter. In particular, in ARD, we are not integrating out α and optimizing w, but vice
           466                                                              Chapter 13. Sparse linear models


           versa. Because the parameters wj become correlated in the posterior (due to explaining away),
           when we estimate αj we are borrowing information from all the features, not just feature j.
           Consequently, the effective prior p(w|α̂) is non-factorial, and furthermore it depends on the
           data D (and σ 2 ). However, in (Wipf and Nagarajan 2007), it was shown that ARD can be viewed
           as the following MAP estimation problem:
                   ŵARD        =    arg min β||y − Xw||22 + gARD (w)                                 (13.160)
                                          w
                                         
              gARD (w)              min     αj wj2 + log |Cα |                                        (13.161)
                                     α≥0
                                           j

           The proof, which is based on convex analysis, is a little complicated and hence is omitted.
              Furthermore, (Wipf and Nagarajan 2007; Wipf et al. 2010) prove that MAP estimation with
           non-factorial priors is strictly better than MAP estimation with any possible factorial prior in
           the following sense: the non-factorial objective always has fewer local minima than factorial
           objectives, while still satisfying the property that the global optimum of the non-factorial objec-
           tive corresponds to the global optimum of the 0 objective — a property that 1 regularization,
           which has no local minima, does not enjoy.

 13.7.4    Algorithms for ARD *
           In this section, we review several different algorithms for implementing ARD.

13.7.4.1   EM algorithm
           The easiest way to implement SBL/ARD is to use EM. The expected complete data log likelihood
           is given by
                                
               Q(α, β) = E log N (y|Xw, σ 2 I) + log N (w|0, A−1 )                               (13.162)
                                  ⎡                                                 ⎤
                              1 ⎣                           
                         =      E N log β − β||y − Xw||2 +      log αj − tr(AwwT )⎦ + const (13.163)
                              2                               j

                                    1            β                         
                              =       N log β −     ||y − Xμ||2 + tr(XT XΣ)
                                    2            2
                                      1              1
                                    +       log αj − tr[A(μμT + Σ)] + const                            (13.164)
                                      2 j             2

           where μ and Σ are computed in the E step using Equation 13.158.
             Suppose we put a Ga(a, b) prior on αj and a Ga(c, d) prior on β. The penalized objective
           becomes
                                    
              Q (α, β) = Q(α, β) +    (a log αj − bαj ) + c log β − dβ                       (13.165)
                                               j
                         
                     dQ
           Setting   dαj     = 0 we get the following M step:
                               1 + 2a       1 + 2a
              αj     =                 = 2                                                           (13.166)
                             E wj2 + 2b  mj + Σjj + 2b
           13.7. Automatic relevance determination (ARD)/sparse Bayesian learning (SBL)                   467


           If αj = α, and a = b = 0, the update becomes
                        D          D
              α=              = T                                                                     (13.167)
                     E [wT w]  μ μ + tr(Σ)
           The update for β is given by

               −1
                            ||y − Xμ||2 + β −1        j (1   − αj Σjj ) + 2d
              βnew     =                                                                              (13.168)
                                               N + 2c
           (Deriving this is Exercise 13.2.)

13.7.4.2   Fixed-point algorithm
           A faster and more direct approach is to directly optimize the objective in Equation 13.155. One
                                                        d             d
           can show (Exercise 13.3) that the equations dα  j
                                                             = 0 and dβ   = 0 lead to the following ﬁxed
           point updates:
                           γj + 2a
                αj    ←                                                                               (13.169)
                           m2j + 2b
                           ||y − Xμ||2 + 2d
              β −1    ←                                                                               (13.170)
                            N − j γj + 2c
                γj        1 − αj Σjj                                                                 (13.171)

           The quantity γj is a measure of how well-determined wj is by the data (MacKay 1992). Hence
           γ =      j γj is the effective degrees of freedom of the model. See Section 7.5.3 for further
           discussion.
              Since α and β both depend on μ and Σ (which can be computed using Equation 13.158 or the
           Laplace approximation), we need to re-estimate these equations until convergence. (Convergence
           properties of this algorithm have been studied in (Wipf and Nagarajan 2007).) At convergence,
           the results are formally identical to those obtained by EM, but since the objective is non-convex,
           the results can depend on the initial values.

13.7.4.3   Iteratively reweighted     1   algorithm
           Another approach to solving the ARD problem is based on the view that it is a MAP estimation
           problem. Although the log prior g(w) is rather complex in form, it can be shown to be a
           non-decreasing, concave function of |wj |. This means that it can be solved by an iteratively
           reweighted 1 problem of the form
                                            (t)
              wt+1 = arg min NLL(w) +         λj |wj |                                           (13.172)
                              w
                                               j

           In (Wipf and Nagarajan 2010), the following procedure for setting the penalty terms is suggested
                                                                                     (0)
           (based on a convex bound to the penalty function). We initialize with λj = 1, and then at
         468                                                                            Chapter 13. Sparse linear models

                                         (t+1)
         iteration t + 1, compute λj             by iterating the following equation a few times:8
                                                                        −1                     12
                                2                         (t+1)                    T −1
             λj ← X:,j σ I +           Xdiag(1/λj )diag(|wj     |)              X )       X:,j                          (13.173)

         We see that the new penalty λj depends on all the old weights. This is quite different from the
         adaptive lasso method of Section 13.6.2.
            To understand this difference,
                                          consider the noiseless case where σ 2 = 0, and assume D  N .
                                   D
         In this case, there are       solutions which perfectly reconstruct the data, Xw = y, and which
                                   N
         have sparsity ||w||0 = N ; these are called basic feasible solutions or BFS. What we want are
         solutions that satsify Xw = y but which are much sparser than this. Suppose the method has
         found a BFS. We do not want to increase the penalty on a weight just because it is small (as
         in adaptive lasso), since that will just reinforce our current local optimum. Instead, we want to
         increase the penalty on a weight if it is small and if we have ||w(t+1) || < N . The covariance
                                      (t+1)
         term (Xdiag(1/λj )diag(|wj         |))−1 has this effect: if w is a BFS, this matrix will be full rank,
         so the penalty will not increase much, but if w is sparser than N , the matrix will not be full
         rank, so the penalties associated with zero-valued coefficients will increase, thus reinforcing this
         solution (Wipf and Nagarajan 2010).

13.7.5   ARD for logistic regression
         Now consider binary logistic regression, p(y|x, w) = Ber(y|sigm(wT x)), using the same
         Gaussian prior, p(w) = N (w|0, A−1 ). We can no longer use EM to estimate α, since the
         Gaussian prior is not conjugate to the logistic likelihood, so the E step cannot be done exactly.
         One approach is to use a variational approximation to the E step, as discussed in Section 21.8.1.1.
         A simpler approach is to use a Laplace approximation (see Section 8.4.1) in the E step. We can
         then use this approximation inside the same EM procedure as before, except we no longer need
         to update β. Note, however, that this is not guaranteed to converge.
            An alternative is to use the techniques from Section 13.7.4.3. In this case, we can use exact
         methods to compute the inner weighted 1 regularized logistic regression problem, and no
         approximations are required.

 13.8    Sparse coding *
         So far, we have been concentrating on sparse priors for supervised learning. In this section, we
         discuss how to use them for unsupervised learning.
            In Section 12.6, we discussed ICA, which is like PCA except it uses a non-Gaussian prior
         for the latent factors zi . If we make the non-Gaussian prior be sparsity promoting, such as a
         Laplace distribution, we will be approximating each observed vector xi as a sparse combination
         of basis vectors (columns of W); note that the sparsity pattern (controlled by zi ) changes from
         data case to data case. If we relax the constraint that W is orthogonal, we get a method called

         8. The algorithm in (Wipf and Nagarajan 2007) is equivalent to a single iteration of Equation 13.173. However, since the
         equation is cheap to compute (only O(N D||w(t+1) ||0 ) time), it is worth iterating a few times before solving the more
         expensive 1 problem.
         13.8. Sparse coding *                                                                                             469


                                 Method                p(zi )            p(W)        W orthogonal
                                 PCA                   Gauss             -           yes
                                 FA                    Gauss             -           no
                                 ICA                   Non-Gauss         -           yes
                                 Sparse coding         Laplace           -           no
                                 Sparse PCA            Gauss             Laplace     maybe
                                 Sparse MF             Laplace           Laplace     no

         Table 13.3 Summary of various latent factor models. A dash “-” in the p(W) column means we are
         performing ML parameter estimation rather than MAP parameter estimation. Summary of abbreviations:
         PCA = principal components analysis; FA = factor analysis; ICA = independent components analysis; MF =
         matrix factorization.


         sparse coding. In this context, we call the factor loading matrix W a dictionary; each column
         is referred to as an atom.9 In view of the sparse representation, it is common for L > D, in
         which case we call the representation overcomplete.
            In sparse coding, the dictionary can be ﬁxed or learned. If it is ﬁxed, it is common to use a
         wavelet or DCT basis, since many natural signals can be well approximated by a small number
         of such basis functions. However, it is also possible to learn the dictionary, by maximizing the
         likelihood
                             N      
             log p(D|W) =        log    N (xi |Wzi , σ 2 I)p(zi )dzi                               (13.174)
                                i=1           zi

         We discuss ways to optimize this below, and then we present several interesting applications.
            Do not confuse sparse coding with sparse PCA (see e.g., (Witten et al. 2009; Journee et al.
         2010)): this puts a sparsity promoting prior on the regression weights W, whereas in sparse
         coding, we put a sparsity promoting prior on the latent factors zi . Of course, the two techniques
         can be combined; we call the result sparse matrix factorization, although this term is non-
         standard. See Table 13.3 for a summary of our terminology.

13.8.1   Learning a sparse coding dictionary
         Since Equation 13.174 is a hard objective to maximize, it is common to make the following
         approximation:
                                
                                N
                                          
             log p(D|W) ≈              max log N (xi |Wzi , σ 2 I) + log p(zi )                                        (13.175)
                                        zi
                                i=1

         If p(zi ) is Laplace, we can rewrite the NLL as
                                 
                                 N
                                   1
             NLL(W, Z) =                   ||xi − Wzi ||22 + λ||zi ||1                                                 (13.176)
                                 i=1
                                       2

         9. It is common to denote the dictionary by D, and to denote the latent factors by αi . However, we will stick with the
         W and zi notation.
         470                                                              Chapter 13. Sparse linear models


           To prevent W from becoming arbitrarily large, it is common to constrain the 2 norm of its
         columns to be less than or equal to 1. Let us denote this constraint set by
            C = {W ∈ RD×L         s.t. wjT wj ≤ 1}                                                  (13.177)
         Then we want to solve minW∈C,Z∈RN ×L NLL(W, Z). For a ﬁxed zi , the optimization over
         W is a simple least squares problem. And for a ﬁxed dictionary W, the optimization problem
         over Z is identical to the lasso problem, for which many fast algorithms exist. This suggests
         an obvious iterative optimization scheme, in which we alternate between optimizing W and Z.
         (Mumford 1994) called this kind of approach an analysis-synthesis loop, where estimating the
         basis W is the analysis phase, and estimating the coefficients Z is the synthesis phase. In cases
         where this is too slow, more sophisticated algorithms can be used, see e.g., (Mairal et al. 2010).
           A variety of other models result in an optimization problem that is similar to Equation 13.176.
         For example, non-negative matrix factorization or NMF (Paatero and Tapper 1994; Lee and
         Seung 2001) requires solving an objective of the form

                          1
                             N
                  min           ||xi − Wzi ||22     s.t. W ≥ 0, zi ≥ 0                              (13.178)
            W∈C,Z∈RL×N    2 i=1

         (Note that this has no hyper-parameters to tune.) The intuition behind this constraint is that the
         learned dictionary may be more interpretable if it is a positive sum of positive “parts”, rather
         than a sparse sum of atoms that may be positive or negative. Of course, we can combine NMF
         with a sparsity promoting prior on the latent factors. This is called non-negative sparse coding
         (Hoyer 2004).
            Alternatively, we can drop the positivity constraint, but impose a sparsity constraint on both
         the factors zi and the dictionary W. We call this sparse matrix factorization. To ensure strict
         convexity, we can use an elastic net type penalty on the weights (Mairal et al. 2010) resulting in

                1
                    N
            min       ||xi − Wzi ||22 + λ||zi ||1    s.t. ||wj ||22 + γ||wj ||1 ≤ 1                 (13.179)
            W,Z 2
                  i=1

         There are several related objectives one can write down. For example, we can replace the lasso
         NLL with group lasso or fused lasso (Witten et al. 2009).
            We can also use other sparsity-promoting priors besides the Laplace. For example, (Zhou et al.
         2009) propose a model in which the latent factors zi are made sparse using the binary mask
         model of Section 13.2.2. Each bit of the mask can be generated from a Bernoulli distribution
         with parameter π, which can be drawn from a beta distribution. Alternatively, we can use a
         non-parametric prior, such as the beta process. This allows the model to use dictionaries of
         unbounded size, rather than having to specify L in advance. One can perform Bayesian inference
         in this model using e.g., Gibbs sampling or variational Bayes. One ﬁnds that the effective size
         of the dictionary goes down as the noise level goes up, due to the Bayesian Occam’s razor. This
         can prevent overﬁtting. See (Zhou et al. 2009) for details.

13.8.2   Results of dictionary learning from image patches
         One reason that sparse coding has generated so much interest recently is because it explains an
         interesting phenomenon in neuroscience. In particular, the dictionary that is learned by applying
13.8. Sparse coding *                                                                                471




                               (a)                                    (b)




                               (c)                                    (d)




                               (e)                                    (f)

Figure 13.21 Illustration of the ﬁlters learned by various methods when applied to natural image patches.
(Each patch is ﬁrst centered and normalized to unit norm.) (a) ICA. Figure generated by icaBasisDemo,
kindly provided by Aapo Hyvarinen. (b) sparse coding. (c) PCA. (d) non-negative matrix factorization. (e)
sparse PCA with low sparsity on weight matrix. (f) sparse PCA with high sparsity on weight matrix. Figure
generated by sparseDictDemo, written by Julien Mairal.
         472                                                                                Chapter 13. Sparse linear models


         sparse coding to patches of natural images consists of basis vectors that look like the ﬁlters that
         are found in simple cells in the primary visual cortex of the mammalian brain (Olshausen and
         Field 1996). In particular, the ﬁlters look like bar and edge detectors, as shown in Figure 13.21(b).
         (In this example, the parameter λ was chosen so that the number of active basis functions
         (non-zero components of zi ) is about 10.) Interestingly, using ICA gives visually similar results,
         as shown in Figure 13.21(a). By contrast, applying PCA to the same data results in sinusoidal
         gratings, as shown in Figure 13.21(c); these do not look like cortical cell response patterns.10 It
         has therefore been conjectured that parts of the cortex may be performing sparse coding of the
         sensory input; the resulting latent representation is then further processed by higher levels of
         the brain.
            Figure 13.21(d) shows the result of using NMF, and Figure 13.21(e-f) show the results of sparse
         PCA, as we increase the sparsity of the basis vectors.

13.8.3   Compressed sensing
         Although it is interesting to look at the dictionaries learned by sparse coding, it is not necessarily
         very useful. However, there are some practical applications of sparse coding, which we discuss
         below.
            Imagine that, instead of observing the data x ∈ RD , we observe a low-dimensional projection
         of it, y = Rx +  where y ∈ RM , R is a M × D matrix, M  D, and  is a noise term
         (usually Gaussian). We assume R is a known sensing matrix, corresponding to different linear
         projections of x. For example, consider an MRI scanner: each beam direction corresponds to a
         vector, encoded as a row in R. Figure 13.22 illustrates the modeling assumptions.
            Our goal is to infer p(x|y, R). How can we hope to recover all of x if we do not measure
         all of x? The answer is: we can use Bayesian inference with an appropriate prior, that exploits
         the fact that natural signals can be expressed as a weighted combination of a small number of
         suitably chosen basis functions. That is, we assume x = Wz, where z has a sparse prior, and
         W is suitable dictionary. This is called compressed sensing or compressive sensing (Candes
         et al. 2006; Baruniak 2007; Candes and Wakin 2008; Bruckstein et al. 2009).
            For CS to work, it is important to represent the signal in the right basis, otherwise it will
         not be sparse. In traditional CS applications, the dictionary is ﬁxed to be a standard form,
         such as wavelets. However, one can get much better performance by learning a domain-speciﬁc
         dictionary using sparse coding (Zhou et al. 2009). As for the sensing matrix R, it is often chosen
         to be a random matrix, for reasons explained in (Candes and Wakin 2008). However, one can
         get better performance by adapting the projection matrix to the dictionary (Seeger and Nickish
         2008; Chang et al. 2009).

13.8.4   Image inpainting and denoising
         Suppose we have an image which is corrupted in some way, e.g., by having text or scratches
         sparsely superimposed on top of it, as in Figure 13.23. We might want to estimate the underlying

         10. The reason PCA discovers sinusoidal grating patterns is because it is trying to model the covariance
                                                                                                                  of the data, which,
         in the case of image patches, is translation invariant. This means cov [I(x, y), I(x , y  )] = f (x − x )2 + (y − y  )2
         for some function f , where I(x, y) is the image intensity at location (x, y). One can show (Hyvarinen et al. 2009, p125)
         that the eigenvectors of a matrix of this kind are always sinusoids of different phases, i.e., PCA discovers a Fourier basis.
13.8. Sparse coding *                                                                             473



                                       z                    λ


                                       x                    W


                                       y                    R


Figure 13.22 Schematic DGM for compressed sensing. We observe a low dimensional measurement y
generated by passing x through a measurement matrix R, and possibly subject to observation noise with
variance σ 2 . We assume that x has a sparse decomposition in terms of the dictionary W and the latent
variables z. the parameter λ controlls the sparsity level.




                         (a)                                             (b)

Figure 13.23 An example of image inpainting using sparse coding. Left: original image. Right: recon-
struction. Source: Figure 13 of (Mairal et al. 2008). Used with kind permission of Julien Mairal.



“clean” image. This is called image inpainting. One can use similar techniques for image
denoising.
   We can model this as a special kind of compressed sensing problem. The basic idea is as
follows. We partition the image into overlapping patches, yi , and concatenate them to form y.
We deﬁne R so that the i’th row selects out patch i. Now deﬁne V to be the visible (uncorrupted)
components of y, and H to be the hidden components. To perform image inpainting, we just
compute p(yH |yV , θ), where θ are the model parameters, which specify the dictionary W and
the sparsity level λ of z. We can either learn a dictionary offline from a database of images, or
we can learn a dictionary just for this image, based on the non-corrupted patches.
   Figure 13.23 shows this technique in action. The dictionary (of size 256 atoms) was learned
from 7 × 106 undamaged 12 × 12 color patches in the 12 mega-pixel image.
   An alternative approach is to use a graphical model (e.g., the ﬁelds of experts model (S.
474                                                                           Chapter 13. Sparse linear models


and Black 2009)) which directly encodes correlations between neighboring image patches, rather
than using a latent variable model. Unfortunately such models tend to be computationally more
expensive.

Exercises
Exercise 13.1 Partial derivative of the RSS
Deﬁne
   RSS(w) = ||Xw − y||22                                                                               (13.180)
a. Show that
       ∂
           RSS(w)           =   ak w k − c k                                                            (13.181)
      ∂wk
                                     n
                     ak     =   2         x2ik = 2||x:,k ||2                                            (13.182)
                                    i=1
                                     n
                                                     T
                      ck    =   2         xik (yi − w−k xi,−k ) = 2xT:,k rk                             (13.183)
                                    i=1
                                                                                                 T
   where w−k = w without component k, xi,−k is xi without component k, and rk = y − w−k             x:,−k
   is the residual due to using all the features except feature k. Hint: Partition the weights into those
   involving k and those not involving k.
                    ∂
b. Show that if    ∂wk
                       RSS(w)       = 0, then

                xT:,k rk
       ŵk =                                                                                            (13.184)
               ||x:,k ||2
   Hence when we sequentially add features, the optimal weight for feature k is computed by computing
   orthogonally projecting x:,k onto the current residual.
Exercise 13.2 Derivation of M step for EB for linear regression
Derive Equations 13.166 and 13.168. Hint: the following identity should be useful

   ΣXT X       =     ΣXT X + β −1 ΣA − β −1 ΣA                                                          (13.185)
               =     Σ(XT Xβ + A)β −1 − β −1 ΣA                                                        (13.186)
               =     (A + βXT X)−1 (XT Xβ + A)β −1 − β −1 ΣA                                            (13.187)
                                    −1
               =     (I − AΣ)β                                                                         (13.188)

Exercise 13.3 Derivation of ﬁxed point updates for EB for linear regression
Derive Equations 13.169 and 13.170. Hint: The easiest way to derive this result is to rewrite log p(D|α, β)
as in Equation 8.54. This is exactly equivalent, since in the case of a Gaussian prior and likelihood, the
posterior is also Gaussian, so the Laplace “approximation” is exact. In this case, we get
                            N           β
   log p(D|α, β)       =       log β − ||y − Xw||2
                            2           2
                              1             1       1          D
                            +       log αj − mT Am + log |Σ| −   log(2π)                               (13.189)
                              2 j           2       2          2

The rest is straightforward algebra.
13.8. Sparse coding *                                                                                    475


Exercise 13.4 Marginal likelihood for linear regression
Suppose we use a g-prior of the form Σγ = g(XTγ Xγ )−1 . Show that Equation 13.16 simpliﬁes to

       p(D|γ)    ∝   (1 + g)−Dγ /2 (2bσ + S(γ))−(2aσ +N −1)/2                                         (13.190)
                              g
         S(γ)    =   yT y −       yT Xγ (XTγ Xγ )−1 XTγ y                                             (13.191)
                            1+g

Exercise 13.5 Reducing elastic net to lasso
Deﬁne
       J1 (w) = |y − Xw|2 + λ2 |w|2 + λ1 |w|1                                                         (13.192)
and
       J2 (w) = |ỹ − X̃w̃|2 + cλ1 |w|1                                                               (13.193)
                          1
where c = (1 + λ2 )− 2 and
                                 
              X                 y
   X̃ = c √           , ỹ =                                                                          (13.194)
             λ 2 Id            0d×1

Show
       arg min J1 (w) = c(arg min J2 (w))                                                             (13.195)
i.e.
       J1 (cw) = J2 (w)                                                                               (13.196)
and hence that one can solve an elastic net problem using a lasso solver on modiﬁed data.
Exercise 13.6 Shrinkage in linear regression
(Source: Jaakkola.) Consider performing linear regression with an orthonormal design matrix, so ||x:,k ||22 =
1 for each column (feature) k, and xT:,k x:,j = 0, so we can estimate each parameter wk separately.
Figure 13.24 plots ŵk vs ck = 2yT x:,k , the correlation of feature k with the response, for 3 different
esimation methods: ordinary least squares (OLS), ridge regression with parameter λ2 , and lasso with
parameter λ1 .

a. Unfortunately we forgot to label the plots. Which method does the solid (1), dotted (2) and dashed (3)
   line correspond to? Hint: see Section 13.3.3.
b. What is the value of λ1 ?
c. What is the value of λ2 ?

Exercise 13.7 Prior for the Bernoulli rate parameter in the spike and slab model
Consider the model in Section 13.2.1. Suppose we put a prior on the sparsity rates, πj ∼ Beta(α1 , α2 ).
Derive an expression for p(γ|α) after integrating out the πj ’s. Discuss some advantages and disadvantages
of this approach compared to assuming πj = π0 for ﬁxed π0 .
476                                                                                      Chapter 13. Sparse linear models


                                    1
                                        1
                                 0.8    2
                                        3
                                 0.6

                                 0.4

                                 0.2




                            k
                                    0




                            w
                                −0.2

                                −0.4

                                −0.6

                                −0.8

                                 −1
                                  −2        −1.5     −1     −0.5       0       0.5   1      1.5    2
                                                                       c
                                                                           k



             Figure 13.24 Plot of ŵk vs amount of correlation ck for three different estimators.



Exercise 13.8 Deriving E step for GSM prior
Show that
          
       1                        π  (wj )
   E 2 |wj            =                                                                                            (13.197)
      τj                         |wj |

where π(wj ) = − log p(wj ) and p(wj ) = intN (wj |0, τj2 )p(τj2 )dτj2 . Hint 1:

       1                                 1       wj2
          N (wj |0, τj2 )       ∝           exp(− 2 )                                                             (13.198)
      τj2                               τj2
                                                 2τj
                                         −1 −2wj         wj2
                                =                  exp(−      )                                                   (13.199)
                                        |wj | 2τj2       2τj2
                                         −1 d
                                =                    N (wj |0, τj2 )                                              (13.200)
                                        |wj | d|wj |
Hint 2:
        d               1      d
             p(wj ) =               log p(wj )                                                                    (13.201)
      d|wj |          p(wj ) d|wj |

Exercise 13.9 EM for sparse probit regression with Laplace prior
Derive an EM algorithm for ﬁtting a binary probit classiﬁer (Section 9.4) using a Laplace prior on the
weights. (If you get stuck, see (Figueiredo 2003; Ding and Harrison 2010).)
Exercise 13.10 GSM representation of group lasso
Consider the prior τj2 ∼ Ga(δ, ρ2 /2), ignoring the grouping issue for now. The marginal distribution
induced on the weights by a Gamma mixing distribution is called the normal Gamma distribution and is
13.8. Sparse coding *                                                                                477


given by
                              
   NG(wj |δ, ρ)          =        N (wj |0, τj2 )Ga(τj2 |δ, ρ2 /2)dτj2                           (13.202)
                              1
                         =      |wj |δ−1/2 Kδ− 1 (ρ|wj |)                                        (13.203)
                              Z                2
                                        1
                                   ρδ+ 2
               1/Z       =    √ δ−1/2                                                            (13.204)
                                π2        ρ(δ)
where Kα (x) is the modiﬁed Bessel function of the second kind (the besselk function in Matlab).
Now suppose we have the following prior on the variances
                     G
   p(σ 21:D ) =          p(σ 21:dg ), p(σ 21:dg ) =         Ga(τj2 |δg , ρ2 /2)                  (13.205)
                  g=1                                 j∈g

The corresponding marginal for each group of weights has the form

   p(wg ) ∝ |ug |δg −dg /2 Kδg −dg /2 (ρug )                                                     (13.206)

where
           '
                      2
   ug               wg,j = ||wg ||2                                                             (13.207)
               j∈g

                                                                                    π
Now suppose δg = (dg + 1)/2, so δg − dg /2 = 12 . Conveniently, we have K 1 (z) =    2z
                                                                                          exp(−z). Show
                                                                          2
that the resulting MAP estimate is equivalent to group lasso.
Exercise 13.11 Projected gradient descent for 1 regularized least squares
Consider the BPDN problem argminθ RSS(θ) + λ||θ||1 . By using the split variable trick introducted in
Section 7.4 (i.e., by deﬁning θ = [θ + , θ − ]), rewrite this as a quadratic program with a simple bound
constraint. Then sketch how to use projected gradient descent to solve this problem. (If you get stuck,
consult (Figueiredo et al. 2007).)
Exercise 13.12 Subderivative of the hinge loss function
Let f (x) = (1 − x)+ be the hinge loss function, where (z)+ = max(0, z). What are ∂f (0), ∂f (1), and
∂f (2)?
Exercise 13.13 Lower bounds to convex functions
Let f be a convex function. Explain how to ﬁnd a global affine lower bound to f at an arbitrary point
x ∈ dom(f ).
14      Kernels



 14.1   Introduction
        So far in this book, we have been assuming that each object that we wish to classify or cluster
        or process in anyway can be represented as a ﬁxed-size feature vector, typically of the form
        xi ∈ RD . However, for certain kinds of objects, it is not clear how to best represent them
        as ﬁxed-sized feature vectors. For example, how do we represent a text document or protein
        sequence, which can be of variable length? or a molecular structure, which has complex 3d
        geometry? or an evolutionary tree, which has variable size and shape?
           One approach to such problems is to deﬁne a generative model for the data, and use the
        inferred latent representation and/or the parameters of the model as features, and then to plug
        these features in to standard methods. For example, in Chapter 28, we discuss deep learning,
        which is essentially an unsupervised way to learn good feature representations.
           Another approach is to assume that we have some way of measuring the similarity between
        objects, that doesn’t require preprocessing them into feature vector format. For example, when
        comparing strings, we can compute the edit distance between them. Let κ(x, x ) ≥ 0 be some
        measure of similarity between objects x, x ∈ X , where X is some abstract space; we will call κ
        a kernel function. Note that the word “kernel” has several meanings; we will discuss a different
        interpretation in Section 14.7.1.
           In this chapter, we will discuss several kinds of kernel functions. We then describe some
        algorithms that can be written purely in terms of kernel function computations. Such methods
        can be used when we don’t have access to (or choose not to look at) the “inside” of the objects
        x that we are processing.

 14.2   Kernel functions
        We deﬁne a kernel function to be a real-valued function of two arguments, κ(x, x ) ∈ R, for
        x, x ∈ X . Typically the function is symmetric (i.e., κ(x, x ) = κ(x , x)), and non-negative (i.e.,
        κ(x, x ) ≥ 0), so it can be interpreted as a measure of similarity, but this is not required. We
        give several examples below.
         480                                                                         Chapter 14. Kernels


14.2.1   RBF kernels
         The squared exponential kernel (SE kernel) or Gaussian kernel is deﬁned by
                           
                             1
            κ(x, x ) = exp − (x − x )T Σ−1 (x − x )                                              (14.1)
                             2
         If Σ is diagonal, this can be written as
                             ⎛                           ⎞
                                  1 D
                                        1
            κ(x, x ) = exp ⎝−              (xj − xj )2 ⎠                                          (14.2)
                                  2 j=1 σj2

         We can interpret the σj as deﬁning the characteristic length scale of dimension j. If σj = ∞,
         the corresponding dimension is ignored; hence this is known as the ARD kernel. If Σ is
         spherical, we get the isotropic kernel
                             
                                 ||x − x ||2
            κ(x, x ) = exp −                                                                     (14.3)
                                     2σ 2
         Here σ 2 is known as the bandwidth. Equation 14.3 is an example of a a radial basis function
         or RBF kernel, since it is only a function of ||x − x ||.

14.2.2   Kernels for comparing documents
         When performing document classiﬁcation or retrieval, it is useful to have a way of comparing
         two documents, xi and xi . If we use a bag of words representation, where xij is the number
         of times words j occurs in document i, we can use the cosine similarity, which is deﬁned by
                                 xTi xi
            κ(xi , xi ) =                                                                          (14.4)
                             ||xi ||2 ||xi ||2
         This quantity measures the cosine of the angle between xi and xi when interpreted as vectors.
         Since xi is a count vector (and hence non-negative), the cosine similarity is between 0 and 1,
         where 0 means the vectors are orthogonal and therefore have no words in common.
            Unfortunately, this simple method does not work very well, for two main reasons. First, if xi
         has any word in common with xi , it is deemed similar, even though some popular words, such
         as “the” or “and” occur in many documents, and are therefore not discriminative. (These are
         known as stop words.) Second, if a discriminative word occurs many times in a document, the
         similarity is artiﬁcially boosted, even though word usage tends to be bursty, meaning that once
         a word is used in a document it is very likely to be used again (see Section 3.5.5).
            Fortunately, we can signiﬁcantly improve performance using some simple preprocessing. The
         idea is to replace the word count vector with a new feature vector called the TF-IDF representa-
         tion, which stands for “term frequency inverse document frequency”. We deﬁne this as follows.
         First, the term frequency is deﬁned as a log-transform of the count:
            tf(xij )  log(1 + xij )                                                                (14.5)
         This reduces the impact of words that occur many times within one document. Second, the
         inverse document frequency is deﬁned as
                                 N
            idf(j)  log       N
                                                                                           (14.6)
                         1 + i=1 I(xij > 0)
         14.2. Kernel functions                                                                                          481


         where N is the total number of documents, and the denominator counts how many documents
         contain term j. Finally, we deﬁne
            tf-idf(xi )  [tf(xij ) × idf(j)]Vj=1                                                                      (14.7)
         (There are several other ways to deﬁne the tf and idf terms, see (Manning et al. 2008) for details.)
         We then use this inside the cosine similarity measure. That is, our new kernel has the form
                                φ(xi )T φ(xi )
            κ(xi , xi ) =                                                                                             (14.8)
                             ||φ(xi )||2 ||φ(xi )||2
         where φ(x) = tf-idf(x). This gives good results for information retrieval (Manning et al. 2008).
           A probabilistic interpretation of the tf-idf kernel is given in (Elkan 2005).

14.2.3   Mercer (positive deﬁnite) kernels
         Some methods that we will study require that the kernel function satisfy the requirement that
         the Gram matrix, deﬁned by
                 ⎛                               ⎞
                   κ(x1 , x1 ) · · · κ(x1 , xN )
                 ⎜               ..              ⎟
            K=⎝                   .              ⎠                                               (14.9)
                    κ(xN , x1 )      ···        κ(xN , xN )
         be positive deﬁnite for any set of inputs {xi }N i=1 . We call such a kernel a Mercer kernel, or
         positive deﬁnite kernel. It can be shown (Schoelkopf and Smola 2002) that the Gaussian kernel
         is a Mercer kernel as is the cosine similarity kernel (Sahami and Heilman 2006).
            The importance of Mercer kernels is the following result, known as Mercer’s theorem. If the
         Gram matrix is positive deﬁnite, we can compute an eigenvector decomposition of it as follows
            K = UT ΛU                                                                                                 (14.10)
         where Λ is a diagonal matrix of eigenvalues λi > 0. Now consider an element of K:
                      1              1
            kij = (Λ 2 U:,i )T (Λ 2 U:j )                                                                             (14.11)
                                         1
         Let us deﬁne φ(xi ) = Λ U:i . Then we can write
                                         2


            kij = φ(xi )T φ(xj )                                                                                      (14.12)
         Thus we see that the entries in the kernel matrix can be computed by performing an inner
         product of some feature vectors that are implicitly deﬁned by the eigenvectors U. In general, if
         the kernel is Mercer, then there exists a function φ mapping x ∈ X to RD such that
            κ(x, x ) = φ(x)T φ(x )                                                                                  (14.13)
         where φ depends on the eigen functions of κ (so D is a potentially inﬁnite dimensional space).
           For example, consider the (non-stationary) polynomial kernel κ(x, x ) = (γxT x + r)M ,
         where r > 0. One can show that the corresponding feature vector φ(x) will contain all terms
         up to degree M . For example, if M = 2, γ = r = 1 and x, x ∈ R2 , we have
            (1 + xT x )2     =     (1 + x1 x1 + x2 x2 )2                                                           (14.14)
                              =     1+       2x1 x1   +   2x2 x2           2
                                                                     + (x1 x1 ) +   (x2 x2 )2   +   2x1 x1 x2 x2   (14.15)
         482                                                                               Chapter 14. Kernels


         This can be written as φ(x)T φ(x ), where
                       √      √               √
            φ(x) = [1, 2x1 , 2x2 , x21 , x22 , 2x1 x2 ]T                                                  (14.16)

         So using this kernel is equivalent to working in a 6 dimensional feature space. In the case of
         a Gaussian kernel, the feature map lives in an inﬁnite dimensional space. In such a case, it is
         clearly infeasible to explicitly represent the feature vectors.
            An example of a kernel that is not a Mercer kernel is the so-called sigmoid kernel, deﬁned
         by

            κ(x, x ) = tanh(γxT x + r)                                                                  (14.17)

         (Note that this uses the tanh function even though it is called a sigmoid kernel.) This kernel
         was inspired by the multi-layer perceptron (see Section 16.5), but there is no real reason to use
         it. (For a true “neural net kernel”, which is positive deﬁnite, see Section 15.4.5.)
             In general, establishing that a kernel is a Mercer kernel is difficult, and requires techniques
         from functional analysis. However, one can show that it is possible to build up new Mercer
         kernels from simpler ones using a set of standard rules. For example, if κ1 and κ2 are both
         Mercer, so is κ(x, x ) = κ1 (x, x ) + κ2 (x, x ). See e.g., (Schoelkopf and Smola 2002) for details.

14.2.4   Linear kernels
         Deriving the feature vector implied by a kernel is in general quite difficult, and only possible if
         the kernel is Mercer. However, deriving a kernel from a feature vector is easy: we just use
            κ(x, x ) = φ(x)T φ(x ) = φ(x), φ(x )                                                     (14.18)

         If φ(x) = x, we get the linear kernel, deﬁned by

            κ(x, x ) = xT x                                                                             (14.19)

         This is useful if the original data is already high dimensional, and if the original features are
         individually informative, e.g., a bag of words representation where the vocabulary size is large,
         or the expression level of many genes. In such a case, the decision boundary is likely to be
         representable as a linear combination of the original features, so it is not necessary to work in
         some other feature space.
            Of course, not all high dimensional problems are linearly separable. For example, images are
         high dimensional, but individual pixels are not very informative, so image classiﬁcation typically
         requires non-linear kernels (see e.g., Section 14.2.7).

14.2.5   Matern kernels
         The Matern kernel, which is commonly used in Gaussian process regression (see Section 15.2),
         has the following form
                             √    ν     √
                     21−ν     2νr         2νr
            κ(r) =                  Kν                                                        (14.20)
                     Γ(ν)                
         14.2. Kernel functions                                                                          483


         where r = ||x − x ||, ν > 0,  > 0, and Kν is a modiﬁed Bessel function. As ν → ∞, this
         approaches the SE kernel. If ν = 12 , the kernel simpliﬁes to

            κ(r) = exp(−r/)                                                                           (14.21)

         If D = 1, and we use this kernel to deﬁne a Gaussian process (see Chapter 15), we get the
         Ornstein-Uhlenbeck process, which describes the velocity of a particle undergoing Brownian
         motion (the corresponding function is continuous but not differentiable, and hence is very
         “jagged”).

14.2.6   String kernels
         The real power of kernels arises when the inputs are structured objects. As an example, we now
         describe one way of comparing two variable length strings using a string kernel. We follow the
         presentation of (Rasmussen and Williams 2006, p100) and (Hastie et al. 2009, p668).
            Consider two strings x, and x of lengths D, D’, each deﬁned over the alphabet A.
         For example, consider two amino acid sequences, deﬁned over the 20 letter alphabet A =
         {A, R, N, D, C, E, Q, G, H, I, L, K, M, F, P, S, T, W, Y, V }. Let x be the following sequence
         of length 110

         IPTSALVKETLALLSTHRTLLIANETLRIPVPVHKNHQLCTEEIFQGIGTLESQTVQGGTV
         ERLFKNLSLIKKYIDGQKKKCGEERRRVNQFLDYLQEFLGVMNTEWI

           and let x be the following sequence of length 153

         PHRRDLCSRSIWLARKIRSDLTALTESYVKHQGLWSELTEAERLQENLQAYRTFHVLLA
         RLLEDQQVHFTPTEGDFHQAIHTLLLQVAAFAYQIEELMILLEYKIPRNEADGMLFEKK
         LWGLKVLQELSQWTVRSIHDLRFISSHQTGIP

            These strings have the substring LQE in common. We can deﬁne the similarity of two strings
         to be the number of substrings they have in common.
            More formally and more generally, let us say that s is a substring of x if we can write x = usv
         for some (possibly empty) strings u, s and v. Now let φs (x) denote the number of times that
         substring s appears in string x. We deﬁne the kernel between two strings x and x as
                         
             κ(x, x ) =     ws φs (x)φs (x )                                                        (14.22)
                        s∈A∗

         where ws ≥ 0 and A∗ is the set of all strings (of any length) from the alphabet A (this is known
         as the Kleene star operator). This is a Mercer kernel, and be computed in O(|x| + |x |) time
         (for certain settings of the weights {ws }) using suffix trees (Leslie et al. 2003; Vishwanathan and
         Smola 2003; Shawe-Taylor and Cristianini 2004).
            There are various cases of interest. If we set ws = 0 for |s| > 1 we get a bag-of-characters
         kernel. This deﬁnes φ(x) to be the number of times each character in A occurs in x. If we
         require s to be bordered by white-space, we get a bag-of-words kernel, where φ(x) counts how
         many times each possible word occurs. Note that this is a very sparse vector, since most words
         484                                                                              Chapter 14. Kernels




                                                                              optimal partial
                                                                                matching




         Figure 14.1 Illustration of a pyramid match kernel computed from two images. Used with kind permission
         of Kristen Grauman.


         will not be present. If we only consider strings of a ﬁxed length k, we get the k-spectrum
         kernel. This has been used to classify proteins into SCOP superfamilies (Leslie et al. 2003). For
         example if k = 3, we have φLQE (x) = 1 and φLQE (x ) = 2 for the two strings above.
           Various extensions are possible. For example, we can allow character mismatches (Leslie et al.
         2003). And we can generalize string kernels to compare trees, as described in (Collins and Duffy
         2002). This is useful for classifying (or ranking) parse trees, evolutionary trees, etc.

14.2.7   Pyramid match kernels
         In computer vision, it is common to create a bag-of-words representation of an image by
         computing a feature vector (often using SIFT (Lowe 1999)) from a variety of points in the image,
         commonly chosen by an interest point detector. The feature vectors at the chosen places are
         then vector-quantized to create a bag of discrete symbols.
            One way to compare two variable-sized bags of this kind is to use a pyramid match kernel
         (Grauman and Darrell 2007). The basic idea is illustrated in Figure 14.1. Each feature set is
         mapped to a multi-resolution histogram. These are then compared using weighted histogram
         intersection. It turns out that this provides a good approximation to the similarity measure one
         would obtain by performing an optimal bipartite match at the ﬁnest spatial resolution, and then
         summing up pairwise similarities between matched points. However, the histogram method is
         faster and is more robust to missing and unequal numbers of points. This is a Mercer kernel.
           14.2. Kernel functions                                                                          485


 14.2.8    Kernels derived from probabilistic generative models
           Suppose we have a probabilistic generative model of feature vectors, p(x|θ). Then there are
           several ways we can use this model to deﬁne kernel functions, and thereby make the model
           suitable for discriminative tasks. We sketch two approaches below.

14.2.8.1   Probability product kernels
           One approach is to deﬁne a kernel as follows:
                          
             κ(xi , xj ) = p(x|xi )ρ p(x|xj )ρ dx                                                       (14.23)

           where ρ > 0, and p(x|xi ) is often approximated by p(x|θ̂(xi )), where θ̂(xi ) is a parameter
           estimate computed using a single data vector. This is called a probability product kernel
           (Jebara et al. 2004).
              Although it seems strange to ﬁt a model to a single data point, it is important to bear in
           mind that the ﬁtted model is only being used to see how similar two objects are. In particular,
           if we ﬁt the model to xi and then the model thinks xj is likely, this means that xi and xj are
           similar. For example, suppose p(x|θ) = N (μ, σ 2 I), where σ 2 is ﬁxed. If ρ = 1, and we use
           μ̂(xi ) = xi and μ̂(xj ) = xj , we ﬁnd (Jebara et al. 2004, p825) that
                                             
                                 1               1
               κ(xi , xj ) =             exp   − 2 ||xi − xj ||2                                   (14.24)
                             (4πσ 2 )D/2        4σ
           which is (up to a constant factor) the RBF kernel.
              It turns out that one can compute Equation 14.23 for a variety of generative models, including
           ones with latent variables, such as HMMs. This provides one way to deﬁne kernels on variable
           length sequences. Furthermore, this technique works even if the sequences are of real-valued
           vectors, unlike the string kernel in Section 14.2.6. See (Jebara et al. 2004) for further details.

14.2.8.2   Fisher kernels
           A more efficient way to use generative models to deﬁne kernels is to use a Fisher kernel
           (Jaakkola and Haussler 1998) which is deﬁned as follows:
              κ(x, x ) = g(x)T F−1 g(x )                                                              (14.25)

           where g is the gradient of the log likelihood, or score vector, evaluated at the MLE θ̂
                                    (
             g(x)  ∇θ log p(x|θ)(θ̂                                                                    (14.26)
           and F is the Fisher information matrix, which is essentially the Hessian:
                                   (
              F = ∇∇ log p(x|θ)(    θ̂
                                                                                                        (14.27)

           Note that θ̂ is a function of all the data, so the similarity of x and x is computed in the context
           of all the data as well. Also, note that we only have to ﬁt one model.
              The intuition behind the Fisher kernel is the following: let g(x) be the direction (in parameter
           space) in which x would like the parameters to move (from θ̂) so as to maximize its own
         486                                                                                                  Chapter 14. Kernels

                                                                   poly10                                 rbf prototypes
                                                   7                                      7


                                                   6                                      6


                                                   5                                      5


                                                   4                                      4


                                                   3                                      3


                                                   2                                      2


                                                   1                                      1


                                                   0                                      0


                                                  −1                                     −1
                                                       0   1   2     3      4   5   6         0   1   2         3          4   5   6



                            (a)                                    (b)                                       (c)

         Figure 14.2 (a) xor truth table. (b) Fitting a linear logistic regression classiﬁer using degree 10 polynomial
         expansion. (c) Same model, but using an RBF kernel with centroids speciﬁed by the 4 black crosses. Figure
         generated by logregXorDemo.



         likelihood; call this the directional gradient. Then we say that two vectors x and x are similar
         if their directional gradients are similar wrt the the geometry encoded by the curvature of the
         likelihood function (see Section 7.5.3).
            Interestingly, it was shown in (Saunders et al. 2003) that the string kernel of Section 14.2.6
         is equivalent to the Fisher kernel derived from an L’th order Markov chain (see Section 17.2).
         Also, it was shown in (Elkan 2005) that a kernel deﬁned by the inner product of TF-IDF vectors
         (Section 14.2.2) is approximately equal to the Fisher kernel for a certain generative model of text
         based on the compound Dirichlet multinomial model (Section 3.5.5).

 14.3    Using kernels inside GLMs
         In this section, we discuss one simple way to use kernels for classiﬁcation and regression. We
         will see other approaches later.

14.3.1   Kernel machines
         We deﬁne a kernel machine to be a GLM where the input feature vector has the form
             φ(x) = [κ(x, μ1 ), . . . , κ(x, μK )]                                                                                     (14.28)

         where μk ∈ X are a set of K centroids. If κ is an RBF kernel, this is called an RBF network.
         We discuss ways to choose the μk parameters below. We will call Equation 14.28 a kernelised
         feature vector. Note that in this approach, the kernel need not be a Mercer kernel.
            We can use the kernelized feature vector for logistic regression by deﬁning p(y|x, θ) =
         Ber(wT φ(x)). This provides a simple way to deﬁne a non-linear decision boundary. As an
         example, consider the data coming from the exclusive or or xor function. This is a binary-
         valued function of two binary inputs. Its truth table is shown in Figure 14.2(a). In Figure 14.2(b),
         we have show some data labeled by the xor function, but we have jittered the points to make
         the picture clearer.1 We see we cannot separate the data even using a degree 10 polynomial.

         1. Jittering is a common visualization trick in statistics, wherein points in a plot/display that would otherwise land on
         top of each other are dispersed with uniform additive noise.
         14.3. Using kernels inside GLMs                                                                    487


              20                             0.8

                                             0.6                                  5
              10
                                             0.4                                  10
               0                                                                  15
                                             0.2
                                                                                  20
             −10                              0
                0    5     10    15    20      0               5   10   15   20        2   4   6   8   10


              20                            0.04

                                            0.03                                  5
              10
                                            0.02                                  10
               0                                                                  15
                                            0.01
                                                                                  20
             −10                              0
                0    5     10    15    20      0               5   10   15   20        2   4   6   8   10
                                                          −3
                                                   x 10
              20                              8

                                             7.8                                  5
              10
                                             7.6                                  10
               0                                                                  15
                                             7.4
                                                                                  20
             −10                             7.2
                0    5     10    15    20       0              5   10   15   20        2   4   6   8   10




         Figure 14.3 RBF basis in 1d. Left column: ﬁtted function. Middle column: basis functions evaluated on
         a grid. Right column: design matrix. Top to bottom we show different bandwidths: τ = 0.1, τ = 0.5,
         τ = 50. Figure generated by linregRbfDemo.



         However, using an RBF kernel and just 4 prototypes easily solves the problem as shown in
         Figure 14.2(c).
            We can also use the kernelized feature vector inside a linear regression model by deﬁning
         p(y|x, θ) = N (wT φ(x), σ 2 ). For example, Figure 14.3 shows a 1d data set ﬁt with K = 10
         uniformly spaced RBF prototypes, but with the bandwidth ranging from small to large. Small
         values lead to very wiggly functions, since the predicted function value will only be non-zero for
         points x that are close to one of the prototypes μk . If the bandwidth is very large, the design
         matrix reduces to a constant matrix of 1’s, since each point is equally close to every prototype;
         hence the corresponding function is just a straight line.

14.3.2   L1VMs, RVMs, and other sparse vector machines
         The main issue with kernel machines is: how do we choose the centroids μk ? If the input is
         low-dimensional Euclidean space, we can uniformly tile the space occupied by the data with
         prototypes, as we did in Figure 14.2(c). However, this approach breaks down in higher numbers
         of dimensions because of the curse of dimensionality. If μk ∈ RD , we can try to perform
         numerical optimization of these parameters (see e.g., (Haykin 1998)), or we can use MCMC
         inference, (see e.g., (Andrieu et al. 2001; Kohn et al. 2001)), but the resulting objective function
         / posterior is highly multimodal. Furthermore, these techniques is hard to extend to structured
         input spaces, where kernels are most useful.
            Another approach is to ﬁnd clusters in the data and then to assign one prototype per cluster
       488                                                                            Chapter 14. Kernels


       center (many clustering algorithms just need a similarity metric as input). However, the regions
       of space that have high density are not necessarily the ones where the prototypes are most
       useful for representing the output, that is, clustering is an unsupervised task that may not yield
       a representation that is useful for prediction. Furthermore, there is the need to pick the number
       of clusters.
          A simpler approach is to make each example xi be a prototype, so we get
          φ(x) = [κ(x, x1 ), . . . , κ(x, xN )]                                                     (14.29)
       Now we see D = N , so we have as many parameters as data points. However, we can use any
       of the sparsity-promoting priors for w discussed in Chapter 13 to efficiently select a subset of
       the training exemplars. We call this a sparse vector machine.
          The most natural choice is to use 1 regularization (Krishnapuram et al. 2005). (Note that in
       the multi-class case, it is necessary to use group lasso, since each exemplar is associated with C
       weights, one per class.) We call this L1VM, which stands for “1 -regularized vector machine”. By
       analogy, we deﬁne the use of an 2 regularizer to be a L2VM or “2 -regularized vector machine”;
       this of course will not be sparse.
          We can get even greater sparsity by using ARD/SBL, resulting in a method called the rele-
       vance vector machine or RVM (Tipping 2001). One can ﬁt this model using generic ARD/SBL
       algorithms, although in practice the most common method is the greedy algorithm in (Tipping
       and Faul 2003) (this is the algorithm implemented in Mike Tipping’s code, which is bundled with
       PMTK).
          Another very popular approach to creating a sparse kernel machine is to use a support
       vector machine or SVM. This will be discussed in detail in Section 14.5. Rather than using a
       sparsity-promoting prior, it essentially modiﬁes the likelihood term, which is rather unnatural
       from a Bayesian point of view. Nevertheless, the effect is similar, as we will see.
          In Figure 14.4, we compare L2VM, L1VM, RVM and an SVM using the same RBF kernel on a
       binary classiﬁcation problem in 2d. For simplicity, λ was chosen by hand for L2VM and L1VM;
       for RVMs, the parameters are estimated using empirical Bayes; and for the SVM, we use CV to
       pick C = 1/λ, since SVM performance is very sensitive to this parameter (see Section 14.5.3).
       We see that all the methods give similar performance. However, RVM is the sparsest (and hence
       fastest at test time), then L1VM, and then SVM. RVM is also the fastest to train, since CV for an
       SVM is slow. (This is despite the fact that the RVM code is in Matlab and the SVM code is in
       C.) This result is fairly typical.
          In Figure 14.5, we compare L2VM, L1VM, RVM and an SVM using an RBF kernel on a 1d
       regression problem. Again, we see that predictions are quite similar, but RVM is the sparsest,
       then L2VM, then SVM. This is further illustrated in Figure 14.6.

14.4   The kernel trick
       Rather than deﬁning our feature vector in terms of kernels, φ(x) = [κ(x, x1 ), . . . , κ(x, xN )],
       we can instead work with the original feature vectors x, but modify the algorithm so that it
       replaces all inner products of the form x, x  with a call to the kernel function, κ(x, x ). This
       is called the kernel trick. It turns out that many algorithms can be kernelized in this way. We
       give some examples below. Note that we require that the kernel be a Mercer kernel for this trick
       to work.
         14.4. The kernel trick                                                                                      489


                               logregL2, nerr=174                                  logregL1, nerr=169


            3                                                        3


            2                                                        2


            1                                                        1


            0                                                        0


           −1                                                       −1


           −2                                                       −2


           −3                                                       −3

                  −2      −1          0             1   2   3            −2   −1          0             1   2    3

                                     (a)                                                 (b)
                                RVM, nerr=173                                       SVM, nerr=173


            3                                                        3


            2                                                        2


            1                                                        1


            0                                                        0


           −1                                                       −1


           −2                                                       −2


           −3                                                       −3

                  −2      −1          0             1   2   3            −2   −1          0             1   2    3

                                     (c)                                                 (d)

         Figure 14.4 Example of non-linear binary classiﬁcation using an RBF kernel with bandwidth σ = 0.3. (a)
         L2VM with λ = 5. (b) L1VM with λ = 1. (c) RVM. (d) SVM with C = 1/λ chosen by cross validation.
         Black circles denote the support vectors. Figure generated by kernelBinaryClassifDemo.



14.4.1   Kernelized nearest neighbor classiﬁcation
         Recall that in a 1NN classiﬁer (Section 1.4.2), we just need to compute the Euclidean distance of
         a test vector to all the training points, ﬁnd the closest one, and look up its label. This can be
         kernelized by observing that
            ||xi − xi ||22 = xi , xi  + xi , xi  − 2xi , xi                                           (14.30)
         This allows us to apply the nearest neighbor classiﬁer to structured data objects.

14.4.2   Kernelized K-medoids clustering
         K-means clustering (Section 11.4.2.5) uses Euclidean distance to measure dissimilarity, which is
         not always appropriate for structured objects. We now describe how to develop a kernelized
490                                                                                                  Chapter 14. Kernels


                                linregL2                                                  linregL1
 1.2                                                            1.2


  1                                                              1


 0.8                                                            0.8


 0.6                                                            0.6


 0.4                                                            0.4


 0.2                                                            0.2


  0                                                              0


−0.2                                                           −0.2


−0.4                                                           −0.4
   −2   −1.5    −1       −0.5      0       0.5   1   1.5   2      −2   −1.5   −1   −0.5      0        0.5   1   1.5   2

                                (a)                                                       (b)
                                 RVM                                                       SVM
 1.2                                                            1.2


  1                                                              1


 0.8                                                            0.8


 0.6                                                            0.6


 0.4                                                            0.4


 0.2                                                            0.2


  0                                                              0


−0.2                                                           −0.2


−0.4                                                           −0.4
   −2   −1.5    −1       −0.5      0       0.5   1   1.5   2      −2   −1.5   −1   −0.5      0        0.5   1   1.5   2

                                (c)                                                       (d)

Figure 14.5 Example of kernel based regression on the noisy sinc function using an RBF kernel with
bandwidth σ = 0.3. (a) L2VM with λ = 0.5. (b) L1VM with λ = 0.5. (c) RVM. (d) SVM regression with
C = 1/λ chosen by cross validation, and  = 0.1 (the default for SVMlight). Red circles denote the
retained training exemplars. Figure generated by kernelRegrDemo.



version of the algorithm.
   The ﬁrst step is to replace the K-means algorithm with the K-medoids algorothm. This is
similar to K-means, but instead of representing each cluster’s centroid by the mean of all data
vectors assigned to this cluster, we make each centroid be one of the data vectors themselves.
Thus we always deal with integer indexes, rather than data objects. We assign objects to their
closest centroids as before. When we update the centroids, we look at each object that belongs
to the cluster, and measure the sum of its distances to all the others in the same cluster; we
then pick the one which has the smallest such sum:
                     
    mk = argmin           d(i, i )                                                      (14.31)
               i:zi =k
                          i :zi =k
14.4. The kernel trick                                                                                              491


                      weights for linregL2                                       weights for linregL1

                                                         0.12
 0.06
                                                          0.1

 0.04                                                    0.08

                                                         0.06
 0.02

                                                         0.04
   0
                                                         0.02
−0.02
                                                               0

−0.04                                                   −0.02


−0.06                                                   −0.04

                                                        −0.06
        0     20       40            60      80   100                  0    20    40            60       80    100

                            (a)                                                        (b)
                       weights for RVM                                           weights for SVM

   1                                                     1.5


  0.8                                                     1


  0.6
                                                         0.5

  0.4
                                                          0

  0.2
                                                        −0.5
   0

                                                         −1
 −0.2

                                                        −1.5
        0     20       40            60      80   100              0       20    40            60       80    100

                            (c)                                                        (d)

Figure 14.6 Coefficient vectors of length N = 100 for the models in Figure 14.6. Figure generated by
kernelRegrDemo.



where

    d(i, i )  ||xi − xi ||22                                                                               (14.32)

This takes O(n2k ) work per cluster, whereas K-means takes O(nk D) to update each cluster. The
pseudo-code is given in Algorithm 5. This method can be modiﬁed to derive a classiﬁer, by
computing the nearest medoid for each class. This is known as nearest medoid classiﬁcation
(Hastie et al. 2009, p671).
  This algorithm can be kernelized by using Equation 14.30 to replace the distance computation,
d(i, i ).
           492                                                                       Chapter 14. Kernels


            Algorithm 14.1: K-medoids algorithm
           1   initialize m1:K as a random subset of size K from {1, . . . , N };
           2   repeat
           3        zi = argmink d(i, mk ) for i = 1 : N ;
           4        mk ← argmini:zi =k i :zi =k d(i, i ) for k = 1 : K;
           5   until converged;



 14.4.3    Kernelized ridge regression
           Applying the kernel trick to distance-based methods was straightforward. It is not so obvious
           how to apply it to parametric models such as ridge regression. However, it can be done, as we
           now explain. This will serve as a good “warm up” for studying SVMs.

14.4.3.1   The primal problem
           Let x ∈ RD be some feature vector, and X be the corresponding N × D design matrix. We
           want to minimize
               J(w) = (y − Xw)T (y − Xw) + λ||w||2                                                 (14.33)
           The optimal solution is given by
                                                     
               w = (XT X + λID )−1 XT y = (                xi xTi + λID )−1 XT y                   (14.34)
                                                      i


14.4.3.2   The dual problem
           Equation 14.34 is not yet in the form of inner products. However, using the matrix inversion
           lemma (Equation 4.107) we rewrite the ridge estimate as follows
               w = XT (XXT + λIN )−1 y                                                             (14.35)
           which takes O(N 3 + N 2 D) time to compute. This can be advantageous if D is large. Further-
           more, we see that we can partially kernelize this, by replacing XXT with the Gram matrix K.
           But what about the leading XT term?
             Let us deﬁne the following dual variables:
               α       (K + λIN )−1 y                                                             (14.36)
           Then we can rewrite the primal variables as follows
                                  
                                  N
               w    =    XT α =         αi x i                                                     (14.37)
                                  i=1

           This tells us that the solution vector is just a linear sum of the N training vectors. When we
           plug this in at test time to compute the predictive mean, we get
                                 
                                 N                  
                                                    N
               fˆ(x) = wT x =          αi xTi x =         αi κ(x, xi )                             (14.38)
                                 i=1                i=1
           14.4. The kernel trick                                                                                                      493


                      Eigenvalue=22.558             Eigenvalue=20.936             Eigenvalue=4.648              Eigenvalue=3.988
                1.5                           1.5                           1.5                           1.5


                 1                             1                             1                             1


                0.5                           0.5                           0.5                           0.5


                 0                             0                             0                             0


               −0.5                          −0.5                          −0.5                          −0.5
                  −1          0          1      −1          0          1      −1          0          1      −1          0          1


                      Eigenvalue=3.372              Eigenvalue=2.956              Eigenvalue=2.760              Eigenvalue=2.211
                1.5                           1.5                           1.5                           1.5


                 1                             1                             1                             1


                0.5                           0.5                           0.5                           0.5


                 0                             0                             0                             0


               −0.5                          −0.5                          −0.5                          −0.5
                  −1          0          1      −1          0          1      −1          0          1      −1          0          1

           Figure 14.7 Visualization of the ﬁrst 8 kernel principal component basis functions derived from some 2d
           data. We use an RBF kernel with σ 2 = 0.1. Figure generated by kpcaScholkopf, written by Bernhard
           Scholkopf.



           So we have succesfully kernelized ridge regression by changing from primal to dual variables.
           This technique can be applied to many other linear models, such as logistic regression.

14.4.3.3   Computational cost
           The cost of computing the dual variables α is O(N 3 ), whereas the cost of computing the primal
           variables w is O(D3 ). Hence the kernel method can be useful in high dimensional settings,
           even if we only use a linear kernel (c.f., the SVD trick in Equation 7.44). However, prediction
           using the dual variables takes O(N D) time, while prediction using the primal variables only
           takes O(D) time. We can speedup prediction by making α sparse, as we discuss in Section 14.5.

 14.4.4    Kernel PCA
           In Section 12.2, we saw how we could compute a low-dimensional linear embedding of some
           data using PCA. This required ﬁnding the eigenvectors of the sample covariance matrix S =
494                                                                                           Chapter 14. Kernels

1     N
N     i=1  xi xTi = (1/N )XT X. However, we can also compute PCA by ﬁnding the eigenvectors
of the inner product matrix XXT , as we show below. This will allow us to produce a nonlinear
embedding, using the kernel trick, a method known as kernel PCA (Schoelkopf et al. 1998).
   First, let U be an orthogonal matrix containing the eigenvectors of XXT with corresponding
eigenvalues in Λ. By deﬁnition we have (XXT )U = UΛ. Pre-multiplying by XT gives
    (XT X)(XT U) = (XT U)Λ                                                                                 (14.39)
from which we see that the eigenvectors of XT X (and hence of S) are V = XT U, with eigen-
values given by Λ as before. However, these eigenvectors are not normalized, since ||vj ||2 =
                                                                                             1
uTj XXT uj = λj uTj uj = λj . So the normalized eigenvectors are given by Vpca = XT UΛ− 2 .
This is a useful trick for regular PCA if D > N , since XT X has size D × D, whereas XXT
has size N × N . It will also allow us to use the kernel trick, as we now show.
   Now let K = XXT be the Gram matrix. Recall from Mercer’s theorem that the use of a kernel
implies some underlying feature space, so we are implicitly replacing xi with φ(xi ) = φi . Let
Φ be the corresponding (notional) design matrix, and Sφ = N1 i φi φTi be the corresponding
                                                                                             1
(notional) covariance matrix in feature space. The eigenvectors are given by Vkpca = ΦT UΛ− 2 ,
where U and Λ contain the eigenvectors and eigenvalues of K. Of course, we can’t actually
compute Vkpca , since φi is potentially inﬁnite dimensional. However, we can compute the
projection of a test vector x∗ onto the feature space as follows:
                                 1               1
    φT∗ Vkpca = φT∗ ΦUΛ− 2 = kT∗ UΛ− 2                                                                     (14.40)
where k∗ = [κ(x∗ , x1 ), . . . , κ(x∗ , xN )].
   There is one ﬁnal detail to worry about. So far, we have assumed the projected data has
zero mean, which is not the case in general. We cannot simply subtract off the mean in
feature space. However, there is a trick we can use. Deﬁne the centered feature vector as
φ̃i = φ(xi ) − N1 j=1 φ(xj ). The Gram matrix of the centered feature vectors is given by
                    N


                  T
    K̃ij    =   φ̃i φ̃j                                                                                    (14.41)
                           1    
                                N
                                                 1   
                                                     N
                                                                      1    
                                                                           N 
                                                                             M
            =   φTi φj −              φTi φk −             φTj φk +                  φTk φl                (14.42)
                           N                     N                    N2
                                k=1                  k=1                   k=1 l=1

                                1                1                1 
                                  N                 N                 N M
            =   κ(xi , xj ) −       κ(xi , xk ) −     κ(xj , xk ) + 2     κ(xk , xl ) (14.43)
                                N                 N                N
                                     k=1                     k=1                      k=1 l=1

This can be expressed in matrix notation as follows:
    K̃     =    HKH                                                                                        (14.44)
where H  I − N1 1N 1TN . is the centering matrix. We can convert all this algebra into the
pseudocode shown in Algorithm 9.
  Whereas linear PCA is limited to using L ≤ D components, in kPCA, we can use up to N
components, since the rank of Φ is N ×D∗ , where D∗ is the (potentially inﬁnite) dimensionality
of embedded feature vectors. Figure 14.7 gives an example of the method applied to some
D = 2 dimensional data using an RBF kernel. We project points in the unit grid onto the ﬁrst
14.4. The kernel trick                                                                                           495


 Algorithm 14.2: Kernel PCA
1     Input: K of size N × N , K∗ of size N∗ × N , num. latent dimensions L;
2     O = 1N 1TN /N ;
3     K̃ = K − OK − KO + OKO ;
4     [U, Λ] = eig(K̃) ;
5     for i = 1 : N√do
6         v i = ui / λi
7     O∗ = 1N∗ 1TN /N ;
8     K̃∗ = K∗ − O∗ K∗ − K∗ O∗ + O∗ K∗ O∗ ;
9     Z = K̃∗ V(:, 1 : L)

                            pca                                                         kpca
    0.6                                                    0.6



    0.4                                                    0.4



    0.2                                                    0.2



     0                                                      0



−0.2                                                      −0.2



−0.4                                                      −0.4



−0.6                                                      −0.6



−0.8                                                      −0.8
  −0.6    −0.4   −0.2   0         0.2   0.4   0.6   0.8     −0.8   −0.6   −0.4   −0.2     0    0.2   0.4   0.6   0.8


                            (a)                                                         (b)

Figure 14.8 2d visualization of some 2d data. (a) PCA projection. (b) Kernel PCA projection. Figure
generated by kpcaDemo2, based on code by L.J.P. van der Maaten.



8 components and visualize the corresponding surfaces using a contour plot. We see that the
ﬁrst two component separate the three clusters, and following components split the clusters.
   Although the features learned by kPCA can be useful for classiﬁcation (Schoelkopf et al. 1998),
they are not necessarily so useful for data visualization. For example, Figure 14.8 shows the
projection of the data from Figure 14.7 onto the ﬁrst 2 principal bases computed using PCA and
kPCA. Obviously PCA perfectly represents the data. kPCA represents each cluster by a different
line.
   Of course, there is no need to project 2d data back into 2d. So let us consider a different
data set. We will use a 12 dimensional data set representing the three known phases of ﬂow
in an oil pipeline. (This data, which is widely used to compare data visualization methods, is
synthetic, and comes from (Bishop and James 1993).) We project this into 2d using PCA and
kPCA (with an RBF kernel). The results are shown in Figure 14.9. If we perform nearest neighbor
classiﬁcation in the low-dimensional space, kPCA makes 13 errors and PCA makes 20 (Lawrence
       496                                                                                 Chapter 14. Kernels


                                                                0.3
                   0.5
                                                                .25
                    0
                                                                0.2
                   0.5

                   −1                                           .15

                   1.5                                          0.1
                   −2
                                                                .05
                   2.5
                                                                 0
                   −3

                          −2      −1         0   1      2             0    0.05     0.1   0.15    0.2


                                       (a)                                        (b)

       Figure 14.9 2d representation of 12 dimensional oil ﬂow data. The different colors/symbols represent the
       3 phases of oil ﬂow. (a) PCA. (b) Kernel PCA with Gaussian kernel. Compare to Figure 15.10(b). From Figure
       1 of (Lawrence 2005). Used with kind permission of Neil Lawrence.



       2005). Nevertheless, the kPCA projection is rather unnatural. In Section 15.5, we will discuss
       how to make kernelized versions of probabilistic PCA.
          Note that there is a close connection between kernel PCA and a technique known as mul-
       tidimensional scaling or MDS. This methods ﬁnds a low-dimensional embedding such that
       Euclidean distance in the embedding space approximates the original dissimilarity matrix. See
       e.g., (Williams 2002) for details.

14.5   Support vector machines (SVMs)
       In Section 14.3.2, we saw one way to derive a sparse kernel machine, namely by using a GLM
       with kernel basis functions, plus a sparsity-promoting prior such as 1 or ARD. An alternative
       approach is to change the objective function from negative log likelihood to some other loss
       function, as we discussed in Section 6.5.5. In particular, consider the 2 regularized empirical
       risk function
                         
                         N
          J(w, λ) =            L(yi , ŷi ) + λ||w||2                                                     (14.45)
                         i=1

       where ŷi = wT xi + w0 . (So far this is in the original feature space; we introduce kernels in a
       moment.) If L is quadratic loss, this is equivalent to ridge regression, and if L is the log-loss
       deﬁned in Equation 6.73, this is equivalent to logistic regression.
          In the ridge regression case, we know that the solution to this has the form ŵ = (XT X +
       λI)−1 XT y, and plug-in predictions take the form ŵ0 + ŵT x. As we saw in Section 14.4.3,
       we can rewrite these equations in a way that only involves inner products of the form xT x ,
       which we can replace by calls to a kernel function, κ(x, x ). This is kernelized, but not sparse.
       However, if we replace the quadratic/ log-loss with some other loss function, to be explained
       below, we can ensure that the solution is sparse, so that predictions only depend on a subset
       of the training data, known as support vectors. This combination of the kernel trick plus a
       modiﬁed loss function is known as a support vector machine or SVM. This technique was
         14.5. Support vector machines (SVMs)                                                                     497

                       5                                            y( x )
                                        L2
                      4.5               ε−insensitive

                       4
                                        huber                                             ξ>0

                      3.5
                                                                                                       y+
                       3

                      2.5                                                                               y

                       2                                                                               y−
                      1.5                                                                 ξ∗ > 0

                       1

                      0.5

                       0

                     −0.5
                        −3   −2   −1     0              1   2   3                                  x

                                       (a)                                          (b)

         Figure 14.10 (a) Illustration of 2 , Huber and -insensitive loss functions, where  = 1.5. Figure generated
         by huberLossDemo. (b) Illustration of the -tube used in SVM regression. Points above the tube have
         ξi > 0 and ξi∗ = 0. Points below the tube have ξi = 0 and ξi∗ > 0. Points inside the tube have
         ξi = ξi∗ = 0. Based on Figure 7.7 of (Bishop 2006a).


         originally designed for binary classiﬁcation, but can be extended to regression and multi-class
         classiﬁcation as we explain below.
            Note that SVMs are very unnatural from a probabilistic point of view. First, they encode
         sparsity in the loss function rather than the prior. Second, they encode kernels by using an
         algorithmic trick, rather than being an explicit part of the model. Finally, SVMs do not result in
         probabilistic outputs, which causes various difficulties, especially in the multi-class classiﬁcation
         setting (see Section 14.5.2.4 for details).
            It is possible to obtain sparse, probabilistic, multi-class kernel-based classiﬁers, which work as
         well or better than SVMs, using techniques such as the L1VM or RVM, discussed in Section 14.3.2.
         However, we include a discussion of SVMs, despite their non-probabilistic nature, for two main
         reasons. First, they are very popular and widely used, so all students of machine learning should
         know about them. Second, they have some computational advantages over probabilistic methods
         in the structured output case; see Section 19.7.

14.5.1   SVMs for regression
         The problem with kernelized ridge regression is that the solution vector w depends on all the
         training inputs. We now seek a method to produce a sparse estimate.
            Vapnik (Vapnik et al. 1997) proposed a variant of the Huber loss function (Section 7.4) called
         the epsilon insensitive loss function, deﬁned by
                          
                                0       if |y − ŷ| < 
             L (y, ŷ)                                                                            (14.46)
                           |y − ŷ| −     otherwise
         This means that any point lying inside an -tube around the prediction is not penalized, as in
         Figure 14.10.
            The corresponding objective function is usually written in the following form
                     
                     N
                                         1
            J =C         L (yi , ŷi ) + ||w||2                                                               (14.47)
                     i=1
                                         2
           498                                                                           Chapter 14. Kernels


           where ŷi = f (xi ) = wT xi + w0 and C = 1/λ is a regularization constant. This objective is
           convex and unconstrained, but not differentiable, because of the absolute value function in the
           loss term. As in Section 13.4, where we discussed the lasso problem, there are several possible
           algorithms we could use. One popular approach is to formulate the problem as a constrained
           optimization problem. In particular, we introduce slack variables to represent the degree to
           which each point lies outside the tube:
              yi   ≤       f (xi ) +  + ξi+                                                          (14.48)
              yi   ≥       f (xi ) −  − ξi−                                                          (14.49)
           Given this, we can rewrite the objective as follows:
                       
                       N
                                         1
              J =C         (ξi+ + ξi− ) + ||w||2                                                      (14.50)
                       i=1
                                         2

           This is a quadratic function of w, and must be minimized subject to the linear constraints
           in Equations 14.48-14.49, as well as the positivity constraints ξi+ ≥ 0 and ξi− ≥ 0. This is a
           standard quadratic program in 2N + D + 1 variables.
              One can show (see e.g., (Schoelkopf and Smola 2002)) that the optimal solution has the form
                    
              ŵ =     αi x i                                                                        (14.51)
                       i

           where αi ≥ 0. Furthermore, it turns out that the α vector is sparse, because we don’t care
           about errors which are smaller than . The xi for which αi > 0 are called the support vectors;
           thse are points for which the errors lie on or outside the  tube.
             Once the model is trained, we can then make predictions using
              ŷ(x) = ŵ0 + ŵT x                                                                     (14.52)
           Plugging in the deﬁnition of ŵ we get
                            
              ŷ(x) = ŵ0 +     αi xTi x                                                              (14.53)
                                  i

           Finally, we can replace xTi x with κ(xi , x) to get a kernelized solution:
                             
              ŷ(x) = ŵ0 +      αi κ(xi , x)                                                         (14.54)
                                  i


 14.5.2    SVMs for classiﬁcation
           We now discuss how to apply SVMs to classiﬁcation. We ﬁrst focus on the binary case, and
           then discuss the multi-class case in Section 14.5.2.4.

14.5.2.1   Hinge loss
           In Section 6.5.5, we showed that the negative log likelihood of a logistic regression model,
              Lnll (y, η) = − log p(y|x, w) = log(1 + e−yη )                                          (14.55)
14.5. Support vector machines (SVMs)                                                             499


was a convex upper bound on the 0-1 risk of a binary classiﬁer, where η = f (x) = wT x + w0
is the log odds ratio, and we have assumed the labels are y ∈ {1, −1} rather than {0, 1}. In
this section, we replace the NLL loss with the hinge loss, deﬁned as

   Lhinge (y, η) = max(0, 1 − yη) = (1 − yη)+                                                  (14.56)

Here η = f (x) is our “conﬁdence” in choosing label y = 1; however, it need not have any
probabilistic semantics. See Figure 6.7 for a plot. We see that the function looks like a door
hinge, hence its name. The overall objective has the form

          1            N
   min      ||w||2 + C     (1 − yi f (xi ))+                                                   (14.57)
   w,w0   2            i=1

Once again, this is non-differentiable, because of the max term. However, by introducing slack
variables ξi , one can show that this is equivalent to solving

           1               N
    min      ||w||2 + C     ξi        s.t.     ξi ≥ 0, yi (xTi w + w0 ) ≥ 1 − ξi , i = 1 : N   (14.58)
   w,w0 ,ξ 2
                        i=1

   This is a quadratic program in N + D + 1 variables, subjet to O(N ) constraints. We
can eliminate the primal variables w, w0 and ξi , and just solve the N dual variables, which
correspond to the Lagrange multipliers for the constraints. Standard solvers take O(N 3 ) time.
However, specialized algorithms, which avoid the use of generic QP solvers, have been developed
for this problem, such as the sequential minimal optimization or SMO algorithm (Platt 1998).
In practice this can take O(N 2 ). However, even this can be too slow if N is large. In such
settings, it is common to use linear SVMs, which take O(N ) time to train (Joachims 2006; Bottou
et al. 2007).
   One can show that the solution has the form
          
    ŵ =        αi x i                                                                    (14.59)
           i

where αi = λi yi and where α is sparse (because of the hinge loss). The xi for which αi > 0 are
called support vectors; these are points which are either incorrectly classiﬁed, or are classiﬁed
correctly but are on or inside the margin (we disuss margins below). See Figure 14.12(b) for an
illustration.
    At test time, prediction is done using
                                          
     ŷ(x) = sgn(f (x)) = sgn ŵ0 + ŵT x                                                  (14.60)

Using Equation 14.59 and the kernel trick we have

                         
                         N
   ŷ(x) = sgn ŵ0 +            αi κ(xi , x)                                                   (14.61)
                         i=1

This takes O(sD) time to compute, where s ≤ N is the number of support vectors. This
depends on the sparsity level, and hence on the regularizer C.
500                                                                                   Chapter 14. Kernels




Figure 14.11 Illustration of the large margin principle. Left: a separating hyper-plane with large margin.
Right: a separating hyper-plane with small margin.



            y>0                                                                             y = −1
          y=0
            y<0          R1

                                                                                      ξ>1
                                                                                             y=0

                         R0



                                                   x                            ξ<1          y=1
                                                       f (x)
                                                  r=   w
                     w
                                            x⊥


                                                                                      ξ=0
                                    −w0
                                    w                                   ξ=0



                              (a)                                               (b)

Figure 14.12 (a) Illustration of the geometry of a linear decision boundary in 2d. A point x is classiﬁed
as belonging in decision region R1 if f (x) > 0, otherwise it belongs in decision region R2 ; here f (x)
is known as a discriminant function. The decision boundary is the set of points such that f (x) = 0.
w is a vector which is perpendicular to the decision boundary. The term w0 controls the distance of
the decision boundary from the origin. The signed distance of x from its orthogonal projection onto the
decision boundary, x⊥ , is given by f (x)/||w||. Based on Figure 4.1 of (Bishop 2006a). (b) Illustration of
the soft margin principle. Points with circles around them are support vectors. We also indicate the value
of the corresponding slack variables. Based on Figure 7.3 of (Bishop 2006a).
           14.5. Support vector machines (SVMs)                                                               501


14.5.2.2   The large margin principle
           In this section, we derive Equation 14.58 form a completely different perspective. Recall that our
           goal is to derive a discriminant function f (x) which will be linear in the feature space implied
           by the choice of kernel. Consider a point x in this induced space. Referring to Figure 14.12(a),
           we see that
                              w
               x = x⊥ + r                                                                              (14.62)
                            ||w||
           where r is the distance of x from the decision boundary whose normal vector is w, and x⊥ is
           the orthogonal projection of x onto this boundary. Hence
                                                                   wT w
              f (x)     =    wT x + w0 = (wT x⊥ + w0 ) + r                                                 (14.63)
                                                                   ||w||
                                                                               T       f (x)
           Now f (x⊥ ) = 0 so 0 = wT x⊥ + w0 . Hence f (x) = r √w Tw , and r = ||w||         .
                                                                       w w
              We would like to make this distance r = f (x)/||w|| as large as possible, for reasons illustrated
           in Figure 14.11. In particular, there might be many lines that perfectly separate the training data
           (especially if we work in a high dimensional feature space), but intuitively, the best one to pick
           is the one that maximizes the margin, i.e., the perpendicular distance to the closest point. In
           addition, we want to ensure each point is on the correct side of the boundary, hence we want
           f (xi )yi > 0. So our objective becomes
                      N     yi (wT xi + w0 )
              max min                                                                                      (14.64)
              w,w0 i=1           ||w||
           Note that by rescaling the parameters using w → kw and w0 → kw0 , we do not change the
           distance of any point to the boundary, since the k factor cancels out when we divide by ||w||.
           Therefore let us deﬁne the scale factor such that yi fi = 1 for the point that is closest to the
           decision boundary. We therefore want to optimize
                      1
              min       ||w||2    s.t.       yi (wT xi + w0 ) ≥ 1, i = 1 : N                               (14.65)
              w,w0    2
           (The fact of 21 is added for convenience and doesn’t affect the optimal parameters.) The
           constraint says that we want all points to be on the correct side of the decision boundary with
           a margin of at least 1. For this reason, we say that an SVM is an example of a large margin
           classiﬁer.
              If the data is not linearly separable (even after using the kernel trick), there will be no feasible
           solution in which yi fi ≥ 1 for all i. We therefore introduce slack variables ξi ≥ 0 such that
           ξi = 0 if the point is on or inside the correct margin boundary, and ξi = |yi − fi | otherwise. If
           0 < ξi ≤ 1 the point lies inside the margin, but on the correct side of the decision boundary.
           If ξi > 1, the point lies on the wrong side of the decision boundary. See Figure 14.12(b).
              We replace the hard constraints that yi fi ≥ 0 with the soft margin constraints that yi fi ≥
           1 − ξi . The new objective becomes

                      1                 N
               min      ||w||2 + C     ξi          s.t. ξi ≥ 0, yi (xTi w + w0 ) ≥ 1 − ξi                  (14.66)
              w,w0 ,ξ 2
                                   i=1
           502                                                                               Chapter 14. Kernels


                                                                        Correct log−odds
                                       6
                                                                        RVM y(x)
                                                                        SVM y(x)
                                       4

                                       2

                                       0

                                      −2

                                      −4

                                      −6

                                              0.4      0.6       0.8       1         1.2


           Figure 14.13 Log-odds vs x for 3 different methods. Based on Figure 10 of (Tipping 2001). Used with kind
           permission of Mike Tipping.



           which is the same as Equation 14.58. Since ξi > 1 means point i is misclassiﬁed, we can
           interpret i ξi as an upper bound on the number of misclassiﬁed points.
              The parameter C is a regularization parameter that controls the number of errors we are
           willing to tolerate on the training set. It is common to deﬁne this using C = 1/(νN ), where
           0 < ν ≤ 1 controls the fraction of misclassiﬁed points that we allow during the training phase.
           This is called a ν-SVM classiﬁer. This is usually set using cross-validation (see Section 14.5.3).

14.5.2.3   Probabilistic output
           An SVM classiﬁer produces a hard-labeling, ŷ(x) = sign(f (x)). However, we often want a
           measure of conﬁdence in our prediction. One heuristic approach is to interpret f (x) as the
           log-odds ratio, log p(y=1|x)
                               p(y=0|x) . We can then convert the output of an SVM to a probability using

              p(y = 1|x, θ) = σ(af (x) + b)                                                                 (14.67)

           where a, b can be estimated by maximum likelihood on a separate validation set. (Using the
           training set to estimate a and b leads to severe overﬁtting.) This technique was ﬁrst proposed in
           (Platt 2000).
              However, the resulting probabilities are not particularly well calibrated, since there is nothing
           in the SVM training procedure that justiﬁes interpreting f (x) as a log-odds ratio. To illustrate
           this, consider an example from (Tipping 2001). Suppose we have 1d data where p(x|y = 0) =
           Unif(0, 1) and p(x|y = 1) = Unif(0.5, 1.5). Since the class-conditional distributions overlap in
           the middle, the log-odds of class 1 over class 0 should be zero in [0.5, 1.0], and inﬁnite outside
           this region. We sampled 1000 points from the model, and then ﬁt an RVM and an SVM with
           a Gaussian kenel of width 0.1. Both models can perfectly capture the decision boundary, and
           achieve a generalizaton error of 25%, which is Bayes optimal in this problem. The probabilistic
           output from the RVM is a good approximation to the true log-odds, but this is not the case for
           the SVM, as shown in Figure 14.13.
           14.5. Support vector machines (SVMs)                                                                         503


                                                                                   C1             C3
                                                ?

                                                                                  R1
                                       R1               R2
                                                                                              ?   R3
                                                                                                            C2
                                                                        C1
                                 C1            R3              C2                        R2

                                                                             C2                        C3
                                      Not C1          Not C2
                                               (a)                                      (b)

           Figure 14.14 (a) The one-versus-rest approach. The green region is predicted to be both class 1 and class
           2. (b) The one-versus-one approach. The label of the green region is ambiguous. Based on Figure 4.2 of
           (Bishop 2006a).



14.5.2.4   SVMs for multi-class classiﬁcation
           In Section 8.3.7, we saw how we could “upgrade” a binary logistic regression model to the multi-
           class case, by replacing the sigmoid function with the softmax, and the Bernoulli distribution
           with the multinomial. Upgrading an SVM to the multi-class case is not so easy, since the outputs
           are not on a calibrated scale and hence are hard to compare to each other.
              The obvious approach is to use a one-versus-the-rest approach (also called one-vs-all), in
           which we train C binary classiﬁers, fc (x), where the data from class c is treated as positive,
           and the data from all the other classes is treated as negative. However, this can result in regions
           of input space which are ambiguously labeled, as shown in Figure 14.14(a).
              A common alternative is to pick ŷ(x) = arg maxc fc (x). However, this technique may
           not work either, since there is no guarantee that the different fc functions have comparable
           magnitudes. In addition, each binary subproblem is likely to suffer from the class imbalance
           problem. To see this, suppose we have 10 equally represented classes. When training f1 , we
           will have 10% positive examples and 90% negative examples, which can hurt performance. It is
           possible to devise ways to train all C classiﬁers simultaneously (Weston and Watkins 1999), but
           the resulting method takes O(C 2 N 2 ) time, instead of the usual O(CN 2 ) time.
              Another approach is to use the one-versus-one or OVO approach, also called all pairs, in
           which we train C(C −1)/2 classiﬁers to discriminate all pairs fc,c . We then classify a point into
           the class which has the highest number of votes. However, this can also result in ambiguities,
           as shown in Figure 14.14(b). Also, it takes O(C 2 N 2 ) time to train and O(C 2 Nsv ) to test each
           data point, where Nsv is the number of support vectors.2 See also (Allwein et al. 2000) for an
           approach based on error-correcting output codes.
              It is worth remembering that all of these difficulties, and the plethora of heuristics that have
           been proposed to ﬁx them, fundamentally arise because SVMs do not model uncertainty using
           probabilities, so their output scores are not comparable across classes.

           2. We can reduce the test time by structuring the classes into a DAG (directed acyclic graph), and performing O(C)
           pairwise comparisons (Platt et al. 2000). However, the O(C 2 ) factor in the training time is unavoidable.
         504                                                                                                      Chapter 14. Kernels

                                                                                                        γ = 5.0

                          0.5                                                   0.35
                          0.4




               cv error
                          0.3                                                    0.3




                                                                     cv error
                          0.2
                                                                                0.25
                          0.1
                            1
                          10                                     4
                                 0                          2
                                                                10               0.2
                                10                     0
                                                           10
                                          −1     −2
                                                      10                          10
                                                                                       −2    −1
                                                                                            10
                                                                                                   0
                                                                                                  10     10
                                                                                                             1      2
                                                                                                                   10
                                                                                                                         3
                                                                                                                        10
                                                                                                                               4
                                                                                                                              10
                                     γ   10    10
                                                       C                                                  C


                                               (a)                                                     (b)

         Figure 14.15 (a) A cross validation estimate of the 0-1 error for an SVM classiﬁer with RBF kernel with
         different precisions γ = 1/(2σ 2 ) and different regularizer λ = 1/C, applied to a synthetic data set drawn
         from a mixture of 2 Gaussians. (b) A slice through this surface for γ = 5 The red dotted line is the Bayes
         optimal error, computed using Bayes rule applied to the model used to generate the data. Based on Figure
         12.6 of (Hastie et al. 2009). Figure generated by svmCgammaDemo.



14.5.3   Choosing C
         SVMs for both classiﬁcation and regression require that you specify the kernel function and the
         parameter C. Typically C is chosen by cross-validation. Note, however, that C interacts quite
         strongly with the kernel parameters. For example, suppose we are using an RBF kernel with
         precision γ = 2σ1 2 . If γ = 5, corresponding to narrow kernels, we need heavy regularization,
         and hence small C (so λ = 1/C is big). If γ = 1, a larger value of C should be used. So we
         see that γ and C are tightly coupled. This is illustrated in Figure 14.15, which shows the CV
         estimate of the 0-1 risk as a function of C and γ.
            The authors of libsvm recommend (Hsu et al. 2009) using CV over a 2d grid with values C ∈
         {2−5 , 2−3 , . . . , 215 } and γ ∈ {2−15 , 2−13 , . . . , 23 }. In addition, it is important to standardize
         the data ﬁrst, for a spherical Gaussian kernel to make sense.
            To choose C efficiently, one can develop a path following algorithm in the spirit of lars
         (Section 13.3.4). The basic idea is to start with λ large, so that the margin 1/||w(λ)|| is wide,
         and hence all points are inside of it and have αi = 1. By slowly decreasing λ, a small set of
         points will move from inside the margin to outside, and their αi values will change from 1 to 0,
         as they cease to be support vectors. When λ is maximal, the function is completely smoothed,
         and no support vectors remain. See (Hastie et al. 2004) for the details.

14.5.4   Summary of key points
         Summarizing the above discussion, we recognize that SVM classiﬁers involve three key ingre-
         dients: the kernel trick, sparsity, and the large margin principle. The kernel trick is necessary
         to prevent underﬁtting, i.e., to ensure that the feature vector is sufficiently rich that a linear
         classiﬁer can separate the data. (Recall from Section 14.2.3 that any Mercer kernel can be viewed
         as implicitly deﬁning a potentially high dimensional feature vector.) If the original features are
         already high dimensional (as in many gene expression and text classiﬁcation problems), it suf-
         ﬁces to use a linear kernel, κ(x, x ) = xT x , which is equivalent to working with the original
         features.
         14.6. Comparison of discriminative kernel methods                                                  505


           Method     Opt. w          Opt. kernel    Sparse    Prob.   Multiclass    Non-Mercer      Section
           L2VM       Convex          EB             No        Yes     Yes           Yes             14.3.2
           L1VM       Convex          CV             Yes       Yes     Yes           Yes             14.3.2
           RVM        Not convex      EB             Yes       Yes     Yes           Yes             14.3.2
           SVM        Convex          CV             Yes       No      Indirectly    No              14.5
           GP         N/A             EB             No        Yes     Yes           No              15

         Table 14.1 Comparison of various kernel based classiﬁers. EB = empirical Bayes, CV = cross validation.
         See text for details.


            The sparsity and large margin principles are necessary to prevent overﬁtting, i.e., to ensure
         that we do not use all the basis functions. These two ideas are closely related to each other,
         and both arise (in this case) from the use of the hinge loss function. However, there are other
         methods of achieving sparsity (such as 1 ), and also other methods of maximizing the margin
         (such as boosting). A deeper discussion of this point takes us outside of the scope of this book.
         See e.g., (Hastie et al. 2009) for more information.

14.5.5   A probabilistic interpretation of SVMs
         In Section 14.3, we saw how to use kernels inside GLMs to derive probabilistic classiﬁers, such as
         the L1VM and RVM. And in Section 15.3, we will discuss Gaussian process classiﬁers, which also
         use kernels. However, all of these approaches use a logistic or probit likelihood, as opposed to
         the hinge loss used by SVMs. It is natural to wonder if one can interpret the SVM more directly
         as a probabilistic model. To do so, we must interpret Cg(m) as a negative log likelihood, where
         g(m) = (1 − m)+ , where m = yf (x) is the margin. Hence p(y = 1|f ) = exp(−Cg(f ))
         and p(y = −1|f ) = exp(−Cg(−f )). By summing over both values of y, we require that
         exp(−Cg(f )) + exp(−Cg(−f )) be a constant independent of f . But it turns out this is not
         possible for any C > 0 (Sollich 2002).
            However, if we are willing to relax the sum-to-one condition, and work with a pseudo-
         likelihood, we can derive a probabilistic interpretation of the hinge loss (Polson and Scott 2011).
         In particular, one can show that
                                         ∞                
                                                 1             1 (1 + λi − yi xTi w)2
             exp(−2(1 − yi xi w)+ ) =
                              T
                                              √       exp −                             dλi          (14.68)
                                         0      2πλi           2          λi
         Thus the exponential of the negative hinge loss can be represented as a Gaussian scale mixture.
         This allows one to ﬁt an SVM using EM or Gibbs sampling, where λi are the latent variables. This
         in turn opens the door to Bayesian methods for setting the hyper-parameters for the prior on
         w. See (Polson and Scott 2011) for details. (See also (Franc et al. 2011) for a different probabilistic
         interpretation of SVMs.)

 14.6    Comparison of discriminative kernel methods
         We have mentioned several different methods for classiﬁcation and regression based on kernels,
         which we summarize in Table 14.1. (GP stands for “Gaussian process”, which we discuss in
         Chapter 15.) The columns have the following meaning:
506                                                                          Chapter 14. Kernels


• Optimize w: a key question is whether the objective J(w) = − log p(D|w) − log p(w)
  is convex or not. L2VM, L1VM and SVMs have convex objectives. RVMs do not. GPs are
  Bayesian methods that do not perform parameter estimation.
• Optimize kernel: all the methods require that one “tune” the kernel parameters, such as the
  bandwidth of the RBF kernel, as well as the level of regularization. For methods based on
  Gaussians, including L2VM, RVMs and GPs, we can use efficient gradient based optimizers to
  maximize the marginal likelihood. For SVMs, and L1VM, we must use cross validation, which
  is slower (see Section 14.5.3).
• Sparse: L1VM, RVMs and SVMs are sparse kernel methods, in that they only use a subset of
  the training examples. GPs and L2VM are not sparse: they use all the training examples. The
  principle advantage of sparsity is that prediction at test time is usually faster. In addition,
  one can sometimes get improved accuracy.
• Probabilistic: All the methods except for SVMs produce probabilistic output of the form
  p(y|x). SVMs produce a “conﬁdence” value that can be converted to a probability, but such
  probabilities are usually very poorly calibrated (see Section 14.5.2.3).
• Multiclass: All the methods except for SVMs naturally work in the multiclass setting, by using
  a multinoulli output instead of Bernoulli. The SVM can be made into a multiclass classiﬁer,
  but there are various difficulties with this approach, as discussed in Section 14.5.2.4.
• Mercer kernel: SVMs and GPs require that the kernel is positive deﬁnite; the other techniques
  do not.
   Apart from these differences, there is the natural question: which method works best? In
a small experiment3 , we found that all of these methods had similar accuracy when averaged
over a range of problems, provided they have the same kernel, and provided the regularization
constants are chosen appropriately.
   Given that the statistical performance is roughly the same, what about the computational
performance? GPs and L2VM are generally the slowest, taking O(N 3 ) time, since they don’t
exploit sparsity (although various speedups are possible, see Section 15.6). SVMs also take
O(N 3 ) time to train (unless we use a linear kernel, in which case we only need O(N ) time
(Joachims 2006)). However, the need to use cross validation can make SVMs slower than RVMs.
L1VM should be faster than an RVM, since an RVM requires multiple rounds of 1 minimization
(see Section 13.7.4.3). However, in practice it is common to use a greedy method to train RVMs,
which is faster than 1 minimization. This is reﬂected in our empirical results.
   The conclusion of all this is as follows: if speed matters, use an RVM, but if well-calibrated
probabilistic output matters (e.g., for active learning or control problems), use a GP. The only
circumstances under which using an SVM seems sensible is the structured output case, where
likelihood-based methods can be slow. (We attribute the enormous popularity of SVMs not
to their superiority, but to ignorance of the alternatives, and also to the lack of high quality
software implementing the alternatives.)
   Section 16.7.1 gives a more extensive experimental comparison of supervised learning methods,
including SVMs and various non kernel methods.

3. See http://pmtk3.googlecode.com/svn/trunk/docs/tutorial/html/tutKernelClassif.html.
         14.7. Kernels for building generative models                                                           507


                                     0.9
                                                                            Boxcar
                                     0.8                                    Epanechnikov
                                                                            Tricube
                                                                            Gaussian
                                     0.7

                                     0.6

                                     0.5

                                     0.4

                                     0.3

                                     0.2

                                     0.1

                                      0
                                     −1.5     −1     −0.5     0      0.5      1            1.5



         Figure 14.16 A comparison of some popular smoothing kernels. The boxcar kernel has compact support
         but is not smooth. The Epanechnikov kernel has compact support but is not differentiable at its boundary.
         The tri-cube has compact support and two continuous derivatives at the boundary of its support. The
         Gaussian is differentiable, but does not have compact support. Based on Figure 6.2 of (Hastie et al. 2009).
         Figure generated by smoothingKernelPlot.


 14.7    Kernels for building generative models
         There is a different kind of kernel known as a smoothing kernel which can be used to create
         non-parametric density estimates. This can be used for unsupervised density estimation, p(x),
         as well as for creating generative models for classiﬁcation and regression by making models of
         the form p(y, x).

14.7.1   Smoothing kernels
         A smoothing kernel is a function of one argument which satisﬁes the following properties:
                                           
              κ(x)dx = 1,     xκ(x)dx = 0,      x2 κ(x)dx > 0                                  (14.69)

         A simple example is the Gaussian kernel,
                      1      −x2 /2
            κ(x)        1 e                                                                                 (14.70)
                    (2π) 2
         We can control the width of the kernel by introducing a bandwidth parameter h:
                     1 x
           κh (x)  κ( )                                                                                     (14.71)
                     h h
         We can generalize to vector valued inputs by deﬁning an RBF kernel:
            κh (x) = κh (||x||)                                                                              (14.72)
         In the case of the Gaussian kernel, this becomes
                            1     D
                                            1
            κh (x) =                  exp(− 2 x2j )                                                          (14.73)
                       hD (2π)D/2 j=1      2h
         508                                                                           Chapter 14. Kernels


           Although Gaussian kernels are popular, they have unbounded support. An alternative kernel,
         with compact support, is the Epanechnikov kernel, deﬁned by
                         3
            κ(x)          (1 − x2 )I(|x| ≤ 1)                                                        (14.74)
                         4
         This is plotted in Figure 14.16. Compact support can be useful for efficiency reasons, since one
         can use fast nearest neighbor methods to evaluate the density.
           Unfortunately, the Epanechnikov kernel is not differentiable at the boundary of its support.
         An alterative is the tri-cube kernel, deﬁned as follows:
                         70
            κ(x)           (1 − |x|3 )3 I(|x| ≤ 1)                                                   (14.75)
                         81
         This has compact support and has two continuous derivatives at the boundary of its support.
         See Figure 14.16.
           The boxcar kernel is simply the uniform distribution:
            κ(x)        I(|x| ≤ 1)                                                                  (14.76)
         We will use this kernel below.

14.7.2   Kernel density estimation (KDE)
         Recall the Gaussian mixture model from Section 11.2.1. This is a parametric density estimator for
         data in RD . However, it requires specifying the number K and locations μk of the clusters. An
         alternative to estimating the μk is to allocate one cluster center per data point, so μi = xi . In
         this case, the model becomes

                        1 
                           N
            p(x|D) =          N (x|xi , σ 2 I)                                                        (14.77)
                        N i=1

         We can generalize the approach by writing

                      1 
                         N
            p̂(x) =         κh (x − xi )                                                             (14.78)
                      N i=1

         This is called a Parzen window density estimator, or kernel density estimator (KDE), and
         is a simple non-parametric density model. The advantage over a parametric model is that no
         model ﬁtting is required (except for tuning the bandwidth, usually done by cross-validation). and
         there is no need to pick K. The disadvantage is that the model takes a lot of memory to store,
         and a lot of time to evaluate. It is also of no use for clustering tasks.
            Figure 14.17 illustrates KDE in 1d for two kinds of kernel. On the top, we use a boxcar kernel,
         κ(x) = I(−1 ≤ z ≤ 1). The result is equivalent to a histogram estimate of the density, since
         we just count how many data points land within an interval of size h around xi . On the bottom,
         we use a Gaussian kernel, which results in a smoother ﬁt.
            The usual way to pick h is to minimize an estimate (such as cross validation) of the frequentist
         risk (see e.g., (Bowman and Azzalini 1997)). In Section 25.2, we discuss a Bayesian approach to
         non-parametric density estimation, based on Dirichlet process mixture models, which allows us
         14.7. Kernels for building generative models                                                   509


                              unif, h=1.000                                       unif, h=2.000
         0.35                                                0.14



          0.3                                                0.12



         0.25                                                 0.1



          0.2                                                0.08



         0.15                                                0.06



          0.1                                                0.04



         0.05                                                0.02



           0                                                   0
           −5            0                    5         10     −5            0                    5     10


                                  (a)                                                 (b)
                             gauss, h=1.000                                      gauss, h=2.000
         0.16                                                0.06



         0.14
                                                             0.05

         0.12

                                                             0.04
          0.1



         0.08                                                0.03



         0.06
                                                             0.02

         0.04

                                                             0.01
         0.02



           0                                                   0
           −5            0                    5         10     −5            0                    5     10


                                  (c)                                                 (d)

         Figure 14.17 A nonparametric (Parzen) density estimator in 1D estimated from 6 data points, denoted
         by x. Top row: uniform kernel. Bottom row: Gaussian kernel. Rows represent increasingly large band-
         width parameters. Based on http://en.wikipedia.org/wiki/Kernel_density_estimation. Figure
         generated by parzenWindowDemo2.



         to infer h. DP mixtures can also be more efficient than KDE, since they do not need to store
         all the data. See also Section 15.2.4 where we discuss an empirical Bayes approach to estimating
         kernel parameters in a Gaussian process model for classiﬁcation/ regression.

14.7.3   From KDE to KNN
         We can use KDE to deﬁne the class conditional densities in a generative classiﬁer. This turns
         out to provide an alternative derivation of the nearest neighbors classiﬁer, which we introduced
         in Section 1.4.2. To show this, we follow the presentation of (Bishop 2006a, p125). In kde
         with a boxcar kernel, we ﬁxed the bandwidth and count how many data points fall within the
         hyper-cube centered on a datapoint. Suppose that, instead of ﬁxing the bandwidth h, we instead
         510                                                                                             Chapter 14. Kernels

                                                              Gaussian kernel regression
                                      1.2
                                             true
                                             data
                                             estimate
                                       1



                                      0.8



                                      0.6



                                      0.4



                                      0.2



                                       0



                                     −0.2



                                     −0.4
                                        −2   −1.5       −1   −0.5         0          0.5   1   1.5   2




         Figure 14.18 An example of kernel regression in 1d using a Gaussian kernel.                     Figure generated by
         kernelRegressionDemo, based on code by Yi Cao.



         allow the bandwidth or volume to be different for each data point. Speciﬁcally, we will “grow”
         a volume around x until we encounter K data points, regardless of their class label. Let the
         resulting volume have size V (x) (this was previously hD ), and let there be Nc (x) examples
         from class c in this volume. Then we can estimate the class conditional density as follows:
                                  Nc (x)
               p(x|y = c, D) =                                                                                        (14.79)
                                 Nc V (x)
         where Nc is the total number of examples in class c in the whole data set. The class prior can
         be estimated by
                               Nc
               p(y = c|D) =                                                                                           (14.80)
                               N
         Hence the class posterior is given by
                                          Nc (x) Nc
                                         Nc V (x) N                      Nc (x)      Nc (x)
               p(y = c|x, D)    =           Nc (x) Nc
                                                             =                     =                                  (14.81)
                                                                         c Nc (x)    K
                                                                              
                                        c Nc V (x) N

         where we used the fact that c Nc (x) = K, since we choose a total of K points (regardless of
         class) around every point. This is equivalent to Equation 1.2, since Nc (x) = i∈NK (x,D) I(yi =
         c).

14.7.4   Kernel regression
         In Section 14.7.2, we discussed the use of kernel density estimation or KDE for unsupervised
         learning. We can also use KDE for regression. The goal is to compute the conditional expectation
                                                )
                                                   y p(x, y)dy
            f (x) = E [y|x] = y p(y|x)dy = )                                                       (14.82)
                                                    p(x, y)dy
14.7. Kernels for building generative models                                                    511


We can use KDE to approximate the joint density p(x, y) as follows:

                1 
                   N
   p(x, y) ≈          κh (x − xi )κh (y − yi )                                              (14.83)
                N i=1

Hence
                 1      N                )
                        i=1 κh (x − xi ) yκh (y − yi )dy
   f (x)    =    N
                  1      N                )                                                 (14.84)
                 N       i=1 κh (x − xi ) κh (y − yi )dy
                      N
                      i=1 κh (x − xi )yi
            =          N
                                                                                            (14.85)
                       i=1 κh (x − xi )

                                                        ) kernels. First, that they integrate to
To derive)this result, we used two properties of smoothing
one, i.e., κh (y − yi )dy = 1. And second, the fact that yκh (y − yi )dy = yi . This follows by
deﬁning x = y − yi and using the zero mean property of smoothing kernels:
                                           
      (x + yi )κh (x)dx = xκh (x)dx + yi κh (x)dx = 0 + yi = yi                           (14.86)

  We can rewrite the above result as follows:
                  
                  N
    f (x)   =           wi (x)yi                                                            (14.87)
                  i=1
                         κh (x − xi )
   wi (x)             N
                                                                                            (14.88)
                       i =1 κh (x − xi )
                                       


We see that the prediction is just a weighted sum of the outputs at the training points, where
the weights depend on how similar x is to the stored training points. This method is called
kernel regression, kernel smoothing, or the Nadaraya-Watson model. See Figure 14.18 for an
example, where we use a Gaussian kernel.
  Note that this method only has one free parameter, namely h. One can show (Bowman and
Azzalini 1997) that for 1d data, if the true density is Gaussian and we are using Gaussian kernels,
the optimal bandwidth h is given by
                1/5
            4
   h=                σ̂                                                                     (14.89)
           3N
We can compute a robust approximation to the standard deviation by ﬁrst computing the mean
absolute deviation
   MAD = median(|x − median(x)|)                                                            (14.90)
and then using
                               1
   σ̂ = 1.4826 MAD =               MAD                                                       (14.91)
                            0.6745
                                                                                          
The code used to produce Figure 14.18 estimated hx and hy separately, and then set h =     hx hy .
         512                                                                                    Chapter 14. Kernels


            Although these heuristics seem to work well, their derivation rests on some rather dubious
         assumptions (such as Gaussianity of the true density). Furthermore, these heuristics are limited
         to tuning just a single parameter. In Section 15.2.4 we discuss an empirical Bayes approach to
         estimating multiple kernel parameters in a Gaussian process model for classiﬁcation/ regression,
         which can handle many tuning parameters, and which is based on much more transparent
         principles (maximizing the marginal likelihood).

14.7.5   Locally weighted regression
         If we deﬁne κh (x − xi ) = κ(x, xi ), we can rewrite the prediction made by kernel regression as
         follows
                       N
                                κ(x∗ , xi )
             fˆ(x∗ ) =     yi N                                                                    (14.92)
                              i =1 κ(x∗ , xi )
                                             
                       i=1

         Note that κ(x, xi ) need not be a smoothing kernel. If it is not, we no longer need the
         normalization term, so we can just write
                              
                              N
               fˆ(x∗ ) =            yi κ(x∗ , xi )                                                           (14.93)
                              i=1

         This model is essentially ﬁtting a constant function locally. We can improve on this by ﬁtting a
         linear regression model for each point x∗ by solving
                        
                        N
               min            κ(x∗ , xi )[yi − β(x∗ )T φ(xi )]2                                              (14.94)
               β(x∗ )
                        i=1

         where φ(x) = [1, x]. This is called locally weighted regression. An example of such a method
         is LOESS, aka LOWESS, which stands for “locally-weighted scatterplot smoothing” (Cleveland
         and Devlin 1988). See also (Edakunni et al. 2010) for a Bayesian version of this model.
            We can compute the paramters β(x∗ ) for each test case by solving the following weighted
         least squares problem:
               β(x∗ ) = (ΦT D(x∗ )Φ)−1 ΦT D(x∗ )y                                                            (14.95)
         where Φ is an N × (D + 1) design matrix and D = diag(κ(x∗ , xi )). The corresponding
         prediction has the form
                                                                             
                                                                             N
               fˆ(x∗ ) = φ(x∗ )T β(x∗ ) = (ΦT D(x∗ )Φ)−1 ΦT D(x∗ )y =              wi (x∗ )yi                (14.96)
                                                                             i=1

         The term wi (x∗ ), which combines the local smoothing kernel with the effect of linear regression,
         is called the equivalent kernel. See also Section 15.4.2.

         Exercises
         Exercise 14.1 Fitting an SVM classiﬁer by hand
                                                                                                   √
                                                                                 = −1) and (x2 = 2, y2 = 1).
         (Source: Jaakkola.) Consider a dataset with 2 points in 1d: (x1 = 0, y1 √
         Consider mapping each point to 3d using the feature vector φ(x) = [1, 2x, x2 ]T . (This is equivalent to
14.7. Kernels for building generative models                                                              513


using a second order polynomial kernel.) The max margin classiﬁer has the form

         min ||w||2    s.t.                                                                            (14.97)
   y1 (wT φ(x1 ) + w0 ) ≥ 1                                                                            (14.98)
   y2 (wT φ(x2 ) + w0 ) ≥ 1                                                                            (14.99)

a. Write down a vector that is parallel to the optimal vector w. Hint: recall from Figure 7.8 (12Apr10
   version) that w is perpendicular to the decision boundary between the two points in the 3d feature
   space.
b. What is the value of the margin that is achieved by this w? Hint: recall that the margin is the distance
   from each support vector to the decision boundary. Hint 2: think about the geometry of 2 points in
   space, with a line separating one from the other.
c. Solve for w, using the fact the margin is equal to 1/||w||.
d. Solve for w0 using your value for w and Equations 14.97 to 14.99. Hint: the points will be on the
   decision boundary, so the inequalities will be tight.
e. Write down the form of the discriminant function f (x) = w0 + wT φ(x) as an explicit function of x.

Exercise 14.2 Linear separability
(Source: Koller..) Consider ﬁtting an SVM with C > 0 to a dataset that is linearly separable. Is the resulting
decision boundary guaranteed to separate the classes?
15      Gaussian processes



 15.1   Introduction
        In supervised learning, we observe some inputs xi and some outputs yi . We assume that
        yi = f (xi ), for some unknown function f , possibly corrupted by noise. The optimal approach
        is to infer a distribution over functions given the data, p(f |X, y), and then to use this to make
        predictions given new inputs, i.e., to compute
                                
            p(y∗ |x∗ , X, y) = p(y∗ |f, x∗ )p(f |X, y)df                                              (15.1)

           Up until now, we have focussed on parametric representations for the function f , so that
        instead of inferring p(f |D), we infer p(θ|D). In this chapter, we discuss a way to perform
        Bayesian inference over functions themselves.
           Our approach will be based on Gaussian processes or GPs. A GP deﬁnes a prior over
        functions, which can be converted into a posterior over functions once we have seen some data.
        Although it might seem difficult to represent a distribution over a function, it turns out that we
        only need to be able to deﬁne a distribution over the function’s values at a ﬁnite, but arbitrary,
        set of points, say x1 , . . . , xN . A GP assumes that p(f (x1 ), . . . , f (xN )) is jointly Gaussian, with
        some mean μ(x) and covariance Σ(x) given by Σij = κ(xi , xj ), where κ is a positive deﬁnite
        kernel function (see Section 14.2 information on kernels). The key idea is that if xi and xj are
        deemed by the kernel to be similar, then we expect the output of the function at those points
        to be similar, too. See Figure 15.1 for an illustration.
           It turns out that, in the regression setting, all these computations can be done in closed form,
        in O(N 3 ) time. (We discuss faster approximations in Section 15.6.) In the classiﬁcation setting,
        we must use approximations, such as the Gaussian approximation, since the posterior is no
        longer exactly Gaussian.
           GPs can be thought of as a Bayesian alternative to the kernel methods we discussed in Chap-
        ter 14, including L1VM, RVM and SVM. Although those methods are sparser and therefore faster,
        they do not give well-calibrated probabilistic outputs (see Section 15.4.4 for further discussion).
        Having properly tuned probabilistic output is important in certain applications, such as online
        tracking for vision and robotics (Ko and Fox 2009), reinforcement learning and optimal control
        (Engel et al. 2005; Deisenroth et al. 2009), global optimization of non-convex functions (Mockus
        et al. 1996; Lizotte 2008; Brochu et al. 2009), experiment design (Santner et al. 2003), etc.
       516                                                                      Chapter 15. Gaussian processes



                                     y1                y2                  y

                                     f1                f2                   f


                                   x1                  x2                  x


       Figure 15.1 A Gaussian process for 2 training points and 1 testing point,  represented as a mixed directed
       and undirected graphical model representing p(y, f |x) = N (f |0, K(x)) i p(yi |fi ). The hidden nodes
       fi = f (xi ) represent the value of the function at each of the data points. These hidden nodes are fully
       interconnected by undirected edges, forming a Gaussian graphical model; the edge strengths represent the
       covariance terms Σij = κ(xi , xj ). If the test point x∗ is similar to the training points x1 and x2 , then
       the predicted output y∗ will be similar to y1 and y2 .


         Our presentation is closely based on (Rasmussen and Williams 2006), which should be con-
       sulted for futher details. See also (Diggle and Ribeiro 2007), which discusses the related approach
       known as kriging, which is widely used in the spatial statistics literature.

15.2   GPs for regression
       In this section, we discuss GPs for regression. Let the prior on the regression function be a GP,
       denoted by
             f (x) ∼ GP (m(x), κ(x, x ))                                                                   (15.2)
       where m(x) is the mean function and κ(x, x ) is the kernel or covariance function, i.e.,
               m(x)      =   E [f (x)]                                                                      (15.3)
                               
             κ(x, x )   =   E (f (x) − m(x))(f (x ) − m(x ))T                                            (15.4)
       We obviously require that κ() be a positive deﬁnite kernel. For any ﬁnite set of points, this
       process deﬁnes a joint Gaussian:
             p(f |X) = N (f |μ, K)                                                                          (15.5)
       where Kij = κ(xi , xj ) and μ = (m(x1 ), . . . , m(xN )).
          Note that it is common to use a mean function of m(x) = 0, since the GP is ﬂexible enough
       to model the mean arbitrarily well, as we will see below. However, in Section 15.2.6 we will
       consider parametric models for the mean function, so the GP just has to model the residual
       errors. This semi-parametric approach combines the interpretability of parametric models with
       the accuracy of non-parametric models.
         15.2. GPs for regression                                                                                517

                      2                                           2.5


                     1.5                                           2

                                                                  1.5
                      1

                                                                   1
                     0.5
                                                                  0.5
                      0
                                                                   0
                    −0.5
                                                                 −0.5

                     −1
                                                                  −1

                    −1.5                                         −1.5

                     −2                                           −2
                      −5                0                 5        −5                 0                5


                                      (a)                                           (b)

         Figure 15.2 Left: some functions sampled from a GP prior with SE kernel. Right: some samples from a GP
         posterior, after conditioning on 5 noise-free observations. The shaded area represents E [f (x)]±2std(f (x).
         Based on Figure 2.2 of (Rasmussen and Williams 2006). Figure generated by gprDemoNoiseFree.


15.2.1   Predictions using noise-free observations
         Suppose we observe a training set D = {(xi , fi ), i = 1 : N }, where fi = f (xi ) is the noise-free
         observation of the function evaluated at xi . Given a test set X∗ of size N∗ × D, we want to
         predict the function outputs f∗ .
            If we ask the GP to predict f (x) for a value of x that it has already seen, we want the GP to
         return the answer f (x) with no uncertainty. In other words, it should act as an interpolator
         of the training data. This will only happen if we assume the observations are noiseless. We will
         consider the case of noisy observations below.
            Now we return to the prediction problem. By deﬁnition of the GP, the joint distribution has
         the following form
                                 
                f            μ        K     K∗
                   ∼N             ,                                                                     (15.6)
               f∗           μ∗       KT∗ K∗∗
         where K = κ(X, X) is N ×N , K∗ = κ(X, X∗ ) is N ×N∗ , and K∗∗ = κ(X∗ , X∗ ) is N∗ ×N∗ .
         By the standard rules for conditioning Gaussians (Section 4.3), the posterior has the following
         form
            p(f∗ |X∗ , X, f )   =    N (f∗ |μ∗ , Σ∗ )                                                          (15.7)
                        μ∗      =    μ(X∗ ) + KT∗ K−1 (f      − μ(X))                                          (15.8)
                           Σ∗   =    K∗∗ − KT∗ K−1 K∗                                                          (15.9)
            This process is illustrated in Figure 15.2. On the left we show sample samples from the prior,
         p(f |X), where we use a squared exponential kernel, aka Gaussian kernel or RBF kernel. In
         1d, this is given by
                                     1
            κ(x, x ) = σf2 exp(−       (x − x )2 )                                                          (15.10)
                                    22
         Here  controls the horizontal length scale over which the function varies, and σf2 controls the
         vertical variation. (We discuss how to estimate such kernel parameters below.) On the right we
         518                                                                Chapter 15. Gaussian processes


         show samples from the posterior, p(f∗ |X∗ , X, f ). We see that the model perfectly interpolates
         the training data, and that the predictive uncertainty increases as we move further away from
         the observed data.
            One application of noise-free GP regression is as a computationally cheap proxy for the
         behavior of a complex simulator, such as a weather forecasting program. (If the simulator is
         stochastic, we can deﬁne f to be its mean output; note that there is still no observation noise.)
         One can then estimate the effect of changing simulator parameters by examining their effect
         on the GP’s predictions, rather than having to run the simulator many times, which may be
         prohibitively slow. This strategy is known as DACE, which stands for design and analysis of
         computer experiments (Santner et al. 2003).

15.2.2   Predictions using noisy observations
         Now let us consider the case where what we observe is a noisy version of the underlying
         function, y = f (x) + , where  ∼ N (0, σy2 ). In this case, the model is not required to
         interpolate the data, but it must come “close” to the observed data. The covariance of the
         observed noisy responses is
               cov [yp , yq ] = κ(xp , xq ) + σy2 δpq                                               (15.11)
         where δpq = I(p = q). In other words
               cov [y|X] = K + σy2 IN  Ky                                                          (15.12)
         The second matrix is diagonal because we assumed the noise terms were independently added
         to each observation.
            The joint density of the observed data and the latent, noise-free function on the test points
         is given by
                        
               y               Ky K∗
                   ∼ N 0,                                                                          (15.13)
               f∗              KT∗ K∗∗
         where we are assuming the mean is zero, for notational simplicity. Hence the posterior predictive
         density is
               p(f∗ |X∗ , X, y) = N (f∗ |μ∗ , Σ∗ )                                                  (15.14)
                            μ∗ = KT∗ K−1 y y                                                        (15.15)
                            Σ∗     =    K∗∗ − KT∗ K−1
                                                   y K∗                                             (15.16)
         In the case of a single test input, this simpliﬁes as follows
               p(f∗ |x∗ , X, y)   =     N (f∗ |kT∗ K−1             −1
                                                    y y, k∗∗ − k∗ Ky k∗ )
                                                                T
                                                                                                    (15.17)
         where k∗ = [κ(x∗ , x1 ), . . . , κ(x∗ , xN )] and k∗∗ = κ(x∗ , x∗ ). Another way to write the
         posterior mean is as follows:
                                    
                                    N
               f ∗ = kT∗ K−1
                          y y =           αi κ(xi , x∗ )                                            (15.18)
                                    i=1

         where α = K−1
                    y y. We will revisit this expression later.
         15.2. GPs for regression                                                                                        519

                      3                                                     3



                      2                                                     2



                      1                                                     1



                      0                                                     0



                     −1                                                    −1



                     −2                                                    −2



                     −3                                                    −3
                      −8   −6   −4   −2    0     2    4    6    8           −8   −6   −4   −2    0    2   4   6   8


                                          (a)                                                   (b)
                                                 3



                                                 2



                                                 1



                                                 0



                                                −1



                                                −2



                                                −3
                                                 −8   −6   −4   −2    0     2    4    6    8


                                                                     (c)

         Figure 15.3 Some 1d GPs with SE kernels but different hyper-parameters ﬁt to 20 noisy observations. The
         kernel has the form in Equation 15.19. The hyper-parameters (, σf , σy ) are as follows: (a) (1,1,0.1) (b) (0.3,
         0.1.08, 0.00005), (c) (3.0, 1.16, 0.89). Based on Figure 2.5 of (Rasmussen and Williams 2006). Figure generated
         by gprDemoChangeHparams, written by Carl Rasmussen.



15.2.3   Effect of the kernel parameters
         The predictive performance of GPs depends exclusively on the suitability of the chosen kernel.
         Suppose we choose the following squared-exponential (SE) kernel for the noisy observations
                                            1
            κy (xp , xq ) = σf2 exp(−          (xp − xq )2 ) + σy2 δpq                                                (15.19)
                                           22
         Here  is the horizontal scale over which the function changes, σf2 controls the vertical scale of
         the function, and σy2 is the noise variance. Figure 15.3 illustrates the effects of changing these
         parameters. We sampled 20 noisy data points from the SE kernel using (, σf , σy ) = (1, 1, 0.1),
         and then made predictions various parameters, conditional on the data. In Figure 15.3(a), we use
         (, σf , σy ) = (1, 1, 0.1), and the result is a good ﬁt. In Figure 15.3(b), we reduce the length scale
         to  = 0.3 (the other parameters were optimized by maximum (marginal) likelihood, a technique
         we discuss below); now the function looks more “wiggly”. Also, the uncertainty goes up faster,
         since the effective distance from the training points increases more rapidly. In Figure 15.3(c), we
         increase the length scale to  = 3; now the function looks smoother.
520                                                                                                                                   Chapter 15. Gaussian processes

                                                                                                           2
                           2

                           1
                                                                                                           1




                                                                                               output y
               output y
                           0                                                                               0


                          −1                                                                              −1

                          −2                                                                              −2
                                2                                                                               2
                                                                                2                                                                          2
                                      0                                                                                 0
                                                                      0                                                                         0
                                          −2         −2                                                                         −2         −2
                               input x2                              input x1                                  input x2                         input x1

                                               (a)                                                                                   (b)
                                                                 2

                                                                 1




                                                     output y
                                                                 0

                                                                −1

                                                                −2
                                                                      2
                                                                                                                            2
                                                                            0
                                                                                                                    0
                                                                                    −2          −2
                                                                     input x2                                   input x1

                                                                                         (c)

Figure 15.4 Some 2d functions sampled from a GP with an SE kernel but different hyper-parameters. The
kernel has the form in Equation 15.20 where (a) M = I, (b) M = diag(1, 3)−2 , (c) M = (1, −1; −1, 1) +
diag(6, 6)−2 . Based on Figure 5.1 of (Rasmussen and Williams 2006). Figure generated by gprDemoArd,
written by Carl Rasmussen.



  We can extend the SE kernel to multiple dimensions as follows:
                            1
   κy (xp , xq ) = σf2 exp(− (xp − xq )T M(xp − xq )) + σy2 δpq                                                                                                (15.20)
                            2
We can deﬁne the matrix M in several ways. The simplest is to use an isotropic matrix,
M1 = −2 I. See Figure 15.4(a) for an example. We can also endow each dimension with its
own characteristic length scale, M2 = diag( )−2 . If any of these length scales become large,
the corresponding feature dimension is deemed “irrelevant”, just as in ARD (Section 13.7). In
Figure 15.4(b), we use M = M2 with = (1, 3), so the function changes faster along the x1
direction than the x2 direction.
   We can also create a matrix of the form M3 = ΛΛT +diag( )−2 , where Λ is a D×K matrix,
where K < D. (Rasmussen and Williams 2006, p107) calls this the factor analysis distance
function, by analogy to the fact that factor analysis (Section 12.1) approximates a covariance
matrix as a low rank matrix plus a diagonal matrix. The columns of Λ correspond to relevant
directions in input space. In Figure 15.4(c), we use = (6; 6) and Λ = (1; −1), so the function
changes mostly rapidly in the direction which is perpendicular to (1,1).
           15.2. GPs for regression                                                                                            521


 15.2.4    Estimating the kernel parameters
           To estimate the kernel parameters, we could use exhaustive search over a discrete grid of values,
           with validation loss as an objective, but this can be quite slow. (This is the approach used to
           tune kernels used by SVMs.) Here we consider an empirical Bayes approach, which will allow us
           to use continuous optimization methods, which are much faster. In particular, we will maximize
           the marginal likelihood1
                         
              p(y|X) = p(y|f , X)p(f |X)df                                                            (15.21)
                                                                 '
           Since p(f |X) = N (f |0, K), and p(y|f ) =               i   N (yi |fi , σy2 ), the marginal likelihood is given by
                                                   1             1              N
               log p(y|X) = log N (y|0, Ky ) = − yK−1    y y−      log |Ky | −     log(2π)              (15.22)
                                                   2             2              2
           The ﬁrst term is a data ﬁt term, the second term is a model complexity term, and the third term
           is just a constant. To understand the tradeoff between the ﬁrst two terms, consider a SE kernel
           in 1D, as we vary the length scale  and hold σy2 ﬁxed. Let J() = − log p(y|X, ). For short
           length scales, the ﬁt will be good, so yT K−1y y will be small. However, the model complexity
           will be high: K will be almost diagonal (as in Figure 14.3, top right), since most points will not
           be considered “near” any others, so the log |Ky | will be large. For long length scales, the ﬁt will
           be poor but the model complexity will be low: K will be almost all 1’s (as in Figure 14.3, bottom
           right), so log |Ky | will be small.
              We now discuss how to maximize the marginal likelhiood. Let the kernel parameters (also
           called hyper-parameters) be denoted by θ. One can show that
                ∂                           1 T −1 ∂Ky −1      1     ∂Ky
                   log p(y|X)         =       y Ky      K y − tr(K−1     )                                                 (15.23)
               ∂θj                          2       ∂θj y      2  y
                                                                     ∂θj
                                                
                                            1                ∂Ky
                                      =       tr (ααT − K−1
                                                         y )                                                               (15.24)
                                            2                ∂θj
           where α = K−1                      3                      −1                2
                          y y. It takes O(N ) time to compute Ky , and then O(N ) time per hyper-
           parameter to compute the gradient.
                            ∂K
              The form of ∂θjy depends on the form of the kernel, and which parameter we are taking
           derivatives with respect to. Often we have constraints on the hyper-parameters, such as σy2 ≥ 0.
           In this case, we can deﬁne θ = log(σy2 ), and then use the chain rule.
              Given an expression for the log marginal likelihood and its derivative, we can estimate the
           kernel parameters using any standard gradient-based optimizer. However, since the objective is
           not convex, local minima can be a problem, as we illustrate below.

15.2.4.1   Example
           Consider Figure 15.5. We use the SE kernel in Equation 15.19 with σf2 = 1, and plot log p(y|X, , σy2 )
           (where X and y are the 7 data points shown in panels b and c) as we vary  and σy2 . The two

           1. The reason it is called the marginal likelihood, rather than just likelihood, is because we have marginalized out the
           latent Gaussian vector f . This moves us up one level of the Bayesian hierarchy, and reduces the chances of overﬁtting
           (the number of kernel parameters is usually fairly small compared to a standard parametric model).
522                                                                                                               Chapter 15. Gaussian processes


                                                                                                         2




           noise standard deviation
                                       0
                                      10

                                                                                                         1




                                                                                            output, y
                                                                                                         0
                                       −1
                                      10
                                                                                                        −1


                                                  0                          1                          −2
                                               10                10                                          −5       0        5
                                            characteristic lengthscale                                             input, x

                                                      (a)                                                          (b)


                                                                         2


                                                                         1




                                                            output, y
                                                                         0


                                                                        −1


                                                                        −2
                                                                                 −5      0                   5
                                                                                      input, x

                                                                                      (c)

Figure 15.5 Illustration of local minima in the marginal likelihood surface. (a) We plot the log marginal
likelihood vs σy2 and , for ﬁxed σf2 = 1, using the 7 data points shown in panels b and c. (b) The function
corresponding to the lower left local minimum, (, σn2 ) ≈ (1, 0.2). This is quite “wiggly” and has low
noise. (c) The function corresponding to the top right local minimum, (, σn2 ) ≈ (10, 0.8). This is quite
smooth and has high noise. The data was generated using (, σn2 ) = (1, 0.1). Source: Figure 5.5 of
(Rasmussen and Williams 2006). Figure generated by gprDemoMarglik, written by Carl Rasmussen.



local optima are indicated by +. The bottom left optimum corresponds to a low-noise, short-
length scale solution (shown in panel b). The top right optimum corresponds to a high-noise,
long-length scale solution (shown in panel c). With only 7 data points, there is not enough
evidence to conﬁdently decide which is more reasonable, although the more complex model
(panel b) has a marginal likelihood that is about 60% higher than the simpler model (panel c).
With more data, the MAP estimate should come to dominate.
   Figure 15.5 illustrates some other interesting (and typical) features. The region where σy2 ≈ 1
(top of panel a) corresponds to the case where the noise is very high; in this regime, the marginal
likelihood is insensitive to the length scale (indicated by the horizontal contours), since all the
data is explained as noise. The region where  ≈ 0.5 (left hand side of panel a) corresponds to
the case where the length scale is very short; in this regime, the marginal likelihood is insensitive
to the noise level, since the data is perfectly interpolated. Neither of these regions would be
chosen by a good optimizer.
           15.2. GPs for regression                                                                                                                    523


                                           −0.5                                                                      −0.5
                                                                                     z
                                                                                      2




                          log(magnitude)




                                                                                                    log(magnitude)
                                            −1                                                                        −1
                                           −1.5                                                                      −1.5
                                            −2                                       z1                               −2
                                           −2.5                                                                      −2.5
                                            −3                                                                        −3
                                             2.8        3     3.2    3.4                                               2.8        3     3.2    3.4
                                                   log(length−scale)                                                         log(length−scale)

                                                       (a)                                                                       (b)

                                                                              −0.5




                                                             log(magnitude)
                                                                               −1
                                                                              −1.5
                                                                               −2
                                                                              −2.5
                                                                               −3
                                                                                2.8            3     3.2    3.4
                                                                                          log(length−scale)

                                                                                              (c)

           Figure 15.6 Three different approximations to the posterior over hyper-parameters: grid-based, Monte
           Carlo, and central composite design. Source: Figure 3.2 of (Vanhatalo 2010). Used with kind permission
           of Jarno Vanhatalo.


15.2.4.2   Bayesian inference for the hyper-parameters
           An alternative to computing a point estimate of the hyper-parameters is to compute their poste-
           rior. Let θ represent all the kernel parameters, as well as σy2 . If the dimensionality of θ is small,
           we can compute a discrete grid of possible values, centered on the MAP estimate θ̂ (computed
           as above). We can then approximate the posterior over the latent variables using

                          
                          S
              p(f |D) ∝                     p(f |D, θ s )p(θ s |D)δs                                                                                 (15.25)
                          s=1

           where δs denotes the weight for grid point s.
              In higher dimensions, a regular grid suffers from the curse of dimensionality. An obvious
           alternative is Monte Carlo, but this can be slow. Another approach is to use a form of quasi-
           Monte Carlo, whereby we place grid points at the mode, and at a distance ±1sd from the mode
           along each dimension, for a total of 2|θ| + 1 points. This is called a central composite design
           (Rue et al. 2009). (This is also used in the unscented Kalman ﬁlter, see Section 18.5.2.) To make
           this Gaussian-like approximation more reasonable, we often log-transform the hyper-parameters.
           See Figure 15.6 for an illustration.
           524                                                                Chapter 15. Gaussian processes


15.2.4.3   Multiple kernel learning
           A quite different approach to optimizing kernel parameters known as multiple kernel learning.
           The idea is to deﬁne the kernel as a weighted sum of base kernels, κ(x, x ) = j wj κj (x, x ),
           and then to optimize the weights wj instead of the kernel parameters themselves. This is
           particularly useful if we have different kinds of data which we wish to fuse together. See
           e.g., (Rakotomamonjy et al. 2008) for an approach based on risk-minimization and convex
           optimization, and (Girolami and Rogers 2005) for an approach based on variational Bayes.

 15.2.5    Computational and numerical issues *
           The predictive mean is given by f∗ = kT∗ K−1  y y. For reasons of numerical stability, it is unwise
           to directly invert Ky . A more robust alternative is to compute a Cholesky decomposition,
           Ky = LLT . We can then compute the predictive mean and variance, and the log marginal
           likelihood, as shown in the pseudo-code in Algorithm 6 (based on (Rasmussen and Williams
           2006, p19)). It takes O(N 3 ) time to compute the Cholesky decomposition, and O(N 2 ) time to
           solve for α = K−1 y y = L
                                      −T −1
                                          L y. We can then compute the mean using kT∗ α in O(N ) time
           and the variance using k∗∗ − kT∗ L−T L−1 k∗ in O(N 2 ) time for each test case.
              An alternative to Cholesky decomposition is to solve the linear system Ky α = y using
           conjugate gradients (CG). If we terminate this algorithm after k iterations, it takes O(kN 2 ) time.
           If we run for k = N , it gives the exact solution in O(N 3 ) time. Another approach is to
           approximate the matrix-vector multiplies needed by CG using the fast Gauss transform. (Yang
           et al. 2005); however, this doesn’t scale to high-dimensional inputs. See also Section 15.6 for a
           discussion of other speedup techniques.

            Algorithm 15.1: GP regression
           1   L = cholesky(K + σy2 I);
           2   α = LT \ (L \ y);
           3   E [f∗ ] = kT∗ α ;
           4   v = L \ k∗ ;
           5   var [f∗ ] = κ(x∗ , x∗ ) − vT v;
           6   log p(y|X) = − 12 yT α − i log Lii −    N
                                                       2   log(2π)



 15.2.6    Semi-parametric GPs *
           Sometimes it is useful to use a linear model for the mean of the process, as follows:
               f (x) = β T φ(x) + r(x)                                                                  (15.26)
           where r(x) ∼ GP(0, κ(x, x )) models the residuals. This combines a parametric and a non-
           parametric model, and is known as a semi-parametric model.
             If we assume β ∼ N (b, B), we can integrate these parameters out to get a new GP (O’Hagan
           1978):
                                                            
              f (x) ∼ GP φ(x)T b, κ(x, x ) + φ(x)T Bφ(x )                                      (15.27)
           15.3. GPs meet GLMs                                                                                 525

                                                                            ∂2
                                  log p(yi |fi )       ∂
                                                      ∂fi  log p(yi |fi )   ∂fi2
                                                                                log p(yi |fi )
                                  log sigm(yi fi )    t i − πi              −πi (1 − πi )
                                                      yi φ(fi )                  φ2         i fi φ(fi )
                                  log Φ(yi fi )       Φ(yi fi )             − Φ(yiifi )2 − yΦ(y  i fi )


           Table 15.1 Likelihood, gradient and Hessian for binary logistic/ probit GP regression. We assume yi ∈
           {−1, +1} and deﬁne ti = (yi +1)/2 ∈ {0, 1} and πi = sigm(fi ) for logistic regression, and πi = Φ(fi )
           for probit regression. Also, φ and Φ are the pdf and cdf of N (0, 1). From (Rasmussen and Williams 2006,
           p43).



           Integrating out β, the corresponding predictive distribution for test inputs X∗ has the following
           form (Rasmussen and Williams 2006, p28):
              p(f∗ |X∗ , X, y)      =    N (f∗ , cov [f∗ ])                                                 (15.28)
                            f∗      =    ΦT∗ β + KT∗ K−1
                                                      y (y − Φβ)                                            (15.29)
                             β      =    (Φ K−1
                                            T
                                              y Φ+B
                                                       −1 −1
                                                         ) (ΦK−1
                                                               y y+B
                                                                      −1
                                                                         b)                                 (15.30)
                      cov [f∗ ]     =    K∗∗ − KT∗ K−1
                                                     y K∗ + R (B
                                                             T  −1
                                                                   + ΦK−1
                                                                       y Φ )
                                                                            T −1
                                                                                 R                          (15.31)
                                                  −1
                            R       =    Φ∗ − ΦKy Φ∗                                                        (15.32)

           The predictive mean is the output of the linear model plus a correction term due to the GP, and
           the predictive covariance is the usual GP covariance plus an extra term due to the uncertainty
           in β.

  15.3     GPs meet GLMs
           In this section, we extend GPs to the GLM setting, focussing on the classiﬁcation case. As with
           Bayesian logistic regression, the main difficulty is that the Gaussian prior is not conjugate to
           the bernoulli/ multinoulli likelihood. There are several approximations one can adopt: Gaussian
           approximation (Section 8.4.3), expectation propagation (Kuss and Rasmussen 2005; Nickisch and
           Rasmussen 2008), variational (Girolami and Rogers 2006; Opper and Archambeau 2009), MCMC
           (Neal 1997; Christensen et al. 2006), etc. Here we focus on the Gaussian approximation, since it
           is the simplest and fastest.

 15.3.1    Binary classiﬁcation
           In the binary case, we deﬁne the model as p(yi |xi ) = σ(yi f (xi )), where, following (Rasmussen
           and Williams 2006), we assume yi ∈ {−1, +1}, and we let σ(z) = sigm(z) (logistic regression)
           or σ(z) = Φ(z) (probit regression). As for GP regression, we assume f ∼ GP(0, κ).

15.3.1.1   Computing the posterior
           Deﬁne the log of the unnormalized posterior as follows:
                                                               1           1          N
              (f ) = log p(y|f ) + log p(f |X) = log p(y|f ) − f T K−1 f − log |K| −   log 2π              (15.33)
                                                               2           2          2
           526                                                              Chapter 15. Gaussian processes


           Let J(f )  −(f ) be the function we want to minimize. The gradient and Hessian of this are
           given by
                 g   =    −∇ log p(y|f ) + K−1 f                                                      (15.34)
              H      =    −∇∇ log p(y|f ) + K−1 = W + K−1                                             (15.35)
           Note that W  −∇∇ log p(y|f ) is a diagonal matrix because the data are iid (conditional on
           f ). Expressions for the gradient and Hessian of the log likelihood for the logit and probit case
           are given in Sections 8.3.1 and 9.4.1, and summarized in Table 15.1.
               We can use IRLS to ﬁnd the MAP estimate. The update has the form
              f new      = f − H−1 g = f + (K−1 + W)−1 (∇ log p(y|f ) − K−1 f )                      (15.36)
                         = (K−1 + W)−1 (Wf + ∇ log p(y|f ))                                           (15.37)
           At convergence, the Gaussian approximation of the posterior takes the following form:
              p(f |X, y) ≈ N (f̂ , (K−1 + W)−1 )                                                     (15.38)

15.3.1.2   Computing the posterior predictive
           We now compute the posterior predictive. First we predict the latent function at the test case
           x∗ . For the mean we have
                                   
               E [f∗ |x∗ , X, y] =   E [f∗ |f , x∗ , X, y] p(f |X, y)df                            (15.39)
                                   
                                 =   kT∗ K−1 f p(f |X, y)df                                        (15.40)

                                  =     kT∗ K−1 E [f |X, y] ≈ kT∗ K−1 f̂                              (15.41)
           where we used Equation 15.8 to get the mean of f∗ given noise-free f .
             To compute the predictive variance, we use the rule of iterated variance:
              var [f∗ ]    =   E [var [f∗ |f ]] + var [E [f∗ |f ]]                                    (15.42)
           where all probabilities are conditioned on x∗ , X, y. From Equation 15.9 we have
                                  
             E [var [f∗ |f ]] = E k∗∗ − kT∗ K−1 k∗ = k∗∗ − kT∗ K−1 k∗                                 (15.43)
           From Equation 15.9 we have
                                    
              var [E [f∗ |f ]] = var k∗ K−1 f = kT∗ K−1 cov [f ] K−1 k∗                               (15.44)
           Combining these we get
              var [f∗ ]    =   k∗∗ − kT∗ (K−1 − K−1 cov [f ] K−1 )k∗                                  (15.45)
           From Equation 15.38 we have cov [f ] ≈ (K−1 + W)−1 . Using the matrix inversion lemma we
           get
              var [f∗ ]    ≈   k∗∗ − kT∗ K−1 k∗ + kT∗ K−1 (K−1 + W)−1 K−1 k∗                         (15.46)
                           =   k∗∗ − kT∗ (K + W−1 )−1 k∗                                              (15.47)
           15.3. GPs meet GLMs                                                                          527


           So in summary we have
              p(f∗ |x∗ , X, y) = N (E [f∗ ] , var [f∗ ])                                             (15.48)
           To convert this in to a predictive distribution for binary responses, we use
                                            
              π∗ = p(y∗ = 1|x∗ , X, y) ≈ σ(f∗ )p(f∗ |x∗ , X, y)df∗                                   (15.49)

           This can be approximated using any of the methods discussed in Section 8.4.4, where we
           discussed Bayesian logistic regression. For example, using the probit approximation of Sec-
           tion 8.4.4.2, we have π∗ ≈ sigm(κ(v)E [f∗ ]), where v = var [f∗ ] and κ2 (v) = (1 + πv/8)−1 .

15.3.1.3   Computing the marginal likelihood
           We need the marginal likelihood in order to optimize the kernel parameters. Using the Laplace
           approximation in Equation 8.54 we have
                                      1
              log p(y|X) ≈ (f̂ ) −     log |H| + const                                              (15.50)
                                      2
           Hence
                                                1             1         1
              log p(y|X)     ≈    log p(y|f̂ ) − f̂ T K−1 f̂ − log |K| − log |K−1 + W|               (15.51)
                                                2             2         2
             Computing the derivatives ∂ log p(y|X,θ)
                                             ∂θj      is more complex than in the regression case, since f̂
           and W, as well as K, depend on θ. Details can be found in (Rasmussen and Williams 2006,
           p125).

15.3.1.4   Numerically stable computation *
           To implement the above equations in a numerically stable way, it is best to avoid inverting K
           or W. (Rasmussen and Williams 2006, p45) suggest deﬁning
                              1       1
              B = IN + W 2 KW 2                                                                      (15.52)
           which has eigenvalues bounded below by 1 (because of the I) and above by 1 +      N
                                                                                             4   maxij Kij
           (because wii = πi (1 − π) ≤ 0.25), and hence can be safely inverted.
              One can use the matrix inversion lemma to show
                                                       1        1
              (K−1 + W)−1 = K − KW 2 B−1 W 2 K                                                       (15.53)
           Hence the IRLS update becomes
              f new   =    (K−1 + W)−1 (Wf + ∇ log p(y|f ))                                          (15.54)
                                       3      45          6
                                                                b
                                          1                 1
                                                  −1
                      =    K(I − W B      2            W K)b2                                        (15.55)
                                              1                     1
                      =    K (b − W L \ (L \ (W Kb)))
                                              2   T                 2                                (15.56)
                             3         45           6
                                                        a
           528                                                                                Chapter 15. Gaussian processes


           where B = LLT is a Cholesky decomposition of B. The ﬁtting algorithm takes in O(T N 3 )
           time and O(N 2 ) space, where T is the number of Newton iterations.
              At convergence we have a = K−1 f̂ , so we can evaluate the log marginal likelihood (Equa-
           tion 15.51) using
                                          1        
               log p(y|X) = log p(y|f̂ ) − aT f̂ −   log Lii                                      (15.57)
                                          2        i

           where we exploited the fact that
                                                             1        1
               |B| = |K||K−1 + W| = |IN + W 2 KW 2 |                                                                          (15.58)

             We now compute the predictive distribution. Rather than using E [f∗ ] = kT∗ K−1 f̂ , we exploit
           the fact that at the mode, ∇ = 0, so f̂ = K(∇ log p(y|f̂ )). Hence we can rewrite the predictive
           mean as follows:2
               E [f∗ ] = kT∗ ∇ log p(y|f̂ )                                                                                   (15.59)
              To compute the predictive variance, we exploit the fact that
                                           1       1                           1     1         1           1
               (K + W−1 )−1 = W 2 W− 2 (K + W−1 )−1 W− 2 W 2 = W 2 B−1 W 2                                                    (15.60)
           to get
                                               1                 1
               var [f∗ ] = k∗∗ − kT∗ W 2 (LLT )−1 W 2 k∗ = k∗∗ − vT v                                                         (15.61)
                                    1
           where v = L \ (W 2 k∗ ). We can then compute π∗ .
              The whole algorithm is summarized in Algorithm 16, based on (Rasmussen and Williams 2006,
           p46). Fitting takes O(N 3 ) time, and prediction takes O(N 2 N∗ ) time, where N∗ is the number
           of test cases.

15.3.1.5   Example
           In Figure 15.7, we show a synthetic binary classiﬁcation problem in 2d. We use an SE kernel. On
           the left, we show predictions using hyper-parameters set by hand; we use a short length scale,
           hence the very sharp turns in the decision boundary. On the right, we show the predictions
           using the learned hyper-parameters; the model favors a more parsimonious explanation of the
           data.

15.3.2     Multi-class classiﬁcation
           In this section, we consider a model of the form p(yi |xi ) = Cat(yi |S(fi )), where fi =
           (fi1 , . . . , fiC ), and we assume f.c ∼ GP(0, κc ). Thus we have one latent function per class,
           which are a priori independent, and which may use different kernels. As before, we will use
           a Gaussian approximation to the posterior. (A similar model, but using the multinomial probit
           function instead of the multinomial logit, is described in (Girolami and Rogers 2006).)

           2. We see that training points that are well-predicted by the model, for which ∇i log p(yi |fi ) ≈ 0, do not contribute
           strongly to the prediction at test points; this is similar to the behavior of support vectors in an SVM (see Section 14.5).
15.3. GPs meet GLMs                                                                                                       529




 Algorithm 15.2: GP binary classiﬁcation using Gaussian approximation
 1   // First compute MAP estimate using IRLS;
2    f = 0;
3    repeat
4         W = −∇∇ log p(y|f ) ;
                         1       1
5         B = IN + W 2 KW 2 ;
6         L = cholesky(B) ;
7         b = Wf + ∇ log p(y|f ) ;
                       1              1
8         a = b − W 2 LT \ (L \ (W 2 Kb));
9         f = Ka;
10   until converged;
11   log p(y|X) = log p(y|f ) − 12 aT f − i log Lii ;
12   // Now perform prediction ;
13   E [f∗ ] = kT∗ ∇ log p(y|f );
                   1
14   v = L \ (W 2 k∗ );
15   var [f∗ ] = k∗∗) − vT v ;
16   p(y∗ = 1) = sigm(z)N (z|E [f∗ ] , var [f∗ ])dz;




                   SE kernel, l=0.500, σ2=10.000                            SE kernel, l=1.280, σ2=14.455
         4                                                 0.9    4                                                 0.9



         3                                                 0.8    3                                                 0.8



         2                                                 0.7    2                                                 0.7



         1                                                 0.6    1                                                 0.6



         0                                                 0.5    0                                                 0.5



        −1                                                 0.4   −1                                                 0.4



        −2                                                 0.3   −2                                                 0.3



        −3                                                 0.2   −3                                                 0.2



        −4                                                 0.1   −4                                                 0.1
         −4   −3   −2    −1     0         1   2    3   4          −4   −3   −2    −1     0         1   2    3   4




                                    (a)                                                      (b)

Figure 15.7 Contours of the posterior predictive probability for the red circle class generated by a GP with
an SE kernel. Thick black line is the decision boundary if we threshold at a probability of 0.5. (a) Manual
parameters, short length scale. (b) Learned parameters, long length scale. Figure generated by gpcDemo2d,
based on code by Carl Rasmussen.
           530                                                                                   Chapter 15. Gaussian processes


15.3.2.1   Computing the posterior
           The unnormalized log posterior is given by

                       1                   N      C
                                                                                             1           CN
              (f ) = − f T K−1 f + yT f −     log     exp fic                          −      log |K| −    log 2π       (15.62)
                       2                   i=1     c=1
                                                                                             2            2

           where
              f = (f11 , . . . , fN 1 , f12 , . . . , fN 2 , · · · , f1C , . . . , fN C )T                               (15.63)
           and y is a dummy encoding of the yi ’s which has the same layout as f . Also, K is a block
           diagonal matrix containing Kc , where Kc = [κc (xi , xj )] models the correlation of the c’th
           latent function.
              The gradient and Hessian are given by
               ∇         =       −K−1 f + y − π                                                                         (15.64)
              ∇∇         =       −K−1 − W                                                                               (15.65)
           where W  diag(π) − ΠΠT , where Π is a CN × N matrix obtained by stacking diag(π :c )
           vertically. (Compare these expressions to standard logistic regression in Section 8.3.7.)
             We can use IRLS to compute the mode. The Newton step has the form
              f new = (K−1 + W)−1 (Wf + y − π)                                                                           (15.66)
           Naively implementing this would take O(C 3 N 3 ) time. However, we can reduce this to O(CN 3 ),
           as shown in (Rasmussen and Williams 2006, p52).

15.3.2.2   Computing the posterior predictive
           We can compute the posterior predictive in a manner analogous to Section 15.3.1.2. For the
           mean of the latent response we have
              E [f∗c ] = kc (x∗ )T K−1
                                    c f̂c = kc (x∗ ) (yc − π̂ c )
                                                    T
                                                                                                                         (15.67)
           We can put this in vector form by writing
              E [f∗ ] = Q∗ T (y − π̂)                                                                                    (15.68)
           where
                       ⎛                                  ⎞
                          k1 (x∗ )     ...         0
                   ⎜                   ..                 ⎟
              Q∗ = ⎝                      .               ⎠                                                              (15.69)
                              0        ...     kC (x∗ )
           Using a similar argument to Equation 15.47, we can show that the covariance of the latent
           response is given by
              cov [f∗ ]       =    Σ + QT∗ K−1 (K−1 + W)−1 K−1 Q∗                                                        (15.70)
                              =    diag(k(x∗ , x∗ )) − QT∗ (K + W−1 )−1 Q∗                                               (15.71)
           15.3. GPs meet GLMs                                                                             531


           where Σ is a C × C diagonal matrix with Σcc = κc (x∗ , x∗ ) − kTc (x∗ )K−1     c kc (x∗ ), and
           k(x∗ , x∗ ) = [κc (x∗ , x∗ )].
             To compute the posterior predictive for the visible response, we need to use
                                  
              p(y|x∗ , X, y) ≈ Cat(y|S(f∗ ))N (f∗ |E [f∗ ] , cov [f∗ ])df∗                          (15.72)

           We can use any of deterministic approximations to the softmax function discussed in Sec-
           tion 21.8.1.1 to compute this. Alternatively, we can just use Monte Carlo.

15.3.2.3   Computing the marginal likelihood
           Using arguments similar to the binary case, we can show that

                          1                      N      C
                                                                               1              1    1
            log p(y|X) ≈ − f̂ T K−1 f̂ + yT f̂ −     log     exp fˆic      −     log |ICN + W 2 KW 2 (|15.73)
                          2                      i=1     c=1
                                                                               2

           This can be optimized numerically in the usual way.

15.3.2.4   Numerical and computational issues
           One can implement model ﬁtting in O(T CN 3 ) time and O(CN 2 ) space, where T is the
           number of Newton iterations, using the techniques described in (Rasmussen and Williams 2006,
           p50). Prediction takes O(CN 3 + CN 2 N∗ ) time, where N∗ is the number of test cases.

 15.3.3    GPs for Poisson regression
           In this section, we illustrate GPs for Poisson regression. An interesting application of this is to
           spatial disease mapping. For example, (Vanhatalo et al. 2010) discuss the problem of modeling
           the relative risk of heart attack in different regions in Finland. The data consists of the heart
           attacks in Finland from 1996-2000 aggregated into 20km x 20km lattice cells. The model has
           the following form:

              yi ∼ Poi(ei ri )                                                                          (15.74)

           where ei is the known expected number of deaths (related to the population of cell i and the
           overall death rate), and ri is the relative risk of cell i which we want to infer. Since the
           data counts are small, we regularize the problem by sharing information with spatial neighbors.
           Hence we assume f  log(r) ∼ GP(0, κ), where we use a Matern kernel with ν = 3/2, and a
           length scale and magnitude that are estimated from data.
              Figure 15.8 gives an example of the kind of output one can obtain from this method, based
           on data from 911 locations. On the left we plot the posterior mean relative risk (RR), and on the
           right, the posterior variance. We see that the RR is higher in Eastern Finland, which is consistent
           with other studies. We also see that the variance in the North is higher, since there are fewer
           people living there.
         532                                                                                                Chapter 15. Gaussian processes


                                Posterior mean of the relative risk, FIC                         Posterior variance of the relative risk, FIC
                               60                                                                60
                                                                                                                                                0.035
                                                                               1.4

                               50                                                                50                                             0.03
                                                                               1.3

                                                                                                                                                0.025
                                                                               1.2               40
                               40

                                                                               1.1                                                              0.02
                               30                                                                30
                                                                               1
                                                                                                                                                0.015

                               20                                              0.9               20
                                                                                                                                                0.01
                                                                               0.8
                               10                                                                10
                                                                                                                                                0.005
                                                                               0.7

                                0                                                                 0
                                    0      10        20        30                                     0      10         20        30

                                           (a)                                                                 (b)

         Figure 15.8 We show the relative risk of heart disease in Finland using a Poisson GP. Left: posterior mean.
         Right: posterior variance. Figure generated by gpSpatialDemoLaplace, written by Jarno Vanhatalo.



 15.4    Connection with other methods
         There are variety of other methods in statistics and machine learning that are closely related to
         GP regression/ classiﬁcation. We give a brief review of some of these below.

15.4.1   Linear models compared to GPs
         Consider Bayesian linear regression for D-dimensional features, where the prior on the weights
         is p(w) = N (0, Σ). The posterior predictive distribution is given by the following;
            p(f∗ |x∗ , X, y)      =       N (μ, σ 2 )                                                                                                   (15.75)
                                          1 T −1 T
                           μ =               x A X y                                                                                                    (15.76)
                                          σy2 ∗
                          σ2      =       xT∗ A−1 x∗                                                                                                    (15.77)
         where A = σy−2 XT X + Σ−1 . One can show that we can rewrite the above distribution as
         follows
               μ    =   xT∗ ΣXT (K + σy2 I)−1 y                                                                                                         (15.78)
                2                                                          2         −1
            σ       =   xT∗ Σx∗     −   xT∗ ΣXT (K                  + σ I)                XΣx∗                                                          (15.79)
         where we have deﬁned K = XΣXT , which is of size N × N . Since the features only ever
         appear in the form XΣXT , xT∗ ΣXT or xT∗ Σx∗ , we can kernelize the above expression by
         deﬁning κ(x, x ) = xT Σx .
            Thus we see that Bayesian linear regression is equivalent to a GP with covariance function
         κ(x, x ) = xT Σx . Note, however, that this is a degenerate covariance function, since it has at
         most D non-zero eigenvalues. Intuitively this reﬂects the fact that the model can only represent
         a limited number of functions. This can result in underﬁtting, since the model is not ﬂexible
         enough to capture the data. What is perhaps worse, it can result in overconﬁdence, since the
           15.4. Connection with other methods                                                                533


           model’s prior is so impoverished that its posterior will become too concentrated. So not only is
           the model wrong, it think it’s right!

 15.4.2    Linear smoothers compared to GPs
           A linear smoother is a regression function which is a linear function of the training outputs:
                        
              fˆ(x∗ ) =   wi (x∗ ) yi                                                               (15.80)
                           i

           where wi (x∗ ) is called the weight function (Silverman 1984). (Do not confuse this with a linear
           model, where the output is a linear function of the input vector.)
              There are a variety of linear smoothers, such as kernel regression (Section 14.7.4), locally
           weighted regression (Section 14.7.5), smoothing splines (Section 15.4.6), and GP regression. To see
           that GP regession is a linear smoother, note that the mean of the posterior predictive distribution
           of a GP is given by
                                                  
                                                  N
              f (x∗ ) = kT∗ (K + σy2 IN )−1 y =         yi wi (x∗ )                                        (15.81)
                                                  i=1

           where wi (x∗ ) = [(K + σy2 IN )−1 k∗ ]i .
              In kernel regression, we derive the weight function from a smoothing kernel rather than a
           Mercer kernel, so it is clear that the weight function will then have local support. In the case
           of a GP, things are not as clear, since the weight function depends on the inverse of K. For
           certain GP kernel functions, we can analytically derive the form of wi (x); this is known as the
                                                                              N
           equivalent kernel (Silverman 1984). One can show that i=1 wi (x∗ ) = 1, although we may
           have wi (x∗ ) < 0, so we are computing a linear combination but not a convex combination of
           the yi ’s. More interestingly, wi (x∗ ) is a local function, even if the original kernel used by the GP
           is not local. Futhermore the effective bandwidth of the equivalent kernel of a GP automatically
           decreases as the sample size N increases, whereas in kernel smoothing, the bandwidth h needs
           to be set by hand to adapt to N . See e.g., (Rasmussen and Williams 2006, Sec 2.6,Sec 7.1) for
           details.

15.4.2.1   Degrees of freedom of linear smoothers
           It is clear why this method is called “linear”, but why is it called a “smoother”? This is best
           explained in terms of GPs. Consider the prediction on the training set:
              f = K(K + σy2 )−1 y                                                                          (15.82)
                                                                      N
           Now let K have the eigendecomposition K = i=1 λi ui uTi . Since K is real and symmetric
           positive deﬁnite, the eigenvalues λi are real and non-negative, and the eigenvectors ui are
                                           N
           orthonormal. Now let y =        i=1 γi ui , where γi = ui y. Then we can rewrite the above
                                                                   T

           equation as follows:
                   
                   N
                          γ i λi
              f=                  ui                                                                       (15.83)
                   i=1
                         λi + σy2
         534                                                                 Chapter 15. Gaussian processes


         This is the same as Equation 7.47, except we are working with the eigenvectors of the Gram
         matrix K instead of the data matrix X. In any case, the interpretation is similar: if λiλ+σ
                                                                                                   i
                                                                                                     2      1,
                                                                                                     y
         then the corresponding basis function ui will not have much inﬂuence. Consequently the high-
         frequency components in y are smoothed out. The effective degrees of freedom of the linear
         smoother is deﬁned as
                                         N
                                                λi
            dof  tr(K(K + σy2 I)−1 ) =                                                                (15.84)
                                             λ
                                         i=1 i
                                                +  σy2
         This speciﬁes how “wiggly” the curve is.

15.4.3   SVMs compared to GPs
         We saw in Section 14.5.2 that the SVM objective for binary classiﬁcation is given by Equation 14.57
                      1                N
            J(w) =      ||w||2 + C     (1 − yi fi )+                                                   (15.85)
                      2            i=1

         We also know from Equation 14.59 that the optimal solution has the form w =             i αi x i ,
         so ||w||2 = i,j αi αj xTi xj . Kernelizing we get ||w||2 = αKα. From Equation 14.61, and
         absorbing the ŵ0 term into one of the kernels, we have f = Kα, so ||w||2 = f T K−1 f . Hence
         the SVM objective can be rewritten as
                      1 T          N
            J(f ) =     f f +C     (1 − yi fi )+                                                       (15.86)
                      2        i=1

         Compare this to MAP estimation for GP classiﬁer:
                   1           N
            J(f ) = f T f −     log p(yi |fi )                                                         (15.87)
                   2        i=1

         It is tempting to think that we can “convert” an SVM into a GP by ﬁguring out what likelihood
         would be equivalent to the hinge loss. However, it turns out there is no such likelihood (Sollich
         2002), although there is a pseudo-likelihood that matches the SVM (see Section 14.5.5).
            From Figure 6.7 we saw that the hinge loss and the logistic loss (as well as the probit loss)
         are quite similar to each other. The main difference is that the hinge loss is strictly 0 for errors
         larger than 1. This gives rise to a sparse solution. In Section 14.3.2, we discussed other ways
         to derive sparse kernel machines. We discuss the connection between these methods and GPs
         below.

15.4.4   L1VM and RVMs compared to GPs
         Sparse kernel machines are just linear models with basis function expansion of the form φ(x) =
         [κ(x, x1 ), . . . , κ(x, xN )]. From Section 15.4.1, we know that this is equivalent to a GP with the
         following kernel:
                          D
                              1
            κ(x, x ) =           φj (x)φj (x )                                                       (15.88)
                          j=1
                              α j
         15.4. Connection with other methods                                                           535


         where p(w) = N (0, diag(αj−1 )). This kernel function has two interesting properties. First, it
         is degenerate, meaning it has at most N non-zero eigenvalues, so the joint distribution p(f , f∗ )
         will be highly constrained. Second, the kernel depends on the training data. This can cause the
         model to be overconﬁdent when extrapolating beyond the training data. To see this, consider
         a point x∗ far outside the convex hull of the data. All the basis functions will have values
         close to 0, so the prediction will back off to the mean of the GP. More worryingly, the variance
         will back off to the noise variance. By contrast, when using a non-degenerate kernel function,
         the predictive variance increases as we move away from the training data, as desired. See
         (Rasmussen and Quiñonero-Candela 2005) for further discussion.

15.4.5   Neural networks compared to GPs
         In Section 16.5, we will discuss neural networks, which are a nonlinear generalization of GLMs.
         In the binary classiﬁcation case, a neural network is deﬁned by a logistic regression model
         applied to a logistic regression model:
                                                   
            p(y|x, θ) = Ber y|sigm wT sigm(Vx)                                                     (15.89)

         It turns out there is an interesting connection between neural networks and Gaussian processes,
         as ﬁrst pointed out by (Neal 1996).
            To explain the connection, we follow the presentation of (Rasmussen and Williams 2006, p91).
         Consider a neural network for regression with one hidden layer. This has the form

            p(y|x, θ) = N (y|f (x; θ), σ 2 )                                                        (15.90)

         where
                          
                          H
            f (x) = b +         vj g(x; uj )                                                         (15.91)
                          j=1

         where b is the offset of bias term, vj is the output weight from hidden unit j to the response
         y, uj are the inputs weights to unit j from the input x, and g() is the hidden unit activation
         function. This is typically the sigmoid or tanh function, but can be any smooth'function.
            Let'us use the following priors on the weights: where b ∼ N (0, σb2 ) v ∼ j N (vj |0, σw2
                                                                                                      ),
         u ∼ j p(uj ) for some unspeciﬁed p(uj ). Denoting all the weights by θ we have

                  Eθ [f (x)]     =    0                                                             (15.92)
                                               
            Eθ [f (x)f (x )]    =    σb2 +        σv2 Ev [g(x; uj )g(x ; uj )]                    (15.93)
                                               j

                                 =    σb2 + Hσv2 Eu [g(x; u)g(x ; u)]                              (15.94)

         where the last equality follows since the H hidden units are iid. If we let σv2 scale as ω 2 /H
         (since more hidden units will increase the input to the ﬁnal node, so we should scale down
         the magnitude of the weights), then the last term becomes ω 2 Eu [g(x; u)g(x ; u)]. This is a
         sum over H iid random variables. Assuming that g is bounded, we can apply the central limit
         theorem. The result is that as H → ∞, we get a Gaussian process.
           536                                                                                                                    Chapter 15. Gaussian processes


                                                                                                                         σ = 10
                                     4
                                                                                                                1        σ=3
                                              −0.5                                                                       σ=1

                                                      0         0.95




                                                                                                output, f(x)
                        input, xʼ
                                                          0.5                                                   0
                                     0
                                                          0.5
                                                0.95            0
                                                                                                               −1
                                                                    −0.5

                                    −4

                                         −4             0                  4                                        −4                0       4
                                                     input, x                                                                      input, x

                                                       (a)                                                                          (b)


           Figure 15.9 (a) Covariance function κN N (x, x ) for σ0 = 10, σ = 10. (b) Samples from from a GP with
           this kernel, using various values of σ. Figure generated by gpnnDemo, written by Chris Williams.


                                                                                                                                      D
             If we use as activation / transfer function g(x; u) = erf(u0 + j=1 uj xj ), where erf(z) =
             √ )z       2
           2/ π 0 e−t dt, and we choose u ∼ N (0, Σ), then (Williams 1998) showed that the covariance
           kernel has the form
                                          2                                        2x̃T Σx̃
              κN N (x, x ) =               sin−1                                                                                                        (15.95)
                                          π                             (1 + 2x̃T Σx̃)(1 + 2(x̃ )T Σx̃ )

           where x̃ = (1, x1 , . . . , xD ). This is a true “neural network” kernel, unlike the “sigmoid” kernel
           κ(x, x ) = tanh(a + bxT x ), which is not positive deﬁnite.
              Figure 15.9(a) illustrates this kernel when D = 2 and Σ = diag(σ02 , σ 2 ). Figure 15.9(b) shows
           some functions sampled from the corresponding GP. These are equivalent to functions which
           are superpositions of erf(u0 + ux) where u0 and u are random. As σ 2 increases, the variance
           of u increases, so the function varies more quickly. Unlike the RBF kernel, functions sampled
           from this kernel do not tend to 0 away from the data, but rather they tend to remain at the
           same value they had at the “edge” of the data.
              Now suppose we use an RBF network, which is equivalent to a hidden unit activation function
           of the form g(x; u) = exp(−|x − u|2 /(2σg2 )). If u ∼ N (0, σu2 I), one can show that the
           coresponding kernel is equivalent to the RBF or SE kernel.

 15.4.6    Smoothing splines compared to GPs *
           Smoothing splines are a widely used non-parametric method for smoothly interpolating data
           (Green and Silverman 1994). They are are a special case of GPs, as we will see. They are usually
           used when the input is 1 or 2 dimensional.

15.4.6.1   Univariate splines
           The basic idea is to ﬁt a function f by minimizing the discrepancy to the data plus a smoothing
           term that penalizes functions that are “too wiggly”. If we penalize the m’th derivative of the
           15.4. Connection with other methods                                                                         537


           function, the objective becomes

                        
                        N                            
                                                              dm
              J(f ) =         (f (xi ) − yi )2 + λ       (       f (x))2 dx                                        (15.96)
                        i=1
                                                             dxm

           One can show (Green and Silverman 1994) that the solution is a piecewise polynomial where
           the polynomials have order 2m − 1 in the interior bins [xi−1 , xi ] (denoted I), and order m − 1
           in the two outermost intervals (−∞, x1 ] and [xN , ∞):

                     
                     m−1                         
                                                 N                                           
                                                                                             N
           f (x) =         βj xj + I(x ∈ I)              αi (x − xi )2m−1
                                                                     +          + I(x ∈ I)         αi (x − xi )m−1
                                                                                                               +   (15.97)
                     j=0                         i=1                                         i=1

           For example, if m = 2, we get the (natural) cubic spline

                                                     
                                                     N                                       
                                                                                             N
              f (x) = β0 + β1 x + I(x ∈ I)                     αi (x − xi )3+   + I(x ∈ I)         αi (x − xi )+   (15.98)
                                                         i=1                                 i=1

           which is a series of truncated cubic polynomials, whose left hand sides are located at each of the
           N training points. (The fact that the model is linear on the edges prevents it from extrapolating
           too wildly beyond the range of the data; if we drop this requirement, we get an “unrestricted”
           spline.)
             We can clearly ﬁt this model using ridge regression: ŵ = (ΦT Φ + λIN )−1 ΦT y, where the
           columns of Φ are 1, xi and (x − xi )3+ for i = 2 : N − 1 and (x − xi )+ for i = 1 or i = N .
           However, we can also derive an O(N ) time method (Green and Silverman 1994, Sec 2.3.3).

15.4.6.2   Regression splines
           In general, we can place the polynomials at a ﬁxed set of K locations known as knots, denoted
           ξk . The result is called a regression spline. This is a parametric model, which uses basis
           function expansion of the following form (where we drop the interior/ exterior distinction for
           simplicity):

                                       
                                       K
              f (x) = β0 + β1 x +            αj (x − ξk )3+                                                         (15.99)
                                       k=1

           Choosing the number and locations of the knots is just like choosing the number and values of
           the support vectors in Section 14.3.2. If we impose an 2 regularizer on the regression coefficients
           αj , the method is known as penalized splines. See Section 9.6.1 for a practical example of
           penalized splines.

15.4.6.3   The connection with GPs
           One can show (Rasmussen and Williams 2006, p139) that the cubic spline is the MAP estimate
           of the following function

              f (x) = β0 + β1 x + r(x)                                                                             (15.100)
           538                                                               Chapter 15. Gaussian processes


           where p(βj ) ∝ 1 (so that we don’t penalize the zero’th and ﬁrst derivatives of f ), and r(x) ∼
           GP(0, σf2 κsp (x, x )), where
                               1
             κsp (x, x )         (x − u)+ (x − u)+ du                                             (15.101)
                              0

             Note that the kernel in Equation 15.101 is rather unnatural, and indeed posterior samples from
           the resulting GP are rather unsmooth. However, the posterior mode/mean is smooth. This shows
           that regularizers don’t always make good priors.

15.4.6.4   2d input (thin-plate splines)
           One can generalize cubic splines to 2d input by deﬁning a regularizer of the following form:
                2           2      2          2    2        2
                                                                    
                      ∂ f (x)            ∂ f (x)         ∂ f (x)
                                  +2                 +                dx1 dx2                       (15.102)
                        ∂x21             ∂x1 ∂x2           ∂x22

           One can show that the solution has the form
                                      
                                      N
              f (x) = β0 + β T1 x +          αi φi (x)                                                (15.103)
                                       i=1

           where φi (x) = η(||x − xi ||), and η(z) = z 2 log z 2 . This is known as a thin plate spline. This
           is equivalent to MAP estimation with a GP whose kernel is deﬁned in (Williams and Fitzgibbon
           2006).

15.4.6.5   Higher-dimensional inputs
           It is hard to analytically solve for the form of the optimal solution when using higher-order
           inputs. However, in the parametric regression spline setting, where we forego the regularizer on
           f , we have more freedom in deﬁning our basis functions. One way to handle multiple inputs is
           to use a tensor product basis, deﬁned as the cross product of 1d basis functions. For example,
           for 2d input, we can deﬁne
                                                            
               f (x1 , x2 ) = β0 +        β1m (x1 − ξ1m )+ +     β2m (x2 − ξ2m )+                   (15.104)
                                        m                      m
                                  
                          +           β12m (x1 − ξ1m )+ (x2 − ξ2m )+                                  (15.105)
                                  m

             It is clear that for high-dimensional data, we cannot allow higher-order interactions, because
           there will be too many parameters to ﬁt. One approach to this problem is to use a search
           procedure to look for useful interaction terms. This is known as MARS, which stands for
           “multivariate adaptive regression splines”. See Section 16.3.3 for details.

 15.4.7    RKHS methods compared to GPs *
           We can generalize the idea of penalizing derivatives of functions, as used in smoothing splines,
           to ﬁt functions with a more general notion of smoothness. Recall from Section 14.2.3 that
15.4. Connection with other methods                                                          539


Mercer’s theorem says that any positive deﬁnite kernel function can be represented in terms of
eigenfunctions:
                 ∞
                 
   κ(x, x ) =           λi φi (x)φi (x )                                               (15.106)
                   i=1

  The φi form an orthormal basis for a function space:
                              ∞
                                                ∞
                                                 
   Hk = {f : f (x) =                fi φi (x),         fi2 /λi < ∞}                      (15.107)
                              i=1                i=1
                                                                      ∞
Now deﬁne the inner product between two functions f (x) =             i=1   fi φi (x) and g(x) =
  ∞
  i=1 gi φi (x) in this space as follows:
               ∞
                fi g i
   f, gH                                                                              (15.108)
                 i=1
                         λi

In Exercise 15.1, we show that this deﬁnition implies that
   κ(x1 , ·), κ(x2 , ·)H = κ(x1 , x2 )                                                 (15.109)
This is called the reproducing property, and the space of functions Hk is called a reproducing
kernel Hilbert space or RKHS.
  Now consider an optimization problem of the form

              1 
                  N
                                      1
   J(f ) =     2
                     (yi − f (xi ))2 + ||f ||2H                                           (15.110)
             2σy i=1                  2

where ||f ||J is the norm of a function:
                              ∞
                               f2
   ||f ||H = f, f H =               i
                                                                                          (15.111)
                               i=1
                                     λi

The intuition is that functions that are complex wrt the kernel will have large norms, because
they will need many eigenfunctions to represent them. We want to pick a simple function that
provides a good ﬁt to the data.
  One can show (see e.g., (Schoelkopf and Smola 2002)) that the solution must have the form
             
             N
   f (x) =         αi κ(x, xi )                                                           (15.112)
             i=1

This is known as the representer theorem, and holds for other convex loss functions besides
squared error.
                                                    N
  We can solve for the α by substituting in f (x) = i=1 αi κ(x, xi ) and using the reproducing
property to get
              1              1
   J(α) =         |y − Kα|2 + αT Kα                                                       (15.113)
             2σy2            2
       540                                                              Chapter 15. Gaussian processes


       Minimizing wrt α we ﬁnd

          α̂ = (K + σy2 I)−1                                                                     (15.114)

       and hence
                      
          fˆ(x∗ ) =       α̂i κ(x∗ , xi ) = kT∗ (K + σy2 I)−1 y                                  (15.115)
                      i

       This is identical to Equation 15.18, the posterior mean of a GP predictive distribution. Indeed,
       since the mean and mode of a Gaussian are the same, we can see that linear regresson with an
       RKHS regularizer is equivalent to MAP estimation with a GP. An analogous statement holds for
       the GP logistic regression case, which also uses a convex likelihood / loss function.

15.5   GP latent variable model
       In Section 14.4.4, we discussed kernel PCA, which applies the kernel trick to regular PCA. In
       this section, we discuss a different way to combine kernels with probabilistic PCA. The resulting
       method is known as the GP-LVM, which stands for “Gaussian process latent variable model”
       (Lawrence 2005).
          To explain the method, we start with PPCA. Recall from Section 12.2.4 that the PPCA model is
       as follows:

                p(zi )    =   N (zi |0, I)                                                       (15.116)
          p(yi |zi , θ)   =   N (yi |Wzi , σ 2 I)                                                (15.117)

       We can ﬁt this model by maximum likelihood, by integrating out the zi and maximizing W
       (and σ 2 ). The objective is given by
                                                                  
                       2         −DN/2       −N/2      1    −1 T
          p(Y|W, σ ) = (2π)              |C|      exp − tr(C Y Y)                        (15.118)
                                                       2

       where C = WWT + σ 2 I. As we showed in Theorem 12.2.2, the MLE for this can be computed
       in terms of the eigenvectors of YT Y.
          Now we consider the dual problem,
                                            whereby we maximize Z and integrate out W. We will
       use a prior of the form p(W) = j N (wj |0, I). The corresponding likelihood becomes

                               
                               D
          p(Y|Z, σ 2 )    =          N (y:,d |0, ZZT + σ 2 I)                                    (15.119)
                               d=1
                                                                      
                                                        1
                          =    (2π)−DN/2 |Kz |−D/2 exp − tr(K−1
                                                             z  YY T
                                                                     )                           (15.120)
                                                        2

       where Kz = ZZT + σ 2 I. Based on our discussion of the connection between the eigenvalues
       of YYT and of YT Y in Section 14.4.4, it should come as no surprise that we can also solve
       the dual problem using eigenvalue methods (see (Lawrence 2005) for the details).
          If we use a linear kernel, we recover PCA. But we can also use a more general kernel:
       Kz = K + σ 2 I, where K is the Gram matrix for Z. The MLE for Ẑ will no longer be available
15.5. GP latent variable model                                                                                            541


    0.3
                                                             0.4
    .25

                                                             0.2
    0.2

    .15                                                       0


    0.1                                                      0.2

    .05                                                      0.4

      0
                                                             0.6

                                                                   −0.8   −0.6   −0.4   −0.2    0   0.2   0.4   0.6
          0       0.05              0.1   0.15   0.2


                              (a)                                                         (b)

Figure 15.10 2d representation of 12 dimensional oil ﬂow data. The different colors/symbols represent
the 3 phases of oil ﬂow. (a) Kernel PCA with Gaussian kernel. (b) GP-LVM with Gaussian kernel. The
shading represents the precision of the posterior, where lighter pixels have higher precision. From Figure 1
of (Lawrence 2005). Used with kind permission of Neil Lawrence.



via eigenvalue methods; instead we must use gradient-based optimization. The objective is given
by
              D            1
   =−          log |Kz | − tr(K−1
                                z YY )
                                    T
                                                                                                                      (15.121)
              2            2
and the gradient is given by
    ∂     ∂ ∂Kz
        =                                                                                                         (15.122)
   ∂Zij   ∂Kz ∂Zij
where
    ∂
       = K−1    −1    −1
          z YY Kz − DKz
              T
                                                                                                                  (15.123)
   ∂Kz
                ∂Kz
The form of     ∂Zij       will of course depend on the kernel used. (For example, with a linear kernel,
where Kz = ZZ + σ 2 I, we have ∂K
                       T
                                     ∂Z = Z.) We can then pass this gradient to any standard
                                        z


optimizer, such as conjugate gradient descent.
   Let us now compare GP-LVM to kernel PCA. In kPCA, we learn a kernelized mapping from
the observed space to the latent space, whereas in GP-LVM, we learn a kernelized mapping from
the latent space to the observed space. Figure 15.10 illustrates the results of applying kPCA and
GP-LVM to visualize the 12 dimensional oil ﬂow data shown in In Figure 14.9(a). We see that the
embedding produced by GP-LVM is far better. If we perform nearest neighbor classiﬁcation in
the latent space, GP-LVM makes 4 errors, while kernel PCA (with the same kernel but separately
optimized hyper-parameters) makes 13 errors, and regular PCA makes 20 errors.
   GP-LVM inherits the usual advantages of probabilistic generative models, such as the ability
to handle missing data and data of different types, the ability to use gradient-based methods
(instead of grid search) to tune the kernel parameters, the ability to handle prior information,
       542                                                               Chapter 15. Gaussian processes


       etc. For a discussion of some other probabilistic methods for (spectral) dimensionality reduction,
       see (Lawrence 2012).

15.6   Approximation methods for large datasets
       The principal drawback of GPs is that they take O(N 3 ) time to use. This is because of the
       need to invert (or compute the Cholesky decomposition of) the N × N kernel matrix K. A
       variety of approximation methods have been devised which take O(M 2 N ) time, where M is a
       user-speciﬁable parameter. For details, see (Quinonero-Candela et al. 2007).

       Exercises
       Exercise 15.1 Reproducing property
       Prove Equation 15.109.
16      Adaptive basis function models



 16.1   Introduction
        In Chapters 14 and 15, we discussed kernel methods, which provide a powerful way to create non-
        linear models for regression and classiﬁcation. The prediction takes the form f (x) = wT φ(x),
        where we deﬁne
           φ(x) = [κ(x, μ1 ), . . . , κ(x, μN )]                                                      (16.1)
        and where μk are either all the training data or some subset. Models of this form essen-
        tially perform a form of template matching, whereby they compare the input x to the stored
        prototypes μk .
           Although this can work well, it relies on having a good kernel function to measure the
        similarity between data vectors. Often coming up with a good kernel function is quite difficult.
        For example, how do we deﬁne the similarity between two images? Pixel-wise comparison of
        intensities (which is what a Gaussian kernel corresponds to) does not work well. Although it is
        possible (and indeed common) to hand-engineer kernels for speciﬁc tasks (see e.g., the pyramid
        match kernel in Section 14.2.7), it would be more interesting if we could learn the kernel.
           In Section 15.2.4, we discussed a way to learn the parameters of a kernel function, by maxi-
        mizing the marginal likelihood. For example, if we use the ARD kernel,
                               ⎛                          ⎞
                                    1 D
            κ(x, x ) = θ0 exp ⎝−         θj (xj − xj )2 ⎠                                         (16.2)
                                    2 j=1

        we can can estimate the θj , and thus perform a form of nonlinear feature selection. However,
        such methods can be computationally expensive. Another approach, known as multiple kernel
        learning (seee.g., (Rakotomamonjy et al. 2008)) uses a convex combination of base kernels,
        κ(x, x ) =                  
                        j wj κj (x, x ), and then estimates the mixing weights wj . But this relies on
        having good base kernels (and is also computationally expensive).
           An alternative approach is to dispense with kernels altogether, and try to learn useful features
        φ(x) directly from the input data. That is, we will create what we call an adaptive basis-
        function model (ABM), which is a model of the form
                          
                          M
           f (x) = w0 +         wm φm (x)                                                            (16.3)
                          m=1
         544                                                     Chapter 16. Adaptive basis function models


         where φm (x) is the m’th basis function, which is learned from data. This framework covers all
         of the models we will discuss in this chapter.
            Typically the basis functions are parametric, so we can write φm (x) = φ(x; vm ), where vm
         are the parameters of the basis function itself. We will use θ = (w0 , w1:M , {vm }M  m=1 ) to
         denote the entire parameter set. The resulting model is not linear-in-the-parameters anymore,
         so we will only be able to compute a locally optimal MLE or MAP estimate of θ. Nevertheless,
         such models often signiﬁcantly outperform linear models, as we will see.

 16.2    Classiﬁcation and regression trees (CART)
         Classiﬁcation and regression trees or CART models, also called decision trees (not to be
         confused with the decision trees used in decision theory) are deﬁned by recursively partitioning
         the input space, and deﬁning a local model in each resulting region of input space. This can be
         represented by a tree, with one leaf per region, as we explain below.

16.2.1   Basics
         To explain the CART approach, consider the tree in Figure 16.1(a). The ﬁrst node asks if x1 is
         less than some threshold t1 . If yes, we then ask if x2 is less than some other threshold t2 . If
         yes, we are in the bottom left quadrant of space, R1 . If no, we ask if x1 is less than t3 . And
         so on. The result of these axis parallel splits is to partition 2d space into 5 regions, as shown
         in Figure 16.1(b). We can now associate a mean response with each of these regions, resulting in
         the piecewise constant surface shown in Figure 16.1(c).
            We can write the model in the following form

                                
                                M                       
                                                        M
            f (x) = E [y|x] =         wm I(x ∈ Rm ) =         wm φ(x; vm )                             (16.4)
                                m=1                     m=1

         where Rm is the m’th region, wm is the mean response in this region, and vm encodes the
         choice of variable to split on, and the threshold value, on the path from the root to the m’th leaf.
         This makes it clear that a CART model is just a an adaptive basis-function model, where the
         basis functions deﬁne the regions, and the weights specify the response value in each region.
         We discuss how to ﬁnd these basis functions below.
            We can generalize this to the classiﬁcation setting by storing the distribution over class labels
         in each leaf, instead of the mean response. This is illustrated in Figure 16.2. This model can
         be used to classify the data in Figure 1.1. For example, we ﬁrst check the color of the object.
         If it is blue, we follow the left branch and end up in a leaf labeled “4,0”, which means we
         have 4 positive examples and 0 negative examples which match this criterion. Hence we predict
         p(y = 1|x) = 4/4 if x is blue. If it is red, we then check the shape: if it is an ellipse, we
         end up in a leaf labeled “1,1”, so we predict p(y = 1|x) = 1/2. If it is red but not an ellipse,
         we predict p(y = 1|x) = 0/2; If it is some other colour, we check the size: if less than 10,
         we predict p(y = 1|x) = 4/4, otherwise p(y = 1|x) = 0/5. These probabilities are just the
         empirical fraction of positive examples that satisfy each conjunction of feature values, which
         deﬁnes a path from the root to a leaf.
         16.2. Classiﬁcation and regression trees (CART)                                                                                  545



                                     X1 ≤ t1                                    10

                                                                                 9

                                                                                 8

                                                                                 7
                 X2 ≤ t2                                X2 ≤ t4                  6

                                                                                 5

                                                                                 4

                 R1        X1 ≤ t3                     R2             R3         3

                                                                                 2
                                                                                10
                                                                                     8                                              10
                                                                                          6
                       R4                       R5
                                                                                                                                8
                                                                                              4                             6
                                                                                                                        4
                                                                                                  2
                                                                                                                    2
                                                                                                      0   0




                                               (a)                                                            (b)

         Figure 16.1 A simple regression tree on two inputs. Based on Figure 9.2 of (Hastie et al. 2009). Figure
         generated by regtreeSurfaceDemo.


                                                              color
                                                blue                           other
                                                                  red
                                       4,0                   shape                       size < 10
                                                 ellipse               other         yes                      no

                                                        1,1           0,2            4,0                  0,5

         Figure 16.2 A simple decision tree for the data in Figure 1.1. A leaf labeled as (n1 , n0 ) means that
         there are n1 positive examples that match this path, and n0 negative examples. In this tree, most of
         the leaves are “pure”, meaning they only have examples of one class or the other; the only exception is
         leaf representing red ellipses, which has a label distribution of (1, 1). We could distinguish positive from
         negative red ellipses by adding a further test based on size. However, it is not always desirable to construct
         trees that perfectly model the training data, due to overﬁtting.



16.2.2   Growing a tree
         Finding the optimal partitioning of the data is NP-complete (Hyaﬁl and Rivest 1976), so it is
         common to use the greedy procedure shown in Algorithm 6 to compute a locally optimal MLE.
         This method is used by CART, (Breiman et al. 1984) C4.5(Quinlan 1993), and ID3 (Quinlan 1986),
         which are three popular implementations of the method. (See dtfit for a simple Matlab
         implementation.)
            The split function chooses the best feature, and the best value for that feature, as follows:

            (j ∗ , t∗ ) = arg         min            min cost({xi , yi : xij ≤ t}) + cost({xi , yi : xij > t})                           (16.5)
                                 j∈{1,...,D} t∈Tj
           546                                                      Chapter 16. Adaptive basis function models


            Algorithm 16.1: Recursive procedure to grow a classiﬁcation/ regression tree
            1   function ﬁtTree(node, D, depth) ;
           2    node.prediction = mean(yi : i ∈ D) // or class label distribution ;
           3    (j ∗ , t∗ , DL , DR ) = split(D);
           4    if not worthSplitting(depth, cost, DL , DR ) then
           5          return node
           6    else
           7        node.test = λx.xj ∗ < t∗ // anonymous function;
           8        node.left = ﬁtTree(node, DL , depth+1);
           9        node.right = ﬁtTree(node, DR , depth+1);
           10       return node;



           where the cost function for a given dataset will be deﬁned below. For notational simplicity, we
           have assumed all inputs are real-valued or ordinal, so it makes sense to compare a feature xij
           to a numeric value t. The set of possible thresholds Tj for feature j can be obtained by sorting
           the unique values of xij . For example, if feature 1 has the values {4.5, −12, 72, −12}, then we
           set T1 = {−12, 4.5, 72}. In the case of categorical inputs, the most common approach is to
           consider splits of the form xij = ck and xij = ck , for each possible class label ck . Although
           we could allow for multi-way splits (resulting in non-binary trees), this would result in data
           fragmentation, meaning too little data might “fall” into each subtree, resulting in overﬁtting.
              The function that checks if a node is worth splitting can use several stopping heuristics, such
           as the following:
           • is the reduction in cost too small? Typically we deﬁne the gain of using a feature to be a
             normalized measure of the reduction in cost:
                                 
                                   |DL |             |DR |
                 Δ  cost(D) −           cost(DL ) +       cost(DR )                               (16.6)
                                    |D|               |D|
           • has the tree exceeded the maximum desired depth?
           • is the distribution of the response in either DL or DR sufficiently homogeneous (e.g., all
             labels are the same, so the distribution is pure)?
           • is the number of examples in either DL or DR too small?

             All that remains is to specify the cost measure used to evaluate the quality of a proposed
           split. This depends on whether our goal is regression or classiﬁcation. We discuss both cases
           below.

16.2.2.1   Regression cost
           In the regression setting, we deﬁne the cost as follows:
                          
               cost(D) =      (yi − y)2                                                                  (16.7)
                            i∈D
           16.2. Classiﬁcation and regression trees (CART)                                                       547

                          1
                             
           where y = |D|       i∈D yi is the mean of the response variable in the speciﬁed set of data.
           Alternatively, we can ﬁt a linear regression model for each leaf, using as inputs the features that
           were chosen on the path from the root, and then measure the residual error.

16.2.2.2   Classiﬁcation cost
           In the classiﬁcation setting, there are several ways to measure the quality of a split. First, we
           ﬁt a multinoulli model to the data in the leaf satisfying the test Xj < t by estimating the
           class-conditional probabilities as follows:
                      1 
              π̂c =          I(yi = c)                                                                 (16.8)
                     |D|
                         i∈D

           where D is the data in the leaf. Given this, there are several common error measures for
           evaluating a proposed partition:

           • Misclassiﬁcation rate. We deﬁne the most probable class label as ŷc = argmaxc π̂c . The
             corresponding error rate is then

                   1 
                       I(yi = ŷ) = 1 − π̂ŷ                                                                  (16.9)
                  |D|
                       i∈D


           • Entropy, or deviance:

                               
                               C
                  H (π̂) = −         π̂c log π̂c                                                              (16.10)
                               c=1


              Note that minimizing the entropy is equivalent to maximizing the information gain (Quinlan
              1986) between test Xj < t and the class label Y , deﬁned by

                  infoGain(Xj < t, Y )            H (Y ) − H (Y |Xj < t)                                      (16.11)
                                                       
                                              =     −      p(y = c) log p(y = c)                              (16.12)
                                                        c
                                                       
                                                   +        p(y = c|Xj < t) log p(c|Xj < t)                   (16.13)
                                                        c


              since π̂c is an MLE for the distribution p(c|Xj < t).1

                                                                                expectations over values of Xj gives
           1. If Xj is categorical, and we use tests of the form Xj = k, then taking
           the mutual information between Xj and Y : E [infoGain(Xj , Y )] =      k p(Xj = k)infoGain(Xj = k, Y ) =
           H (Y ) − H (Y |Xj ) = I (Y ; Xj ).
           548                                                                        Chapter 16. Adaptive basis function models


                                            0.5
                                                                                                   Error rate
                                           0.45                                                    Gini
                                                                                                   Entropy
                                            0.4

                                           0.35

                                            0.3

                                           0.25

                                            0.2

                                           0.15

                                            0.1

                                           0.05

                                             0
                                                  0           0.2        0.4         0.6     0.8                1



           Figure 16.3 Node impurity measures for binary classiﬁcation. The horizontal axis corresponds to p, the
           probability of class 1. The entropy measure has been rescaled to pass through (0.5,0.5). Based on Figure
           9.3 of (Hastie et al. 2009). Figure generated by giniDemo.



           • Gini index

                  
                  C                                                            
                        π̂c (1 − π̂c ) =              π̂c −         π̂c2 = 1 −       π̂c2                                 (16.14)
                  c=1                       c                 c                  c


              This is the expected error rate. To see this, note that π̂c is the probability a random entry in
              the leaf belongs to class c, and (1 − π̂c is the probability it would be misclassiﬁed.

              In the two-class case, where p = πm (1), the misclassiﬁcation rate is 1 − max(p, 1 − p), the
           entropy is H2 (p), and the Gini index is 2p(1 − p). These are plotted in Figure 16.3. We see
           that the cross-entropy and Gini measures are very similar, and are more sensitive to changes in
           class probability than is the misclassiﬁcation rate. For example, consider a two-class problem
           with 400 cases in each class. Suppose one split created the nodes (300,100) and (100,300), while
           the other created the nodes (200,400) and (200,0). Both splits produce a misclassiﬁcation rate of
           0.25. However, the latter seems preferable, since one of the nodes is pure, i.e., it only contains
           one class. The cross-entropy and Gini measures will favor this latter choice.

16.2.2.3   Example
           As an example, consider two of the four features from the 3-class iris dataset, shown in Fig-
           ure 16.4(a). The resulting tree is shown in Figure 16.5(a), and the decision boundaries are shown
           in Figure 16.4(b). We see that the tree is quite complex, as are the resulting decision boundaries.
           In Figure 16.5(b), we show that the CV estimate of the error is much higher than the training set
           error, indicating overﬁtting. Below we discuss how to perform a tree-pruning stage to simplify
           the tree.
         16.2. Classiﬁcation and regression trees (CART)                                                                                                                                                                                                                                          549


                        4.5                                                                                                                                                                                                        unpruned decision tree
                                                                                                                                  setosa                                  4.5
                                                                                                                                  versicolor                                                                                                                                      versicolor
                                                                                                                                  virginica                                                                                                                                       setosa
                                                                                                                                                                                                                                                                                  virginica
                         4
                                                                                                                                                                           4



                        3.5



          Sepal width
                                                                                                                                                                          3.5




                                                                                                                                                                      y
                         3                                                                                                                                                 3



                        2.5                                                                                                                                               2.5




                         2                                                                                                                                                 2
                              4           4.5            5            5.5         6        6.5                    7           7.5              8                                4                                     4.5      5    5.5          6       6.5         7         7.5            8
                                                                              Sepal length                                                                                                                                                       x


                                                                               (a)                                                                                                                                                         (b)

         Figure 16.4 (a) Iris data. We only show the ﬁrst two features, sepal length and sepal width, and ignore
         petal length and petal width. (b) Decision boundaries induced by the decision tree in Figure 16.5(a).

                                                                                                                                                                                                                     0.8
                                                                                                                                                                                                                                                                         Cross−validation
                                                         SL < 5.45        SL >= 5.45
                                                                                                                                                                                                                                                                         Training set
                                                                                                                                                                                                                     0.7                                                 Min + 1 std. err.
                              W < 2.8     SW >= 2.8                                      SL < 6.15     SL >= 6.15                                                                                                                                                        Best choice




                                                                                                                                                                                    Cost (misclassification error)
                                                     SW < 3.45        SW >= 3.45                                           SL < 7.05     SL >= 7.05                                                                  0.6
                                          setosa
                                  versicolor
                                             SL < 5.75       SL >= 5.75                              SW < 2.4     SW >= 2.4
                                                                           setosa                                                                         virginica
                                                    SW < 3.1       SW >= 3.1                                                      SL < 6.95    SL >= 6.95                                                            0.5
                                             versicolor                     versicolor
                                                SW < 2.95      SW >= 2.95                                             SW < 3.15     SW >= 3.15
                                                                 versicolor                                                                        versicolor
                                                                                                                                                                                                                     0.4
                                                                                                      SL < 6.55       SL >= 6.55
                                                          virginica
                                                   versicolor                                                                                 virginica
                                                                                           SW < 2.95        >=<2.95
                                                                                                          SWSL  6.65         SL >= 6.65
                                                                                                                                                                                                                     0.3
                                                                                       SL < 6.45     SL >= 6.45 SW < 2.65           SW >= 2.65
                                                                                                               versicolor
                                                                                                         virginica
                                                                                SW < 2.85      SW >= 2.85                  SW < 2.9      SW >= 2.9                                                                   0.2
                                                                                                 versicolor              virginica

                                                                                             versicolor
                                                                                       virginica                                     virginica
                                                                                                                              versicolor
                                                                                                                                                                                                                     0.1
                                                                                                                                                                                                                           0       5                 10              15                      20
                                                                                                                                                                                                                                          Number of terminal nodes


                                                                                             (a)                                                                                                                                                 (b)

         Figure 16.5 (a) Unpruned decision tree for Iris data. (b) Plot of misclassiﬁcation error rate vs depth of
         tree. Figure generated by dtreeDemoIris.



16.2.3   Pruning a tree
         To prevent overﬁtting, we can stop growing the tree if the decrease in the error is not sufficient
         to justify the extra complexity of adding an extra subtree. However, this tends to be too myopic.
         For example, on the xor data in Figure 14.2(c), it would might never make any splits, since each
         feature on its own has little predictive power.
            The standard approach is therefore to grow a “full” tree, and then to perform pruning. This
         can be done using a scheme that prunes the branches giving the least increase in the error. See
         (Breiman et al. 1984) for details.
            To determine how far to prune back, we can evaluate the cross-validated error on each such
         subtree, and then pick the tree whose CV error is within 1 standard error of the minimum. This
         is illustrated in Figure 16.4(b). The point with the minimum CV error corresponds to the simple
         tree in Figure 16.6(a).
         550                                                                           Chapter 16. Adaptive basis function models

                                                                                                               pruned decision tree
                                                                                           4.5
                                                                                                                                           versicolor
                                  SL < 5.45    SL >= 5.45                                                                                  setosa
                                                                                                                                           virginica
                                                                                            4



               SW < 2.8   SW >= 2.8                     SL < 6.15    SL >= 6.15
                                                                                           3.5




                                                                                       y
                                                                                            3
                                          SW < 3.45     SW >= 3.45
             versicolor      setosa                                        virginica


                                                                                           2.5


                                          versicolor        setosa
                                                                                            2
                                                                                                 4   4.5   5   5.5         6   6.5    7   7.5     8
                                                                                                                           x


                                              (a)                                                                    (b)

                      Figure 16.6 Pruned decision tree for Iris data. Figure generated by dtreeDemoIris.



16.2.4   Pros and cons of trees
         CART models are popular for several reasons: they are easy to interpret2 , they can easily handle
         mixed discrete and continuous inputs, they are insensitive to monotone transformations of the
         inputs (because the split points are based on ranking the data points), they perform automatic
         variable selection, they are relatively robust to outliers, they scale well to large data sets, and
         they can be modiﬁed to handle missing inputs.3
            However, CART models also have some disadvantages. The primary one is that they do
         not predict very accurately compared to other kinds of model. This is in part due to the
         greedy nature of the tree construction algorithm. A related problem is that trees are unstable:
         small changes to the input data can have large effects on the structure of the tree, due to the
         hierarchical nature of the tree-growing process, causing errors at the top to affect the rest of the
         tree. In frequentist terminology, we say that trees are high variance estimators. We discuss a
         solution to this below.

16.2.5   Random forests
         One way to reduce the variance of an estimate is to average together many estimates. For
         example, we can train M different trees on different subsets of the data, chosen randomly with

         2. We can postprocess the tree to derive a series of logical rules such as “If x1 < 5.45 then ...” (Quinlan 1990).
         3. The standard heuristic for handling missing inputs in decision trees is to look for a series of ”backup” variables,
         which can induce a similar partition to the chosen variable at any given split; these can be used in case the chosen
         variable is unobserved at test time. These are called surrogate splits. This method ﬁnds highly correlated features,
         and can be thought of as learning a local joint model of the input. This has the advantage over a generative model
         of not modeling the entire joint distribution of inputs, but it has the disadvantage of being entirely ad hoc. A simpler
         approach, applicable to categorical variables, is to code “missing” as a new value, and then to treat the data as fully
         observed.
         16.2. Classiﬁcation and regression trees (CART)                                                  551


         replacement, and then compute the ensemble

                      M
                          1
            f (x) =         fm (x)                                                                     (16.15)
                      m=1
                          M

         where fm is the m’th tree. This technique is called bagging (Breiman 1996), which stands for
         “bootstrap aggregating”.
            Unfortunately, simply re-running the same learning algorithm on different subsets of the data
         can result in highly correlated predictors, which limits the amount of variance reduction that is
         possible. The technique known as random forests (Breiman 2001a) tries to decorrelate the base
         learners by learning trees based on a randomly chosen subset of input variables, as well as a
         randomly chosen subset of data cases. Such models often have very good predictive accuracy
         (Caruana and Niculescu-Mizil 2006), and have been widely used in many applications (e.g., for
         body pose recognition using Microsoft’s popular kinect sensor (Shotton et al. 2011)).
            Bagging is a frequentist concept. It is also possible to adopt a Bayesian approach to learning
         trees. In particular, (Chipman et al. 1998; Denison et al. 1998; Wu et al. 2007) perform approximate
         inference over the space of trees (structure and parameters) using MCMC. This reduces the
         variance of the predictions. We can also perform Bayesian inference over the space of ensembles
         of trees, which tends to work much better. This is known as Bayesian adaptive regression
         trees or BART (Chipman et al. 2010). Note that the cost of these sampling-based Bayesian
         methods is comparable to the sampling-based random forest method. That is, both approaches
         are farily slow to train, but produce high quality classiﬁers.
            Unfortunately, methods that use multiple trees (whether derived from a Bayesian or frequen-
         tist standpoint) lose their nice interpretability properties. Fortunately, various post-processing
         measures can be applied, as discussed in Section 16.8.

16.2.6   CART compared to hierarchical mixture of experts *
         An interesting alternative to a decision tree is known as the hierarchical mixture of experts.
         Figure 11.7(b) gives an illustration where we have two levels of experts. This can be thought of
         as a probabilistic decision tree of depth 2, since we recursively partition the space, and apply
         a different expert to each partition. Hastie et al. (Hastie et al. 2009, p331) write that “The
         HME approach is a promising competitor to CART trees”. Some of the advantages include the
         following:

         • The model can partition the input space using any set of nested linear decision boundaries.
           By contrast, standard decision trees are constrained to use axis-parallel splits.

         • The model makes predictions by averaging over all experts. By contrast, in a standard
           decision tree, predictions are made only based on the model in the corresponding leaf. Since
           leaves often contain few training examples, this can result in overﬁtting.
         • Fitting an HME involves solving a smooth continuous optimization problem (usually using
           EM), which is likely to be less prone to local optima than the standard greedy discrete
           optimization methods used to ﬁt decision trees. For similar reasons, it is computationally
           easier to “be Bayesian” about the parameters of an HME (see e.g., (Peng et al. 1996; Bishop
         552                                                      Chapter 16. Adaptive basis function models


            and Svensén 2003)) than about the structure and parameters of a decision tree (see e.g., (Wu
            et al. 2007)).

 16.3    Generalized additive models
         A simple way to create a nonlinear model with multiple inputs is to use a generalized additive
         model (Hastie and Tibshirani 1990), which is a model of the form
            f (x) = α + f1 (x1 ) + · · · + fD (xD )                                                       (16.16)
         Here each fj can be modeled by some scatterplot smoother, and f (x) can be mapped to p(y|x)
         using a link function, as in a GLM (hence the term generalized additive model).
            If we use regression splines (or some other ﬁxed basis function expansion approach) for the
         fj , then each fj (xj ) can be written as β Tj φj (xj ), so the whole model can be written as
         f (x) = β T φ(x), where φ(x) = [1, φ1 (x1 ), . . . , φD (xD )]. However, it is more common to use
         smoothing splines (Section 15.4.6) for the fj . In this case, the objective (in the regression setting)
         becomes
                                        ⎛                        ⎞2
                                      
                                      N           D                   D
             J(α, f1 , . . . , fD ) =   ⎝yi − α −       fj (xij )⎠ +       λj fj (tj )2 dtj             (16.17)
                                  i=1               j=1                j=1

         where λj is the strength of the regularizer for fj .

16.3.1   Backﬁtting
         We now discuss how to ﬁt the model using MLE. The constant α is not uniquely identiﬁable,
         since we can always add or subtract constants to any of the fj functions. The convention is to
                   N                                                                   N
         assume i=1 fj (xij ) = 0 for all j. In this case, the MLE for α is just α̂ = N1 i=1 yi .
            To ﬁt the rest of the model, we can center the responses (by subtracting α̂), and then
         iteratively update each fj in turn, using as a target vector the residuals obtained by omitting
         term fj :
                                   
             fˆj := smoother({yi −     fˆk (xik )}N
                                                  i=1 )                                           (16.18)
                                     k=j

         We should then ensure the output is zero mean using

                         1 ˆ
                            N
            fˆj := fˆj −       fj (xij )                                                                  (16.19)
                         N i=1

         This is called the backﬁtting algorithm (Hastie and Tibshirani 1990). If X has full column rank,
         then the above objective is convex (since each smoothing spline is a linear operator, as shown
         in Section 15.4.2), so this procedure is guaranteed to converge to the global optimum.
            In the GLM case, we need to modify the method somewhat. The basic idea is to replace the
         weighted least squares step of IRLS (see Section 8.3.4) with a weighted backﬁtting algorithm. In
         the logistic regression case, each response has weight si = μi (1 − μi ) associated with it, where
                           D
         μi = sigm(α̂ + j=1 fˆj (xij )).)
         16.3. Generalized additive models                                                                       553


16.3.2   Computational efficiency
         Each call to the smoother takes O(N ) time, so the total cost is O(N DT ), where T is the
         number of iterations. If we have high-dimensional inputs, ﬁtting a GAM is expensive. One
         approach is to combine it with a sparsity penalty, see e.g., the SpAM (sparse additive model)
         approach of (Ravikumar et al. 2009). Alternatively, we can use a greedy approach, such as
         boosting (see Section 16.4.6)

16.3.3   Multivariate adaptive regression splines (MARS)
         We can extend GAMs by allowing for interaction effects. In general, we can create an ANOVA
         decomposition:
                           
                           D                                          
            f (x) = β0 +         fj (xj ) +         fjk (xj , xk ) +           fjkl (xj , xk , xl ) + · · ·   (16.20)
                           j=1                j,k                      j,k,l

         Of course, we cannot allow for too many higher-order interactions, because there will be too
         many parameters to ﬁt.
            It is common to use greedy search to decide which variables to add. The multivariate
         adaptive regression splines or MARS algorithm is one example of this (Hastie et al. 2009,
         Sec9.4). It ﬁts models of the form in Equation 16.20, where it uses a tensor product basis of
         regression splines to represent the multidimensional regression functions. For example, for 2d
         input, we might use
                                   
             f (x1 , x2 ) = β0 +       β1m (x1 − t1m )+
                                       m
                                                                
                              +        β2m (t2m − x2 )+ +               β12m (x1 − t1m )+ (t2m − x2 )+        (16.21)
                                   m                              m

           To create such a function, we start with a set of candidate basis functions of the form
            C = {(xj − t)+ , (t − xj )+ : t ∈ {x1j , . . . , xN j }, j = 1, . . . , D}                        (16.22)
         These are 1d linear splines where the knots are at all the observed values for that variable. We
         consider splines sloping up in both directions; this is called a reﬂecting pair. See Figure 16.7(a).
           Let M represent the current set of basis functions. We initialize by using M = {1}. We
         consider creating a new basis function pair by multplying an hm ∈ M with one of the reﬂecting
         pairs in C. For example, we might initially get
            f (x) = 25 − 4(x1 − 5)+ + 20(5 − x1 )+                                                            (16.23)
         obtained by multiplying h0 (x) = 1 with a reﬂecting pair involving x1 with knot t = 5. This
         pair is added to M. See Figure 16.7(b). At the next step, we might create a model such as
            f (x)   =    = 2 − 2(x1 − 5)+ + 3(5 − x1 )+
                         −(x2 − 10)+ × (5 − x1 ) + −1.2(10 − x2 )+ × (5 − x1 )+                               (16.24)
         obtained by multiplying (5−x1 )+ from M by the new reﬂecting pair (x2 −10)+ and (10−x2 )+ .
         This new function is shown in Figure 16.7(c).
       554                                                             Chapter 16. Adaptive basis function models

              15
                                              120

                                              100                                  20


                                               80                                   0
              10
                                               60
                                                                                  −20
                                               40
                                                                                  −40
               5                               20

                                                                                  −60
                                                0                                  20
                                                                                        15                                    20
                                              −20                                                                        15
                                                                                             10
                                                                                                                    10
               0                                                                                  5             5
                                              −40
                   0   5    10   15   20            0   5    10   15      20                          0   0



                           (a)                              (b)                                           (c)

       Figure 16.7 (a) Linear spline function with a knot at 5. Solid blue: (x − 5)+ . Dotted red: (5 − x)+ . (b) A
       MARS model in 1d given by Equation 16.23. (c) A simple MARS model in 2d given by Equation 16.24. Figure
       generated by marsDemo.



          We proceed in this way until the model becomes very large. (We may impose an upper
       bound on the order of interactions.) Then we prune backwards, at each step eliminating the
       basis function that causes the smallest increase in the residual error, until the CV error stops
       improving.
          The whole procedure is closely related to CART. To see this, suppose we replace the piecewise
       linear basis functions by step functions I(xj > t) and I(xj < t). Multiplying by a pair of
       reﬂected step functions is equivalent to splitting a node. Now suppose we impose the constraint
       that once a variable is involved in a multiplication by a candidate term, that variable gets
       replaced by the interaction, so the original variable is no longer available. This ensures that a
       variable can not be split more than once, thus guaranteeing that the resulting model can be
       represented as a tree. In this case, the MARS growing strategy is the same as the CART growing
       strategy.

16.4   Boosting
       Boosting (Schapire and Freund 2012) is a greedy algorithm for ﬁtting adaptive basis-function
       models of the form in Equation 16.3, where the φm are generated by an algorithm called a weak
       learner or a base learner. The algorithm works by applying the weak learner sequentially to
       weighted versions of the data, where more weight is given to examples that were misclassiﬁed
       by earlier rounds.
          This weak learner can be any classiﬁcation or regression algorithm, but it is common to use a
       CART model. In 1998, the late Leo Breiman called boosting, where the weak learner is a shallow
       decision tree, the “best off-the-shelf classiﬁer in the world” (Hastie et al. 2009, p340). This
       is supported by an extensive empirical comparison of 10 different classiﬁers in (Caruana and
       Niculescu-Mizil 2006), who showed that boosted decision trees were the best both in terms of
       misclassiﬁcation error and in terms of producing well-calibrated probabilities, as judged by ROC
       curves. (The second best method was random forests, invented by Breiman; see Section 16.2.5.)
       By contrast, single decision trees performed very poorly.
          Boosting was originally derived in the computational learning theory literature (Schapire 1990;
       Freund and Schapire 1996), where the focus is binary classiﬁcation. In these papers, it was
       proved that one could boost the performance (on the training set) of any weak learner arbitrarily
         16.4. Boosting                                                                                          555



                                           0.16
                                                                                      train
                                           0.14                                       test


                                           0.12


                                            0.1


                                           0.08


                                           0.06


                                           0.04


                                           0.02


                                             0
                                                  0   20   40   60   80   100   120       140




         Figure 16.8 Performance of adaboost using a decision stump as a weak learner on the data in Figure 16.10.
         Training (solid blue) and test (dotted red) error vs number of iterations. Figure generated by boostingDemo,
         written by Richard Stapenhurst.


         high, provided the weak learner could always perform slightly better than chance. For example,
         in Figure 16.8, we plot the training and test error for boosted decision stumps on a 2d dataset
         shown in Figure 16.10. We see that the training set error rapidly goes to near zero. What is more
         surprising is that the test set error continues to decline even after the training set error has
         reached zero (although the test set error will eventually go up). Thus boosting is very resistant
         to overﬁtting. (Boosted decision stumps form the basis of a very successful face detector (Viola
         and Jones 2001), which was used to generate the results in Figure 1.6, and which is used in many
         digital cameras.)
            In view of its stunning empirical success, statisticians started to become interested in this
         method. Breiman (Breiman 1998) showed that boosting can be interpreted as a form of gradient
         descent in function space. This view was then extended in (Friedman et al. 2000), who showed
         how boosting could be extended to handle a variety of loss functions, including for regression,
         robust regression, Poisson regression, etc. In this section, we shall present this statistical inter-
         pretation of boosting, drawing on the reviews in (Buhlmann and Hothorn 2007) and (Hastie et al.
         2009, ch10), which should be consulted for further details.

16.4.1   Forward stagewise additive modeling
         The goal of boosting is to solve the following optimization problem:
                  
                  N
            min         L(yi , f (xi ))                                                                       (16.25)
              f
                  i=1

         and L(y, ŷ) is some loss function, and f is assumed to be an ABM model as in Equation 16.3.
         Common choices for the loss function are listed in Table 16.1.
           If we use squared error loss, the optimal estimate is given by
                                                    
            f ∗ (x) = argmin = Ey|x (Y − f (x))2 = E [Y |x]                                   (16.26)
                           f (x)
556                                                                     Chapter 16. Adaptive basis function models


Name                 Loss                           Derivative                    f∗              Algorithm
                     1                2
Squared error        2 (yi − f (xi ))               yi − f (xi )                  E [y|xi ]       L2Boosting
Absolute error       |yi − f (xi )|                 sgn(yi − f (xi ))             median(y|xi )   Gradient boosting
                                                                                  1
Exponential loss     exp(−ỹi f (xi ))              −ỹi exp(−ỹi f (xi ))                πi
                                                                                  2 log 1−πi      AdaBoost
                                                                                  1
Logloss              log(1 + e−ỹi fi )             y i − πi                              πi
                                                                                  2 log 1−πi      LogitBoost

Table 16.1 Some commonly used loss functions, their gradients, their population minimizers f ∗ , and
some algorithms to minimize the loss. For binary classiﬁcation problems, we assume ỹi ∈ {−1, +1},
yi ∈ {0, 1} and πi = sigm(2f (xi )). For regression problems, we assume yi ∈ R. Adapted from (Hastie
et al. 2009, p360) and (Buhlmann and Hothorn 2007, p483).


                                                                                    0−1
                                    7
                                                                                    logloss
                                                                                    exp
                                    6


                                    5


                                    4
                             loss




                                    3


                                    2


                                    1


                                    0

                                        −2   −1.5    −1   −0.5    0     0.5   1   1.5    2
                                                                 y− f



Figure 16.9 Illustration of various loss functions for binary classiﬁcation. The horizontal axis is the
margin yη, the vertical axis is the loss. The log loss uses log base 2. Figure generated by hingeLossPlot.



as we showed in Section 5.7.1.3. Of course, this cannot be computed in practice since it requires
knowing the true conditional distribution p(y|x). Hence this is sometimes called the population
minimizer, where the expectation is interpreted in a frequentist sense. Below we will see that
boosting will try to approximate this conditional expectation.
   For binary classiﬁcation, the obvious loss is 0-1 loss, but this is not differentiable. Instead
it is common to use logloss, which is a convex upper bound on 0-1 loss, as we showed in
Section 6.5.5. In this case, one can show that the optimal estimate is given by
               1      p(ỹ = 1|x)
   f ∗ (x) =     log                                                                                         (16.27)
               2     p(ỹ = −1|x)
where ỹ ∈ {−1, +1}. One can generalize this framework to the multiclass case, but we will not
discuss that here.
   An alternative convex upper bound is exponential loss, deﬁned by

   L(ỹ, f ) = exp(−ỹf )                                                                                    (16.28)

See Figure 16.9 for a plot. This will have some computational advantages over the logloss,
to be discussed below. It turns out that the optimal estimate for this loss is also f ∗ (x) =
         16.4. Boosting                                                                                     557

         1        p(ỹ=1|x)
         2 log   p(ỹ=−1|x) .   To see this, we can just set the derivative of the expected loss (for each x) to
         zero:
               ∂                                   ∂
                    E e−ỹf (x) |x          =             [p(ỹ = 1|x)e−f (x) + p(ỹ = −1|x)ef (x) ]     (16.29)
             ∂f (x)                                ∂f (x)
                                            =      −p(ỹ = 1|x)e−f (x) + p(ỹ = −1|x)ef (x)              (16.30)
                                                         p(ỹ = 1|x)
                                            =      0⇒                  = e2f (x)                          (16.31)
                                                        p(ỹ = 1 − |x)
         So in both cases, we can see that boosting should try to approximate (half) the log-odds ratio.
           Since ﬁnding the optimal f is hard, we shall tackle it sequentially. We initialise by deﬁning
                                    
                                    N
             f0 (x) = arg min             L(yi , f (xi ; γ))                                             (16.32)
                                γ
                                    i=1

         For example, if we use squared error, we can set f0 (x) = y, and if we use log-loss or exponential
                                                               N
         loss , we can set f0 (x) = 12 log 1−π̂
                                            π̂
                                                , where π̂ = N1 i=1 I(yi = 1). We could also use a more
         powerful model for our baseline, such as a GLM.
            Then at iteration m, we compute
                                          
                                          N
             (βm , γ m ) = argmin               L(yi , fm−1 (xi ) + βφ(xi ; γ))                          (16.33)
                                 β,γ      i=1

         and then we set
             fm (x) = fm−1 (x) + βm φ(x; γ m )                                                           (16.34)
         The key point is that we do not go back and adjust earlier parameters. This is why the method
         is called forward stagewise additive modeling.
            We continue this for a ﬁxed number of iterations M . In fact M is the main tuning parameter
         of the method. Often we pick it by monitoring the performance on a separate validation set, and
         then stopping once performance starts to decrease; this is called early stopping. Alternatively,
         we can use model selection criteria such as AIC or BIC (see e.g., (Buhlmann and Hothorn 2007)
         for details).
            In practice, better (test set) performance can be obtained by performing “partial updates” of
         the form
             fm (x) = fm−1 (x) + νβm φ(x; γ m )                                                          (16.35)
         Here 0 < ν ≤ 1 is a step-size parameter. In practice it is common to use a small value such as
         ν = 0.1. This is called shrinkage.
            Below we discuss how to solve the suproblem in Equation 16.33. This will depend on the
         form of loss function. However, it is independent of the form of weak learner.

16.4.2   L2boosting
         Suppose we used squared error loss. Then at step m the loss has the form
             L(yi , fm−1 (xi ) + βφ(xi ; γ)) = (rim − φ(xi ; γ))2                                        (16.36)
         558                                                              Chapter 16. Adaptive basis function models




                       (a)                                          (b)                                (c)

         Figure 16.10 Example of adaboost using a decision stump as a weak learner. The degree of blackness
         represents the conﬁdence in the red class. The degree of whiteness represents the conﬁdence in the blue
         class. The size of the datapoints represents their weight. Decision boundary is in yellow. (a) After 1
         round. (b) After 3 rounds. (c) After 120 rounds. Figure generated by boostingDemo, written by Richard
         Stapenhurst.


         where rim  yi − fm−1 (xi ) is the current residual, and we have set β = 1 without loss of
         generality. Hence we can ﬁnd the new basis function by using the weak learner to predict rm .
         This is called L2boosting, or least squares boosting (Buhlmann and Yu 2003). In Section 16.4.6,
         we will see that this method, with a suitable choice of weak learner, can be made to give the
         same results as LARS, which can be used to perform variable selection (see Section 13.4.2).

16.4.3   AdaBoost
         Consider a binary classiﬁcation problem with exponential loss. At step m we have to minimize
                             
                             N                                               
                                                                             N
            Lm (φ)     =           exp[−ỹi (fm−1 (xi ) + βφ(xi ))] =              wi,m exp(−β ỹi φ(xi ))    (16.37)
                             i=1                                             i=1

         where wi,m  exp(−ỹi fm−1 (xi )) is a weight applied to datacase i, and ỹi ∈ {−1, +1}. We
         can rewrite this objective as follows:
                                               
            Lm = e−β                 wi,m + eβ       wi,m                                      (16.38)
                             ỹi =φ(xi )             ỹi =φ(xi )

                                       
                                       N                                     
                                                                             N
                   =   (eβ − e−β )           wi,m I(ỹi = φ(xi )) + e−β           wi,m                       (16.39)
                                       i=1                                   i=1

         Consequently the optimal function to add is
            φm = argmin wi,m I(ỹi = φ(xi ))                                                                 (16.40)
                       φ

         This can be found by applying the weak learner to a weighted version of the dataset, with
         weights wi,m . Subsituting φm into Lm and solving for β we ﬁnd
                   1     1 − errm
            βm =     log                                                                                      (16.41)
                   2       errm
         16.4. Boosting                                                                                                   559


         where
                       N
                          i=1             φm (xi ))
                                wi I(ỹi =
             errm =             N                                                                                     (16.42)
                                   i=1 wi,m

         The overall update becomes
             fm (x) = fm−1 (x) + βm φm (x)                                                                             (16.43)

         With this, the weights at the next iteration become
             wi,m+1      =      wi,m e−βm ỹi φm (xi )                                                                 (16.44)
                                         βm (2I(ỹi =φm (xi ))−1)
                         =      wi,m e                                                                                 (16.45)
                                         2βm I(ỹi =φm (xi )) −βm
                         =      wi,m e                         e                                                       (16.46)

         where we exploited the fact that −ỹi φm (xi ) = −1 if ỹi = φm (xi ) and −ỹi φm (xi ) = +1
         otherwise. Since e−βm will cancel out in the normalization step, we can drop it. The result is
         the algorithm shown in Algorithm 7, known Adaboost.M1.4
            An example of this algorithm in action, using decision stumps as the weak learner, is given in
         Figure 16.10. We see that after many iterations, we can “carve out” a complex decision boundary.
         What is rather surprising is that AdaBoost is very slow to overﬁt, as is apparent in Figure 16.8.
         See Section 16.4.8 for a discussion of this point.

          Algorithm 16.2: Adaboost.M1, for binary classiﬁcation with exponential loss
         1   wi = 1/N ;
         2   for m = 1 : M do
         3       Fit a classiﬁer φm (x) to the training set using weights w;
                                         N
                                            i=1   wi,m I(ỹi =φm (xi ))
         4       Compute errm =                   N                       ;
                                                    i=1 wi,m )
         5       Compute αm = log[(1 − errm )/errm ];
         6       Set wi ← wi exp[αm I(ỹi = φm (xi ))];
                                                 
                                   M
         7   Return f (x) = sgn    m=1 αm φm (x) ;




16.4.4   LogitBoost
         The trouble with exponential loss is that it puts a lot of weight on misclassiﬁed examples, as
         is apparent from the exponential blowup on the left hand side of Figure 16.9. This makes the
         method very sensitive to outliers (mislabeled examples). In addition, e−ỹf is not the logarithm
         of any pmf for binary variables ỹ ∈ {−1, +1}; consequently we cannot recover probability
         estimates from f (x).

         4. In (Friedman et al. 2000), this is called discrete AdaBoost, since it assumes that the base classiﬁer φm returns a
         binary class label. If φm returns a probability instead, a modiﬁed algorithm, known as real AdaBoost, can be used. See
         (Friedman et al. 2000) for details.
         560                                                        Chapter 16. Adaptive basis function models


            A natural alternative is to use logloss instead. This only punishes mistakes linearly, as is clear
         from Figure 16.9. Furthermore, it means that we will be able to extract probabilities from the
         ﬁnal learned function, using

                                   ef (x)             1
             p(y = 1|x) =                      =                                                          (16.47)
                              e−f (x) + ef (x)   1 + e−2f (x)
             The goal is to minimze the expected log-loss, given by

                              
                              N
             Lm (φ)       =         log [1 + exp (−2ỹi (fm−1 (x) + φ(xi )))]                             (16.48)
                              i=1

         By performing a Newton upate on this objective (similar to IRLS), one can derive the algorithm
         shown in Algorithm 8. This is known as logitBoost (Friedman et al. 2000). It can be generalized
         to the multi-class setting, as explained in (Friedman et al. 2000).

          Algorithm 16.3: LogitBoost, for binary classiﬁcation with log-loss
         1   wi = 1/N , πi = 1/2;
         2   for m = 1 : M do
                                                      yi∗ −πi
         3       Compute the working response zi = πi (1−π   i)
                                                                ;
         4       Compute the weights wi = πi (1 − πi );
                                N
         5       φm = argminφ i=1 wi (zi − φ(xi ))2 ;
         6       Update f (x) ← f (x) + 12 φm (x);
         7       Compute πi = 1/(1 + exp(−2f (xi )));
                                              
                                   M
         8   Return f (x) = sgn    m=1 φm (x) ;




16.4.5   Boosting as functional gradient descent
         Rather than deriving new versions of boosting for every different loss function, it is possible to
         derive a generic version, known as gradient boosting (Friedman 2001; Mason et al. 2000). To
         explain this, imagine minimizing
             f̂ = argmin L(f )                                                                            (16.49)
                      f

         where f = (f (x1 ), . . . , f (xN )) are the “parameters”. We will solve this stagewise, using gradient
         descent. At step m, let gm be the gradient of L(f ) evaluated at f = fm−1 :
                                       
                     ∂L(yi , f (xi ))
            gim =                                                                                         (16.50)
                         ∂f (xi )         f =fm−1

         Gradients of some common loss functions are given in Table 16.1. We then make the update

             fm = fm−1 − ρm gm                                                                            (16.51)
         16.4. Boosting                                                                                                  561


         where ρm is the step length, chosen by

             ρm = argmin L(fm−1 − ρgm )                                                                               (16.52)
                       ρ

         This is called functional gradient descent.
            In its current form, this is not much use, since it only optimizes f at a ﬁxed set of N points,
         so we do not learn a function that can generalize. However, we can modify the algorithm by
         ﬁtting a weak learner to approximate the negative gradient signal. That is, we use this update

                            
                            N
             γ m = argmin         (−gim − φ(xi ; γ))2                                                                 (16.53)
                       γ
                            i=1

         The overall algorithm is summarized in Algorithm 6. (We have omitted the line search step,
         which is not strictly necessary, as argued in (Buhlmann and Hothorn 2007).)

          Algorithm 16.4: Gradient boosting
                                       N
         1 Initialize f0 (x) = argminγ  i=1 L(yi , φ(xi ; γ));
         2 for m = 1 : M do
                                                                                     
                                                                    ∂L(yi ,f (xi ))
         3      Compute the gradient residual using rim = −           ∂f (xi )                                 ;
                                                                                          f (xi )=fm−1 (xi )
                                                                              N
         4      Use the weak learner to compute γ m which minimizes               i=1 (rim       − φ(xi ; γ m ))2 ;
         5      Update fm (x) = fm−1 (x) + νφ(x; γ m );
         6   Return f (x) = fM (x)


            If we apply this algorithm using squared loss, we recover L2Boosting. If we apply this
         algorithm to log-loss, we get an algorithm known as BinomialBoost (Buhlmann and Hothorn
         2007). The advantage of this over LogitBoost is that it does not need to be able to do weighted
         ﬁtting: it just applies any black-box regression model to the gradient vector. Also, it is relatively
         easy to extend to the multi-class case (see (Hastie et al. 2009, p387)). We can also apply this
         algorithm to other loss functions, such as the Huber loss (Section 7.4), which is more robust to
         outliers than squared error loss.

16.4.6   Sparse boosting
         Suppose we use as our weak learner the following algorithm: search over all possible variables
         j = 1 : D, and pick the one j(m) that best predicts the residual vector:

                                        
                                        N
               j(m)    =   argmin              (rim − β̂jm xij )2                                                     (16.54)
                              j
                                        i=1
                           N
                              i=1   xij rim
                β̂jm   =     N                                                                                       (16.55)
                                  i=1   x2ij
             φm (x)    =   β̂j(m),m xj(m)                                                                             (16.56)
         562                                                          Chapter 16. Adaptive basis function models


         This method, which is known as sparse boosting (Buhlmann and Yu 2006), is identical to the
         matching pursuit algorithm discussed in Section 13.2.3.1.
           It is clear that this will result in a sparse estimate, at least if M is small. To see this, let us
         rewrite the update as follows:
            β m := β m−1 + ν(0, . . . , 0, β̂j(m),m , 0, . . . , 0)                                       (16.57)
         where the non-zero entry occurs in location j(m). This is known as forward stagewise linear
         regression (Hastie et al. 2009, p608), which becomes equivalent to the LAR algorithm discussed
         in Section 13.4.2 as ν → 0. Increasing the number of steps m in boosting is analogous to
         decreasing the regularization penalty λ. If we modify boosting to allow some variable deletion
         steps (Zhao and Yu 2007), we can make it equivalent to the LARS algorithm, which computes
         the full regularization path for the lasso problem. The same algorithm can be used for sparse
         logistic regression, by simply modifying the residual to be the appropriate negative gradient.
            Now consider a weak learner that is similar to the above, except it uses a smoothing spline
         instead of linear regression when mapping from xj to the residual. The result is a sparse
         generalized additive model (see Section 16.3). It can obviously be extended to pick pairs of
         variables at a time. The resulting method often works much better than MARS (Buhlmann and
         Yu 2006).

16.4.7   Multivariate adaptive regression trees (MART)
         It is quite common to use CART models as weak learners. It is usually advisable to use a shallow
         tree, so that the variance is low. Even though the bias will be high (since a shallow tree is likely
         to be far from the “truth”), this will compensated for in subsequent rounds of boosting.
             The height of the tree is an additional tuning parameter (in addition to M , the number of
         rounds of boosting, and ν, the shrinkage factor). Suppose we restrict to trees with J leaves.
         If J = 2, we get a stump, which can only split on a single variable. If J = 3, we allow for
         two-variable interactions, etc. In general, it is recommended (e.g., in (Hastie et al. 2009, p363)
         and (Caruana and Niculescu-Mizil 2006)) to use J ≈ 6.
             If we combine the gradient boosting algorithm with (shallow) regression trees, we get a model
         known as MART, which stands for “multivariate adaptive regression trees”. This actually includes
         a slight reﬁnement to the basic gradient boosting algorithm: after ﬁtting a regression tree to the
         residual (negative gradient), we re-estimate the parameters at the leaves of the tree to minimize
         the loss:
                               
              γjm = argmin           L(yi , fm−1 (xi ) + γ)                                           (16.58)
                        γ
                              xi ∈Rjm

         where Rjm is the region for leaf j in the m’th tree, and γjm is the corresponding parameter (the
         mean response of y for regression problems, or the most probable class label for classiﬁcation
         problems).

16.4.8   Why does boosting work so well?
         We have seen that boosting works very well, especially for classiﬁers. There are two main
         reasons for this. First, it can be seen as a form of 1 regularization, which is known to help
         16.5. Feedforward neural networks (multilayer perceptrons)                                     563


         prevent overﬁtting by eliminating “irrelevant” features. To see this, imagine pre-computing all
         possible weak-learners, and deﬁning a feature vector of the form φ(x) = [φ1 (x), . . . , φK (x)].
         We could use 1 regularization to select a subset of these. Alternatively we can use boosting,
         where at each step, the weak learner creates a new φk on the ﬂy. It is possible to combine
         boosting and 1 regularization, to get an algorithm known as L1-Adaboost (Duchi and Singer
         2009). Essentially this method greedily adds the best features (weak learners) using boosting,
         and then prunes off irrelevant ones using 1 regularization.
            Another explanation has to do with the concept of margin, which we introduced in Sec-
         tion 14.5.2.2. (Schapire et al. 1998; Ratsch et al. 2001) proved that AdaBoost maximizes the
         margin on the training data. (Rosset et al. 2004) generalized this to other loss functions, such as
         log-loss.

16.4.9   A Bayesian view
         So far, our presentation of boosting has been very frequentist, since it has focussed on greedily
         minimizing loss functions. A likelihood interpretation of the algorithm was given in (Neal and
         MacKay 1998; Meek et al. 2002). The idea is to consider a mixture of experts model of the form
                          
                          M
            p(y|x, θ) =         πm p(y|x, γ m )                                                      (16.59)
                          m=1
         where each expert p(y|x, γ m ) is like a weak learner. We usually ﬁt all M experts at once
         using EM, but we can imagine a sequential scheme, whereby we only update the parameters
         for one expert at a time. In the E step, the posterior responsibilities will reﬂect how well the
         existing experts explain a given data point; if this is a poor ﬁt, these data points will have
         more inﬂuence on the next expert that is ﬁtted. (This view naturally suggest a way to use a
         boosting-like algorithm for unsupervised learning: we simply sequentially ﬁt mixture models,
         instead of mixtures of experts.)
            Notice that this is a rather “broken” MLE procedure, since it never goes back to update the
         parameters of an old expert. Similarly, if boosting ever wants to change the weight assigned to a
         weak learner, the only way to do this is to add the weak learner again with a new weight. This
         can result in unnecessarily large models. By contrast, the BART model (Chipman et al. 2006,
         2010) uses a Bayesian version of backﬁtting to ﬁt a small sum of weak learners (typically trees).

 16.5    Feedforward neural networks (multilayer perceptrons)
         A feedforward neural network, aka multi-layer perceptron (MLP), is a series of logistic
         regression models stacked on top of each other, with the ﬁnal layer being either another logistic
         regression or a linear regression model, depending on whether we are solving a classiﬁcation or
         regression problem. For example, if we have two layers, and we are solving a regression problem,
         the model has the form
            p(y|x, θ) = N (y|wT z(x), σ 2 )                                                          (16.60)
                z(x) = g(Vx) = [g(v1T x), . . . , g(vH
                                                     T
                                                       x)]                                            (16.61)
         where g is a non-linear activation or transfer function (commonly the logistic function),
         z(x) = φ(x, V) is called the hidden layer (a deterministic function of the input), H is the
         564                                                     Chapter 16. Adaptive basis function models


                                                         znH



                                        xnD               ...             ynC

                                                         znj
                                         xni       vij          wjk       ynk


                                        xn1               ...             yn1



                                                         zn1


                                Figure 16.11 A neural network with one hidden layer.



         number of hidden units, V is the weight matrix from the inputs to the hidden nodes, and
         w is the weight vector from the hidden nodes to the output. It is important that g be non-
         linear, otherwise the whole model collapses into a large linear regression model of the form
         y = wT (Vx). One can show that an MLP is a universal approximator, meaning it can model
         any suitably smooth function, given enough hidden units, to any desired level of accuracy
         (Hornik 1991).
            To handle binary classiﬁcation, we pass the output through a sigmoid, as in a GLM:
            p(y|x, θ) = Ber(y|sigm(wT z(x)))                                                          (16.62)
         We can easily extend the MLP to predict multiple outputs. For example, in the regression case,
         we have
            p(y|x, θ) = N (y|W φ(x, V), σ 2 I)                                                        (16.63)
         See Figure 16.11 for an illustration. If we add mutual inhibition arcs between the output units,
         ensuring that only one of them turns on, we can enforce a sum-to-one constraint, which can be
         used for multi-class classiﬁcation. The resulting model has the form
            p(y|x, θ)   =    Cat(y|S(Wz(x))                                                           (16.64)

16.5.1   Convolutional neural networks
         The purpose of the hidden units is to learn non-linear combinations of the original inputs; this
         is called feature extraction or feature construction. These hidden features are then passed as
         input to the ﬁnal GLM. This approach is particularly useful for problems where the original input
         features are not very individually informative. For example, each pixel in an image is not very
         informative; it is the combination of pixels that tells us what objects are present. Conversely, for
         a task such as document classiﬁcation using a bag of words representation, each feature (word
         count) is informative on its own, so extracting “higher order” features is less important. Not
         suprisingly, then, much of the work in neural networks has been motivated by visual pattern
16.5. Feedforward neural networks (multilayer perceptrons)                                      565




Figure 16.12 The convolutional neural network from (Simard et al. 2003). Source: http://www.codep
roject.com/KB/library/NeuralNetRecognition.aspx . Used with kind permission of Mike O’Neill.



recognition (e.g., (LeCun et al. 1989)), although they have also been applied to other types of
data, including text (e.g., (Collobert and Weston 2008)).
   A form of MLP which is particularly well suited to 1d signals like speech or text, or 2d signals
like images, is the convolutional neural network. This is an MLP in which the hidden units
have local receptive ﬁelds (as in the primary visual cortex), and in which the weights are tied
or shared across the image, in order to reduce the number of parameters. Intuitively, the effect
of such spatial parameter tying is that any useful features that are “discovered” in some portion
of the image can be re-used everywhere else without having to be independently learned. The
resulting network then exhibits translation invariance, meaning it can classify patterns no
matter where they occur inside the input image.
   Figure 16.12 gives an example of a convolutional network, designed by Simard and colleagues
(Simard et al. 2003), with 5 layers (4 layers of adjustable parameters) designed to classify 29 × 29
gray-scale images of handwritten digits from the MNIST dataset (see Section 1.2.1.3). In layer 1,
we have 6 feature maps each of which has size 13 × 13. Each hidden node in one of these
feature maps is computed by convolving the image with a 5 × 5 weight matrix (sometimes called
a kernel), adding a bias, and then passing the result through some form of nonlinearity. There
are therefore 13 × 13 × 6 = 1014 neurons in Layer 1, and (5 × 5 + 1) × 6 = 156 weights. (The
"+1" is for the bias.) If we did not share these parameters, there would be 1014 × 26 = 26, 364
weights at the ﬁrst layer. In layer 2, we have 50 feature maps, each of which is obtained by
convolving each feature map in layer 1 with a 5 × 5 weight matrix, adding them up, adding a
bias, and passing through a nonlinearity. There are therefore 5 × 5 × 50 = 1250 neurons in
Layer 2, (5 × 5 + 1) × 6 × 50 = 7800 adjustable weights (one kernel for each pair of feature
566                                                             Chapter 16. Adaptive basis function models


maps in layers 1 and 2), and 1250 × 26 = 32, 500 connections. Layer 3 is fully connected to
layer 2, and has 100 neurons and 100 × (1250 + 1) = 125, 100 weights. Finally, layer 4 is also
fully connected, and has 10 neurons, and 10 × (100 + 1) = 1010 weights. Adding the above
numbers, there are a total of 3,215 neurons, 134,066 adjustable weights, and 184,974 connections.
   This model is usually trained using stochastic gradient descent (see Section 16.5.4 for details).
A single pass over the data set is called an epoch. When Mike O’Neill did these experiments in
2006, he found that a single epoch took about 40 minutes (recall that there are 60,000 training
examples in MNIST). Since it took about 30 epochs for the error rate to converge, the total
training time was about 20 hours.5 Using this technique, he obtained a misclassiﬁcation rate on
the 10,000 test cases of about 1.40%.
   To further reduce the error rate, a standard trick is to expand the training set by including
distorted versions of the original data, to encourage the network to be invariant to small changes
that don’t affect the identity of the digit. These can be created by applying a random ﬂow ﬁeld
to shift pixels around. See Figure 16.13 for some examples. (If we use online training, such as
stochastic gradient descent, we can create these distortions on the ﬂy, rather than having to
store them.) Using this technique, Mike O’Neill obtained a misclassiﬁcation rate on the 10,000
test cases of about 0.74%, which is close to the current state of the art.6
   Yann Le Cun and colleagues (LeCun et al. 1998) obtained similar performance using a slightly
more complicated architecture shown in Figure 16.14. This model is known as LeNet5, and
historically it came before the model in Figure 16.12. There are two main differences. First,
LeNet5 has a subsampling layer between each convolutional layer, which either averages or
computes the max over each small window in the previous layer, in order to reduce the size, and
to obtain a small amount of shift invariance. The convolution and sub-sampling combination
was inspired by Hubel and Wiesel’s model of simple and complex cells in the visual cortex
(Hubel and Wiesel 1962), and it continues to be popular in neurally-inspired models of visual
object recognition (Riesenhuber and Poggio 1999). A similar idea ﬁrst appeared in Fukushima’s
neocognitron (Fukushima 1975), though no globally supervised training algorithm was available
at that time.
   The second difference between LeNet5 and the Simard architecture is that the ﬁnal layer is
actually an RBF network rather than a more standard sigmoidal or softmax layer. This model
gets a test error rate of about 0.95% when trained with no distortions, and 0.8% when trained
with distortions. Figure 16.15 shows all 82 errors made by the system. Some are genuinely
ambiguous, but several are errors that a person would never make. A web-based demo of the
LeNet5 can be found at http://yann.lecun.com/exdb/lenet/index.html.
   Of course, classifying isolated digits is of limited applicability: in the real world, people usually
write strings of digits or other letters. This requires both segmentation and classiﬁcation. Le Cun
and colleagues devised a way to combine convolutional neural networks with a model similar
to a conditional random ﬁeld (described in Section 19.6) to solve this problem. The system
was eventually deployed by the US postal service. (See (LeCun et al. 1998) for a more detailed
account of the system, which remains one of the best performing systems for this task.)

5. Implementation details: Mike used C++ code and a variety of speedup tricks. He was using standard 2006 era
hardware (an Intel Pentium 4 hyperthreaded processor running at 2.8GHz). See http://www.codeproject.com/KB/
library/NeuralNetRecognition.aspx for details.
6. A list of various methods, along with their misclassiﬁcation rates on the MNIST test set, is available from http:
//yann.lecun.com/exdb/mnist/. Error rates within 0.1–0.2% of each other are not statistically signiﬁcantly different.
16.5. Feedforward neural networks (multilayer perceptrons)                                                            567




                                   (a)                                              (b)




                                   (c)                                              (d)




                                   (e)                                              (f)

Figure 16.13 Several synthetic warpings of a handwritten digit. Based on Figure 5.14 of (Bishop 2006a).
Figure generated by elasticDistortionsDemo, written by Kevin Swersky.


                                          C3: f. maps 16@10x10
                    C1: feature maps                        S4: f. maps 16@5x5
     INPUT          6@28x28
     32x32                               S2: f. maps                        C5: layer F6: layer   OUTPUT
                                         6@14x14                            120                   10
                                                                                      84




                                                                                  Full connection       Gaussian connections
             Convolutions              Subsampling      Convolutions    Subsampling        Full connection



Figure 16.14 LeNet5, a convolutional neural net for classifying handwritten digits. Source: Figure 2 from
(LeCun et al. 1998) . Used with kind permission of Yann LeCun.
         568                                                       Chapter 16. Adaptive basis function models



                             4−>6   3−>5   8−>2   2−>1   5−>3   4−>8   2−>8   3−>5   6−>5   7−>3


                             9−>4   8−>0   7−>8   5−>3   8−>7   0−>6   3−>7   2−>7   8−>3   9−>4


                             8−>2   5−>3   4−>8   3−>9   6−>0   9−>8   4−>9   6−>1   9−>4   9−>1


                             9−>4   2−>0   6−>1   3−>5   3−>2   9−>5   6−>0   6−>0   6−>0   6−>8


                             4−>6   7−>3   9−>4   4−>6   2−>7   9−>7   4−>3   9−>4   9−>4   9−>4


                             8−>7   4−>2   8−>4   3−>5   8−>4   6−>5   8−>5   3−>8   3−>8   9−>8


                             1−>5   9−>8   6−>3   0−>2   6−>5   9−>5   0−>7   1−>6   4−>9   2−>1


                             2−>8   8−>5   4−>9   7−>2   7−>2   6−>5   9−>7   6−>1   5−>6   5−>0


                             4−>9   2−>8


         Figure 16.15 These are the 82 errors made by LeNet5 on the 10,000 test cases of MNIST. Below each
         image is a label of the form correct-label → estimated-label. Source: Figure 8 of (LeCun et al. 1998).
         Used with kind permission of Yann LeCun. (Compare to Figure 28.4(b) which shows the results of a deep
         generative model.)



16.5.2   Other kinds of neural networks
         Other network topologies are possible besides the ones discussed above. For example, we can
         have skip arcs that go directly from the input to the output, skipping the hidden layer; we
         can have sparse connections between the layers; etc. However, the MLP always requires that
         the weights form a directed acyclic graph. If we allow feedback connections, the model is
         known as a recurrent neural network; this deﬁnes a nonlinear dynamical system, but does
         not have a simple probabilistic interpretation. Such RNN models are currently the best approach
         for language modeling (i.e., performing word prediction in natural language) (Tomas et al. 2011),
         signiﬁcantly outperforming the standard n-gram-based methods discussed in Section 17.2.2.
            If we allow symmetric connections between the hidden units, the model is known as a Hop-
         ﬁeld network or associative memory; its probabilistic counterpart is known as a Boltzmann
         machine (see Section 27.7) and can be used for unsupervised learning.

16.5.3   A brief history of the ﬁeld
         Neural networks have been the subject of great interest for many decades, due to the desire to
         understand the brain, and to build learning machines. It is not possible to review the entire
         history here. Instead, we just give a few “edited highlights”.
            The ﬁeld is generally viewed as starting with McCulloch and Pitts (McCullich and Pitts 1943),
         who devised a simple mathematical model of the neuron in 1943, in which they approximated the
         16.5. Feedforward neural networks (multilayer perceptrons)                                                         569

                                                                                            
         output as a weighted sum of inputs passed through a threshold function, y = I( i wi xi > θ),
         for some threshold θ. This is similar to a sigmoidal activation function. Frank Rosenblatt
         invented the perceptron learning algorithm in 1957, which is a way to estimate the parameters of
         a McCulloch-Pitts neuron (see Section 8.5.4 for details). A very similar model called the adaline
         (for adaptive linear element) was invented in 1960 by Widrow and Hoff.
            In 1969, Minsky and Papert (Minsky and Papert 1969) published a famous book called “Percep-
         trons” in which they showed that such linear models, with no hidden layers, were very limited
         in their power, since they cannot classify data that is not linearly separable. This considerably
         reduced interest in the ﬁeld.
            In 1986, Rumelhart, Hinton and Williams (Rumelhart et al. 1986) discovered the backpropa-
         gation algorithm (see Section 16.5.4), which allows one to ﬁt models with hidden layers. (The
         backpropagation algorithm was originally discovered in (Bryson and Ho 1969), and independently
         in (Werbos 1974); however, it was (Rumelhart et al. 1986) that brought the algorithm to people’s
         attention.) This spawned a decade of intense interest in these models.
            In 1987, Sejnowski and Rosenberg (Sejnowski and Rosenberg 1987) created the famous NETtalk
         system, that learned a mapping from English words to phonetic symbols which could be fed
         into a speech synthesizer. An audio demo of the system as it learns over time can be found at
         http://www.cnl.salk.edu/ParallelNetsPronounce/nettalk.mp3. The systems starts by
         “babbling” and then gradually learns to pronounce English words. NETtalk learned a distributed
         representation (via its hidden layer) of various sounds, and its success spawned a big debate in
         psychology between connectionism, based on neural networks, and computationalism, based
         on syntactic rules. This debate lives on to some extent in the machine learning community,
         where there are still arguments about whether learning is best performed using low-level, “neural-
         like” representations, or using more structured models.
            In 1989, Yann Le Cun and others (LeCun et al. 1989) created the famous LeNet system described
         in Section 16.5.1.
            In 1992, the support vector machine (see Section 14.5) was invented (Boser et al. 1992). SVMs
         provide similar prediction accuracy to neural networks while being considerably easier to train
         (since they use a convex objective function). This spawned a decade of interest in kernel methods
         in general.7 Note, however, that SVMs do not use adaptive basis functions, so they require a fair
         amount of human expertise to design the right kernel function.
            In 2002, Geoff Hinton invented the contrastive divergence training procedure (Hinton 2002),
         which provided a way, for the ﬁrst time, to learn deep networks, by training one layer at a time
         in an unsupervised fashion (see Section 27.7.2.4 for details). This in turn has spawned renewed
         interest in neural networks over the last few years (see Chapter 28).

16.5.4   The backpropagation algorithm
         Unlike a GLM, the NLL of an MLP is a non-convex function of its parameters. Nevertheless,
         we can ﬁnd a locally optimal ML or MAP estimate using standard gradient-based optimization
         methods. Since MLPs have lots of parameters, they are often trained on very large data sets.

         7. It became part of the folklore during the 1990s that to get published in the top machine learning conference known as
         NIPS, which stands for “neural information processing systems”, it was important to ensure your paper did not contain
         the word “neural network”!
570                                                                 Chapter 16. Adaptive basis function models


                                  1
                                                                                   tanh
                                 0.8                                               sigmoid

                                 0.6

                                 0.4

                                 0.2

                                  0

                                −0.2

                                −0.4

                                −0.6

                                −0.8

                                 −1
                                 −10            −5            0             5                10



Figure 16.16 Two possible activation functions. tanh maps R to [−1, +1] and is the preferred nonlin-
earity for the hidden nodes. sigm maps R to [0, 1] and is the preferred nonlinearity for binary nodes at
the output layer. Figure generated by tanhPlot.



Consequently it is common to use ﬁrst-order online methods, such as stochastic gradient descent
(Section 8.5.2), whereas GLMs are usually ﬁt with IRLS, which is a second-order offline method.
   We now discuss how to compute the gradient vector of the NLL by applying the chain rule of
calculus. The resulting algorithm is known as backpropagation, for reasons that will become
apparent.
   For notational simplicity, we shall assume a model with just one hidden layer. It is helpful
to distinguish the pre- and post-synaptic values of a neuron, that is, before and after we apply
the nonlinearity. Let xn be the n’th input, an = Vxn be the pre-synaptic hidden layer, and
zn = g(an ) be the post-synaptic hidden layer, where g is some transfer function. We typically
use g(a) = sigm(a), but we may also use g(a) = tanh(a): see Figure 16.16 for a comparison.
(When the input to sigm or tanh is a vector, we assume it is applied component-wise.)
   We now convert this hidden layer to the output layer as follows. Let bn = Wzn be the
pre-synaptic output layer, and ŷn = h(bn ) be the post-synaptic output layer, where h is
another nonlinearity, corresponding to the canonical link for the GLM. (We reserve the notation
yn , without the hat, for the output corresponding to the n’th training case.) For a regression
model, we use h(b) = b; for binary classifcation, we use h(b) = [sigm(b1 ), . . . , sigm(bc )]; for
multi-class classiﬁcation, we use h(b) = S(b).
   We can write the overall model as follows:
         V        g      W         h
    xn → an → zn → bn → ŷn                                                                                         (16.65)

The parameters of the model are θ = (V, W), the ﬁrst and second layer weight matrices. Offset
or bias terms can be accomodated by clamping an element of xn and zn to 1.8

8. In the regression setting, we can easily estimate the variance of the output noise using the empirical variance of the
                        1
residual errors, σ̂ 2 = N ||ŷ(θ̂) − y||2 , after training is complete. There will be one value of σ 2 for each output node,
if we are performing multi-target regression, as we usually assume.
16.5. Feedforward neural networks (multilayer perceptrons)                                  571


     In the regression case, with K outputs, the NLL is given by the squared error:
                 
      J(θ) = −          (ŷnk (θ) − ynk )2                                              (16.66)
                    n     k

In the classiﬁcation case, with K classes, the NLL is given by the cross entropy
               
    J(θ) = −           ynk log ŷnk (θ)                                                  (16.67)
                    n     k

Our task is to compute ∇θ J. We will derive this for each n separately; the overall gradient is
obtained by summing over n, although often we just use a mini-batch (see Section 8.5.2).
  Let us start by considering the output layer weights. We have
                   ∂Jn            ∂Jn
     ∇wk Jn =           ∇wk bnk =      zn                                               (16.68)
                   ∂bnk           ∂bnk
since bnk = wkT zn . Assuming h is the canonical link function for the output GLM, then
Equation 9.91 tells us that
      ∂Jn
            δnk
              w
                 = (ŷnk − ynk )                                                        (16.69)
      ∂bnk
which is the error signal. So the overall gradient is
     ∇wk Jn = δnk
               w
                  zn                                                                     (16.70)
which is the pre-synaptic input to the output layer, namely zn , times the error signal, namely
 w
δnk .
  For the input layer weights, we have
                   ∂Jn
     ∇vj Jn =           ∇vj anj  δnj
                                   v
                                      xn                                                 (16.71)
                   ∂anj
where we exploited the fact that anj = vjT xn . All that remains is to compute the ﬁrst level
              v
error signal δnj . We have

                   ∂Jn     ∂Jn ∂bnk
                                K            K
      v                                    w ∂bnk
     δnj   =            =             =   δnk                                            (16.72)
                   ∂anj     ∂bnk ∂anj         ∂anj
                              k=1             k=1

Now
             
     bnk =         wkj g(anj )                                                           (16.73)
               j
so
      ∂bnk
           = wkj g  (anj )                                                              (16.74)
      ∂anj
where g  (a) = da
                 d
                   g(a). For tanh units, g  (a) = da
                                                    d
                                                      tanh(a) = 1 − tanh2 (a) = sech2 (a), and
for sigmoid units, g  (a) = da
                              d
                                σ(a) = σ(a)(1 − σ(a)). Hence
                   
                   K
      v
     δnj   =              w
                         δnk wkj g  (anj )                                              (16.75)
                   k=1
         572                                                      Chapter 16. Adaptive basis function models


         Thus the layer 1 errors can be computed by passing the layer 2 errors back through the W matrix;
         hence the term “backpropagation”. The key property is that we can compute the gradients locally:
         each node only needs to know about its immediate neighbors. This is supposed to make the
         algorithm “neurally plausible”, although this interpretation is somewhat controversial.
            Putting it all together, we can compute all the gradients as follows: we ﬁrst perform a
         forwards pass to compute an , zn , bn and ŷn . We then compute the error for the output layer,
         δ (2)
           n = ŷn − yn , which we pass backwards through W using Equation 16.75 to compute the
         error for the hidden layer, δ (1)
                                         n . We then compute the overall gradient as follows:
                         
             ∇θ J(θ) =                    n zn ]
                             [δ vn xn , δ w                                                       (16.76)
                          n


16.5.5   Identiﬁability
         It is easy to see that the parameters of a neural network are not identiﬁable. For example, we
         can change the sign of the weights going into one of the hidden units, so long as we change
         the sign of all the weights going out of it; these effects cancel, since tanh is an odd function, so
         tanh(−a) = − tanh(a). There will be H such sign ﬂip symmetries, leading to 2H equivalent
         settings of the parameters. Similarly, we can change the identity of the hidden units without
         affecting the likelihood. There are H! such permutations. The total number of equivalent
         parameter settings (with the same likelihood) is therefore H!2H .
            In addition, there may be local minima due to the non-convexity of the NLL. This can
         be a more serious problem, although with enough data, these local optima are often quite
         “shallow”, and simple stochastic optimization methods can avoid them. In addition, it is common
         to perform multiple restarts, and to pick the best solution, or to average over the resulting
         predictions. (It does not make sense to average the parameters themselves, since they are not
         identiﬁable.)

16.5.6   Regularization
         As usual, the MLE can overﬁt, especially if the number of nodes is large. A simple way to prevent
         this is called early stopping, which means stopping the training procedure when the error on
         the validation set ﬁrst starts to increase. This method works because we usually initialize from
         small random weights, so the model is initially simple (since the tanh and sigm functions are
         nearly linear near the origin). As training progresses, the weights become larger, and the model
         becomes nonlinear. Eventually it will overﬁt.
            Another way to prevent overﬁtting, that is more in keeping with the approaches used elsewhere
         in this book, is to impose a prior on the parameters, and then use MAP estimation. It is standard
         to use a N (0, α−1 I) prior (equivalent to 2 regularization), where α is the precision (strength)
         of the prior. In the neural networks literature, this is called weight decay, since it encourages
         small weights, and hence simpler models. The penalized NLL objective becomes

                       
                       N
                                                    α  2  2
            J(θ) = −          log p(yn |xn , θ) +    [   v + wjk ]                                    (16.77)
                       n=1
                                                    2 ij ij
                                                             jk
           16.5. Feedforward neural networks (multilayer perceptrons)                                                      573


           (Note that we don’t penalize the bias terms.) The gradient of the modiﬁed objective becomes
                                            
              ∇θ J(θ) = [      δ vn xn + αv,     δwn zn + αw]                                      (16.78)
                               n                     n

           as in Section 8.3.6.
              If the regularization is sufficiently strong, it does not matter if we have too many hidden units
           (apart from wasted computation). Hence it is advisable to set H to be as large as you can afford
           (say 10–100), and then to choose an appropriate regularizer. We can set the α parameter by
           cross validation or empirical Bayes (see Section 16.5.7.5).
              As with ridge regression, it is good practice to standardize the inputs to zero mean and unit
           variance, so that the spherical Gaussian prior makes sense.

16.5.6.1   Consistent Gaussian priors *
           One can show (MacKay 1992) that using the same regularization parameter for both the ﬁrst and
           second layer weights results in the lack of a certain desirable invariance property. In particular,
           suppose we linearly scale and shift the inputs and/or outputs to a neural network regression
           model. Then we would like the model to learn to predict the same function, by suitably scaling
           its internal weights and bias terms. However, the amount of scaling needed by the ﬁrst and
           second layer weights to compensate for a change in the inputs and/or outputs is not the same.
           Therefore we need to use a different regularization strength for the ﬁrst and second layer.
           Fortunately, this is easy to do — we just use the following prior:
                                     1           1           1         1
              p(θ) = N (W|0,           I)N (V|0,    I)N (b|0, I)N (c|0, I)                                              (16.79)
                                    αw           αv          αb        αc
           where b and c are the bias terms.9
              To get a feeling for the effect of these hyper-parameters, we can sample MLP parameters
           from this prior and plot the resulting random functions. Figure 16.17 shows some examples.
           Decreasing αv allows the ﬁrst layer weights to get bigger, making the sigmoid-like shape of
           the functions steeper. Decreasing αb allows the ﬁrst layer biases to get bigger, which allows
           the center of the sigmoid to shift left and right more. Decreasing αw allows the second layer
           weights to get bigger, making the functions more “wiggly” (greater sensitivity to change in the
           input, and hence larger dynamic range). And decreasing αc allows the second layer biases to
           get bigger, allowing the mean level of the function to move up and down more. (In Chapter 15,
           we will see an easier way to deﬁne priors over functions.)

16.5.6.2   Weight pruning
           Since there are many weights in a neural network, it is often helpful to encourage sparsity.
           Various ad-hoc methods for doing this, with names such as “optimal brain damage”, were
           devised in the 1990s; see e.g., (Bishop 1995) for details.

           9. Since we are regularizing the output bias terms, it is helpful, in the case of regression, to normalize the target
           responses in the training set to zero mean, to be consistent with the fact that the prior on the output bias has zero
           mean.
574                                                                                           Chapter 16. Adaptive basis function models




                    aw1=0.010, ab1=0.100, aw2=1.000, ab2=1.000                                        aw1=0.001, ab1=0.100, aw2=1.000, ab2=1.000
             10                                                                         10

              8                                                                          8

              6                                                                          6

              4                                                                          4

              2                                                                          2

              0                                                                          0

             −2                                                                         −2

             −4                                                                         −4

             −6                                                                         −6

             −8                                                                         −8

            −10                                                                        −10
              −1      −0.5              0              0.5              1                −1               −0.5            0              0.5       1


                                     (a)                                                                               (b)
                    aw1=0.010, ab1=0.010, aw2=1.000, ab2=1.000                                        aw1=0.010, ab1=0.100, aw2=0.100, ab2=1.000
             10                                                                         10

              8                                                                          8

              6                                                                          6

              4                                                                          4

              2                                                                          2

              0                                                                          0

             −2                                                                         −2

             −4                                                                         −4

             −6                                                                         −6

             −8                                                                         −8

            −10                                                                        −10
              −1      −0.5              0              0.5              1                −1               −0.5            0              0.5       1


                                     (c)                                                                               (d)
                                                             aw1=0.010, ab1=0.100, aw2=1.000, ab2=0.100
                                               10

                                                8

                                                6

                                                4

                                                2

                                                0

                                               −2

                                               −4

                                               −6

                                               −8

                                              −10
                                                −1               −0.5            0              0.5              1


                                                                              (e)

Figure 16.17 The effects of changing the hyper-parameters on an MLP. (a) Default parameter values
αv = 0.01, αb = 0.1, αw = 1, αc = 1. (b) Decreasing αv by factor of 10. (c) Decreasing αb by
factor of 10. (d) Decreasing αw by factor of 10. (e) Decreasing αc by factor of 10. Figure generated by
mlpPriorsDemo.
           16.5. Feedforward neural networks (multilayer perceptrons)                                                   575


                                    Neural Network                             4
                                                                                                  Data
                                            y
                                                                                                  Deep Neural Net
                   h40                                                         3
                                h42                                     h44
                         h41                          h43

                                                                               2
                   h30   h31                               h33         h34
                                    h32
                                                                               1

                                                                   h24
                  h20                 h22                  h23                 0
                         h21



                   h10
                                                                              −1
                         h11        h12
                                                                 h14
                                                     h13
                                                                              −2


                                                                              −3
                               x0                    x1

                                                                              −4
                                                                               −5     0                             5

                                          (a)                                        (b)

           Figure 16.18 (a) A deep but sparse neural network. The connections are pruned using 1 regularization.
           At each level, nodes numbered 0 are clamped to 1, so their outgoing weights correspond to the offset/bias
           terms. (b) Predictions made by the model on the training set. Figure generated by sparseNnetDemo,
           written by Mark Schmidt.



             However, we can also use the more principled sparsity-promoting techniques we discussed in
           Chapter 13. One approach is to use an 1 regularizer. See Figure 16.18 for an example. Another
           approach is to use ARD; this is discussed in more detail in Section 16.5.7.5.

16.5.6.3   Soft weight sharing*
           Another way to regularize the parameters is to encourage similar weights to share statistical
           strength. But how do we know which parameters to group together? We can learn this, by using
           a mixture model. That is, we model p(θ) as a mixture of (diagonal) Gaussians. Parameters that
           are assigned to the same cluster will share the same mean and variance and thus will have
           similar values (assuming the variance for that cluster is low). This is called soft weight sharing
           (Nowlan and Hinton 1992). In practice, this technique is not widely used. See e.g., (Bishop 2006a,
           p271) if you want to know the details.

16.5.6.4   Semi-supervised embedding *
           An interesting way to regularize “deep” feedforward neural networks is to encourage the hidden
           layers to assign similar objects to similar representations. This is useful because it is often easy
           to obtain “side” information consisting of sets of pairs of similar and dissimilar objects. For
           example, in a video classiﬁcation task, neighboring frames can be deemed similar, but frames
           that are distant in time can be deemed dis-similar (Mobahi et al. 2009). Note that this can be
           done without collecting any labels.
              Let Sij = 1 if examples i and j are similar, and Sij = 0 otherwise. Let f (xi ) be some
           embedding of item xi , e.g., f (xi ) = z(xi , θ), where z is the hidden layer of a neural network.
           Now deﬁne a loss function L(f (xi ), f (xj ), Sij ) that depends on the embedding of two objects,
         576                                                     Chapter 16. Adaptive basis function models


         and the observed similarity measure. For example, we might want to force similar objects to
         have similar embeddings, and to force the embeddings of dissimilar objects to be a minimal
         distance apart:
                                 
                                   ||fi − fj ||2              if Sij = 1
             L(fi , fj , Sij ) =                                                              (16.80)
                                   max(0, m − ||fi − fj ||2 ) if Sij = 0
         where m is some minimal margin. We can now deﬁne an augmented loss function for training
         the neural network:
                                     
                NLL(f (xi ), yi ) + λ   L(f (xi ), f (xj ), Sij )                          (16.81)
            i∈L                       i,j∈U

         where L is the labeled training set, U is the unlabeled training set, and λ ≥ 0 is some tradeoff
         parameter. This is called semi-supervised embedding (Weston et al. 2008).
            Such an objective can be easily optimized by stochastic gradient descent. At each itera-
         tion, pick a random labeled training example, (xn , yn ), and take a gradient step to optimize
         NLL(f (xi ), yi ). Then pick a random pair of similar unlabeled examples xi , xj (these can
         sometimes be generated on the ﬂy rather than stored in advance), and make a gradient step to
         optimize λL(f (xi ), f (xj ), 1), Finally, pick a random unlabeled example xk , which with high
         probability is dissimilar to xi , and make a gradient step to optimize λL(f (xi ), f (xk ), 0).
            Note that this technique is effective because it can leverage massive amounts of data. In
         a related approach, (Collobert and Weston 2008) trained a neural network to distinguish valid
         English sentences from invalid ones. This was done by taking all 631 million words from English
         Wikipedia (en.wikipedia.org), and then creating windows of length 11 containing neighboring
         words. This constitutes the positive examples. To create negative examples, the middle word of
         each window was replaced by a random English word (this is likely to be an “invalid” sentence
         — either grammatically and/or semantically — with high probability). This neural network was
         then trained over the course of 1 week, and its latent representation was then used as the input
         to a supervised semantic role labeling task, for which very little labeled training data is available.
         (See also (Ando and Zhang 2005) for related work.)

16.5.7   Bayesian inference *
         Although MAP estimation is a succesful way to reduce overﬁtting, there are still some good
         reasons to want to adopt a fully Bayesian approach to “ﬁtting” neural networks:

         • Integrating out the parameters instead of optimizing them is a much stronger form of regu-
           larization than MAP estimation.

         • We can use Bayesian model selection to determine things like the hyper-parameter settings
           and the number of hidden units. This is likely to be much faster than cross validation,
           especially if we have many hyper-parameters (e.g., as in ARD).

         • Modelling uncertainty in the parameters will induce uncertainty in our predictive distribu-
           tions, which is important for certain problems such as active learning and risk-averse decision
           making.
           16.5. Feedforward neural networks (multilayer perceptrons)                                   577


           • We can use online inference methods, such as the extended Kalman ﬁlter, to do online
             learning (Haykin 2001).

              One can adopt a variety of approximate Bayesian inference techniques in this context. In this
           section, we discuss the Laplace approximation, ﬁrst suggested in (MacKay 1992, 1995b). One can
           also use hybrid Monte Carlo (Neal 1996), or variational Bayes (Hinton and Camp 1993; Barber
           and Bishop 1998).

16.5.7.1   Parameter posterior for regression
           We start by considering regression, following the presentation of (Bishop 2006a, sec 5.7), which
           summarizes the work of (MacKay 1992, 1995b). We will use a prior of the form p(w) =
           N (w|0, (1/α)I), where w represents all the weights combined. We will denote the precision
           of the noise by β = 1/σ 2 .
              The posterior can be approximated as follows:
              p(w|D, α, β)    ∝ exp(−E(w))                                                          (16.82)
                     E(w)      βED (w) + αEW (w)                                                   (16.83)
                                   1
                                      N
                   ED (w)               (yn − f (xn , w))2                                         (16.84)
                                   2 n=1
                                   1 T
                   EW (w)           w w                                                            (16.85)
                                   2
           where ED is the data error, EW is the prior error, and E is the overall error (negative log
           prior plus log likelihood). Now let us make a second-order Taylor series approximation of E(w)
           around its minimum (the MAP estimate)
                               1
              E(w) ≈ E(wM P ) + (w − wM P )T A(w − wM P )                                           (16.86)
                               2
           where A is the Hessian of E:

              A = ∇∇E(wM P ) = βH + αI                                                               (16.87)

           where H = ∇∇ED (wM P ) is the Hessian of the data error. This can be computed exactly
           in O(d2 ) time, where d is the number of parameters, using a variant of backpropagation (see
           (Bishop 2006a, sec 5.4) for details). Alternatively, if we use a quasi-Newton method to ﬁnd
           the mode, we can use its internally computed (low-rank) approximation to H. (Note that
           diagonal approximations of H are usually very inaccurate.) In either case, using this quadratic
           approximation, the posterior becomes Gaussian:

              p(w|α, β, D)    ≈   N (w|wM P , A−1 )                                                 (16.88)
           578                                                      Chapter 16. Adaptive basis function models


16.5.7.2   Parameter posterior for classiﬁcation
           The classiﬁcation case is the same as the regression case, except β = 1 and ED is a cross-
           entropy error of the form
                             
                             N
              ED (w)              [yn ln f (xn , w) + (1 − yn ) ln f (xn , w)]                         (16.89)
                             n=1
                                                                                                        (16.90)

16.5.7.3   Predictive posterior for regression
           The posterior predictive density is given by

              p(y|x, D, α, β) =       N (y|f (x, w), 1/β)N (w|wM P , A−1 )dw                            (16.91)

           This is not analytically tractable because of the nonlinearity of f (x, w). Let us therefore
           construct a ﬁrst-order Taylor series approximation around the mode:
              f (x, w) ≈ f (x, wM P ) + gT (w − wM P )                                                  (16.92)
           where
              g = ∇w f (x, w)|w=wM P                                                                    (16.93)
           We now have a linear-Gaussian model with a Gaussian prior on the weights. From Equation 4.126
           we have
              p(y|x, D, α, β) ≈ N (y|f (x, wM P ), σ 2 (x))                                             (16.94)
           where the predictive variance depends on the input x as follows:
              σ 2 (x) = β −1 + gT A−1 g                                                                 (16.95)
           The error bars will be larger in regions of input space where we have little training data. See
           Figure 16.19 for an example.

16.5.7.4   Predictive posterior for classiﬁcation
           In this section, we discuss how to approximate p(y|x, D) in the case of binary classiﬁcation.
           The situation is similar to the case of logistic regression, discussed in Section 8.4.4, except in
           addition the posterior predictive mean is a non-linear function of w. Speciﬁcally, we have
           μ = E [y|x, w] = sigm(a(x, w)), where a(x, w) is the pre-synaptic output of the ﬁnal layer.
           Let us make a linear approximation to this:
              a(x, w) ≈ aM P (x) + gT (w − wM P )                                                       (16.96)
           where aM P (x) = a(x, wM P ) and g = ∇x a(x, wM P ) can be found by a modiﬁed version of
           backpropagation. Clearly
              p(a|x, D) ≈ N (a(x, wM P ), g(x)T A−1 g(x))                                               (16.97)
           16.5. Feedforward neural networks (multilayer perceptrons)                                                                                        579

                                  1.5                                                                 1.5
                                                                                    data
                                                                                    function
                                                                                    network
                                   1                                                                   1
                                                                                    error bars


                                  0.5
                                                                                                      0.5




                        Target
                                   0
                                                                                                       0


                                 −0.5
                                                                                                     −0.5


                                  −1
                                                                                                                Data
                                                                                                      −1
                                                                                                                Function
                                                                                                                Prediction
                                 −1.5                                                                           Samples
                                        0        0.2      0.4           0.6   0.8                1
                                                                Input                                −1.5
                                                                                                            0      0.2       0.4         0.6   0.8   1


                                                            (a)                                                                    (b)

           Figure 16.19 The posterior predictive density for an MLP with 3 hidden nodes, trained on 16 data points.
           The dashed green line is the true function. (a) Result of using a Laplace approximation, after performing
           empirical Bayes to optimize the hyperparameters. The solid red line is the posterior mean prediction,
           and the dotted blue lines are 1 standard deviation above and below the mean. Figure generated by
           mlpRegEvidenceDemo. (b) Result of using hybrid Monte Carlo, using the same trained hyperparameters
           as in (a). The solid red line is the posterior mean prediction, and the dotted blue lines are samples from
           the posterior predictive. Figure generated by mlpRegHmcDemo, written by Ian Nabney.



           Hence the posterior predictive for the output is

              p(y = 1|x, D) =                          sigm(a)p(a|x, D)da ≈ sigm(κ(σa2 )bT wM P )                                                        (16.98)

           where κ is deﬁned by Equation 8.70, which we repeat here for convenience:
                                                                        1
              κ(σ 2 )                       (1 + πσ 2 /8)− 2                                                                                            (16.99)

              Of course, a simpler (and potentially more accurate) alternative to this is to draw a few samples
           from the Gaussian posterior and to approximate the posterior predictive using Monte Carlo.
              In either case, the effect of taking uncertainty of the parameters into account, as in Sec-
           tion 8.4.4, is to “moderate” the conﬁdence of the output; the decision boundary itself is unaf-
           fected, however.

16.5.7.5   ARD for neural networks
           Once we have made the Laplace approximation to the posterior, we can optimize the marginal
           likelihood wrt the hyper-parameters α using the same ﬁxed-point equations as in Section 13.7.4.2.
           Typically we use one hyper-parameter for the weight vector leaving each node, to achieve an
           effect similar to group lasso (Section 13.5.1). That is, the prior has the form

                           
                           D
                                                           1     
                                                                 H
                                                                                1
              p(θ) =                        N (v:,i |0,       I)   N (w:,j |0,      I)                                                                   (16.100)
                          i=1
                                                          αv,i j=1             αw,j

           If we ﬁnd αv,i = ∞, then input feature i is irrelevant, and its weight vector v:,i is pruned out.
           Similarly, if we ﬁnd αw,j = ∞, then hidden feature j is irrelevant. This is known as automatic
         580                                                    Chapter 16. Adaptive basis function models


         relevancy determination or ARD, which was discussed in detail in Section 13.7. Applying this to
         neural networks gives us an efficient means of variable selection in non-linear models.
            The software package NETLAB contains a simple example of ARD applied to a neural network,
         called demard. This demo creates some data according to a nonlinear regression function
         f (x1 , x2 , x3 ) = sin(2πx1 ) + , where x2 is a noisy copy of x1 . We see that x2 and x3 are
         irrelevant for predicting the target. However, x2 is correlated with x1 , which is relevant. Using
         ARD, the ﬁnal hyper-parameters are as follows:
            α = [0.2, 21.4, 249001.8]                                                                  (16.101)
         This clearly indicates that feature 3 is irrelevant, feature 2 is only weakly relevant, and feature 1
         is very relevant.

 16.6    Ensemble learning
         Ensemble learning refers to learning a weighted combination of base models of the form
                        
           f (y|x, π) =      wm fm (y|x)                                                      (16.102)
                          m∈M

         where the wm are tunable parameters. Ensemble learning is sometimes called a committee
         method, since each base model fm gets a weighted “vote”.
            Clearly ensemble learning is closely related to learning adaptive-basis function models. In
         fact, one can argue that a neural net is an ensemble method, where fm represents the m’th
         hidden unit, and wm are the output layer weights. Also, we can think of boosting as kind of
         ensemble learning, where the weights on the base models are determined sequentially. Below
         we describe some other forms of ensemble learning.

16.6.1   Stacking
         An obvious way to estimate the weights in Equation 16.102 is to use
                          
                          N              
                                         M
            ŵ = argmin         L(yi ,         wm fm (x))                                             (16.103)
                     w
                          i=1            m=1

         However, this will result in overﬁtting, with wm being large for the most complex model. A
         simple solution to this is to use cross-validation. In particular, we can use the LOOCV estimate
                          
                          N              
                                         M
                                                    −i
            ŵ = argmin         L(yi ,         wm fˆm  (x))                                           (16.104)
                     w
                          i=1            m=1

                  −i
         where fˆm   (x) is the predictor obtained by training on data excluding (xi , yi ). This is known
         as stacking, which stands for “stacked generalization” (Wolpert 1992). This technique is more
         robust to the case where the “true” model is not in the model class than standard BMA (Clarke
         2003). This approach was used by the Netﬂix team known as “The Ensemble”, which tied the
         submission of the winning team (BellKor’s Pragmatic Chaos) in terms of accuracy (Sill et al.
         2009). Stacking has also been used for problems such as image segmentation and labeling.
         16.6. Ensemble learning                                                                       581


                                 Class    C1      C2   C3   C4   C5    C6   ···   C15
                                   0       1       1   0    0    0     0    ···    1
                                   1      0       0     1    1    1     1   ···    0
                                                                  ..
                                                                   .
                                   9       0      1    1    1    0     0    ···    0

         Table 16.2 Part of a 15-bit error-correcting output code for a 10-class problem. Each row deﬁnes a
         two-class problem. Based on Table 16.1 of (Hastie et al. 2009).


16.6.2   Error-correcting output codes
         An interesting form of ensemble learning is known as error-correcting output codes or ECOC
         (Dietterich and Bakiri 1995), which can be used in the context of multi-class classiﬁcation. The
         idea is that we are trying to decode a symbol (namely the class label) which has C possible
         states. We could use a bit vector of length B = log2 C to encode the class label, and train
         B separate binary classiﬁers to predict each bit. However, by using more bits, and by designing
         the codewords to have maximal Hamming distance from each other, we get a method that is
         more resistant to individual bit-ﬂipping errors (misclassiﬁcation). For example, in Table 16.2, we
         use B = 15 bits to encode a C = 10 class problem. The minimum Hamming distance between
         any pair of rows is 7. The decoding rule is
                          
                          B
            ĉ(x) = min         |Ccb − p̂b (x)|                                                    (16.105)
                      c
                          b=1

         where Ccb is the b’th bit of the codeword for class c. (James and Hastie 1998) showed that a
         random code worked just as well as the optimal code: both methods work by averaging the
         results of multiple classiﬁers, thereby reducing variance.

16.6.3   Ensemble learning is not equivalent to Bayes model averaging
         In Section 5.3, we discussed Bayesian model selection. An alternative to picking the best model,
         and then using this to make predictions, is to make a weighted average of the predictions made
         by each model, i.e., we compute
                           
            p(y|x, D) =         p(y|x, m, D)p(m|D)                                                 (16.106)
                          m∈M

         This is called Bayes model averaging (BMA), and can sometimes give better performance than
         using any single model (Hoeting et al. 1999). Of course, averaging over all models is typically
         computationally infeasible (analytical integration is obviously not possible in a discrete space,
         although one can sometimes use dynamic programming to perform the computation exactly,
         e.g., (Meila and Jaakkola 2006)). A simple approximation is to sample a few models from the
         posterior. An even simpler approximation (and the one most widely used in practice) is to just
         use the MAP model.
            It is important to note that BMA is not equivalent to ensemble learning (Minka 2000c). This
         latter technique corresponds to enlarging the model space, by deﬁning a single new model
         582                                                       Chapter 16. Adaptive basis function models


               model       1st     2nd     3rd     4th      5th      6th     7th     8th      9th     10th
               bst-dt     0.580   0.228   0.160   0.023    0.009    0.000   0.000   0.000    0.000    0.000
               rf         0.390   0.525   0.084   0.001    0.000    0.000   0.000   0.000    0.000    0.000
               bag-dt     0.030   0.232   0.571   0.150    0.017    0.000   0.000   0.000    0.000    0.000
               svm        0.000   0.008   0.148   0.574    0.240    0.029   0.001   0.000    0.000    0.000
               ann        0.000   0.007   0.035   0.230    0.606    0.122   0.000   0.000    0.000    0.000
               knn        0.000   0.000   0.000   0.009    0.114    0.592   0.245   0.038    0.002    0.000
               bst-stmp   0.000   0.000   0.002   0.013    0.014    0.257   0.710   0.004    0.000    0.000
               dt         0.000   0.000   0.000   0.000    0.000    0.000   0.004   0.616    0.291    0.089
               logreg     0.000   0.000   0.000   0.000    0.000    0.000   0.040   0.312    0.423    0.225
               nb         0.000   0.000   0.000   0.000    0.000    0.000   0.000   0.030    0.284    0.686

         Table 16.3 Fraction of time each method achieved a speciﬁed rank, when sorting by mean performance
         across 11 datasets and 8 metrics. Based on Table 4 of (Caruana and Niculescu-Mizil 2006). Used with kind
         permission of Alexandru Niculescu-Mizil.



         which is a convex combination of base models, as follows:
                         
            p(y|x, π) =       πm p(y|x, m)                                                               (16.107)
                           m∈M

         In principle, we can now perform
                                          Bayesian inference to compute p(π|D); we then make pre-
         dictions using p(y|x, D) = p(y|x, π)p(π|D)dπ. However, it is much more common to use
         point estimation methods for π, as we saw above.

 16.7    Experimental comparison
         We have described many different methods for classiﬁcation and regression. Which one should
         you use? That depends on which inductive bias you think is most appropriate for your domain.
         Usually this is hard to assess, so it is common to just try several different methods, and
         see how they perform empirically. Below we summarize two such comparisons that were
         carefully conducted (although the data sets that were used are relatively small). See the website
         mlcomp.org for a distributed way to perform large scale comparisons of this kind. Of course,
         we must always remember the no free lunch theorem (Section 1.4.9), which tells us that there is
         no universally best learning method.

16.7.1   Low-dimensional features
         In 2006, Rich Caruana and Alex Niculescu-Mizil (Caruana and Niculescu-Mizil 2006) conducted
         a very extensive experimental comparison of 10 different binary classiﬁcation methods, on 11
         different data sets. The 11 data sets all had 5000 training cases, and had test sets containing
         ∼ 10, 000 examples on average. The number of features ranged from 9 to 200, so this is much
         lower dimensional than the NIPS 2003 feature selection challenge. 5-fold cross validation was
         used to assess average test error. (This is separate from any internal CV a method may need to
         use for model selection.)
         16.7. Experimental comparison                                                                     583


            The methods they compared are as follows (listed in roughly decreasing order of performance,
         as assessed by Table 16.3):

         •   BST-DT: boosted decision trees
         •   RF: random forest
         •   BAG-DT: bagged decision trees
         •   SVM: support vector machine
         •   ANN: artiﬁcial neural network
         •   KNN: K-nearest neighbors
         •   BST-STMP: boosted stumps
         •   DT: decision tree
         •   LOGREG: logistic regression
         •   NB: naive Bayes

            They used 8 different performance measures, which can be divided into three groups. Thresh-
         old metrics just require a point estimate as output. These include accuracy, F-score (Sec-
         tion 5.7.2.3), etc. Ordering/ ranking metrics measure how well positive cases are ordered before
         the negative cases. These include area under the ROC curve (Section 5.7.2.1), average precision,
         and the precision/recall break even point. Finally, the probability metrics included cross-entropy
         (log-loss) and squared error, (y − p̂)2 . Methods such as SVMs that do not produce calibrated
         probabilities were post-processed using Platt’s logistic regression trick (Section 14.5.2.3), or using
         isotonic regression. Performance measures were standardized to a 0:1 scale so they could be
         compared.
            Obviously the results vary by dataset and by metric. Therefore just averaging the performance
         does not necessarily give reliable conclusions. However, one can perform a bootstrap analysis,
         which shows how robust the conclusions are to such changes. The results are shown in
         Table 16.3. We see that most of the time, boosted decision trees are the best method, followed
         by random forests, bagged decision trees, SVMs and neural networks. However, the following
         methods all did relatively poorly: KNN, stumps, single decision trees, logistic regression and
         naive Bayes.
            These results are generally consistent with conventional wisdom of practioners in the ﬁeld.
         Of course, the conclusions may change if there the features are high dimensional and/ or there
         are lots of irrelevant features (as in Section 16.7.2), or if there is lots of noise, etc.

16.7.2   High-dimensional features
         In 2003, the NIPS conference ran a competition where the goal was to solve binary classiﬁcation
         problems with large numbers of (mostly irrelevant) features, given small training sets. (This
         was called a “feature selection” challenge, but performance was measured in terms of predictive
         accuracy, not in terms of the ability to select features.) The ﬁve datasets that were used are
         summarized in Table 16.4. The term probe refers to artiﬁcal variables that were added to the
         problem to make it harder. These have no predictive power, but are correlated with the original
         features.
            Results of the competition are discussed in (Guyon et al. 2006). The overall winner was an
         approach based on Bayesian neural networks (Neal and Zhang 2006). In a follow-up study
584                                                            Chapter 16. Adaptive basis function models


   Dataset      Domain                      Type       D             % probes   Ntrain   Nval    Ntest
   Aracene      Mass spectrometry           Dense      10,000        30         100      100     700
   Dexter       Text classiﬁcation          Sparse     20,000        50         300      300     2000
   Dorothea     Drug discovery              Sparse     100,000       50         800      350     800
   Gisette      Digit recognition           Dense      5000          30         6000     1000    6500
   Madelon      Artiﬁcial                   Dense      500           96         2000     600     1800

Table 16.4 Summary of the data used in the NIPS 2003 “feature selection” challenge. For the Dorothea
datasets, the features are binary. For the others, the features are real-valued.

                                            Screened   features              ARD
                 Method                   Avg rank      Avg time     Avg rank Avg time
                 HMC MLP                  1.5           384 (138)    1.6       600 (186)
                 Boosted MLP              3.8           9.4 (8.6)    2.2       35.6 (33.5)
                 Bagged MLP               3.6           3.5 (1.1)    4.0       6.4 (4.4)
                 Boosted trees            3.4           3.03 (2.5)   4.0       34.1 (32.4)
                 Random forests           2.7           1.9 (1.7)    3.2       11.2 (9.3)

Table 16.5 Performance of different methods on the NIPS 2003 “feature selection” challenge. (HMC
stands for hybrid Monte Carlo; see Section 24.5.4.) We report the average rank (lower is better) across the
5 datasets. We also report the average training time in minutes (standard error in brackets). The MCMC
and bagged MLPs use two hidden layers of 20 and 8 units. The boosted MLPs use one hidden layer with 2
or 4 hidden units. The boosted trees used depths between 2 and 9, and shrinkage between 0.001 and 0.1.
Each tree was trained on 80% of the data chosen at random at each step (so-called stochastic gradient
boosting). From Table 11.3 of (Hastie et al. 2009).


(Johnson 2009), Bayesian neural nets (MLPs with 2 hidden layers) were compared to several other
methods based on bagging and boosting. Note that all of these methods are quite similar: in
each case, the prediction has the form
               
               M
   fˆ(x∗ ) =         wm E [y|x∗ , θ m ]                                                            (16.108)
               m=1

The Bayesian MLP was ﬁt by MCMC (hybrid Monte Carlo), so we set wm = 1/M and set θ m
to a draw from the posterior. In bagging, we set wm = 1/M and θ m is estimated by ﬁtting
the model to a bootstrap sample from the data. In boosting, we set wm = 1 and the θ m are
estimated sequentially.
   To improve computational and statistical performance, some feature selection was performed.
Two methods were considered: simple uni-variate screening using T-tests, and a method based
on MLP+ARD. Results of this follow-up study are shown in Table 16.5. We see that Bayesian MLPs
are again the winner. In second place are either random forests or boosted MLPs, depending
on the preprocessing. However, it is not clear how statistically signiﬁcant these differences are,
since the test sets are relatively small.
   In terms of training time, we see that MCMC is much slower than the other methods. It would
be interesting to see how well deterministic Bayesian inference (e.g., Laplace approximation)
would perform. (Obviously it will be much faster, but the question is: how much would one lose
       16.8. Interpreting black-box models                                                                                                                                                                         585




                                     20




                                                                        20




                                                                                                            20




                                                                                                                                          20




                                                                                                                                                                              20
                                     18




                                                                        18




                                                                                                            18




                                                                                                                                          18




                                                                                                                                                                              18
                partial dependence

                                     16




                                                                        16




                                                                                                            16




                                                                                                                                          16




                                                                                                                                                                              16
                                     14




                                                                        14




                                                                                                            14




                                                                                                                                          14




                                                                                                                                                                              14
                                     12




                                                                        12




                                                                                                            12




                                                                                                                                          12




                                                                                                                                                                              12
                                     10




                                                                        10




                                                                                                            10




                                                                                                                                          10




                                                                                                                                                                              10
                                     8




                                                                        8




                                                                                                            8




                                                                                                                                          8




                                                                                                                                                                              8
                                           0.2    0.4       0.6   0.8        0.2   0.4    0.6   0.8              0.2   0.4    0.6   0.8        0.2   0.4    0.6   0.8   1.0        0.2   0.4        0.6   0.8

                                                       x1                                x2                                  x3                            x4                                  x5



                                     20




                                                                        20




                                                                                                            20




                                                                                                                                          20




                                                                                                                                                                              20
                                     18




                                                                        18




                                                                                                            18




                                                                                                                                          18




                                                                                                                                                                              18
                partial dependence

                                     16




                                                                        16




                                                                                                            16




                                                                                                                                          16




                                                                                                                                                                              16
                                     14




                                                                        14




                                                                                                            14




                                                                                                                                          14




                                                                                                                                                                              14
                                     12




                                                                        12




                                                                                                            12




                                                                                                                                          12




                                                                                                                                                                              12
                                     10




                                                                        10




                                                                                                            10




                                                                                                                                          10




                                                                                                                                                                              10
                                     8




                                                                        8




                                                                                                            8




                                                                                                                                          8




                                                                                                                                                                              8
                                          0.2    0.4    0.6       0.8        0.2   0.4    0.6   0.8   1.0        0.2   0.4    0.6   0.8        0.2   0.4    0.6   0.8              0.2   0.4    0.6       0.8

                                                       x6                                x7                                  x8                            x9                              x10




       Figure 16.20 Partial dependence plots for the 10 predictors in Friedman’s synthetic 5-dimensional re-
       gression problem.   Source: Figure 4 of (Chipman et al. 2010) . Used with kind permission of Hugh
       Chipman.



       in statistical performance?)

16.8   Interpreting black-box models
       Linear models are popular in part because they are easy to interpet. However, they often are
       poor predictors, which makes them a poor proxy for “nature’s mechanism”. Thus any conclusions
       about the importance of particular variables should only be based on models that have good
       predictive accuracy (Breiman 2001b). (Interestingly, many standard statistical tests of “goodness
       of ﬁt” do not test the predictive accuracy of a model.)
          In this chapter, we studied black-box models, which do have good predictive accuracy.
       Unfortunately, they are hard to interpret directly. Fortunately, there are various heuristics we can
       use to “probe” such models, in order to assess which input variables are the most important.
          As a simple example, consider the following non-linear function, ﬁrst proposed (Friedman
       1991) to illustrate the power of MARS:

          f (x) = 10 sin(πx1 x2 ) + 20(x3 − 0.5)2 + 10x4 + 5x5 +                                                                                                                                               (16.109)

       where  ∼ N (0, 1). We see that the output is a complex function of the inputs. By augmenting
       the x vector with additional irrelevant random variables, all drawn uniform on [0, 1], we can
       create a challenging feature selection problem. In the experiments below, we add 5 extra dummy
       variables.
586                                                      Chapter 16. Adaptive basis function models



                                               1
                                               2




                            0.25
                                               3




                            0.20
                                           2
                                           1   4
                                       1
                                   2       3   5
                                   3       4         1




                            0.15
                                   4   3             2




                    usage
                                   1
                                   5   4
                                       2   5         3
                                       5             4
                                                     5




                            0.10
                                                                 5     5            5




                            0.05
                                                           5           4     5
                                                           4     4           4      4
                                                                       3     3      3
                                                           3     3
                                                                       2     2      2




                            0.00
                                                           2
                                                           1     2
                                                                 1     1     1      1

                                       2       4           6           8           10




Figure 16.21 Average usage of each variable in a BART model ﬁt to data where only the ﬁrst 5 features are
relevant. The different coloured lines correspond to different numbers of trees in the ensemble. Source:
Figure 5 of (Chipman et al. 2010) . Used with kind permission of Hugh Chipman.



   One useful way to measure the effect of a set s of variables on the output is to compute a
partial dependence plot (Friedman 2001). This is a plot of f (xs ) vs xs , where f (xs ) is deﬁned
as the response to xs with the other predictors averaged out:

               1 
                  N
   f (xs ) =         f (xs , xi,−s )                                                             (16.110)
               N i=1

Figure 16.20 shows an example where we use sets corresponding to each single variable. The data
was generated from Equation 16.109, with 5 irrelevant variables added. We then ﬁt a BART model
(Section 16.2.5) and computed the partial dependence plots. We see that the predicted response
is invariant for s ∈ {6, . . . , 10}, indicating that these variables are (marginally) irrelevant. The
response is roughly linear in x4 and x5 , and roughly quadratic in x3 . (The error bars are obtained
by computing empirical quantiles of f (x, θ) based on posterior samples of θ; alternatively, we
can use bootstrap.)
   Another very useful summary computes the relative importance of predictor variables.
This can be thought of as a nonlinear, or even “model free”, way of performing variable selection,
although the technique is restricted to ensembles of trees. The basic idea, originally proposed
in (Breiman et al. 1984), is to count how often variable j is used as a node in any of the trees.
                         1
                            M
In particular, let vj = M        m=1 I(j ∈ Tm ) be the proportion of all splitting rules that use xj ,
where Tm is the m’th tree. If we can sample the posterior of trees, p(T1:M |D), we can easily
compute the posterior for vj . Alternatively, we can use bootstrap.
   Figure 16.21 gives an example, using BART. We see that the ﬁve relevant variables are chosen
much more than the ﬁve irrelevant variables. As we increase the number M of trees, all the
variables are more likely to be chosen, reducing the sensitivity of this method, but for small M ,
the method is farily diagnostic.
16.8. Interpreting black-box models                                                                     587


Exercises
Exercise 16.1 Nonlinear regression for inverse dynamics
In this question, we ﬁt a model which can predict what torques a robot needs to apply in order to make
its arm reach a desired point in space. The data was collected from a SARCOS robot arm with 7 degrees of
freedom. The input vector x ∈ R21 encodes the desired position, velocity and accelaration of the 7 joints.
The output vector y ∈ R7 encodes the torques that should be applied to the joints to reach that point.
The mapping from x to y is highly nonlinear.
We have N = 48, 933 training points and Ntest = 4, 449 testing points. For simplicity, we following
standard practice and focus on just predicting a scalar output, namely the torque for the ﬁrst joint.
Download the data from http://www.gaussianprocess.org/gpml. Standardize the inputs so they
have zero mean and unit variance on the training set, and center the outputs so they have zero mean
on the training set. Apply the corresponding transformations to the test data. Below we will describe
various models which you should ﬁt to this transformed data. Then make predictions and compute the
standardized mean squared error on the test set as follows:
                 1
                     Ntest            2
               Ntest   i=1 (yi − ŷi )
    SM SE =                                                                                         (16.111)
                          σ 2

                    N train
where σ 2 = Ntrain
               1
                      i=1     (yi − y)2 is the variance of the output computed on the training set.


a. The ﬁrst method you should try is standard linear regression. Turn in your numbers and code.
   (According to (Rasmussen and Williams 2006, p24), you should be able to achieve a SMSE of 0.075
   using this method.)
b. Now try running K-means clustering (using cross validation to pick K). Then ﬁt an RBF network to
   the data, using the μk estimated by K-means. Use CV to estimate the RBF bandwidth. What SMSE do
   you get? Turn in your numbers and code. (According to (Rasmussen and Williams 2006, p24), Gaussian
   process regression can get an SMSE of 0.011, so the goal is to get close to that.)
c. Now try ﬁtting a feedforward neural network. Use CV to pick the number of hidden units and the
   strength of the 2 regularizer. What SMSE do you get? Turn in your numbers and code.
17       Markov and hidden Markov models



 17.1    Introduction
         In this chapter, we discuss probabilistic models for sequences of observations, X1 , . . . , XT , of
         arbitrary length T . Such models have applications in computational biology, natural language
         processing, time series forecasting, etc. We focus on the case where we the observations occur
         at discrete “time steps”, although “time” may also refer to locations within a sequence.

 17.2    Markov models
         Recall from Section 10.2.2 that the basic idea behind a Markov chain is to assume that Xt
         captures all the relevant information for predicting the future (i.e., we assume it is a sufficient
         statistic). If we assume discrete time steps, we can write the joint distribution as follows:

                                                                   
                                                                   T
            p(X1:T ) = p(X1 )p(X2 |X1 )p(X3 |X2 ) . . . = p(X1 )         p(Xt |Xt−1 )                   (17.1)
                                                                   t=2

         This is called a Markov chain or Markov model.
            If we assume the transition function p(Xt |Xt−1 ) is independent of time, then the chain is
         called homogeneous, stationary, or time-invariant. This is an example of parameter tying,
         since the same parameter is shared by multiple variables. This assumption allows us to model
         an arbitrary number of variables using a ﬁxed number of parameters; such models are called
         stochastic processes.
            If we assume that the observed variables are discrete, so Xt ∈ {1, . . . , K}, this is called a
         discrete-state or ﬁnite-state Markov chain. We will make this assumption throughout the rest of
         this section.

17.2.1   Transition matrix
         When Xt is discrete, so Xt ∈ {1, . . . , K}, the conditional distribution p(Xt |Xt−1 ) can be
         written as a K × K matrix, known as the transition matrix A, where Aij = p(Xt =
               = i) is the probability of going from state i to state j. Each row of the matrix sums to
         j|Xt−1
         one, j Aij = 1, so this is called a stochastic matrix.
590                                                  Chapter 17. Markov and hidden Markov models



          1−α                            1−β
                             α                             A11           A22         A33

                                                                   A12         A23
                  1                  2
                                                            1             2           3
                             β

                             (a)                                         (b)

Figure 17.1 State transition diagrams for some simple Markov chains. Left: a 2-state chain. Right: a
3-state left-to-right chain.


   A stationary, ﬁnite-state Markov chain is equivalent to a stochastic automaton. It is common
to visualize such automata by drawing a directed graph, where nodes represent states and arrows
represent legal transitions, i.e., non-zero elements of A. This is known as a state transition
diagram. The weights associated with the arcs are the probabilities. For example, the following
2-state chain
          
            1−α        α
    A=                                                                                      (17.2)
              β     1−β
is illustrated in Figure 17.1(left). The following 3-state chain
           ⎛                    ⎞
             A11 A12        0
    A=⎝ 0           A22 A23 ⎠                                                                  (17.3)
              0      0      1
is illustrated in Figure 17.1(right). This is called a left-to-right transition matrix, and is com-
monly used in speech recognition (Section 17.6.2).
   The Aij element of the transition matrix speciﬁes the probability of getting from i to j in
one step. The n-step transition matrix A(n) is deﬁned as
   Aij (n)  p(Xt+n = j|Xt = i)                                                                (17.4)
which is the probability of getting from i to j in exactly n steps. Obviously A(1) = A. The
Chapman-Kolmogorov equations state that
                      
                      K
   Aij (m + n) =            Aik (m)Akj (n)                                                     (17.5)
                      k=1

In words, the probability of getting from i to j in m + n steps is just the probability of getting
from i to k in m steps, and then from k to j in n steps, summed up over all k. We can write
the above as a matrix multiplication
   A(m + n) = A(m)A(n)                                                                         (17.6)
Hence
   A(n) = A A(n − 1) = A A A(n − 2) = · · · = An                                               (17.7)
Thus we can simulate multiple steps of a Markov chain by “powering up” the transition matrix.
         17.2. Markov models                                                                              591

         SAYS IT’S NOT IN THE CARDS LEGENDARY RECONNAISSANCE BY ROLLIE
         DEMOCRACIES UNSUSTAINABLE COULD STRIKE REDLINING VISITS TO PROFIT
         BOOKING WAIT HERE AT MADISON SQUARE GARDEN COUNTY COURTHOUSE WHERE HE
         HAD BEEN DONE IN THREE ALREADY IN ANY WAY IN WHICH A TEACHER


         Table 17.1 Example output from an 4-gram word model, trained using backoff smoothing on the Broadcast
         News corpus. The ﬁrst 4 words are speciﬁed by hand, the model generates the 5th word, and then the
         results are fed back into the model. Source: http://www.fit.vutbr.cz/~imikolov/rnnlm/gen-4gra
         m.txt .


17.2.2   Application: Language modeling
         One important application of Markov models is to make statistical language models, which are
         probability distributions over sequences of words. We deﬁne the state space to be all the words
         in English (or some other language). The marginal probabilities p(Xt = k) are called unigram
         statistics. If we use a ﬁrst-order Markov model, then p(Xt = k|Xt−1 = j) is called a bigram
         model. If we use a second-order Markov model, then p(Xt = k|Xt−1 = j, Xt−2 = i) is
         called a trigram model. And so on. In general these are called n-gram models. For example,
         Figure 17.2 shows 1-gram and 2-grams counts for the letters {a, . . . , z, −} (where - represents
         space) estimated from Darwin’s On The Origin Of Species.
            Language models can be used for several things, such as the following:

         • Sentence completion A language model can predict the next word given the previous
           words in a sentence. This can be used to reduce the amount of typing required, which is
           particularly important for disabled users (see e.g., David Mackay’s Dasher system1 ), or uses of
           mobile devices.
         • Data compression Any density model can be used to deﬁne an encoding scheme, by
           assigning short codewords to more probable strings. The more accurate the predictive model,
           the fewer the number of bits it requires to store the data.
         • Text classiﬁcation Any density model can be used as a class-conditional density and hence
           turned into a (generative) classiﬁer. Note that using a 0-gram class-conditional density (i.e.,
           only unigram statistics) would be equivalent to a naive Bayes classiﬁer (see Section 3.5).
         • Automatic essay writing One can sample from p(x1:t ) to generate artiﬁcial text. This is
           one way of assessing the quality of the model. In Table 17.1, we give an example of text
           generated from a 4-gram model, trained on a corpus with 400 million words. ((Tomas et al.
           2011) describes a much better language model, based on recurrent neural networks, which
           generates much more semantically plausible text.)


         1. http://www.inference.phy.cam.ac.uk/dasher/
           592                                                                Chapter 17. Markov and hidden Markov models


                                                                                          Bigrams
                                                  Unigrams          _ a b c d e f g h i j k l m n o p q r s t u v w x y z
                                  1     0.16098    _            _
                                  2     0.06687    a            a
                                  3     0.01414    b            b
                                  4     0.02938    c            c
                                  5     0.03107    d            d
                                  6     0.11055    e            e
                                  7     0.02325    f            f
                                  8     0.01530    g            g
                                  9     0.04174    h            h
                                 10     0.06233    i            i
                                 11     0.00060    j            j
                                 12     0.00309    k            k
                                 13     0.03515    l            l
                                 14     0.02107    m            m
                                 15     0.06007    n            n
                                 16     0.06066    o            o
                                 17     0.01594    p            p
                                 18     0.00077    q            q
                                 19     0.05265    r            r
                                 20     0.05761    s            s
                                 21     0.07566    t            t
                                 22     0.02149    u            u
                                 23     0.00993    v            v
                                 24     0.01341    w            w
                                 25     0.00208    x            x
                                 26     0.01381    y            y
                                 27     0.00039    z            z




           Figure 17.2 Unigram and bigram counts from Darwin’s On The Origin Of Species. The 2D picture on the
           right is a Hinton diagram of the joint distribution. The size of the white squares is proportional to the
           value of the entry in the corresponding vector/ matrix. Based on (MacKay 2003, p22). Figure generated by
           ngramPlot.



17.2.2.1   MLE for Markov language models
           We now discuss a simple way to estimate the transition matrix from training data. The proba-
           bility of any particular sequence of length T is given by

              p(x1:T |θ)     =        π(x1 )A(x1 , x2 ) . . . A(xT −1 , xT )                                                 (17.8)
                                      
                                      K                     T 
                                                             K 
                                                                K
                             =              (πj )I(x1 =j)                  (Ajk )I(xt =k,xt−1 =j)                            (17.9)
                                      j=1                   t=2 j=1 k=1

           Hence the log-likelihood of a set of sequences D = (x1 , . . . , xN ), where xi = (xi1 , . . . , xi,Ti )
           is a sequence of length Ti , is given by

                                       
                                       N                                                 
              log p(D|θ)      =              log p(xi |θ) =             Nj1 log πj +                 Njk log Ajk            (17.10)
                                       i=1                          j                       j    k

           where we deﬁne the following counts:

                      
                      N                                   i −1
                                                        N T
              Nj1          I(xi1 = j), Njk                            I(xi,t = j, xi,t+1 = k)                             (17.11)
                      i=1                                   i=1 t=1
           17.2. Markov models                                                                                                593


           Hence we can write the MLE as the normalized counts:
                      Nj1              N
               π̂j =      1 , Âjk =
                                       jk                                                                                  (17.12)
                       j N j           k Njk

              These results can be extended in a straightforward way to higher order Markov models.
           However, the problem of zero-counts becomes very acute whenever the number of states K,
           and/or the order of the chain, n, is large. An n-gram models has O(K n ) parameters. If we have
           K ∼ 50, 000 words in our vocabulary, then a bi-gram model will have about 2.5 billion free
           parameters, corresponding to all possible word pairs. It is very unlikely we will see all of these
           in our training data. However, we do not want to predict that a particular word string is totally
           impossible just because we happen not to have seen it in our training text — that would be a
           severe form of overﬁtting.2
              A simple solution to this is to use add-one smoothing, where we simply add one to all the
           empirical counts before normalizing. The Bayesian justiﬁcation for this is given in Section 3.3.4.1.
           However add-one smoothing assumes all n-grams are equally likely, which is not very realistic.
           A more sophisticated Bayesian approach is discussed in Section 17.2.2.2.
              An alternative to using smart priors is to gather lots and lots of data. For example, Google
           has ﬁt n-gram models (for n = 1 : 5) based on one trillion words extracted from the web. Their
           data, which is over 100GB when uncompressed, is publically available.3 An example of their
           data, for a set of 4-grams, is shown below.
           serve   as   the   incoming 92
           serve   as   the   incubator 99
           serve   as   the   independent 794
           serve   as   the   index 223
           serve   as   the   indication 72
           serve   as   the   indicator 120
           serve   as   the   indicators 45
           serve   as   the   indispensable 111
           serve   as   the   indispensible 40
           serve   as   the   individual 234
           ...

              Although such an approach, based on “brute force and ignorance”, can be successful, it is
           rather unsatisfying, since it is clear that this is not how humans learn (see e.g., (Tenenbaum
           and Xu 2000)). A more reﬁned Bayesian approach, that needs much less data, is described in
           Section 17.2.2.2.

17.2.2.2   Empirical Bayes version of deleted interpolation
           A common heuristic used to ﬁx the sparse data problem is called deleted interpolation (Chen
           and Goodman 1996). This deﬁnes the transition matrix as a convex combination of the bigram

           2. A famous example of an improbable, but syntactically valid, English word string, due to Noam Chomsky, is “colourless
           green ideas sleep furiously”. We would not want our model to predict that this string is impossible. Even ungrammatical
           constructs should be allowed by our model with a certain probability, since people frequently violate grammatical rules,
           especially in spoken language.
           3. See http://googleresearch.blogspot.com/2006/08/all-our-n-gram-are-belong-to-you.html for de-
           tails.
594                                               Chapter 17. Markov and hidden Markov models


frequencies fjk = Njk /Nj and the unigram frequencies fk = Nk /N :

   Ajk = (1 − λ)fjk + λfk                                                                    (17.13)

The term λ is usually set by cross validation. There is also a closely related technique called
backoff smoothing; the idea is that if fjk is too small, we “back off” to a more reliable estimate,
namely fk .
   We will now show that the deleted interpolation heuristic is an approximation to the predic-
tions made by a simple hierarchical Bayesian model. Our presentation follows (McKay and Peto
1995). First, let us use an independent Dirichlet prior on each row of the transition matrix:

   Aj ∼ Dir(α0 m1 , . . . , α0 mK ) = Dir(α0 m) = Dir(α)                                     (17.14)
                                                                                
where Aj is row j of the transition matrix, m is the prior mean (satisfying k mk = 1) and
α0 is the prior strength. We will use the same prior for each row: see Figure 17.3.
  The posterior is given by Aj ∼ Dir(α + Nj ), where Nj = (Nj1 , . . . , NjK ) is the vector
that records the number of times we have transitioned out of state j to each of the other states.
From Equation 3.51, the posterior predictive density is
                                    Njk + αmk   fjk Nj + αmk
p(Xt+1 = k|Xt = j, D) = Ajk =                 =              = (1 − λj )fjk + λj mk(17.15)
                                     Nj + α 0      Nj + α0

where Ajk = E [Ajk |D, α] and
             α
   λj =                                                                                      (17.16)
          Nj + α0
This is very similar to Equation 17.13 but not identical. The main difference is that the Bayesian
model uses a context-dependent weight λj to combine mk with the empirical frequency fjk ,
rather than a ﬁxed weight λ. This is like adaptive deleted interpolation. Furthermore, rather
than backing off to the empirical marginal frequencies fk , we back off to the model parameter
mk .
   The only remaining question is: what values should we use for α and m? Let’s use empirical
Bayes. Since we assume each row of the transition matrix is a priori independent given α, the
marginal likelihood for our Markov model is found by applying Equation 5.24 to each row:
               B(Nj + α)
   p(D|α) =                                                                                  (17.17)
              j
                  B(α)

where Nj = (Nj1 , . . . , NjK ) are the counts for leaving state j and B(α) is the generalized
beta function.
   We can ﬁt this using the methods discussed in (Minka 2000e). However, we can also use the
following approximation (McKay and Peto 1995, p12):

   mk ∝ |{j : Njk > 0}|                                                                      (17.18)

This says that the prior probability of word k is given by the number of different contexts in
which it occurs, rather than the number of times it occurs. To justify the reasonableness of this
result, Mackay and Peto (McKay and Peto 1995) give the following example.
           17.2. Markov models                                                                                              595




           Figure 17.3 A Markov chain in which we put a different Dirichlet prior on every row of the transition
           matrix A, but the hyperparameters of the Dirichlet are shared.



           Imagine, you see, that the language, you see, has, you see, a
           frequently occuring couplet ’you see’, you see, in which the second
           word of the couplet, see, follows the first word, you, with very high
           probability, you see. Then the marginal statistics, you see, are going
           to become hugely dominated, you see, by the words you and see, with
           equal frequency, you see.

              If we use the standard smoothing formula, Equation 17.13, then P(you|novel) and P(see|novel),
           for some novel context word not seen before, would turn out to be the same, since the marginal
           frequencies of ’you’ and ’see’ are the same (11 times each). However, this seems unreasonable.
           ’You’ appears in many contexts, so P(you|novel) should be high, but ’see’ only follows ’you’, so
           P(see|novel) should be low. If we use the Bayesian formula Equation 17.15, we will get this effect
           for free, since we back off to mk not fk , and mk will be large for ’you’ and small for ’see’ by
           Equation 17.18.
              Unfortunately, although elegant, this Bayesian model does not beat the state-of-the-art lan-
           guage model, known as interpolated Kneser-Ney (Kneser and Ney 1995; Chen and Goodman
           1998). However, in (Teh 2006), it was shown how one can build a non-parametric Bayesian
           model which outperforms interpolated Kneser-Ney, by using variable-length contexts. In (Wood
           et al. 2009), this method was extended to create the “sequence memoizer”, which is currently
           (2010) the best-performing language model.4

17.2.2.3   Handling out-of-vocabulary words
           While the above smoothing methods handle the case where the counts are small or even zero,
           none of them deal with the case where the test set may contain a completely novel word. In
           particular, they all assume that the words in the vocabulary (i.e., the state space of Xt ) is ﬁxed
           and known (typically it is the set of unique words in the training data, or in some dictionary).

           4. Interestingly, these non-parametric methods are based on posterior inference using MCMC (Section 24.1) and/or
           particle ﬁltering (Section 23.5), rather than optimization methods such as EB. Despite this, they are quite efficient.
           596                                                   Chapter 17. Markov and hidden Markov models



                                        1.0
                                                                     0.1         0.1                   1.0
                                  1.0         0.5
                              1         2           3                      0.9
                                                                      1          2           3         4
                                  0.5                                                  0.5       0.5
                                                                           0.9

                                        (a)                                            (b)

                 Figure 17.4 Some Markov chains. (a) A 3-state aperiodic chain. (b) A reducible 4-state chain.


           Even if all Ajk ’s are non-zero, none of these models will predict a novel word outside of this set,
           and hence will assign zero probability to a test sentence with an unfamiliar word. (Unfamiliar
           words are bound to occur, because the set of words is an open class. For example, the set of
           proper nouns (names of people and places) is unbounded.)
             A standard heuristic to solve this problem is to replace all novel words with the special symbol
           unk, which stands for “unknown”. A certain amount of probability mass is held aside for this
           event.
             A more principled solution would be to use a Dirichlet process, which can generate a countably
           inﬁnite state space, as the amount of data increases (see Section 25.2.2). If all novel words are
           “accepted” as genuine words, then the system has no predictive power, since any misspelling
           will be considered a new word. So the novel word has to be seen frequently enough to warrant
           being added to the vocabulary. See e.g., (Friedman and Singer 1999; Griffiths and Tenenbaum
           2001) for details.

 17.2.3    Stationary distribution of a Markov chain *
           We have been focussing on Markov models as a way of deﬁning joint probability distributions
           over sequences. However, we can also interpret them as stochastic dynamical systems, where
           we “hop” from one state to another at each time step. In this case, we are often interested in the
           long term distribution over states, which is known as the stationary distribution of the chain.
           In this section, we discuss some of the relevant theory. Later we will consider two important
           applications: Google’s PageRank algorithm for ranking web pages (Section 17.2.4), and the MCMC
           algorithm for generating samples from hard-to-normalize probability distributions (Chapter 24).

17.2.3.1   What is a stationary distribution?
           Let Aij = p(Xt = j|Xt−1 = i) be the one-step transition matrix, and let πt (j) = p(Xt = j)
           be the probability of being in state j at time t. It is conventional in this context to assume that
           π is a row vector. If we have an initial distribution over states of π 0 , then at time 1 we have
                       
              π1 (j) =      π0 (i)Aij                                                                     (17.19)
                          i
           or, in matrix notation,
              π1 = π0 A                                                                                          (17.20)
           17.2. Markov models                                                                             597


           We can imagine iterating these equations. If we ever reach a stage where
                π = πA                                                                                   (17.21)
           then we say we have reached the stationary distribution (also called the invariant distribution
           or equilibrium distribution). Once we enter the stationary distribution, we will never leave.
              For example, consider the chain in Figure 17.4(a). To ﬁnd its stationary distribution, we write
                                              ⎛                                                       ⎞
                                           1 − A12 − A13              A12                A13
               π 1 π2 π3 = π 1 π2 π3 ⎝                A21           1 − A21 − A23            A23      ⎠(17.22)
                                                      A31                 A32         1 − A31 − A32
           so
                π1 = π1 (1 − A12 − A12 ) + π2 A21 + π3 A31                                              (17.23)
           or
                π1 (A12 + A13 ) = π2 A21 + π3 A31                                                       (17.24)
           In general, we have
                           
              πi     Aij =     πj Aji                                                                   (17.25)
                  j=i       j=i

           In other words, the probability of being in state i times the net ﬂow out of state i must equal
           the probability of being in each other state j times the net ﬂow from that state into i. These
           are called the global
                                 balance equations. We can then solve these equations, subject to the
           constraint that j πj = 1.

17.2.3.2   Computing the stationary distribution
           To ﬁnd the stationary distribution, we can just solve the eigenvector equation AT v = v, and
           then to set π = vT , where v is an eigenvector with eigenvalue 1. (We can be sure such an
           eigenvector exists, since A is a row-stochastic matrix, so A1 = 1; also recall that the eigenvalues
           of A and AT are the same.) Of course, since eigenvectors are unique only up to constants of
           proportionality, we must normalize v at the end to ensure it sums to one.
              Note, however, that the eigenvectors are only guaranteed to be real-valued if the matrix is
           positive, Aij > 0 (and hence Aij < 1, due to the sum-to-one constraint). A more general
           approach, which can handle chains where some transition probabilities are 0 or 1 (such as
           Figure 17.4(a)), is as follows (Resnick 1992, p138). We have K constraints from π(I − A) = 0K×1
           and 1 constraint from π1K×1 = 0. Since we only have K unknowns, this is overconstrained.
           So let us replace any column (e.g., the last) of I − A with 1, to get a new matrix, call it M.
           Next we deﬁne r = [0, 0, . . . , 1], where the 1 in the last position corresponds to the column of
           all 1s in M. We then solve πM = r. For example, for a 3 state chain we have to solve this
           linear system:
                                 ⎛                          ⎞
                               1 − A11        −A12      1             
                π1 π2 π3 ⎝ −A21               1 − A22 1⎠ = 0 0 1                                        (17.26)
                                     −A31       −A32      1
           598                                                  Chapter 17. Markov and hidden Markov models


           For the chain in Figure 17.4(a) we ﬁnd π = [0.4, 0.4, 0.2]. We can easily verify this is correct,
           since π = πA. See mcStatDist for some Matlab code.
              Unfortunately, not all chains have a stationary distribution. as we explain below.

17.2.3.3   When does a stationary distribution exist? *
           Consider the 4-state chain in Figure 17.4(b). If we start in state 4, we will stay there forever, since
           4 is an absorbing state. Thus π = (0, 0, 0, 1) is one possible stationary distribution. However,
           if we start in 1 or 2, we will oscillate between those two states for ever. So π = (0.5, 0.5, 0, 0)
           is another possible stationary distribution. If we start in state 3, we could end up in either of
           the above stationary distributions.
              We see from this example that a necessary condition to have a unique stationary distribution
           is that the state transition diagram be a singly connected component, i.e., we can get from any
           state to any other state. Such chains are called irreducible.
              Now consider the 2-state chain in Figure 17.1(a). This is irreducible provided α, β > 0.
           Suppose α = β = 0.9. It is clear by symmetry that this chain will spend 50% of its time in
           each state. Thus π = (0.5, 0.5). But now suppose α = β = 1. In this case, the chain will
           oscillate between the two states, but the long-term distribution on states depends on where you
           start from. If we start in state 1, then on every odd time step (1,3,5,...) we will be in state 1; but
           if we start in state 2, then on every odd time step we will be in state 2.
              This example motivates the following deﬁnition. Let us say that a chain has a limiting
           distribution if πj = limn→∞ Anij exists and is independent of i, for all j. If this holds, then
           the long-run distribution over states will be independent of the starting state:
                               
               P (Xt = j) =         P (X0 = i)Aij (t) → πj as t → ∞                                         (17.27)
                                i

             Let us now characterize when a limiting distribution exists. Deﬁne the period of state i to be
              d(i) = gcd{t : Aii (t) > 0}                                                                   (17.28)
           where gcd stands for greatest common divisor, i.e., the largest integer that divides all the
           members of the set. For example, in Figure 17.4(a), we have d(1) = d(2) = gcd(2, 3, 4, 6, ...) = 1
           and d(3) = gcd(3, 5, 6, ...) = 1. We say a state i is aperiodic if d(i) = 1. (A sufficient condition
           to ensure this is if state i has a self-loop, but this is not a necessary condition.) We say a chain
           is aperiodic if all its states are aperiodic. One can show the following important result:
           Theorem 17.2.1. Every irreducible (singly connected), aperiodic ﬁnite state Markov chain has a
           limiting distribution, which is equal to π, its unique stationary distribution.
              A special case of this result says that every regular ﬁnite state chain has a unique stationary
           distribution, where a regular chain is one whose transition matrix satisﬁes Anij > 0 for some
           integer n and all i, j, i.e., it is possible to get from any state to any other state in n steps.
           Consequently, after n steps, the chain could be in any state, no matter where it started. One
           can show that sufficient conditions to ensure regularity are that the chain be irreducible (singly
           connected) and that every state have a self-transition.
              To handle the case of Markov chains whose state-space is not ﬁnite (e.g, the countable set of
           all integers, or all the uncountable set of all reals), we need to generalize some of the earlier
           17.2. Markov models                                                                              599


           deﬁnitions. Since the details are rather technical, we just brieﬂy state the main results without
           proof. See e.g., (Grimmett and Stirzaker 1992) for details.
               For a stationary distribution to exist, we require irreducibility (singly connected) and aperiod-
           icity, as before. But we also require that each state is recurrent. (A chain in which all states
           are recurrent is called a recurrent chain.) Recurrent means that you will return to that state
           with probability 1. As a simple example of a non-recurrent state (i.e., a transient state), consider
           Figure 17.4(b): states 3 is transient because one immediately leaves it and either spins around
           state 4 forever, or oscillates between states 1 and 2 forever. There is no way to return to state 3.
               It is clear that any ﬁnite-state irreducible chain is recurrent, since you can always get back to
           where you started from. But now consider an example with an inﬁnite state space. Suppose we
           perform a random walk on the integers, X = {. . . , −2, −1, 0, 1, 2, . . .}. Let Ai,i+1 = p be the
           probability of moving right, and Ai,i−1 = 1 − p be the probability of moving left. Suppose we
           start at X1 = 0. If p > 0.5, we will shoot off to +∞; we are not guaranteed to return. Similarly,
           if p < 0.5, we will shoot off to −∞. So in both cases, the chain is not recurrent, even though
           it is irreducible.
               It should be intuitively obvious that we require all states to be recurrent for a stationary
           distribution to exist. However, this is not sufficient. To see this, consider the random walk
           on the integers again, and suppose p = 0.5. In this case, we can return to the origin an
           inﬁnite number of times, so the chain is recurrent. However, it takes inﬁnitely long to do
           so. This prohibits it from having a stationary distribution. The intuitive reason is that the
           distribution keeps spreading out over a larger and larger set of the integers, and never converges
           to a stationary distribution. More formally, we deﬁne a state to be non-null recurrent if the
           expected time to return to this state is ﬁnite. A chain in which all states are non-null is called a
           non-null chain.
               For brevity, we we say that a state is ergodic if it is aperiodic, recurrent and non-null, and
           we say a chain is ergodic if all its states are ergodic.
               We can now state our main theorem:
           Theorem 17.2.2. Every irreducible (singly connected), ergodic Markov chain has a limiting distri-
           bution, which is equal to π, its unique stationary distribution.
             This generalizes Theorem 17.2.1, since for irreducible ﬁnite-state chains, all states are recurrent
           and non-null.

17.2.3.4   Detailed balance
           Establishing ergodicity can be difficult. We now give an alternative condition that is easier to
           verify.
             We say that a Markov chain A is time reversible if there exists a distribution π such that
              πi Aij = πj Aji                                                                            (17.29)
           These are called the detailed balance equations. This says that the ﬂow from i to j must
           equal the ﬂow from j to i, weighted by the appropriate source probabilities.
             We have the following important result.
           Theorem 17.2.3. If a Markov chain with transition matrix A is regular and satisﬁes detailed
           balance wrt distribution π, then π is a stationary distribution of the chain.
         600                                                         Chapter 17. Markov and hidden Markov models


                                             X1                                             X4




                                                                X2



                                                                       X3




                                        X6                                                    X5




          Figure 17.5 A very small world wide web. Figure generated by pagerankDemo, written by Tim Davis.



         Proof. To see this, note that
                                        
                 πi Aij =     πj Aji = πj   Aji = πj                                                                    (17.30)
               i               i                   i

         and hence π = Aπ.
           Note that this condition is sufficient but not necessary (see Figure 17.4(a) for an example of a
         chain with a stationary distribution which does not satisfy detailed balance).
           In Section 24.1, we will discuss Markov chain Monte Carlo or MCMC methods. These take
         as input a desired distribution π and construct a transition matrix (or in general, a transition
         kernel) A which satisﬁes detailed balance wrt π. Thus by sampling states from such a chain,
         we will eventually enter the stationary distribution, and will visit states with probabilities given
         by π.

17.2.4   Application: Google’s PageRank algorithm for web page ranking *
         The results in Section 17.2.3 form the theoretical underpinnings to Google’s PageRank algorithm,
         which is used for information retrieval on the world-wide web. We sketch the basic idea below;
         see (Byran and Leise 2006) for a more detailed explanation.
            We will treat the web as a giant directed graph, where nodes represent web pages (documents)
         and edges represent hyper-links.5 We then perform a process called web crawling. We start at
         a few designated root nodes, such as dmoz.org, the home of the Open Directory Project, and
         then follows the links, storing all the pages that we encounter, until we run out of time.
            Next, all of the words in each web page are entered into a data structure called an inverted
         index. That is, for each word, we store a list of the documents where this word occurs. (In
         practice, we store a list of hash codes representing the URLs.) At test time, when a user enters

         5. In 2008, Google said it had indexed 1 trillion (1012 ) unique URLs. If we assume there are about 10 URLs per page
         (on average), this means there were about 100 billion unique web pages. Estimates for 2010 are about 121 billion unique
         web pages. Source: thenextweb.com/shareables/2011/01/11/infographic-how-big-is-the-internet.
17.2. Markov models                                                                            601


a query, we can just look up all the documents containing each word, and intersect these
lists (since queries are deﬁned by a conjunction of search terms). We can get a reﬁned search
by storing the location of each word in each document. We can then test if the words in a
document occur in the same order as in the query.
   Let us give an example, from http://en.wikipedia.org/wiki/Inverted_index. We
have 3 documents, T0 = “it is what it is”, T1 = “what is it” and T2 = “it is a banana”. Then
we can create the following inverted index, where each pair represents a document and word
location:

"a":           {(2,   2)}
"banana":      {(2,   3)}
"is":          {(0,   1), (0, 4), (1, 1), (2, 1)}
"it":          {(0,   0), (0, 3), (1, 2), (2, 0)}
"what":        {(0,   2), (1, 0)}
For example, we see that the word “what” occurs at location 2 (counting from 0) in document
0, and location 0 in document 1. Suppose we search for “what is it”. If we ignore word order,
we retrieve the following documents:

   {T0 , T1 } ∩ {T0 , T1 , T2 } ∩ {T0 , T1 , T2 } = {T0 , T1 }                               (17.31)

If we require that the word order matches, only document T1 would be returned. More generally,
we can allow out-of-order matches, but can give “bonus points” to documents whose word order
matches the query’s word order, or to other features, such as if the words occur in the title of
a document. We can then return the matching documents in decreasing order of their score/
relevance. This is called document ranking.
   So far, we have described the standard process of information retrieval. But the link structure
of the web provides an additional source of information. The basic idea is that some web pages
are more authoritative than others, so these should be ranked higher (assuming they match
the query). A web page is an authority if it is linked to by many other pages. But to protect
against the effect of so-called link farms, which are dummy pages which just link to a given
site to boost its apparent relevance, we will weight each incoming link by the source’s authority.
Thus we get the following recursive deﬁnition for the authoritativeness of page j, also called its
PageRank:
          
    πj =      Aij πi                                                                        (17.32)
           i

where Aij is the probability of following a link from i to j. We recognize Equation 17.32 as the
stationary distribution of a Markov chain.
   In the simplest setting, we deﬁne Ai. as a uniform distribution over all states that i is
connected to. However, to ensure the distribution is unique, we need to make the chain into a
regular chain. This can be done by allowing each state i to jump to any other state (including
itself) with some small probability. This effectively makes the transition matrix aperiodic and
fully connected (although the adjacency matrix Gij of the web itself is highly sparse).
   We discuss efficient methods for computing the leading eigenvector of this giant matrix below.
But ﬁrst, let us give an example of the PageRank algorithm. Consider the small web in Figure 17.5.
           602                                                        Chapter 17. Markov and hidden Markov models


                            0                                             0.02

                           50                                            0.018

                          100                                            0.016

                          150                                            0.014

                          200                                            0.012

                          250                                             0.01

                          300                                            0.008

                          350                                            0.006

                          400                                            0.004

                          450                                            0.002

                          500                                               0
                                0   100   200       300   400   500              0   100   200         300   400   500
                                            nz = 2636



                                             (a)                                                 (b)

           Figure 17.6 (a) Web graph of 500 sites rooted at www.harvard.edu. (b) Corresponding page rank vector.
           Figure generated by pagerankDemoPmtk, Based on code by Cleve Moler (Moler 2004).


           We ﬁnd that the stationary distribution is
              π = (0.3209, 0.1706, 0.1065, 0.1368, 0.0643, 0.2008)                                                       (17.33)
           So a random surfer will visit site 1 about 32% of the time. We see that node 1 has a higher
           PageRank than nodes 4 or 6, even though they all have the same number of in-links. This is
           because being linked to from an inﬂuential nodehelps increase your PageRank score more than
           being linked to by a less inﬂuential node.
             As a slightly larger example, Figure 17.6(a) shows a web graph, derived from the root of
           harvard.edu. Figure 17.6(b) shows the corresponding PageRank vector.

17.2.4.1   Efficiently computing the PageRank vector
           Let Gij = 1 iff there is a link from j to i. Now imagine performing a random walk on
           this graph, where at every time step, with probability p = 0.85 you follow one of the outlinks
           uniformly at random, and with probability 1 − p you jump to a random node, again chosen
           uniformly at random. If there are no outlinks, you just jump to a random page. (These random
           jumps, including self-transitions, ensure the chain is irreducible (singly connected) and regular.
           Hence we can solve for its unique stationary distribution using eigenvector methods.) This
           deﬁnes the following transition matrix:
                      
                         pGij /cj + δ if cj = 0
               Mij =                                                                                   (17.34)
                         1/n              if cj = 0
           where n is the number of nodes, δ = (1 − p)/n is the probability of jumping from one page
           to another without following a link and cj = i Gij represents the out-degree of page j. (If
           n = 4 · 109 and p = 0.85, then δ = 3.75 · 10−11 .) Here M is a stochastic matrix in which
           columns sum to one. Note that M = AT in our earlier notation.
              We can represent the transition matrix compactly as follows. Deﬁne the diagonal matrix D
           with entries
                     
                        1/cj if cj = 0
              djj =                                                                              (17.35)
                        0      if cj = 0
           17.3. Hidden Markov models                                                                         603


           Deﬁne the vector z with components
                   
                      δ      if cj = 0
             zj =                                                                                          (17.36)
                      1/n if cj = 0
           Then we can rewrite Equation 17.34 as follows:
              M = pGD + 1zT                                                                                (17.37)

           The matrix M is not sparse, but it is a rank one modiﬁcation of a sparse matrix. Most of the
           elements of M are equal to the small constant δ. Obviously these do not need to be stored
           explicitly.
              Our goal is to solve v = Mv, where v = π T . One efficient method to ﬁnd the leading
           eigenvector of a large matrix is known as the power method. This simply consists of repeated
           matrix-vector multiplication, followed by normalization:

              v ∝ Mv = pGDv + 1zT v                                                                        (17.38)

             It is possible to implement the power method without using any matrix multiplications, by
           simply sampling from the transition matrix and counting how often you visit each state. This is
           essentially a Monte Carlo approximation to the sum implied by v = Mv. Applying this to the
           data in Figure 17.6(a) yields the stationary distribution in Figure 17.6(b). This took 13 iterations to
           converge, starting from a uniform distribution. (See also the function pagerankDemo, by Tim
           Davis, for an animation of the algorithm in action, applied to the small web example.) To handle
           changing web structure, we can re-run this algorithm every day or every week, starting v off at
           the old distribution (Langville and Meyer 2006).
             For details on how to perform this Monte Carlo power method in a parallel distributed
           computing environment, see e.g., (Rajaraman and Ullman 2010).

17.2.4.2   Web spam
           PageRank is not foolproof. For example, consider the strategy adopted by JC Penney, a depart-
           ment store in the USA. During the Christmas season of 2010, it planted many links to its home
           page on 1000s of irrelevant web pages, thus increasing its ranking on Google’s search engine
           (Segal 2011). Even though each of these source pages has low PageRank, there were so many
           of them that their effect added up. Businesses call this search engine optimization; Google
           calls it web spam. When Google was notiﬁed of this scam (by the New York Times), it manually
           downweighted JC Penney, since such behavior violates Google’s code of conduct. The result
           was that JC Penney dropped from rank 1 to rank 65, essentially making it disappear from view.
           Automatically detecting such scams relies on various techniques which are beyond the scope of
           this chapter.

   17.3    Hidden Markov models
           As we mentioned in Section 10.2.2, a hidden Markov model or HMM consists of a discrete-time,
           discrete-state Markov chain, with hidden states zt ∈ {1, . . . , K}, plus an observation model
         604                                                                           Chapter 17. Markov and hidden Markov models

                  20
                                                                                         3

                                                                                        2.8
                  15
                                                          12                            2.6
                                          13
                                                                                        2.4
                  10                                           9
                                                10                                      2.2
                                                     11            14
                   5          7                                                          2
                                    17                                                  1.8
                              625
                           3 16      4
                   0                                                    8    18         1.6
                          15                                            20
                                                                                        1.4
                  −5          1                                              19         1.2

                                                                                         1
                 −10
                  −20   −15   −10    −5          0        5             10   15   20          2     4   6   8   10    12    14   16   18   20

                                               (a)                                                              (b)

         Figure 17.7 (a) Some 2d data sampled from a 3 state HMM. Each state emits from a 2d Gaussian. (b) The
         hidden state sequence. Based on Figure 13.8 of (Bishop 2006b). Figure generated by hmmLillypadDemo.



         p(xt |zt ). The corresponding joint distribution has the form
                                                                                  T            
                                                                  T                
            p(z1:T , x1:T ) = p(z1:T )p(x1:T |z1:T ) = p(z1 )        p(zt |zt−1 )      p(xt |zt )                                               (17.39)
                                                                                              t=2                          t=1

         The observations in an HMM can be discrete or continuous. If they are discrete, it is common
         for the observation model to be an observation matrix:

            p(xt = l|zt = k, θ) = B(k, l)                                                                                                       (17.40)

         If the observations are continuous, it is common for the observation model to be a conditional
         Gaussian:

            p(xt |zt = k, θ) = N (xt |μk , Σk )                                                                                                 (17.41)
         Figure 17.7 shows an example where we have 3 states, each of which emits a different Gaussian.
         The resulting model is similar to a Gaussian mixture model, except the cluster membership
         has Markovian dynamics. (Indeed, HMMs are sometimes called Markov switching models
         (Fruhwirth-Schnatter 2007).) We see that we tend to get multiple observations in the same
         location, and then a sudden jump to a new cluster.

17.3.1   Applications of HMMs
         HMMs can be used as black-box density models on sequences. They have the advantage
         over Markov models in that they can represent long-range dependencies between observations,
         mediated via the latent variables. In particular, note that they do not assume the Markov
         property holds for the observations themselves. Such black-box models are useful for time-
         series prediction (Fraser 2008). They can also be used to deﬁne class-conditional densities
         inside a generative classiﬁer.
            However, it is more common to imbue the hidden states with some desired meaning, and to
         then try to estimate the hidden states from the observations, i.e., to compute p(zt |x1:t ) if we are
17.3. Hidden Markov models                                                                         605


                                            x     x         .   .   .   x
                            bat             A     G         -   -   -   C
                            rat             A     -         A   G   -   C
                            cat             A     G         -   A   A   -
                            gnat            -     -         A   A   A   C
                            goat            A     G         -   -   -   C
                                            1     2         .   .   .   3
                                                  (a)



                                  D                D                D


                  I                I                    I           I


                Begin             M                M                M               End


                  0                1                2               3                4
                                                  (b)

Figure 17.8 (a) Some DNA sequences. (b) State transition diagram for a proﬁle HMM. Source: Figure 5.7
of (Durbin et al. 1998). Used with kind permission of Richard Durbin.



in an online scenario, or p(zt |x1:T ) if we are in an offline scenario (see Section 17.4.1 for further
discussion of the differences between these two approaches). Below we give some examples of
applications which use HMMs in this way:

• Automatic speech recognition. Here xt represents features extracted from the speech
  signal, and zt represents the word that is being spoken. The transition model p(zt |zt−1 )
  represents the language model, and the observation model p(xt |zt ) represents the acoustic
  model. See e.g., (Jelinek 1997; Jurafsky and Martin 2008) for details.
• Activity recognition. Here xt represents features extracted from a video frame, and zt is
  the class of activity the person is engaged in (e.g., running, walking, sitting, etc.) See e.g.,
  (Szeliski 2010) for details.
• Part of speech tagging. Here xt represents a word, and zt represents its part of speech
  (noun, verb, adjective, etc.) See Section 19.6.2.1 for more information on POS tagging and
         606                                               Chapter 17. Markov and hidden Markov models


           related tasks.
         • Gene ﬁnding. Here xt represents the DNA nucleotides (A,C,G,T), and zt represents whether
           we are inside a gene-coding region or not. See e.g., (Schweikerta et al. 2009) for details.
         • Protein sequence alignment. Here xt represents an amino acid, and zt represents whether
           this matches the latent consensus sequence at this location. This model is called a proﬁle
           HMM and is illustrated in Figure 17.8. The HMM has 3 states, called match, insert and delete.
           If zt is a match state, then xt is equal to the t’th value of the consensus. If zt is an insert
           state, then xt is generated from a uniform distribution that is unrelated to the consensus
           sequence. If zt is a delete state, then xt = −. In this way, we can generate noisy copies of
           the consensus sequence of different lengths. In Figure 17.8(a), the consensus is “AGC”, and
           we see various versions of this below. A path through the state transition diagram, shown
           in Figure 17.8(b), speciﬁes how to align a sequence to the consensus, e.g., for the gnat, the
           most probable path is D, D, I, I, I, M . This means we delete the A and G parts of the
           consensus sequence, we insert 3 A’s, and then we match the ﬁnal C. We can estimate the
           model parameters by counting the number of such transitions, and the number of emissions
           from each kind of state, as shown in Figure 17.8(c). See Section 17.5 for more information on
           training an HMM, and (Durbin et al. 1998) for details on proﬁle HMMs.

           Note that for some of these tasks, conditional random ﬁelds, which are essentially discrimi-
         native versions of HMMs, may be more suitable; see Chapter 19 for details.

 17.4    Inference in HMMs
         We now discuss how to infer the hidden state sequence of an HMM, assuming the parameters
         are known. Exactly the same algorithms apply to other chain-structured graphical models, such
         as chain CRFs (see Section 19.6.1). In Chapter 20, we generalize these methods to arbitrary
         graphs. And in Section 17.5.2, we show how we can use the output of inference in the context
         of parameter estimation.

17.4.1   Types of inference problems for temporal models
         There are several different kinds of inferential tasks for an HMM (and SSM in general). To
         illustrate the differences, we will consider an example called the occasionally dishonest casino,
         from (Durbin et al. 1998). In this model, xt ∈ {1, 2, . . . , 6} represents which dice face shows
         up, and zt represents the identity of the dice that is being used. Most of the time the casino
         uses a fair dice, z = 1, but occasionally it switches to a loaded dice, z = 2, for a short period.
         If z = 1 the observation distribution is a uniform multinoulli over the symbols {1, . . . , 6}. If
         z = 2, the observation distribution is skewed towards face 6 (see Figure 17.9). If we sample from
         this model, we may observe data such as the following:

                                    Listing 17.1 Example output of casinoDemo
         Rolls :    664153216162115234653214356634261655234232315142464156663246
         Die :      LLLLLLLLLLLLLLFFFFFFLLLLLLLLLLLLLLFFFFFFFFFFFFFFFFFFLLLLLLLL

            Here “rolls” refers to the observed symbol and “die” refers to the hidden state (L is loaded and
         F is fair). Thus we see that the model generates a sequence of symbols, but the statistics of the
17.4. Inference in HMMs                                                                                                                                                                                                             607



                                                                                                                                                                         


                                                                                                                                   
                                                                                                         
                                                                                                                                   
                                                                                                                                   
                                                                                                                               
                                                                                                                                   
                                                                                                                                   




Figure 17.9 An HMM for the occasionally dishonest casino. The blue arrows visualize the state transition
diagram A. Based on (Durbin et al. 1998, p54).

                                     filtered                                                                  smoothed                                                                                   Viterbi
               1                                                                          1                                                                                         1




                                                                                                                                                     MAP state (0=fair,1=loaded)
  p(loaded)




                                                                             p(loaded)




              0.5                                                                        0.5                                                                                       0.5




               0                                                                          0                                                                                         0
                    0   50   100        150      200   250   300                               0   50    100        150      200   250   300                                             0   50   100        150      200   250   300
                                   roll number                                                                 roll number                                                                              roll number



                                   (a)                                                                         (b)                                                                                      (c)

Figure 17.10 Inference in the dishonest casino. Vertical gray bars denote the samples that we generated
using a loaded die. (a) Filtered estimate of probability of using a loaded dice. (b) Smoothed estimates. (c)
MAP trajectory. Figure generated by casinoDemo.



distribution changes abruptly every now and then. In a typical application, we just see the rolls
and want to infer which dice is being used. But there are different kinds of inference, which we
summarize below.

• Filtering means to compute the belief state p(zt |x1:t ) online, or recursively, as the data
  streams in. This is called “ﬁltering” because it reduces the noise more than simply estimating
  the hidden state using just the current estimate, p(zt |xt ). We will see below that we can
  perform ﬁltering by simply applying Bayes rule in a sequential fashion. See Figure 17.10(a) for
  an example.
• Smoothing means to compute p(zt |x1:T ) offline, given all the evidence. See Figure 17.10(b)
  for an example. By conditioning on past and future data, our uncertainty will be signiﬁcantly
  reduced. To understand this intuitively, consider a detective trying to ﬁgure out who com-
  mitted a crime. As he moves through the crime scene, his uncertainty is high until he ﬁnds
  the key clue; then he has an “aha” moment, his uncertainty is reduced, and all the previously
  confusing observations are, in hindsight, easy to explain.
608                                                   Chapter 17. Markov and hidden Markov models


                                                                 W
                ILOWHULQJ


                                                                 W
              SUHGLFWLRQ
                                                                     K

                                                                 W
              IL[HGODJ
             VPRRWKLQJ
                                                            O
              IL[HGODJ                                         W                        7
             VPRRWKLQJ
                RIIOLQH


Figure 17.11 The main kinds of inference for state-space models. The shaded region is the interval for
which we have data. The arrow represents the time step at which we want to perform inference. t is the
current time, T is the sequence length,  is the lag and h is the prediction horizon. See text for details.


• Fixed lag smoothing is an interesting compromise between online and offline estimation; it
  involves computing p(zt− |x1:t ), where  > 0 is called the lag. This gives better performance
  than ﬁltering, but incurs a slight delay. By changing the size of the lag, one can trade off
  accuracy vs delay.
• Prediction Instead of predicting the past given the future, as in ﬁxed lag smoothing, we
  might want to predict the future given the past, i.e., to compute p(zt+h |x1:t ), where h > 0
  is called the prediction horizon. For example, suppose h = 2; then we have
                          
      p(zt+2 |x1:t ) =            p(zt+2 |zt+1 )p(zt+1 |zt )p(zt |x1:t )                    (17.42)
                            zt+1 zt

   It is straightforward to perform this computation: we just power up the transition matrix and
   apply it to the current belief state. The quantity p(zt+h |x1:t ) is a prediction about future
   hidden states; it can be converted into a prediction about future observations using
                        
       p(xt+h |x1:t ) =      p(xt+h |zt+h )p(zt+h |x1:t )                                  (17.43)
                         zt+h

  This is the posterior predictive density, and can be used for time-series forecasting (see
  (Fraser 2008) for details). See Figure 17.11 for a sketch of the relationship between ﬁltering,
  smoothing, and prediction.
• MAP estimation This means computing arg maxz1:T p(z1:T |x1:T ), which is a most prob-
  able state sequence. In the context of HMMs, this is known as Viterbi decoding (see
         17.4. Inference in HMMs                                                                        609


           Section 17.4.4). Figure 17.10 illustrates the difference between ﬁltering, smoothing and MAP
           decoding for the occasionally dishonest casino HMM. We see that the smoothed (offline)
           estimate is indeed smoother than the ﬁltered (online) estimate. If we threshold the estimates
           at 0.5 and compare to the true sequence, we ﬁnd that the ﬁltered method makes 71 errors
           out of 300, and the smoothed method makes 49/300; the MAP path makes 60/300 errors. It is
           not surprising that smoothing makes fewer errors than Viterbi, since the optimal way to min-
           imize bit-error rate is to threshold the posterior marginals (see Section 5.7.1.1). Nevertheless,
           for some applications, we may prefer the Viterbi decoding, as we discuss in Section 17.4.4.
         • Posterior samples If there is more than one plausible interpretation of the data, it can be
           useful to sample from the posterior, z1:T ∼ p(z1:T |x1:T ). These sample paths contain much
           more information than the sequence of marginals computed by smoothing.
         • Probability of the evidence We can compute the        probability of the evidence, p(x1:T ),
           by summing up over all hidden paths, p(x1:T ) = z1:T p(z1:T , x1:T ). This can be used to
           classify sequences (e.g., if the HMM is used as a class conditional density), for model-based
           clustering, for anomaly detection, etc.

17.4.2   The forwards algorithm
         We now describe how to recursively compute the ﬁltered marginals, p(zt |x1:t ) in an HMM.
           The algorithm has two steps. First comes the prediction step, in which we compute the
         one-step-ahead predictive density; this acts as the new prior for time t:
                                  
            p(zt = j|x1:t−1 ) =       p(zt = j|zt−1 = i)p(zt−1 = i|x1:t−1 )                      (17.44)
                                      i

         Next comes the update step, in which we absorb the observed data from time t using Bayes
         rule:

            αt (j)      p(zt = j|x1:t ) = p(zt = j|xt , x1:t−1 )                                     (17.45)
                          1
                     =      p(xt |zt = j,  )p(zt = j|x1:t−1 )
                                          x1:t−1                                                     (17.46)
                         Zt
         where the normalization constant is given by
                                    
           Zt  p(xt |x1:t−1 ) =        p(zt = j|x1:t−1 )p(xt |zt = j)                                (17.47)
                                          j

         This process is known as the predict-update cycle. The distribution p(zt |x1:t ) is called the
         (ﬁltered) belief state at time t, and is a vector of K numbers, often denoted by αt . In matrix-
         vector notation, we can write the update in the following simple form:

            αt ∝ ψ t  (ΨT αt−1 )                                                                    (17.48)

         where ψt (j) = p(xt |zt = j) is the local evidence at time t, Ψ(i, j) = p(zt = j|zt−1 = i) is
         the transition matrix, and u  v is the Hadamard product, representing elementwise vector
         multiplication. See Algorithm 6 for the pseudo-code, and hmmFilter for some Matlab code.
           610                                                         Chapter 17. Markov and hidden Markov models


             In addition to computing the hidden states, we can use this algorithm to compute the log
           probability of the evidence:

                                    
                                    T                            
                                                                 T
                 log p(x1:T |θ) =         log p(xt |x1:t−1 ) =         log Zt                               (17.49)
                                    t=1                          t=1

           (We need to work in the log domain to avoid numerical underﬂow.)

            Algorithm 17.1: Forwards algorithm
           1   Input: Transition matrices ψ(i, j) = p(zt = j|zt−1 = i), local evidence vectors
               ψt (j) = p(xt |zt = j), initial state distribution π(j) = p(z1 = j);
           2   [α1 , Z1 ] = normalize(ψ 1  π) ;
           3   for t = 2 : T do
           4        [αt , Zt ] = normalize(ψ t  (ΨT αt−1 )) ;
                                                  
           5   Return α1:T and log p(y1:T ) = t log Zt ;
                                                             
           6   Subroutine: [v, Z] = normalize(u) : Z = j uj ; vj = uj /Z;



 17.4.3    The forwards-backwards algorithm
           In Section 17.4.2, we explained how to compute the ﬁltered marginals p(zt = j|x1:t ) using
           online inference. We now discuss how to compute the smoothed marginals, p(zt = j|x1:T ),
           using offline inference.

17.4.3.1   Basic idea
           The key decomposition relies on the fact that we can break the chain into two parts, the past
           and the future, by conditioning on zt :

                 p(zt = j|x1:T ) ∝ p(zt = j, xt+1:T |x1:t ) ∝ p(zt = j|x1:t )p(xt+1:T |zt = j, )
                                                                                               x1:t         (17.50)

           Let αt (j)  p(zt = j|x1:t ) be the ﬁltered belief state as before. Also, deﬁne

                 βt (j)  p(xt+1:T |zt = j)                                                                 (17.51)

           as the conditional likelihood of future evidence given that the hidden state at time t is j.
            that this is not a probability distribution over states, since it does not need to satisfy
           (Note
             j βt (j) = 1.) Finally, deﬁne

                 γt (j)  p(zt = j|x1:T )                                                                   (17.52)

           as the desired smoothed posterior marginal. From Equation 17.50, we have

                 γt (j) ∝ αt (j)βt (j)                                                                      (17.53)
           17.4. Inference in HMMs                                                                        611


             We have already described how to recursively compute the α’s in a left-to-right fashion in
           Section 17.4.2. We now describe how to recursively compute the β’s in a right-to-left fashion. If
           we have already computed βt , we can compute βt−1 as follows:
              βt−1 (i)    =      p(xt:T |zt−1 = i)                                                     (17.54)
                                 
                          =         p(zt = j, xt , xt+1:T |zt−1 = i)                                   (17.55)
                                   j
                                 
                          =            p(xt+1:T |zt = j,  
                                                         zt−1 =i, 
                                                                   t )p(zt = j, xt |zt−1 = i)
                                                                   x                                   (17.56)
                                   j
                                 
                          =            p(xt+1:T |zt = j)p(xt |zt = j,  
                                                                      zt−1 =i)p(zt = j|zt−1 = i)      (17.57)
                                   j
                                 
                          =            βt (j)ψt (j)ψ(i, j)                                             (17.58)
                                   j

           We can write the resulting equation in matrix-vector form as
              β t−1 = Ψ(ψ t  β t )                                                                    (17.59)
           The base case is
              βT (i) = p(xT +1:T |zT = i) = p(∅|zT = i) = 1                                            (17.60)
           which is the probability of a non-event.
              Having computed the forwards and backwards messages, we can combine them to compute
           γt (j) ∝ αt (j)βt (j). The overall algorithm is known as the forwards-backwards algorithm.
           The pseudo code is very similar to the forwards case; see hmmFwdBack for an implementation.
              We can think of this algorithm as passing “messages” from left to right, and then from right
           to left, and then combining them at each node. We will generalize this intuition in Section 20.2,
           when we discuss belief propagation.

17.4.3.2   Two-slice smoothed marginals
           When we estimate the parameters of the transition matrix using EM (see Section 17.5), we will
           need to compute the expected number of transitions from state i to state j:
                      
                      T −1                                          
                                                                    T −1
              Nij =           E [I(zt = i, zt+1 = j)|x1:T ] =              p(zt = i, zt+1 = j|x1:T )   (17.61)
                      t=1                                           t=1

           The term p(zt = i, zt+1 = j|x1:T ) is called a (smoothed) two-slice marginal, and can be
           computed as follows
              ξt,t+1 (i, j)           p(zt = i, zt+1 = j|x1:T )                                       (17.62)
                               ∝       p(zt |x1:t )p(zt+1 |zt , xt+1:T )                               (17.63)
                               ∝       p(zt |x1:t )p(xt+1:T |zt , zt+1 )p(zt+1 |zt )                   (17.64)
                               ∝       p(zt |x1:t )p(xt+1 |zt+1 )p(xt+2:T |zt+1 )p(zt+1 |zt )          (17.65)
                               =       αt (i)φt+1 (j)βt+1 (j)ψ(i, j)                                   (17.66)
           612                                                         Chapter 17. Markov and hidden Markov models


           In matrix-vector form, we have
                 ξ t,t+1 ∝ Ψ  (αt (φt+1  β t+1 )T )                                                       (17.67)
           For another interpretation of these equations, see Section 20.2.4.3.

17.4.3.3   Time and space complexity
           It is clear that a straightforward implementation of FB takes O(K 2 T ) time, since we must
           perform a K × K matrix multiplication at each step. For some applications, such as speech
           recognition, K is very large, so the O(K 2 ) term becomes prohibitive. Fortunately, if the
           transition matrix is sparse, we can reduce this substantially. For example, in a left-to-right
           transition matrix, the algorithm takes O(T K) time.
              In some cases, we can exploit special properties of the state space, even if the transition
           matrix is not sparse. In particular, suppose the states represent a discretization of an underlying
           continuous state-space, and the transition matrix has the form ψ(i, j) ∝ exp(−σ 2 |zi − zj |),
           where zi is the continuous vector represented by state i. Then one can implement the forwards-
           backwards algorithm in O(T K log K) time. This is very useful for models with large state
           spaces. See Section 22.2.6.1 for details.
              In some cases, the bottleneck is memory, not time. The expected sufficient statistics needed
           by EM are t ξt−1,t (i, j); this takes constant space (independent of T ); however, to compute
           them, we need O(KT ) working space, since we must store αt for t = 1, . . . , T until we do the
           backwards pass. It is possible to devise a simple divide-and-conquer algorithm that reduces the
           space complexity from O(KT ) to O(K log T ) at the cost of increasing the running time from
           O(K 2 T ) to O(K 2 T log T ): see (Binder et al. 1997; Zweig and Padmanabhan 2000) for details.

 17.4.4    The Viterbi algorithm
           The Viterbi algorithm (Viterbi 1967) can be used to compute the most probable sequence of
           states in a chain-structured graphical model, i.e., it can compute
                 z∗ = arg max p(z1:T |x1:T )                                                                (17.68)
                            z1:T

           This is equivalent to computing a shortest path through the trellis diagram in Figure 17.12,
           where the nodes are possible states at each time step, and the node and edge weights are log
           probabilities. That is, the weight of a path z1 , z2 , . . . , zT is given by
                                                 
                                                 T
                 log π1 (z1 ) + log φ1 (z1 ) +         [log ψ(zt−1 , zt ) + log φt (zt )]                   (17.69)
                                                 t=2


17.4.4.1   MAP vs MPE
           Before discussing how the algorithm works, let us make one important remark: the (jointly) most
           probable sequence of states is not necessarily the same as the sequence of (marginally) most probable
           states. The former is given by Equation 17.68, and is what Viterbi computes, whereas the latter is
           given by the maximizer of the posterior marginals or MPM:
                 ẑ = (arg max p(z1 |x1:T ), . . . , arg max p(zT |x1:T ))                                  (17.70)
                            z1                              zT
17.4. Inference in HMMs                                                                               613




                             1                                            
                                                
                                                
                                                

                                                                         




                     67$7(
                                                                         

                                                                         


                                                                                 7
                                                         2%6(59$7,21



        Figure 17.12 The trellis of states vs time for a Markov chain. Based on (Rabiner 1989).


   As a simple example of the difference, consider a chain with two time steps, deﬁning the
following joint:

                                                      X1 = 0     X1 = 1
                                         X2 = 0        0.04       0.3             0.34
                                         X2 = 1        0.36       0.3             0.66
                                                        0.4       0.6

   The joint MAP estimate is (0, 1), whereas the sequence of marginal MPMs is (1, 1).
   The advantage of the joint MAP estimate is that is is always globally consistent. For example,
suppose we are performing speech recognition and someones says “recognize speech”. This
could be mis-heard as “wreck a nice beach”. Locally it may appear that “beach” is the most
probable interpretation of that particular window of sound, but when we add the requirement
that the data be explained by a single linguistically plausible path, this interpretation becomes
less likely.
   On the other hand, the MPM estimates can be more robust (Marroquin et al. 1987). To see
why, note that in Viterbi, when we estimate zt , we “max out” the other variables:
   zt∗ = arg max             max         p(z1:t−1 , zt , zt+1:T |x1:T )                             (17.71)
               zt    z1:t−1 ,zt+1:T

whereas we when we use forwards-backwards, we sum out the other variables:
                  
  p(zt |x1:T ) =          p(z1:t−1 , zt , zt+1:T |x1:T )                                           (17.72)
                    z1:t−1 ,zt+1:T

This makes the MPM in Equation 17.70 more robust, since we estimate each node averaging over
its neighbors, rather than conditioning on a speciﬁc value of its neighbors.6
6. In general, we may want to mix max and sum. For example, consider a joint distribution where we observe
           614                                                          Chapter 17. Markov and hidden Markov models


17.4.4.2   Details of the algorithm
           It is tempting to think that we can implement Viterbi by just replacing the sum-operator in
           forwards-backwards with a max-operator. The former is called the sum-product, and the
           latter the max-product algorithm. If there is a unique mode, running max-product and then
           computing using Equation 17.70 will give the same result as using Equation 17.68 (Weiss and
           Freeman 2001b), but in general, it can lead to incorrect results if there are multiple equally
           probably joint assignments. The reasons is that each node breaks ties independently and hence
           may do so in a manner that is inconsistent with its neighbors. The Viterbi algorithm is therefore
           not quite as simple as replacing sum with max. In particular, the forwards pass does use max-
           product, but the backwards pass uses a traceback procedure to recover the most probable path
           through the trellis of states. Essentially, once zt picks its most probable state, the previous nodes
           condition on this event, and therefore they will break ties consistently.
              In more detail, deﬁne
                 δt (j)          max        p(z1:t−1 , zt = j|x1:t )                                                       (17.73)
                              z1 ,...,zt−1

           This is the probability of ending up in state j at time t, given that we take the most probable
           path. The key insight is that the most probable path to state j at time t must consist of the
           most probable path to some other state i at time t − 1, followed by a transition from i to j.
           Hence
                 δt (j)   =   max δt−1 (i)ψ(i, j)φt (j)                                                                     (17.74)
                                  i

           We also keep track of the most likely previous state, for each possible state that we end up in:
                 at (j)   =   argmax δt−1 (i)ψ(i, j)φt (j)                                                                  (17.75)
                                      i

           That is, at (j) tells us the most likely previous state on the most probable path to zt = j. We
           initialize by setting
                 δ1 (j) = πj φ1 (j)                                                                                         (17.76)
           and we terminate by computing the most probable ﬁnal state zT∗ :
                 zT∗ = arg max δT (i)                                                                                       (17.77)
                              i

           We can then compute the most probable sequence of states using traceback:
                              ∗
                 zt∗ = at+1 (zt+1 )                                                                                         (17.78)
              As usual, we have to worry about numerical underﬂow. We are free to normalize the δ t terms
           at each step; this will not affect the maximum. However, unlike the forwards-backwards case,

           v and we want                                                                                                       ∗
                        to query q; let n be the remaining nuisance variables. We deﬁne the MAP estimate as xq =
           arg maxxq xn p(xq , xn |xv ), where we max over xq and sum over xn . By contrast, we deﬁne the MPE or
           most probable explanation as (x∗q , x∗n ) = arg maxxq ,xn p(xq , xn |xv ), where we max over both xq and xn . This
           terminology is due to (Pearl 1988), although it is not widely used outside the Bayes net literatire. Obviously MAP=MPE if
           n = ∅. However, if n = ∅, then summing out the nuisance variables can give different results than maxing them out.
           Summing out nuisance variables is more sensible, but computationally harder, because of the need to combine max and
           sum operations (Lerner and Parr 2001).
           17.4. Inference in HMMs                                                                                                                  615


                                                                                            
                                                                 6                     6                       6                      6
                                                                                                                              




                                                                                       

                    &                      
                                                                                                                     
                    &                                     6
                                                                
                                                                                        6
                                                                                       
                                                                                                                  6
                                                                                                                
                                                                                                                                         6
                                                                                                                                         

                    &                    
                    &                                                                                    

                    &                      
                                                                                                                             
                                                                 6                    6                         6                      6
                    &                                                                                                 

                    &                       

                                   (a)                                                                    (b)

           Figure 17.13 Illustration of Viterbi decoding in a simple HMM for speech recognition. (a) A 3-state HMM
           for a single phone. We are visualizing the state transition diagram. We assume the observations have been
           vector quantized into 7 possible symbols, C1 , . . . , C7 . Each state z1 , z2 , z3 has a different distribution over
           these symbols. Based on Figure 15.20 of (Russell and Norvig 2002). (b) Illustration of the Viterbi algorithm
           applied to this model, with data sequence C1, C3, C4, C6. The columns represent time, and the rows
           represent states. An arrow from state i at t − 1 to state j at t is annotated with two numbers: the ﬁrst
           is the probability of the i → j transition, and the second is the probability of generating observation xt
           from state j. The bold lines/ circles represent the most probable sequence of states. Based on Figure 24.27
           of (Russell and Norvig 1995).



                       easilywork in the log domain. The key difference is that log max = max log,
           we can also 
           whereas log   =    log. Hence we can use

              log δt (j)          max log p(z1:t−1 , zt = j|x1:t )                                                                              (17.79)
                                   z1:t−1

                            =      max log δt−1 (i) + log ψ(i, j) + log φt (j)                                                                   (17.80)
                                     i

           In the case of Gaussian observation models, this can result in a signiﬁcant (constant factor)
           speedup, since computing log p(xt |zt ) can be much faster than computing p(xt |zt ) for a high-
           dimensional Gaussian. This is one reason why the Viterbi algorithm is widely used in the E step
           of EM (Section 17.5.2) when training large speech recognition systems based on HMMs.

17.4.4.3   Example
           Figure 17.13 gives a worked example of the Viterbi algorithm, based on (Russell et al. 1995).
           Suppose we observe the discrete sequence of observations x1:4 = (C1 , C3 , C4 , C6 ), representing
           codebook entries in a vector-quantized version of a speech signal. The model starts in state
           z1 . The probability of generating C1 in z1 is 0.5, so we have δ1 (1) = 0.5, and δ1 (i) = 0 for
           all other states. Next we can self-transition to z1 with probability 0.3, or transition to z2 with
           proabability 0.7. If we end up in z1 , the probability of generating C3 is 0.3; if we end up in z2 ,
           616                                                  Chapter 17. Markov and hidden Markov models


           the probability of generating C3 is 0.2. Hence we have

                 δ2 (1)   =   δ1 (1)ψ(1, 1)φ2 (1) = 0.5 · 0.3 · 0.3 = 0.045                                 (17.81)
                 δ2 (2)   =   δ1 (1)ψ(1, 2)φ2 (2) = 0.5 · 0.7 · 0.2 = 0.07                                  (17.82)

           Thus state 2 is more probable at t = 2; see the second column of Figure 17.13(b). In time step
           3, we see that there are two paths into z2 , from z1 and from z2 . The bold arrow indicates that
           the latter is more probable. Hence this is the only one we have to remember. The algorithm
           continues in this way until we have reached the end of the sequence. One we have reached the
           end, we can follow the black arrows back to recover the MAP path (which is 1,2,2,3).

17.4.4.4   Time and space complexity
           The time complexity of Viterbi is clearly O(K 2 T ) in general, and the space complexity
           is O(KT ), both the same as forwards-backwards. If the transition matrix has the form
           ψ(i, j) ∝ exp(−σ 2 ||zi − zj ||2 ), where zi is the continuous vector represented by state i, we
           can implement Viterbi in O(T K) time, instead of O(T K log K) needed by forwards-backwards.
           See Section 22.2.6.1 for details.

17.4.4.5   N-best list
           The Viterbi algorithm returns one of the most probable paths. It can be extended to return the
           top N paths (Schwarz and Chow 1990; Nilsson and Goldberger 2001). This is called the N-best
           list. Once can then use a discriminative method to rerank the paths based on global features
           derived from the fully observed state sequence (as well as the visible features). This technique
           is widely used in speech recognition. For example, consider the sentence “recognize speech”. It
           is possible that the most probable interpretation by the system of this acoustic signal is “wreck
           a nice speech”, or maybe “wreck a nice beach”. Maybe the correct interpretation is much lower
           down on the list. However, by using a re-ranking system, we may be able to improve the score
           of the correct interpretation based on a more global context.
              One problem with the N -best list is that often the top N paths are very similar to each other,
           rather than representing qualitatively different interpretations of the data. Instead we might want
           to generate a more diverse set of paths to more accurately represent posterior uncertainty. One
           way to do this is to sample paths from the posterior, as we discuss below. For some other ways
           to generate diverse MAP estimates, see e.g., (Yadollahpour et al. 2011; Kulesza and Taskar 2011).

 17.4.5    Forwards ﬁltering, backwards sampling
           It is often useful to sample paths from the posterior:
                 zs1:T ∼ p(z1:T |x1:T )                                                                     (17.83)

           We can do this is as follow: run forwards backwards, to compute the two-slice smoothed posteri-
           ors, p(zt−1,t |x1:T ); next compute the conditionals p(zt |zt−1 , x1:T ) by normalizing; sample from
                                        ∗
           the initial pair of states, z1,2                                                           ∗
                                            ∼ p(z1,2 |x1:T ); ﬁnally, recursively sample zt∗ ∼ p(zt |zt−1 , x1:T ).
              Note that the above solution requires a forwards-backwards pass, and then an additional
           forwards sampling pass. An alternative is to do the forwards pass, and then perform sampling
         17.5. Learning for HMMs                                                                           617


         in the backwards pass. The key insight into how to do this is that we can write the joint from
         right to left using
                                              1
                                              
            p(z1:T |x1:T ) = p(zT |x1:T )            p(zt |zt+1 , x1:T )                                (17.84)
                                            t=T −1

         We can then sample zt given future sampled states using
            zts   ∼     p(zt |zt+1:T , x1:T ) = p(zt |zt+1 ,  , x1:t , 
                                                             zt+2:T         ) = p(zt |zt+1
                                                                          xt+1:T         s
                                                                                             , x1:t )   (17.85)
         The sampling distribution is given by
            p(zt = i|zt+1 = j, x1:t )     =    p(zt |zt+1 , x1:t ,  )
                                                                     
                                                                   xt+1                                 (17.86)
                                               p(zt+1 , zt |x1:t+1 )
                                          =                                                             (17.87)
                                                 p(zt+1 |x1:t+1 )
                                               p(xt+1 |zt+1 ,       )p(zt+1 , zt |x1:t )
                                                                    x1:t
                                                               zt , 
                                          ∝                                                             (17.88)
                                                             p(zt+1 |x1:t+1 )
                                               p(xt+1 |zt+1 )p(zt+1 |zt ,   )p(zt |x1:t )
                                                                          x1:t
                                          =                                                             (17.89)
                                                              p(zt+1 |x1:t+1 )
                                               φt+1 (j)ψ(i, j)αt (i)
                                          =                                                             (17.90)
                                                      αt+1 (j)
         The base case is
            zTs ∼ p(zT = i|x1:T ) = αT (i)                                                              (17.91)
            This algorithm forms the basis of blocked-Gibbs sampling methods for parameter inference,
         as we will see below.

 17.5    Learning for HMMs
         We now discuss how to estimate the parameters θ = (π, A, B), where π(i) = p(z1 = i) is
         the initial state distribution, A(i, j) = p(zt = j|zt−1 = i) is the transition matrix, and B are
         the parameters of the class-conditional densities p(xt |zt = j). We ﬁrst consider the case where
         z1:T is observed in the training set, and then the harder case where z1:T is hidden.

17.5.1   Training with fully observed data
         If we observe the hidden state sequences, we can compute the MLEs for A and π exactly as in
         Section 17.2.2.1. If we use a conjugate prior, we can also easily compute the posterior.
            The details on how to estimate B depend on the form of the observation model. The
         situation is identical to ﬁtting a generative classiﬁer. For example, if each state has a multinoulli
         distribution associated with it, with parameters Bjl = p(Xt = l|zt = j), where l ∈ {1, . . . , L}
         represents the observed symbol, the MLE is given by
                       X
                      Njl         N  Ti
            B̂jl =           X
                          , Njl          I(zi,t = j, xi,t = l)                                         (17.92)
                      Nj          i=1 t=1
           618                                                           Chapter 17. Markov and hidden Markov models


           This result is quite intuitive: we simply add up the number of times we are in state j and we
           see a symbol l, and divide by the number of times we are in state j.
              Similarly, if each state has a Gaussian distribution associated with it, we have (from Sec-
           tion 4.2.4) the following MLEs:

                           xk         (xx)Tk − Nk μ̂k μ̂Tk
                 μ̂k =        , Σ̂k =                                                                         (17.93)
                           Nk                Nk
           where the sufficient statistics are given by
                                   N 
                                    Ti
                     xk                     I(zi,t = k)xi,t                                                  (17.94)
                                   i=1 t=1
                                   N 
                                    Ti
                 (xx)Tk                     I(zi,t = k)xi,t xTi,t                                            (17.95)
                                   i=1 t=1

           Analogous results can be derived for other kinds of distributions. One can also easily extend all
           of these results to compute MAP estimates, or even full posteriors over the parameters.

 17.5.2    EM for HMMs (the Baum-Welch algorithm)
           If the zt variables are not observed, we are in a situation analogous to ﬁtting a mixture model.
           The most common approach is to use the EM algorithm to ﬁnd the MLE or MAP parameters,
           although of course one could use other gradient-based methods (see e.g., (Baldi and Chauvin
           1994)). In this Section, we derive the EM algorithm. When applied to HMMs, this is also known
           as the Baum-Welch algorithm (Baum et al. 1970).

17.5.2.1   E step
           It is straightforward to show that the expected complete data log likelihood is given by
                                       
                                       K
                                                           K 
                                                             K
                 Q(θ, θ old )      =         E Nk1 log πk +     E [Njk ] log Ajk                              (17.96)
                                       k=1                         j=1 k=1
                                           N 
                                            Ti 
                                                K
                                       +                 p(zt = k|xi , θ old ) log p(xi,t |φk )               (17.97)
                                           i=1 t=1 k=1

           where the expected counts are given by

                                  
                                   N
                 E   Nk1       =          p(zi1 = k|xi , θ old )                                              (17.98)
                                    i=1
                                   N 
                                    Ti
                 E [Njk ]      =              p(zi,t−1 = j, zi,t = k|xi , θ old )                             (17.99)
                                    i=1 t=2
                                   N 
                                    Ti
                  E [Nj ]      =              p(zi,t = j|xi , θ old )                                        (17.100)
                                    i=1 t=1
           17.5. Learning for HMMs                                                                      619


           These expected sufficient statistics can be computed by running the forwards-backwards algo-
           rithm on each sequence. In particular, this algorithm computes the following smoothed node
           and edge marginals:
                γi,t (j)               p(zt = j|xi,1:Ti , θ)                                       (17.101)
              ξi,t (j, k)              p(zt−1 = j, zt = k|xi,1:Ti , θ)                             (17.102)

17.5.2.2   M step
           Based on Section 11.3, we have that the M step for A and π is to just normalize the expected
           counts:
                                                  
                       E [Njk ]             E Nk1
              Âjk =               , π̂k =                                                      (17.103)
                       k E [Njk ]            N
                                  


           This result is quite intuitive: we simply add up the expected number of transitions from j to k,
           and divide by the expected number of times we transition from j to anything else.
             For a multinoulli observation model, the expected sufficient statistics are
                                    N 
                                     Ti                                 
                                                                         N 
              E [Mjl ]      =                  γi,t (j)I(xi,t = l) =                     γi,t (j)   (17.104)
                                    i=1 t=1                              i=1 t:xi,t =l

           The M step has the form
                       E [Mjl ]
              B̂jl =                                                                                (17.105)
                       E [Nj ]
           This result is quite intuitive: we simply add up the expected number of times we are in state j
           and we see a symbol l, and divide by the expected number of times we are in state j.
             For a Gaussian observation model, the expected sufficient statistics are given by
                                          N 
                                           Ti
                    E [xk ]         =               γi,t (k)xi,t                                    (17.106)
                                          i=1 t=1

                                         N 
                                           Ti
              E (xx)Tk              =               γi,t (k)xi,t xTi,t                              (17.107)
                                          i=1 t=1

           The M step becomes
                                            
                    E [xk ]         E (xx)Tk − E [Nk ] μ̂k μ̂Tk
              μ̂k =         , Σ̂k =                                                                 (17.108)
                    E [Nk ]                  E [Nk ]
           This can (and should) be regularized in the same way we regularize GMMs.

17.5.2.3   Initialization
           As usual with EM, we must take care to ensure that we initialize the parameters carefully, to
           minimize the chance of getting stuck in poor local optima. There are several ways to do this,
           such as
         620                                                      Chapter 17. Markov and hidden Markov models


         • Use some fully labeled data to initialize the parameters.

         • Initially ignore the Markov dependencies, and estimate the observation parameters using the
           standard mixture model estimation methods, such as K-means or EM.

         • Randomly initialize the parameters, use multiple restarts, and pick the best solution.

           Techniques such as deterministic annealing (Ueda and Nakano 1998; Rao and Rose 2001)
         can help mitigate the effect of local minima. Also, just as K-means is often used to initialize
         EM for GMMs, so it is common to initialize EM for HMMs using Viterbi training, which
         means approximating the posterior over paths with the single most probable path. (This is not
         necessarily a good idea, since initially the parameters are often poorly estimated, so the Viterbi
         path will be fairly arbitrary. A safer option is to start training using forwards-backwards, and to
         switch to Viterbi near convergence.)

17.5.3   Bayesian methods for “ﬁtting” HMMs *
         EM returns a MAP estimate of the parameters. In this section, we brieﬂy discuss some methods
         for Bayesian parameter estimation in HMMs. (These methods rely on material that we will cover
         later in the book.)
            One approach is to use variational Bayes EM (VBEM), which we discuss in general terms in
         Section 21.6. The details for the HMM case can be found in (MacKay 1997; Beal 2003), but
         the basic idea is this: The E step uses forwards-backwards, but where (roughly speaking) we
         plug in the posterior mean parameters instead of the MAP estimates. The M step updates the
         parameters of the conjugate posteriors, instead of updating the parameters themselves.
            An alternative to VBEM is to use MCMC. A particularly appealing algorithm is block Gibbs
         sampling, which we discuss in general terms in Section 24.2.8. The details for the HMM case
         can be found in (Fruhwirth-Schnatter 2007), but the basic idea is this: we sample z1:T given
         the data and parameters using forwards-ﬁltering, backwards-sampling, and we then sample the
         parameters from their posteriors, conditional on the sampled latent paths. This is simple to
         implement, but one does need to take care of unidentiﬁability (label switching), just as with
         mixture models (see Section 11.3.1).

17.5.4   Discriminative training
         Sometimes HMMs are used as the class conditional density inside a generative classiﬁer. In this
         case, p(x|y = c, θ) can be computed using the forwards algorithm. We can easily maximize the
                         N
         joint likelihood i=1 p(xi , yi |θ) by using EM (or some other method) to ﬁt the HMM for each
         class-conditional density separately.
            However, we might like to ﬁnd the parameters that maximize the conditional likelihood

            
            N                               p(yi |θ)p(xi |yi , θ)
                  p(yi |xi , θ) =                                                                    (17.109)
            i=1                     i       c p(yi = c|θ)p(xi |c, θ)

         This is more expensive than maximizing the joint likelihood, since the denominator couples all C
         class-conditional HMMs together. Furthermore, EM can no longer be used, and one must resort
           17.6. Generalizations of HMMs                                                                   621


           to generic gradient based methods. Nevertheless, discriminative training can result in improved
           accuracies. The standard practice in speech recognition is to initially train the generative models
           separately using EM, and then to ﬁne tune them discriminatively (Jelinek 1997).

 17.5.5    Model selection
           In HMMs, the two main model selection issues are: how many states, and what topology to use
           for the state transition diagram. We discuss both of these issues below.

17.5.5.1   Choosing the number of hidden states
           Choosing the number of hidden states K in an HMM is analogous to the problem of choosing
           the number of mixture components. Here are some possible solutions:

           • Use grid-search over a range of K’s, using as an objective function cross-validated likelihood,
             the BIC score, or a variational lower bound to the log-marginal likelihood.
           • Use reversible jump MCMC. See (Fruhwirth-Schnatter 2007) for details. Note that this is very
             slow and is not widely used.
           • Use variational Bayes to “extinguish” unwanted components, by analogy to the GMM case
             discussed in Section 21.6.1.6. See (MacKay 1997; Beal 2003) for details.
           • Use an “inﬁnite HMM”, which is based on the hierarchical Dirichlet process. See e.g., (Beal
             et al. 2002; Teh et al. 2006) for details.

17.5.5.2   Structure learning
           The term structure learning in the context of HMMs refers to learning a sparse transition
           matrix. That is, we want to learn the structure of the state transition diagram, not the structure
           of the graphical model (which is ﬁxed). A large number of heuristic methods have been proposed.
           Most alternate between parameter estimation and some kind of heuristic split merge method
           (see e.g., (Stolcke and Omohundro 1992)).
              Alternatively, one can pose the problem as MAP estimation using a minimum entropy prior,
           of the form
              p(Ai,: ) ∝ exp(−H (Ai,: ))                                                               (17.110)

           This prior prefers states whose outgoing distribution is nearly deterministic, and hence has low
           entropy (Brand 1999). The corresponding M step cannot be solved in closed form, but numerical
           methods can be used. The trouble with this is that we might prune out all incoming transitions
           to a state, creating isolated “islands” in state-space. The inﬁnite HMM presents an interesting
           alternative to these methods. See e.g., (Beal et al. 2002; Teh et al. 2006) for details.

   17.6    Generalizations of HMMs
           Many variants of the basic HMM model have been proposed. We brieﬂy discuss some of them
           below.
           622                                                 Chapter 17. Markov and hidden Markov models



                                               Dt−1           Dt        Dt+1




                                          Qt − 1         Qt        Qt − 1




                                               Xt−1           Xt        Xt+1



           Figure 17.14 Encoding a hidden semi-Markov model as a DGM. Dt are deterministic duration counters.



 17.6.1    Variable duration (semi-Markov) HMMs
           In a standard HMM, the probability we remain in state i for exactly d steps is

              p(ti = d) = (1 − Aii )Adii ∝ exp(d log Aii )                                             (17.111)

           where Aii is the self-loop probability. This is called the geometric distribution. However, this
           kind of exponentially decaying function of d is sometimes unrealistic.
              To allow for more general durations, one can use a semi-Markov model. It is called semi-
           Markov because to predict the next state, it is not sufficient to condition on the past state: we
           also need to know how long we’ve been in that state. When the state space is not observed
           directly, the result is called a hidden semi-Markov model (HSMM), a variable duration HMM,
           or an explicit duration HMM.
              HSMMs are widely used in many gene ﬁnding programs, since the length distribution of
           exons and introns is not geometric (see e.g., (Schweikerta et al. 2009)), and in some chip-Seq
           data analysis programs (see e.g., (Kuan et al. 2009)).
              HSMMs are useful not only because they can model the waiting time of each state more
           accurately, but also because they can model the distribution of a whole batch of observations at
           once, instead of assuming all observations are conditionally iid. That is, they can use likelihood
           models of the form p(xt:t+l |zt = k, dt = l), which generate l correlated observations if the
           duration in state k is for l time steps. This is useful for modeling data that is piecewise linear,
           or shows other local trends (Ostendorf et al. 1996).

17.6.1.1   HSMM as augmented HMMs
           One way to represent a HSMM is to use the graphical model shown in Figure 17.14. (In this
           ﬁgure, we have assumed the observations are iid within each state, but this is not required,
           as mentioned above.) The Dt ∈ {0, 1, . . . , D} node is a state duration counter, where D is
           the maximum duration of any state. When we ﬁrst enter state j, we sample Dt from the
           duration distribution for that state, Dt ∼ pj (·). Thereafer, Dt deterministically counts down
           17.6. Generalizations of HMMs                                                                                 623

                                                                  0.012
                                                                                                             n=1
                                                                                                             n=2
                                                                                                             n=5
                                                                   0.01



                                                                  0.008



                                                                  0.006



                                                                  0.004
                      p          p           p          p

                          1−p         1−p        1−p              0.002

                      1          2           3          4
                                                                     0
                                                                          0   100   200    300   400   500         600


                                      (a)                                                 (b)

           Figure 17.15 (a) A Markov chain with n = 4 repeated states and self loops. (b) The resulting distribution
           over sequence lengths, for p = 0.99 and various n. Figure generated by hmmSelfLoopDist.



           until Dt = 0. While Dt > 0, the state zt is not allowed to change. When Dt = 0, we make a
           stochastic transition to a new state.
              More precisely, we deﬁne the CPDs as follows:
                                                  ⎧
                                                  ⎨ pj (d ) if d = 0
                          
               p(Dt = d |Dt−1 = d, zt = j) =           1        if d = d − 1 and d ≥ 1        (17.112)
                                                  ⎩
                                                       0        otherwise
                                                  ⎧
                                                  ⎨ 1        if d > 0 and j = k
              p(zt = k|zt−1 = j, Dt−1 = d) =           Ajk if d = 0                            (17.113)
                                                  ⎩
                                                       0     otherwise

           Note that pj (d) could be represented as a table (a non-parametric approach) or as some kind
           of parametric distribution, such as a Gamma distribution. If pj (d) is a geometric distribution,
           this emulates a standard HMM.
              One can perform inference in this model by deﬁning a mega-variable Yt = (Dt , zt ). However,
           this is rather inefficient, since Dt is deterministic. It is possible to marginalize Dt out, and derive
           special purpose inference procedures. See (Guedon 2003; Yu and Kobayashi 2006) for details.
           Unfortunately, all these methods take O(T K 2 D) time, where T is the sequence length, K is
           the number of states, and D is the maximum duration of any state.

17.6.1.2   Approximations to semi-Markov models
           A more efficient, but less ﬂexible, way to model non-geometric waiting times is to replace each
           state with n new states, each with the same emission probabilities as the original state. For
           example, consider the model in Figure 17.15(a). Obviously the smallest sequence this can generate
           is of length n = 4. Any path of length d through the model has probability pd−n (1 − p)n ;
           multiplying by the number of possible paths we ﬁnd that the total probability of a path of length
           d is
                      
                        d − 1 d−n
               p(d) =           p     (1 − p)n                                                        (17.114)
                        n−1
         624                                                      Chapter 17. Markov and hidden Markov models




                        words    on                 need                         the



                        phones   aa     n     end     n      iy       d   end     dh         ax
                                                                                                  end
                                                                                  n          iy



                        sub-                        end                                end
                        phones



         Figure 17.16 An example of an HHMM for an ASR system which can recognize 3 words. The top level
         represents bigram word probabilities. The middle level represents the phonetic spelling of each word. The
         bottom level represents the subphones of each phone. (It is traditional to represent a phone as a 3 state
         HMM, representing the beginning, middle and end.) Based on Figure 7.5 of (Jurafsky and Martin 2000).



         This is equivalent to the negative binomial distribution. By adjusting n and the self-loop
         probabilities p of each state, we can model a wide range of waiting times: see Figure 17.15(b).
           Let E be the number of expansions of each state needed to approximate pj (d). Forwards-
         backwards on this model takes O(T (KE)Fin ) time, where Fin is the average number of
         predecessor states, compared to O(T K(Fin +D)) for the HSMM. For typical speech recognition
         applications, Fin ∼ 3, D ∼ 50, K ∼ 106 , T ∼ 105 . (Similar ﬁgures apply to problems such
         as gene ﬁnding, which also often uses HSMMs.) Since Fin + D  EFin , the expanded state
         method is much faster than an HSMM. See (Johnson 2005) for details.

17.6.2   Hierarchical HMMs
         A hierarchical HMM (HHMM) (Fine et al. 1998) is an extension of the HMM that is designed to
         model domains with hierarchical structure. Figure 17.16 gives an example of an HHMM used in
         automatic speech recognition. The phone and subphone models can be “called” from different
         higher level contexts. We can always “ﬂatten” an HHMM to a regular HMM, but a factored
         representation is often easier to interpret, and allows for more efficient inference and model
         ﬁtting.
            HHMMs have been used in many application domains, e.g., speech recognition (Bilmes 2001),
         gene ﬁnding (Hu et al. 2000), plan recognition (Bui et al. 2002), monitoring transportation
         patterns (Liao et al. 2007), indoor robot localization (Theocharous et al. 2004), etc. HHMMs are
         less expressive than stochastic context free grammars (SCFGs), since they only allow hierarchies
         of bounded depth, but they support more efficient inference. In particular, inference in SCFGs
         (using the inside outside algorithm, (Jurafsky and Martin 2008)) takes O(T 3 ) whereas inference
         in an HHMM takes O(T ) time (Murphy and Paskin 2001).
            We can represent an HHMM as a directed graphical model as shown in Figure 17.17. Qt
         represents the state at time t and level . A state transition at level  is only “allowed” if the
         17.6. Generalizations of HMMs                                                                       625


                                                F11                F21          F31



                                       Q11              Q12              Q13



                                                F12                F22          F32



                                       Q21              Q22              Q23



                                                F13                F23          F33



                                       Q31              Q32              Q33



                                       Y1                Y2              Y3



         Figure 17.17 An HHMM represented as a DGM. Qt is the state at time t, level ; Ft = 1 if the HMM at
         level  has ﬁnished (entered its exit state), otherwise Ft = 0. Shaded nodes are observed; the remaining
         nodes are hidden. We may optionally clamp FT = 1, where T is the length of the observation sequence,
         to ensure all models have ﬁnished by the end of the sequence. Source: Figure 2 of (Murphy and Paskin
         2001).


         chain at the level below has “ﬁnished”, as determined by the Ft−1 node. (The chain below
         ﬁnishes when it chooses to enter its end state.) This mechanism ensures that higher level chains
         evolve more slowly than lower level chains, i.e., lower levels are nested within higher levels.
            A variable duration HMM can be thought of as a special case of an HHMM, where the top
         level is a deterministic counter, and the bottom level is a regular HMM, which can only change
         states once the counter has “timed out”. See (Murphy and Paskin 2001) for further details.

17.6.3   Input-output HMMs
         It is straightforward to extend an HMM to handle inputs, as shown in Figure 17.18(a). This deﬁnes
         a conditional density model for sequences of the form
            p(y1:T , z1:T |u1:T , θ)                                                                      (17.115)
         where ut is the input at time t; this is sometimes called a control signal. If the inputs and
         outputs are continuous, a typical parameterization would be
            p(zt |xt , zt−1 = i, θ)    =     Cat(zt |S(Wi ut ))                                           (17.116)
              p(yt |xt , zt = j, θ)    =     N (yt |Vj ut , Σj )                                          (17.117)
         Thus the transition matrix is a logistic regression model whose parameters depend on the
         previous state. The observation model is a Gaussian whose parameters depend on the current
         626                                                       Chapter 17. Markov and hidden Markov models


                   ut−1               ut


               z t−1             zt


                                              z1     z2                  zT
                   y t−1              yt      x1     x2                  xT


                           (a)                               (b)                                (c)

         Figure 17.18 (a) Input-output HMM. (b) First-order auto-regressive HMM. (c) A second-order buried Markov
         model. Depending on the value of the hidden variables, the effective graph structure between the com-
         ponents of the observed variables (i.e., the non-zero elements of the regression matrix and the precision
         matrix) can change, although this is not shown.



         state. The whole model can be thought of as a hidden version of a maximum entropy Markov
         model (Section 19.6.1).
            Conditional on the inputs u1:T and the parameters θ, one can apply the standard forwards-
         backwards algorithm to estimate the hidden states. It is also straightforward to derive an EM
         algorithm to estimate the parameters (see (Bengio and Frasconi 1996) for details).

17.6.4   Auto-regressive and buried HMMs
         The standard HMM assumes the observations are conditionally independent given the hidden
         state. In practice this is often not the case. However, it is straightforward to have direct arcs from
         xt−1 to xt as well as from zt to xt , as in Figure 17.18(b). This is known as an auto-regressive
         HMM, or a regime switching Markov model. For continuous data, the observation model
         becomes
            p(xt |xt−1 , zt = j, θ) = N (xt |Wj xt−1 + μj , Σj )                                           (17.118)

         This is a linear regression model, where the parameters are chosen according to the current
         hidden state. We can also consider higher-order extensions, where we condition on the last L
         observations:
                                                    
                                                    L
            p(xt |xt−L:t−1 , zt = j, θ) = N (xt |         Wj, xt− + μj , Σj )                            (17.119)
                                                    =1

         Such models are widely used in econometrics (Hamilton 1990). Similar models can be deﬁned
         for discrete observations.
            The AR-HMM essentially combines two Markov chains, one on the hidden variables, to capture
         long range dependencies, and one on the observed variables, to capture short range dependen-
         cies (Berchtold 1999). Since the X nodes are observed, the connections between them only
         17.6. Generalizations of HMMs                                                                      627


                                                                           z11         z12         z13
                                     z1,1           z1,2   z1,3
                                                                     x11         x12         x13


                                     z2,1           z2,2   z2,3            z21         z22         z23


                                                                     x21         x22         x23
                                     z3,1           z3,2   z3,3
                                                                           z31         z32         z33


                                    x1         x2          x3        x31         x32         x33
                                              (a)                                 (b)

                  Figure 17.19 (a) A factorial HMM with 3 chains. (b) A coupled HMM with 3 chains.



         change the computation of the local evidence; inference can still be performed using the stan-
         dard forwards-backwards algorithm. Parameter estimation using EM is also straightforward: the
         E step is unchanged, as is the M step for the transition matrix. If we assume scalar observations
         for notational simplicty, the M step involves minimizing
               1                                               
                                                  2         2
                 E 2        (yt − yt−L:t−1 w(st )) + log σ (st )
                                    T
                                                                                                   (17.120)
              t
                    σ (st )

         Focussing on the w terms, we see that this requires solving K weighted least squares problems:
                           γt (j)
            J(w1:K ) =              (y − yt−L:t−1
                               2 (j) t
                                          T
                                                  wj ) 2                                                 (17.121)
                         j t
                             σ

         where γt (j) = p(zt = k|x1:T ) is the smoothed posterior marginal. This is a weighted linear
         regression problem, where the design matrix has a Toeplitz form. This subproblem can be solved
         efficiently using the Levinson-Durbin method (Durbin and Koopman 2001).
            Buried Markov models generalize AR-HMMs by allowing the dependency structure between
         the observable nodes to change based on the hidden state, as in Figure 17.18(c). Such a model
         is called a dynamic Bayesian multi net, since it is a mixture of different networks. In the
         linear-Gaussian setting, we can change the structure of the of xt−1 → xt arcs by using sparse
         regression matrices, Wj , and we can change the structure of the connections within the
         components of xt by using sparse Gaussian graphical models, either directed or undirected. See
         (Bilmes 2000) for details.

17.6.5   Factorial HMM
         An HMM represents the hidden state using a single discrete random variable zt ∈ {1, . . . , K}.
         To represent 10 bits of information would require K = 210 = 1024 states. By contrast, consider
         a distributed representation of the hidden state, where each zc,t ∈ {0, 1} represents the c’th
         628                                                         Chapter 17. Markov and hidden Markov models


         bit of the t’th hidden state. Now we can represent 10 bits using just 10 binary variables, as
         illustrated in Figure 17.19(a). This model is called a factorial HMM (Ghahramani and Jordan
         1997). The hope is that this kind of model could capture different aspects of a signal, e.g., one
         chain would represent speaking style, another the words that are being spoken.
             Unfortunately, conditioned on xt , all the hidden variables are correlated (due to explaining
         away the common observed child xt ). This make exact state estimation intractable. However,
         we can derive efficient approximate inference algorithms, as we discuss in Section 21.4.1.

17.6.6   Coupled HMM and the inﬂuence model
         If we have multiple related data streams, we can use a coupled HMM (Brand 1996), as illustrated
         in Figure 17.19(b). This is a series of HMMs where the state transitions depend on the states of
         neighboring chains. That is, we represent the joint conditional distribution as
                                
             p(zt |zt−1 ) =         p(zct |zt−1 )                                                 (17.122)
                                    c
            p(zct |zt−1 )    =     p(zct |zc,t−1 , zc−1,t−1 , zc+1,t−1 )                                             (17.123)
         This has been used for various tasks, such as audio-visual speech recognition (Neﬁan et al.
         2002) and modeling freeway traffic ﬂows (Kwon and Murphy 2000).
            The trouble with the above model is that it requires O(CK 4 ) parameters to specify, if there
         are C chains with K states per chain, because each state depends on its own past plus the
         past of its two neighbors. There is a closely related model, known as the inﬂuence model
         (Asavathiratham 2000), which uses fewer parameters. It models the joint conditional distribution
         as
                                   
                                   C
            p(zct |zt−1 )    =             αc,c p(zct |zc ,t−1 )                                                   (17.124)
                                   c =1
                 
         where c αc,c = 1 for each c. That is, we use a convex combination of pairwise transition
         matrices. The αc,c parameter speciﬁes how much inﬂuence chain c has on chain c . This
         model only takes O(C 2 + CK 2 ) parameters to specify. Furthermore, it allows each chain to
         be inﬂuenced by all the other chains, not just its nearest neighbors. (Hence the corresponding
         graphical model is similar to Figure 17.19(b), except that each node has incoming edges from
         all the previous nodes.) This has been used for various tasks, such as modeling conversational
         interactions between people (Basu et al. 2001).
            Unfortunately, inference in both of these models takes O(T (K C )2 ) time, since all the chains
         become fully correlated even if the interaction graph is sparse. Various approximate inference
         methods can be applied, as we discuss later.

17.6.7   Dynamic Bayesian networks (DBNs)
         A dynamic Bayesian network is just a way to represent a stochastic process using a directed
         graphical model.7 Note that the network is not dynamic (the structure and parameters are ﬁxed),
         7. The acronym DBN can stand for either “dynamic Bayesian network” or “deep belief network” (Section 28.1) depending
         on the context. Geoff Hinton (who invented the term “deep belief network”) has suggested the acronyms DyBN and
         DeeBN to avoid this ambiguity.
17.6. Generalizations of HMMs                                                                               629


           27   LeftClr0                    LeftClr1                                      LeftClrSens1 28

           25   RightClr0                   RightClr1                                   RightClrSens1 26

           21   LatAction0                LatAction1                                      TurnSignal1 22


           23   Xdot0                         Xdot1                                        XdotSens1 24
                                                        6 SensorValid1
           20   InLane0                     InLane1                                        YdotSens1 18

                                                           12 FYdotDiff1
           16   FwdAction0               FwdAction1                                    FYdotDiffSens1 15

                                                             13 FcloseSlow1
           17   Ydot0                         Ydot1                             10          FclrSens1 11
                                                                               Fclr1
           19   Stopped0               Stopped1             8 BXdot1                      BXdotSens1 9


           7    EngStatus0              EngStatus1      4 BcloseFast1          Bclr1        BclrSens1 5
                                                                           3

           14   FrontBackStatus0   FrontBackStatus1     1 BYdotDiff1                   BYdotDiffSens1 2

                  slice t            slice t+1                                           evidence

Figure 17.20 The BATnet DBN. The transient nodes are only shown for the second slice, to minimize
clutter. The dotted lines can be ignored. Used with kind permission of Daphne Koller.



rather it is a network representation of a dynamical system. All of the HMM variants we have
seen above could be considered to be DBNs. However, we prefer to reserve the term “DBN”
for graph structures that are more “irregular” and problem-speciﬁc. An example is shown in
Figure 17.20, which is a DBN designed to monitor the state of a simulated autonomous car
known as the “Bayesian Automated Taxi”, or “BATmobile” (Forbes et al. 1995).
   Deﬁning DBNs is straightforward: you just need to specify the structure of the ﬁrst time-slice,
the structure between two time-slices, and the form of the CPDs. Learning is also easy. The
main problem is that exact inference can be computationally expensive, because all the hidden
variables become correlated over time (this is known as entanglement — see e.g., (Koller and
Friedman 2009, Sec. 15.2.4) for details). Thus a sparse graph does not necessarily result in
tractable exact inference. However, later we will see algorithms that can exploit the graph
structure for efficient approximate inference.

Exercises
Exercise 17.1 Derivation of Q function for HMM
Derive Equation 17.97.
Exercise 17.2 Two ﬁlter approach to smoothing in HMMs
Assuming that Πt (i) = p(St = i) > 0 for all i and t, derive a recursive algorithm for updating rt (i) =
p(St = i|xt+1:T ). Hint: it should be very similar to the standard forwards algorithm, but using a time-
reversed transition matrix. Then show how to compute the posterior marginals γt (i) = p(St = i|x1:T )
630                                                       Chapter 17. Markov and hidden Markov models


from the backwards ﬁltered messages rt (i), the forwards ﬁltered messages αt (i), and the stationary
distribution Πt (i).
Exercise 17.3 EM for for HMMs with mixture of Gaussian observations
Consider an HMM where the observation model has the form

    p(xt |zt = j, θ)     =       wjk N (xt |μjk , Σjk )                                                  (17.125)
                             k

•   Draw the DGM.
•   Derive the E step.
•   Derive the M step.
Exercise 17.4 EM for for HMMs with tied mixtures
In many applications, it is common that the observations are high-dimensional vectors (e.g., in speech
recognition, xt is often a vector of cepstral coefficients and their derivatives, so xt ∈ R39 ), so estimating a
full covariance matrix for KM values (where M is the number of mixture components per hidden state),
as in Exercise 17.3, requires a lot of data. An alternative is to use just M Gaussians, rather than M K
Gaussians, and to let the state inﬂuence the mixing weights but not the means and covariances. This is
called a semi-continuous HMM or tied-mixture HMM.

•   Draw the corresponding graphical model.
•   Derive the E step.
•   Derive the M step.
18      State space models



 18.1   Introduction
        A state space model or SSM is just like an HMM, except the hidden states are continuous. The
        model can be written in the following generic form:
           zt    =      g(ut , zt−1 ,       t)                                                              (18.1)
           yt    =      h(zt , ut , δ t )                                                                   (18.2)
        where zt is the hidden state, ut is an optional input or control signal, yt is the observation, g
        is the transition model, h is the observation model, t is the system noise at time t, and δ t
        is the observation noise at time t. We assume that all parameters of the model, θ, are known;
        if not, they can be included into the hidden state, as we discuss below.
           One of the primary goals in using SSMs is to recursively estimate the belief state, p(zt |y1:t , u1:t , θ).
        (Note: we will often drop the conditioning on u and θ for brevity.) We will discuss algorithms for
        this later in this chapter. We will also discuss how to convert our beliefs about the hidden state
        into predictions about future observables by computing the posterior predictive p(yt+1 |y1:t ).
           An important special case of an SSM is where all the CPDs are linear-Gaussian. In other
        words, we assume
        • The transition model is a linear function
                zt = At zt−1 + Bt ut +           t                                                         (18.3)
        • The observation model is a linear function
                y t = C t zt + D t u t + δ t                                                                (18.4)
        • The system noise is Gaussian
                 t   ∼ N (0, Qt )                                                                          (18.5)
        • The observation noise is Gaussian
                δ t ∼ N (0, Rt )                                                                           (18.6)
        This model is called a linear-Gaussian SSM (LG-SSM) or a linear dynamical system (LDS).
        If the parameters θ t = (At , Bt , Ct , Dt , Qt , Rt ) are independent of time, the model is called
        stationary.
         632                                                                                                          Chapter 18. State space models

                                                              16
                                                   observed                                                observed                             observed
               14                                  truth                                                   filtered                             smoothed
                                                                                                                      14
                                                              14

               12
                                                                                                                      12
                                                              12

               10                                                                                                     10
                                                              10


                8                                                                                                      8
                                                               8


                                                                                                                       6
                6                                              6


                                                                                                                       4
                                                               4
                4

                    10   12   14    16   18   20    22             8   10   12   14   16    18   20   22       24          10   15         20              25



                                   (a)                                                (b)                                            (c)

         Figure 18.1 Illustration of Kalman ﬁltering and smoothing. (a) Observations (green cirles) are generated
         by an object moving to the right (true location denoted by black squares). (b) Filtered estimated is shown
         by dotted red line. Red cross is the posterior mean, blue circles are 95% conﬁdence ellipses derived from
         the posterior covariance. For clarity, we only plot the ellipses every other time step. (c) Same as (b), but
         using offline Kalman smoothing. Figure generated by kalmanTrackingDemo.



            The LG-SSM is important because it supports exact inference, as we will see. In particular,
         if the initial belief state is Gaussian, p(z1 ) = N (μ1|0 , Σ1|0 ), then all subsequent belief states
         will also be Gaussian; we will denote them by p(zt |y1:t ) = N (μt|t , Σt|t ). (The notation μt|τ
         denotes E [zt |y1:τ ], and similarly for Σt|t ; thus μt|0 denotes the prior for z1 before we have
         seen any data. For brevity we will denote the posterior belief states using μt|t = μt and
         Σt|t = Σt .) We can compute these quantities efficiently using the celebrated Kalman ﬁlter,
         as we show in Section 18.3.1. But before discussing algorithms, we discuss some important
         applications.

 18.2    Applications of SSMs
         SSMs have many applications, some of which we discuss in the sections below. We mostly
         focus on LG-SSMs, for simplicity, although non-linear and/or non-Gaussian SSMs are even more
         widely used.

18.2.1   SSMs for object tracking
         One of the earliest applications of Kalman ﬁltering was for tracking objects, such as airplanes
         and missiles, from noisy measurements, such as radar. Here we give a simpliﬁed example to
         illustrate the key ideas. Consider an object moving in a 2D plane. Let z1t and z2t be the
         horizontal and vertical locations of the object, and ż1t and ż2t be the corresponding velocity.
         We can represent this as a state vector zt ∈ R4 as follows:
                                        
             zTt = z1t z2t ż1t ż2t .                                                              (18.7)
         18.2. Applications of SSMs                                                                       633


         Let us assume that the object is moving at constant velocity, but is “perturbed” by random
         Gaussian noise (e.g., due to the wind). Thus we can model the system dynamics as follows:

                    zt   =   At zt−1 + t                                                                (18.8)
            ⎛       ⎞        ⎛               ⎞ ⎛         ⎞    ⎛     ⎞
             z1t               1 0 Δ        0     z1,t−1    1t
            ⎜z2t ⎟           ⎜0 1 0         Δ⎟  ⎜z2,t−1 ⎟ ⎜2t ⎟
            ⎜ ⎟          =   ⎜                ⎟ ⎜        ⎟+⎜ ⎟                                          (18.9)
            ⎝ż1t ⎠          ⎝0 0 1         0 ⎠ ⎝ż1,t−1 ⎠ ⎝3t ⎠
             ż2t              0 0 0        1    ż2,t−1    4t

         where t ∼ N (0, Q) is the system noise, and Δ is the sampling period. This says that the
         new location zj,t is the old location zj,t−1 plus Δ times the old velocity żj,t−1 , plus random
         noise, jt , for j = 1 : 2. Also, the new velocity żj,t is the old velocity żj,t−1 plus random
         noise, jt , for j = 3 : 4. This is called a random accelerations model, since the object moves
         according to Newton’s laws, but is subject to random changes in velocity.
            Now suppose that we can observe the location of the object but not its velocity. Let yt ∈ R2
         represent our observation, which we assume is subject to Gaussian noise. We can model this as
         follows:
                 yt      =   C t zt + δ t                                                              (18.10)
                                             ⎛ ⎞ ⎛ ⎞
                                            z1t     δ1t
              y1t              1 0 0 0       ⎜z2t ⎟ ⎜δ2t ⎟
                         =                   ⎜ ⎟+⎜ ⎟                                                    (18.11)
              y2t              0 1 0 0       ⎝ż1t ⎠ ⎝δ3t ⎠
                                              ż2t    δ4t

         where δ t ∼ N (0, R) is the measurement noise.
            Finally, we need to specify our initial (prior) beliefs about the state of the object, p(z1 ). We
         will assume this is a Gaussian, p(z1 ) = N (z1 |μ1|0 , Σ1|0 ). We can represent prior ignorance by
         making Σ1|0 suitably “broad”, e.g., Σ1|0 = ∞I. We have now fully speciﬁed the model and can
         perform sequential Bayesian updating to compute p(zt |y1:t ) using an algorithm known as the
         Kalman ﬁlter, to be described in Section 18.3.1.
            Figure 18.1(a) gives an example. The object moves to the right and generates an observation
         at each time step (think of “blips” on a radar screen). We observe these blips and ﬁlter out
         the noise by using the Kalman ﬁlter. At every step, we have p(zt |y1:t ), from which we can
         compute p(z1t , z2t |y1:t ) by marginalizing out the dimensions corresponding to the velocities.
         (This is easy to do since the posterior is Gaussian.) Our “best guess” about the location of the
         object is the posterior mean, E[zt |y1:t ], denoted as a red cross in Figure 18.1(b). Our uncertainty
         associated with this is represented as an ellipse, which contains 95% of the probability mass. We
         see that our uncertainty goes down over time, as the effects of the initial uncertainty get “washed
         out”. We also see that the estimated trajectory has “ﬁltered out” some of the noise. To obtain
         the much smoother plot in Figure 18.1(c), we need to use the Kalman smoother, which computes
         p(zt |y1:T ); this depends on “future” as well as “past” data, as discussed in Section 18.3.2.

18.2.2   Robotic SLAM
         Consider a robot moving around an unknown 2d world. It needs to learn a map and keep
         track of its location within that map. This problem is known as simultaneous localization and
634                                                                       Chapter 18. State space models




                              L1

                                         Y1               Y3

                                X1       X2      X3                XT
                                                           ...


                                         Y1      Y2                           YT


                              L2


Figure 18.2 Illustration of graphical model underlying SLAM. Li is the ﬁxed location of landmark i, xt
is the location of the robot, and yt is the observation. In this trace, the robot sees landmarks 1 and 2 at
time step 1, then just landmark 2, then just landmark 1, etc. Based on Figure 15.A.3 of (Koller and Friedman
2009).




                                                                 Robot pose




                   (a)                                                        (b)

Figure 18.3 Illustration of the SLAM problem. (a) A robot starts at the top left and moves clockwise in a
circle back to where it started. We see how the posterior uncertainty about the robot’s location increases
and then decreases as it returns to a familar location, closing the loop. If we performed smoothing, this
new information would propagate backwards in time to disambiguate the entire trajectory. (b) We show the
precision matrix, representing sparse correlations between the landmarks, and between the landmarks and
the robot’s position (pose). This sparse precision matrix can be visualized as a Gaussian graphical model,
as shown. Source: Figure 15.A.3 of (Koller and Friedman 2009) . Used with kind permission of Daphne
Koller.
18.2. Applications of SSMs                                                                        635


mapping, or SLAM for short, and is widely used in mobile robotics, as well as other applications
such as indoor navigation using cellphones (since GPS does not work inside buildings).
   Let us assume we can represent the map as the 2d locations of a ﬁxed set of K landmarks,
denote them by L1 , . . . , LK (each is a vector in R2 ). For simplicity, we will assume these are
uniquely identiﬁable. Let xt represent the unknown location of the robot at time t. We deﬁne
the state space to be zt = (xt , L1:K ); we assume the landmarks are static, so their motion
model is a constant, and they have no system noise. If yt measures the distance from xt to
the set of closest landmarks, then the robot can update its estimate of the landmark locations
based on what it sees. Figure 18.2 shows the corresponding graphical model for the case where
K = 2, and where on the ﬁrst step it sees landmarks 1 and 2, then just landmark 2, then just
landmark 1, etc.
   If we assume the observation model p(yt |zt , L) is linear-Gaussian, and we use a Gaussian
motion model for p(xt |xt−1 , ut ), we can use a Kalman ﬁlter to maintain our belief state about
the location of the robot and the location of the landmarks (Smith and Cheeseman 1986; Choset
and Nagatani 2001).
   Over time, the uncertainty in the robot’s location will increase, due to wheel slippage etc.,
but when the robot returns to a familiar location, its uncertainty will decrease again. This is
called closing the loop, and is illustrated in Figure 18.3(a), where we see the uncertainty ellipses,
representing cov [xt |y1:t , u1:t ], grow and then shrink. (Note that in this section, we assume that
a human is joysticking the robot through the environment, so u1:t is given as input, i.e., we do
not address the decision-theoretic issue of choosing where to explore.)
   Since the belief state is Gaussian, we can visualize the posterior covariance matrix Σt . Ac-
tually, it is more interesting to visualize the posterior precision matrix, Λt = Σ−1    t , since that
is fairly sparse, as shown in Figure 18.3(b). The reason for this is that zeros in the precision
matrix correspond to absent edges in the corresponding undirected Gaussian graphical model
(see Section 19.4.4). Initially all the landmarks are uncorrelated (assuming we have a diagonal
prior on L), so the GGM is a disconnected graph, and Λt is diagonal. However, as the robot
moves about, it will induce correlation between nearby landmarks. Intuitively this is because the
robot is estimating its position based on distance to the landmarks, but the landmarks’ locations
are being estimated based on the robot’s position, so they all become inter-dependent. This can
be seen more clearly from the graphical model in Figure 18.2: it is clear that L1 and L2 are not
d-separated by y1:t , because there is a path between them via the unknown sequence of x1:t
nodes. As a consequence of the precision matrix becoming denser, exact inference takes O(K 3 )
time. (This is an example of the entanglement problem for inference in DBNs.) This prevents
the method from being applied to large maps.
   There are two main solutions to this problem. The ﬁrst is to notice that the correlation pattern
moves along with the location of the robot (see Figure 18.3(b)). The remaining correlations
become weaker over time. Consequently we can dynamically “prune out” weak edges from
the GGM using a technique called the thin junction tree ﬁlter (Paskin 2003) (junction trees are
explained in Section 20.4).
   A second approach is to notice that, conditional on knowing the robot’s path, x1:t , the
                                                                        K
landmark locations are independent. That is, p(L|x1:t , y1:t ) = k=1 p(Lk |x1:t , y1:t ). This
forms the basis of a method known as FastSLAM, which combines Kalman ﬁltering and particle
ﬁltering, as discussed in Section 23.6.3.
   (Thrun et al. 2006) provides a more detailed account of SLAM and mobile robotics.
         636                                                                                 Chapter 18. State space models


                          θ t−1
                                                                                     online linear regression
                                                θt                       4
                                                                                                                     w0
                                                                                                                     w1
                                                                                                                     w0 batch
                                                                         2
                                                                                                                     w1 batch


                                                                         0

                    y t−1                  yt




                                                              weights
                                                                        −2



                                                                        −4



                                                                        −6



                          xt−1                  xt                      −8
                                                                             0   5      10             15       20              25
                                                                                              time


                                  (a)                                                        (b)

         Figure 18.4 (a) A dynamic generalization of linear regression. (b) Illustration of the recursive least squares
         algorithm applied to the model p(y|x, θ) = N (y|w0 + w1 x, σ 2 ). We plot   the marginal posterior of w0
         and w1 vs number of data points. (Error bars represent E [wj |y1:t ] ± var [wj |y1:t ].) After seeing all
         the data, we converge to the offline ML (least squares) solution, represented by the horizontal lines. Figure
         generated by linregOnlineDemoKalman.



18.2.3   Online parameter learning using recursive least squares
         We can perform online Bayesian inference for the parameters of various statistical models using
         SSMs. In this section, we focus on linear regression; in Section 18.5.3.2, we discuss logistic
         regression.
            The basic idea is to let the hidden state represent the regression parameters, and to let the
         (time-varying) observation model represent the current data vector. In more detail, deﬁne the
         prior to be p(θ) = N (θ|θ 0 , Σ0 ). (If we want to do online ML estimation, we can just set
         Σ0 = ∞I.) Let the hidden state be zt = θ; if we assume the regression parameters do not
         change, we can set At = I and Qt = 0I, so
            p(θ t |θ t−1 ) = N (θ t |θ t−1 , 0I) = δθt−1 (θ t )                                                                      (18.12)

         (If we do let the parameters change over time, we get a so-called dynamic linear model
         (Harvey 1990; West and Harrison 1997; Petris et al. 2009).) Let Ct = xTt , and Rt = σ 2 , so the
         (non-stationary) observation model has the form

            N (yt |Ct zt , Rt ) = N (yt |xTt θ t , σ 2 )                                                                             (18.13)
         Applying the Kalman ﬁlter to this model provides a way to update our posterior beliefs about
         the parameters as the data streams in. This is known as the recursive least squares or RLS
         algorithm.
            We can derive an explicit form for the updates as follows. In Section 18.3.1, we show that the
         Kalman update for the posterior mean has the form

            μt = At μt−1 + Kt (yt − Ct At μt−1 )                                                                                     (18.14)
           18.2. Applications of SSMs                                                                      637


           where Kt is known as the Kalman gain matrix. Based on Equation 18.39, one can show that
           Kt = Σt CTt R−1                                          2
                          t . In this context, we have Kt = Σt xt /σ . Hence the update for the
           parameters becomes
                                1
              θ̂ t = θ̂ t−1 +      Σt|t (yt − xTt θ̂ t−1 )xt                                             (18.15)
                                σ2
           If we approximate σ12 Σt|t−1 with ηt I, we recover the least mean squares or LMS algorithm,
           discussed in Section 8.5.3. In LMS, we need to specify how to adapt the update parameter
           ηt to ensure convergence to the MLE. Furthermore, the algorithm may take multiple passes
           through the data. By contrast, the RLS algorithm automatically performs step-size adaptation,
           and converges to the optimal posterior in one pass over the data. See Figure 18.4 for an example.

18.2.4     SSM for time series forecasting *
           SSMs are very well suited for time-series forecasting, as we explain below. We focus on the case
           of scalar (one dimensional) time series, for simplicity. Our presentation is based on (Varian 2011).
           See also (Aoki 1987; Harvey 1990; West and Harrison 1997; Durbin and Koopman 2001; Petris
           et al. 2009; Prado and West 2010) for good books on this topic.
              At ﬁrst sight, it might not be apparent why SSMs are useful, since the goal in forecasting is
           to predict future visible variables, not to estimate hidden states of some system. Indeed, most
           classical methods for time series forecasting are just functions of the form ŷt+1 = f (y1:t , θ),
           where hidden variables play no role (see Section 18.2.4.4). The idea in the state-space approach to
           time series is to create a generative model of the data in terms of latent processes, which capture
           different aspects of the signal. We can then integrate out the hidden variables to compute the
           posterior predictive of the visibles.
              Since the model is linear-Gaussian, we can just add these processes together to explain the
           observed data. This is called a structural time series model. Below we explain some of the
           basic building blocks.

18.2.4.1   Local level model
           The simplest latent process is known as the local level model, which has the form

              yt   =    at + yt , yt ∼ N (0, R)                                                        (18.16)
              at   =    at−1 +     at ,   at   ∼ N (0, Q)                                              (18.17)

           where the hidden state is just zt = at . This model asserts that the observed data yt ∈ R is
           equal to some unknown level term at ∈ R, plus observation noise with variance R. In addition,
           the level at evolves over time subject to system noise with variance Q. See Figure 18.5 for some
           examples.
           638                                                                                               Chapter 18. State space models


                     at−1                         at
                                                                                                     local level, a=1.000
                                                                         6
                                                                                                                                    Q=0.0, R=0.1
                                                                                                                                    Q=0.1, R=0.0
                                                                         4
                                                                                                                                    Q=0.1, R=0.1

                                                                         2


                                                                         0


                                                                        −2


                                                                        −4


                                                                        −6


                                                  yt                    −8
                                                                          0       20     40    60     80     100     120    140   160    180    200


                                    (a)                                                                      (b)

           Figure 18.5 (a) Local level model. (b) Sample output, for a0 = 10. Black solid line: Q = 0, R = 1
           (deterministic system, noisy observations). Red dotted line: Q = 0.1, R = 0 (noisy system, deterministic
           observation). Blue dot-dash line: Q = 0.1, R = 1 (noisy system and observations). Figure generated by
           ssmTimeSeriesSimple.

                                                                                          local trend, a=10.000, b=1.000
                        at−1               at                    200


                                                                   0



                         bt−1              bt                   −200


                                                                −400


                                                                −600


                                                                −800    Q=0.0, R=100.0
                                           yt                           Q=1.0, R=0.0
                                                                        Q=1.0, R=100.0
                                                               −1000
                                                                    0        10    20     30    40      50     60      70    80     90    100


                                   (a)                                                               (b)

           Figure 18.6 (a) Local Trend. (b) Sample output, for a0 = 10, b0 = 1. Color code as in Figure 18.5. Figure
           generated by ssmTimeSeriesSimple.


18.2.4.2   Local linear trend
           Many time series exhibit linear trends upwards or downwards, at least locally. We can model
           this by letting the level at change by an amount bt at each step as follows:
              yt   =    at + yt , yt ∼ N (0, R)                                                                                                     (18.18)
              at   =    at−1 + bt−1 + at , at ∼ N (0, Qa )                                                                                          (18.19)
              bt   =    bt−1 +   bt ,    bt   ∼ N (0, Qb )                                                                                          (18.20)
           See Figure 18.6(a). We can write this in standard form by deﬁning zt = (at , bt ) and
                                                    
                     1 1                             Qa 0
              A=              , C= 1 0 , Q=                                                                                                           (18.21)
                     0 1                               0 Qb
             When Qb = 0, we have bt = b0 , which is some constant deﬁning the slope of the line. If in
           addition we have Qa = 0, we have at = at−1 + b0 t. Unrolling this, we have at = a0 + b0 t, and
           18.2. Applications of SSMs                                                                                                             639


                           at−1               at


                           bt−1                bt


                           c3t−1              c3t
                                        -1

                                        -1                                               seasonal model, s=4, a=0.000, b=0.000
                                                                    40
                           c2t−1              c2t                         Q=0.0, R=1.0
                                                                          Q=1.0, R=0.0
                                   -1                               30
                                                                          Q=1.0, R=1.0

                                                                    20

                           c1t−1              c1t                   10


                                                                     0


                                                                   −10



                                              yt
                                                                   −20


                                                                   −30
                                                                      0      2     4         6      8     10     12     14       16   18   20




           Figure 18.7 (a) Seasonal model. (b) Sample output, for a0 = b0 = 0, c0 = (1, 1, 1), with a period of 4.
           Color code as in Figure 18.5. Figure generated by ssmTimeSeriesSimple.


           hence E [yt |y1:t−1 ] = a0 + tb0 . This is thus a generalization of the classic constant linear trend
           model, an example of which is shown in the black line of Figure 18.6(b).

18.2.4.3   Seasonality
           Many time series ﬂuctuate periodically, as illustrated in Figure 18.7(b). This can be modeled by
           adding a latent process consisting of a series offset terms, ct , which sum to zero (on average)
           over a complete cycle of S steps:
                       
                       S−1
              ct = −         ct−s + ct , ct ∼ N (0, Qc )                                                                                      (18.22)
                       s=1

           See Figure 18.7(a) for the graphical model for the case S = 4 (we only need 3 seasonal vari-
           able because of the sum-to-zero constraint). Writing this in standard LG-SSM form is left to
           Exercise 18.2.

18.2.4.4   ARMA models *
           The classical approach to time-series forecasting is based on ARMA models. “ARMA” stands for
           auto-regressive moving-average, and refers to a model of the form
                     
                     p                       
                                             q
              xt =         αi xt−i +                βj wt−j + vt                                                                                (18.23)
                     i=1                     j=1

           where vt , wt ∼ N (0, 1) are independent Gaussian noise terms. If q = 0, we have a pure AR
           model, where xt ⊥ xi |xt−1:t−p , for i < t − p. For example, if p = 1, we have the AR(1) model
         640                                                                       Chapter 18. State space models


                                                                         w1        w2         w3

                       x1         x2          x3         x4         x1        x2         x3        x4

                                       (a)                                         (b)

                                                   w1         w2          w3

                                         x1             x2          x3             x4

                                                              (c)


         Figure 18.8 (a) An AR(1) model. (b) An MA(1) model represented as a bi-directed graph. (c) An ARMA(1,1)
         model. Source: Figure 5.14 of (Choi 2011). Used with kind permission of Myung Choi.



         shown in Figure 18.8(a). (The vt nodes are implicit in the Gaussian CPD for xt .) This is just a
         ﬁrst-order Markov chain. If p = 0, we have a pure MA model, where xt ⊥ xi , for i < t − q.
         For example, if q = 1, we have the MA(1) model shown in Figure 18.8(b). Here the wt nodes are
         hidden common causes, which induces dependencies between adjacent time steps. This models
         short-range correlation. If p = q = 1, we get the ARMA(1,1) model shown in Figure 18.8(c), which
         captures correlation at short and long time scales.
           It turns out that ARMA models can be represented as SSMs, as explained in (Aoki 1987; Harvey
         1990; West and Harrison 1997; Durbin and Koopman 2001; Petris et al. 2009; Prado and West
         2010). However, the structural approach to time series is often easier to understand than the
         ARMA approach. In addition, it allows the parameters to evolve over time, which makes the
         models more adaptive to non-stationarity.

 18.3    Inference in LG-SSM
         In this section, we discuss exact inference in LG-SSM models. We ﬁrst consider the online case,
         which is analogous to the forwards algorithm for HMMs. We then consider the offline case,
         which is analogous to the forwards-backwards algorithm for HMMs.

18.3.1   The Kalman ﬁltering algorithm
         The Kalman ﬁlter is an algorithm for exact Bayesian ﬁltering for linear-Gaussian state space
         models. We will represent the marginal posterior at time t by

            p(zt |y1:t , u1:t ) = N (zt |μt , Σt )                                                         (18.24)

         Since everything is Gaussian, we can perform the prediction and update steps in closed form,
         as we explain below. The resulting algorithm is the Gaussian analog of the HMM ﬁlter in
         Section 17.4.2.
           18.3. Inference in LG-SSM                                                                         641


18.3.1.1   Prediction step
           The prediction step is straightforward to derive:

              p(zt |y1:t−1 , u1:t )   =        N (zt |At zt−1 + Bt ut , Qt )N (zt−1 |μt−1 , Σt−1 )dzt−1   (18.25)

                                      =    N (zt |μt|t−1 , Σt|t−1 )                                       (18.26)
                           μt|t−1         At μt−1 + Bt ut                                                (18.27)
                           Σt|t−1         At Σt−1 ATt    + Qt                                            (18.28)

18.3.1.2   Measurement step
           The measurement step can be computed using Bayes rule, as follows
              p(zt |yt , y1:t−1 , u1:t ) ∝ p(yt |zt , ut )p(zt |y1:t−1 , u1:t )                           (18.29)
           In Section 18.3.1.6, we show that this is given by
              p(zt |y1:t , ut )   =   N (zt |μt , Σt )                                                    (18.30)
                           μt     =   μt|t−1 + Kt rt                                                      (18.31)
                           Σt     =   (I − Kt Ct )Σt|t−1                                                  (18.32)
           where rt is the residual or innovation, given by the difference between our predicted observa-
           tion and the actual observation:
              rt        yt − ŷt                                                                         (18.33)
              ŷt       E [yt |y1:t−1 , u1:t ] = Ct μt|t−1 + Dt ut                                       (18.34)
           and Kt is the Kalman gain matrix, given by
              Kt         Σt|t−1 CTt S−1
                                      t                                                                   (18.35)
           where
              St        cov [rt |y1:t−1 , u1:t ]                                                         (18.36)
                                                                                     
                    =    E (Ct zt + δ t − ŷt )(Ct zt + δ t − ŷt ) |y1:t−1 , u1:t
                                                                       T
                                                                                                          (18.37)
                    =    Ct Σt|t−1 CTt + Rt                                                               (18.38)
           where δ t ∼ N (0, Rt ) is an observation noise term which is independent of all other noise
           sources. Note that by using the matrix inversion lemma, the Kalman gain matrix can also be
           written as
              Kt = Σt|t−1 CT (CΣt|t−1 CT + R)−1 = (Σ−1
                                                    t|t−1 + C RC)
                                                             T    −1 T −1
                                                                    C R                                   (18.39)

           We now have all the quantities we need to implement the algorithm; see kalmanFilter for
           some Matlab code.
             Let us try to make sense of these equations. In particular, consider the equation for the
           mean update: μt = μt|t−1 + Kt rt . This says that the new mean is the old mean plus a
           642                                                                   Chapter 18. State space models


           correction factor, which is Kt times the error signal rt . The amount of weight placed on the
           error signal depends on the Kalman gain matrix. If Ct = I, then Kt = Σt|t−1 S−1         t , which
           is the ratio between the covariance of the prior (from the dynamic model) and the covariance
           of the measurement error. If we have a strong prior and/or very noisy sensors, |Kt | will be
           small, and we will place little weight on the correction term. Conversely, if we have a weak prior
           and/or high precision sensors, then |Kt | will be large, and we will place a lot of weight on the
           correction term.

18.3.1.3   Marginal likelihood
           As a byproduct of the algorithm, we can also compute the log-likelihood of the sequence using
                                   
              log p(y1:T |u1:T ) =    log p(yt |y1:t−1 , u1:t )                                    (18.40)
                                      t

           where
              p(yt |y1:t−1 , u1:t ) = N (yt |Ct μt|t−1 , St )                                            (18.41)

18.3.1.4   Posterior predictive
           The one-step-ahead posterior predictive density for the observations can be computed as follows

              p(yt |y1:t−1 , u1:t )   =      N (yt |Czt , R)N (zt |μt|t−1 , Σt|t−1 )dzt                  (18.42)

                                      =   N (yt |Cμt|t−1 , CΣt|t−1 CT + R)                               (18.43)
           This is useful for time series forecasting.

18.3.1.5   Computational issues
           There are two dominant costs in the Kalman ﬁlter: the matrix inversion to compute the Kalman
           gain matrix, Kt , which takes O(|yt |3 ) time; and the matrix-matrix multiply to compute Σt ,
           which takes O(|zt |2 ) time. In some applications (e.g., robotic mapping), we have |zt |  |yt |, so
           the latter cost dominates. However, in such cases, we can sometimes use sparse approximations
           (see (Thrun et al. 2006)).
              In cases where |yt |  |zt |, we can precompute Kt , since, suprisingly, it does not depend on
           the actual observations y1:t (an unusual property that is speciﬁc to linear Gaussian systems).
           The iterative equations for updating Σt are called the Ricatti equations, and for time invariant
           systems (i.e., where θ t = θ), they converge to a ﬁxed point. This steady state solution can then
           be used instead of using a time-speciﬁc gain matrix.
              In practice, more sophisticated implementations of the Kalman ﬁlter should be used, for rea-
           sons of numerical stability. One approach is the information ﬁlter, which recursively updates
           the canonical parameters of the Gaussian, Λt = Σ−1   t    and η t = Λt μt , instead of the moment
           parameters. Another approach is the square root ﬁlter, which works with the Cholesky de-
           composition or the Ut Dt Ut decomposition of Σt . This is much more numerically stable than
           directly updating Σt . Further details can be found at http://www.cs.unc.edu/~welch/kal
           man/ and in various books, such as (Simon 2006).
           18.3. Inference in LG-SSM                                                                       643


18.3.1.6   Derivation *
           We now derive the Kalman ﬁlter equations. For notational simplicity, we will ignore the input
           terms u1:t . From Bayes rule for Gaussians (Equation 4.125), we have that the posterior precision
           is given by

              Σ−1
               t        =     Σ−1       T −1
                               t|t−1 + Ct Rt Ct                                                         (18.44)

           From the matrix inversion lemma (Equation 4.106) we can rewrite this as
              Σt    =       Σt|t−1 − Σt|t−1 CTt (Rt + Ct Σt|t−1 CTt )−1 Ct Σt|t−1                       (18.45)
                    =       (I − Kt Ct )Σt|t−1                                                          (18.46)

           From Bayes rule for Gaussians (Equation 4.125), the posterior mean is given by
                                              −1
              μt    =       Σt Ct R−1
                                   t yt + Σt Σt|t−1 μt|t−1                                              (18.47)

           We will now massage this into the form stated earlier. Applying the second matrix inversion
           lemma (Equation 4.107) to the ﬁrst term of Equation 18.47 we have

              Σt Ct R−1
                     t yt        =    (Σ−1       T −1
                                        t|t−1 + Ct Rt Ct )
                                                           −1
                                                              Ct R−1
                                                                  t yt                                  (18.48)
                                 =    Σt|t−1 CTt (Rt   +   Ct Σt|t−1 CTt )−1 yt   = Kt yt               (18.49)

           Now applying the matrix inversion lemma (Equation 4.106) to the second term of Equation 18.47
           we have

              Σt Σ−1
                  t|t−1 μt|t−1                                                                          (18.50)
                    = (Σ−1       T −1
                        t|t−1 + Ct Rt Ct )
                                           −1 −1
                                             Σt|t−1 μt|t−1                                              (18.51)
                                                                                    
                    = Σt|t−1 − Σt|t−1 C (Rt +T
                                                       CTt Σt|t−1 CTt )Ct Σt|t−1        Σ−1
                                                                                         t|t−1 μt|t−1   (18.52)
                    = (Σt|t−1 − Kt CTt Σt|t−1 )Σ−1
                                                t|t−1 μt|t−1                                            (18.53)
                    = μt|t−1 −     Kt CTt μt|t−1                                                        (18.54)

           Putting the two together we get
              μt    =       μt|t−1 + Kt (yt − Ct μt|t−1 )                                               (18.55)

 18.3.2    The Kalman smoothing algorithm
           In Section 18.3.1, we described the Kalman ﬁlter, which sequentially computes p(zt |y1:t ) for each
           t. This is useful for online inference problems, such as tracking. However, in an offline setting,
           we can wait until all the data has arrived, and then compute p(zt |y1:T ). By conditioning
           on past and future data, our uncertainty will be signiﬁcantly reduced. This is illustrated in
           Figure 18.1(c), where we see that the posterior covariance ellipsoids are smaller for the smoothed
           trajectory than for the ﬁltered trajectory. (The ellipsoids are larger at the beginning and end of
           the trajectory, since states near the boundary do not have as many useful neighbors from which
           to borrow information.)
           644                                                                  Chapter 18. State space models


              We now explain how to compute the smoothed estimates, using an algorithm called the
           RTS smoother, named after its inventors, Rauch, Tung and Striebel (Rauch et al. 1965). It is
           also known as the Kalman smoothing algorithm. The algorithm is analogous to the forwards-
           backwards algorithm for HMMs, although there are some small differences which we discuss
           below.

18.3.2.1   Algorithm
           Kalman ﬁltering can be regarded as message passing on a graph, from left to right. When the
           messages have reached the end of the graph, we have successfully computed p(zT |y1:T ). Now
           we work backwards, from right to left, sending information from the future back to the past,
           and them combining the two information sources. The question is: how do we compute these
           backwards equations? We ﬁrst give the equations, then the derivation.
             We have
              p(zt |y1:T )   =   N (μt|T , Σt|T )                                                      (18.56)
                    μt|T     =   μt|t + Jt (μt+1|T − μt+1|t )                                           (18.57)
                    Σt|T     =   Σt|t + Jt (Σt+1|T −   Σt+1|t )JTt                                      (18.58)
                       Jt       Σt|t ATt+1 Σ−1
                                             t+1|t                                                      (18.59)

           where Jt is the backwards Kalman gain matrix. The algorithm can be initialized from μT |T
           and ΣT |T from the Kalman ﬁlter. Note that this backwards pass does not need access to the
           data, that is, it does not need y1:T . This allows us to “throw away” potentially high dimensional
           observation vectors, and just keep the ﬁltered belief states, which usually requires less memory.

18.3.2.2   Derivation *
           We now derive the Kalman smoother, following the presentation of (Jordan 2007, sec 15.7).
             The key idea is to leverage the Markov property, which says that zt is independent of future
           data, yt+1:T , as long as zt+1 is known. Of course, zt+1 is not known, but we have a distribution
           over it. So we condition on zt+1 and then integrate it out, as follows.

              p(zt |y1:T )   =      p(zt |y1:T , zt+1 )p(zt+1 |y1:T )dzt+1                             (18.60)

                             =      p(zt |y1:t ,  , zt+1 )p(zt+1 |y1:T )dzt+1
                                                 yt+1:T                                                 (18.61)

           By induction, assume we have already computed the smoothed distribution for t + 1:
              p(zt+1 |y1:T ) = N (zt+1 |μt+1|T , Σt+1|T )                                               (18.62)

           The question is: how do we perform the integration?
             First, we compute the ﬁltered two-slice distribution p(zt , zt+1 |y1:t ) as follows:
                                                        
                                          zt       μt|t         Σt|t       Σt|t ATt+1
              p(zt , zt+1 |y1:t ) = N         |                                                        (18.63)
                                         zt+1    μt+1|t      At+1 Σt|t      Σt+1|t
           18.3. Inference in LG-SSM                                                                        645


           Now we use Gaussian conditioning to compute p(zt |zt+1 , y1:t ) as follows:
                p(zt |zt+1 , y1:t )    =     N (zt |μt|t + Jt (zt+1 − μt+1|t ), Σt|t − Jt Σt+1|t JTt )   (18.64)
              We can compute the smoothed distribution for t using the rules of iterated expectation and
           iterated covariance. First, the mean:
                                                     
               μt|T = E E [zt |zt+1 , y1:T ] y1:T                                                  (18.65)
                                                    
                      = E E [zt |zt+1 , y1:t ] y1:T                                                (18.66)
                                                         
                      = E μt|t + Jt (zt+1 − μt+1|t ) y1:T                                          (18.67)
                        =      μt|t + Jt (μt+1|T − μt+1|t )                                              (18.68)
           Now the covariance:
                                                                                                  
                Σt|T     =     cov E [zt |zt+1 , y1:T ] y1:T + E cov [zt |zt+1 , y1:T ] y1:T             (18.69)
                                                                                                 
                         =     cov [E [zt |zt+1 , y1:t ] |y1:T ] + E cov [zt |zt+1 , y1:t ] y1:T         (18.70)
                                                                                                   
                         =     cov μt|t + Jt (zt+1 − μt+1|t )|y1:T + E Σt|t − Jt Σt+1|t JTt |y1:T        (18.71)
                                                               
                         =     Jt cov zt+1 − μt+1|t |y1:T JTt + Σt|t − Jt Σt+1|t JTt                     (18.72)
                         =     Jt Σt+1|T JTt + Σt|t − Jt Σt+1|t JTt                                      (18.73)
                         =     Σt|t + Jt (Σt+1|T −        Σt+1|t )JTt                                    (18.74)
           The algorithm can be initialized from μT |T and ΣT |T from the last step of the ﬁltering algo-
           rithm.

18.3.2.3   Comparison to the forwards-backwards algorithm for HMMs *
           Note that in both the forwards and backwards passes for LDS, we always worked with normalized
           distributions, either conditioned on the past data or conditioned on all the data. Furthermore,
           the backwards pass depends on the results of the forwards pass. This is different from the usual
           presentation of forwards-backwards for HMMs, where the backwards pass can be computed
           independently of the forwards pass (see Section 17.4.3).
              It turns out that we can rewrite the Kalman smoother in a modiﬁed form which makes it
           more similar to forwards-backwards for HMMs. In particular, we have

                p(zt |y1:T )    =          p(zt |y1:t , zt+1 )p(zt+1 |y1:T )dzt+1                        (18.75)

                                                                 p(zt+1 |y1:T )
                                =          p(zt , zt+1 |y1:t )                  dzt+1                    (18.76)
                                                                 p(zt+1 |y1:t )
           Now
                                      p(yt+1:T |zt+1 , )p(zt+1 |y1:t )
                                                       y1:t
                p(zt+1 |y1:T ) =                                                                         (18.77)
                                               p(yt+1:T |y1:t )
           so
                p(zt+1 |y1:T )   p(zt+1 |y1:t )p(yt+1:T |zt+1 )
                               =                                ∝ p(yt+1:T |zt+1 )                       (18.78)
                p(zt+1 |y1:t )   p(zt+1 |y1:t )p(yt+1:T |y1:t )
         646                                                                  Chapter 18. State space models


         which is the conditional likelihood of the future data. This backwards message can be computed
         independently of the forwards message. However, this approach has several disadvantages: (1)
         it needs access to the original observation sequence; (2) the backwards message is a likelihood,
         not a posterior, so it need not to integrate to 1 over zt – in fact, it may not always be possible
         to represent p(yt+1:T |zt+1 ) as a Gaussian with positive deﬁnite covariance (this problem does
         not arise in discrete state-spaces, as used in HMMs); (3) when exact inference is not possible, it
         makes more sense to try to approximate the smoothed distribution rather than the backwards
         likelihood term (see Section 22.5).
            There is yet another variant, known as two-ﬁlter smoothing, whereby we compute p(zt |y1:t )
         in the forwards pass as usual, and the ﬁltered posterior p(zt |yt+1:T ) in the backwards pass.
         These can then be easily combined to compute p(zt |y1:T ). See (Kitagawa 2004; Briers et al.
         2010) for details.

 18.4    Learning for LG-SSM
         In this section, we brieﬂy discuss how to estimate the parameters of an LG-SSM. In the control
         theory community, this is known as systems identiﬁcation (Ljung 1987).
            When using SSMs for time series forecasting, and also in some physical state estimation
         problems, the observation matrix C and the transition matrix A are both known and ﬁxed, by
         deﬁnition of the model. In such cases, all that needs to be learned are the noise covariances Q
         and R. (The initial state estimate μ0 is often less important, since it will get “washed away” by
         the data after a few time steps. This can be encouraged by setting the initial state covariance
         to be large, representing a weak prior.) Although we can estimate Q and R offline, using the
         methods described below, it is also possible to derive a recursive procedure to exactly compute
         the posterior p(zt , R, Q|y1:t ), which has the form of a Normal-inverse-Wishart; see (West and
         Harrison 1997; Prado and West 2010) for details.

18.4.1   Identiﬁability and numerical stability
         In the more general setting, where the hidden states have no pre-speciﬁed meaning, we need to
         learn A and C. However, in this case we can set Q = I without loss of generality, since an
         arbitrary noise covariance can be modeled by appropriately modifying A. Also, by analogy with
         factor analysis, we can require R to be diagonal without loss of generality. Doing this reduces
         the number of free parameters and improves numerical stability.
            Another constraint that is useful to impose is on the eigenvalues of the dynamics matrix A.
         To see why this is important, consider the case of no system noise. In this case, the hidden
         state at time t is given by

            zt = At z1 = UΛt U−1 z1                                                                     (18.79)

         where U is the matrix of eigenvectors for A, and Λ = diag(λi ) contains the eigenvalues. If
         any λi > 1, then for large t, zt will blow up in magnitude. Consequently, to ensure stability, it
         is useful to require that all the eigenvalues are less than 1 (Siddiqi et al. 2007). Of course, if all
         the eigenvalues are less than 1, then E [zt ] = 0 for large t, so the state will return to the origin.
         Fortunately, when we add noise, the state become non-zero, so the model does not degenerate.
         18.5. Approximate online inference for non-linear, non-Gaussian SSMs                         647


           Below we discuss how to estimate the parameters. However, for simplicity of presentation, we
         do not impose any of the constraints mentioned above.

18.4.2   Training with fully observed data
         If we observe the hidden state sequences, we can ﬁt the model by computing the MLEs (or even
         the full posteriors) for the parameters by solving a multivariate linear regression problem for
         zt−1 → z t and for zt → yt . That is, we can estimate A by solving the least squares problem
                     2
         J(A) = t=1 (zt −Azt−1 )2 , and similarly for C. We can estimate the system noise covariance
         Q from the residuals in predicting zt from zt−1 , and estimate the observation noise covariance
         R from the residuals in predicting yt from zt .

18.4.3   EM for LG-SSM
         If we only observe the output sequence, we can compute ML or MAP estimates of the parameters
         using EM. The method is conceptually quite similar to the Baum-Welch algorithm for HMMs
         (Section 17.5), except we use Kalman smoothing instead of forwards-backwards in the E step,
         and use different calculations in the M step. We leave the details to Exercise 18.1.

18.4.4   Subspace methods
         EM does not always give satisfactory results, because it is sensitive to the initial parameter
         estimates. One way to avoid this is to use a different approach known as a subspace method
         (Overschee and Moor 1996; Katayama 2005).
            To understand this approach, let us initially assume there is no observation noise and no
         system noise. In this case, we have zt = Azt−1 and yt = Czt , and hence yt = CAt−1 z1 .
         Consequently all the observations must be generated from a dim(zt )-dimensional linear mani-
         fold or subspace. We can identify this subspace using PCA (see the above references for details).
         Once we have an estimate of the zt ’s, we can ﬁt the model as if it were fully observed. We can
         either use these estimates in their own right, or use them to initialize EM.

18.4.5   Bayesian methods for “ﬁtting” LG-SSMs
         There are various offline Bayesian alternatives to the EM algorithm, including variational Bayes
         EM (Beal 2003; Barber and Chiappa 2007) and blocked Gibbs sampling (Carter and Kohn 1994;
         Cappe et al. 2005; Fruhwirth-Schnatter 2007). The Bayesian approach can also be used to
         perform online learning, as we discussed in Section 18.2.3. Unfortunately, once we add the SSM
         parameters to the state space, the model is generally no longer linear Gaussian. Consequently
         we must use some of the approximate online inference methods to be discussed below.

 18.5    Approximate online inference for non-linear, non-Gaussian SSMs
         In Section 18.3.1, we discussed how to perform exact online inference for LG-SSMs. However,
         many models are non linear. For example, most moving objects do not move in straight lines.
         And even if they did, if we assume the parameters of the model are unknown and add them
         648                                                                 Chapter 18. State space models


         to the state space, the model becomes nonlinear. Furthermore, non-Gaussian noise is also very
         common, e.g., due to outliers, or when inferring parameters for GLMs instead of just linear
         regression. For these more general models, we need to use approximate inference.
            The approximate inference algorithms we discuss below approximate the posterior by a Gaus-
         sian. In general, if Y = f (X), where X has a Gaussian distribution and f is a non-linear
         function, there are two main ways to approximate p(Y ) by a Gaussian. The ﬁrst is to use a
         ﬁrst-order approximation of f . The second is to use the exact f , but to project f (X) onto the
         space of Gaussians by moment matching. We discuss each of these methods in turn. (See also
         Section 23.5, where we discuss particle ﬁltering, which is a stochastic algorithm for approximate
         online inference, which uses a non-parametric approximation to the posterior, which is often
         more accurate but slower to compute.)

18.5.1   Extended Kalman ﬁlter (EKF)
         In this section, we focus on non-linear models, but we assume the noise is Gaussian. That is,
         we consider models of the form
            zt      =    g(ut , zt−1 ) + N (0, Qt )                                                 (18.80)
            yt      =    h(zt ) + N (0, Rt )                                                         (18.81)
         where the transition model g and the observation model h are nonlinear but differentiable
         functions. Furthermore, we focus on the case where we approximate the posterior by a single
         Gaussian. (The simplest way to handle more general posteriors (e.g., multi-modal, discrete, etc).
         is to use particle ﬁltering, which we discuss in Section 23.5.)
            The extended Kalman ﬁlter or EKF can be applied to nonlinear Gaussian dynamical systems
         of this form. The basic idea is to linearize g and h about the previous state estimate using
         a ﬁrst order Taylor series expansion, and then to apply the standard Kalman ﬁlter equations.
         (The noise variance in the equations (Q and R) is not changed, i.e., the additional error due to
         linearization is not modeled.) Thus we approximate the stationary non-linear dynamical system
         with a non-stationary linear dynamical system.
            The intuition behind the approach is shown in Figure 18.9, which shows what happens when
         we pass a Gaussian distribution p(x), shown on the bottom right, through a nonlinear function
         y = g(x), shown on the top right. The resulting distribution (approximated by Monte Carlo) is
         shown in the shaded gray area in the top left corner. The best Gaussian approximation to this,
         computed from E [g(x)] and var [g(x)] by Monte Carlo, is shown by the solid black line. The
         EKF approximates this Gaussian as follows: it linearizes the g function at the current mode, μ,
         and then passes the Gaussian distribution p(x) through this linearized function. In this example,
         the result is quite a good approximation to the ﬁrst and second moments of p(y), for much less
         cost than an MC approximation.
            In more detail, the method works as follows. We approximate the measurement model using
            p(yt |zt )    ≈    N (yt |h(μt|t−1 ) + Ht (yt − μt|t−1 ), Rt )                           (18.82)
         where Ht is the Jacobian matrix of h evaluated at the prior mode:
                          ∂hi (z)
            Hij                                                                                     (18.83)
                           ∂zj
               Ht        H|z=μt|t−1                                                                 (18.84)
18.5. Approximate online inference for non-linear, non-Gaussian SSMs                                     649


                                 p(y)                                      Function g(x)
                                 Gaussian of p(y)                          Taylor approx.
                                 Mean of p(y)                              Mean μ
                                 EKF Gaussian                              g(μ)
                                 Mean of EKF




                                                     y=g(x)
                       y
                                    p(y)                              x

                                                                                 p(x)
                                                                                 Mean μ




                                                      p(x)
                                                                      x



Figure 18.9 Nonlinear transformation of a Gaussian random variable. The prior p(x) is shown on the
bottom right. The function y = g(x) is shown on the top right. The transformed distribution p(y) is
shown in the top left. A linear function induces a Gaussian distribution, but a non-linear function induces
a complex distribution. The solid line is the best Gaussian approximation to this; the dotted line is the EKF
approximation to this. Source: Figure 3.4 of (Thrun et al. 2006). Used with kind permission of Sebastian
Thrun.


Similarly, we approximate the system model using

   p(zt |zt−1 , ut )       ≈   N (zt |g(ut , μt−1 ) + Gt (zt−1 − μt−1 ), Qt )                         (18.85)

where
                       ∂gi (u, z)
   Gij (u)                                                                                           (18.86)
                         ∂zj
        Gt        G(ut )|z=μt−1                                                                      (18.87)

so G is the Jacobian matrix of g evaluated at the prior mode.
  Given this, we can then apply the Kalman ﬁlter to compute the posterior as follows:
    μt|t−1    =    g(ut , μt−1 )                                                                      (18.88)
   Vt|t−1     =    Gt Vt−1 GTt + Qt                                                                   (18.89)
                                                              −1
        Kt    =    Vt|t−1 HTt (Ht Vt|t−1 HTt        + Rt )                                            (18.90)
        μt    =    μt|t−1 + Kt (yt − h(μt|t−1 ))                                                       (18.91)
        Vt    =    (I − Kt Ht )Vt|t−1                                                                 (18.92)
         650                                                                 Chapter 18. State space models


                     Actual (sampling)             Sigma-Point                Linearized (EKF)


                 covariance                                       sigma
                                                                  points



                                      mean


                          y = f (x)              ϒi = f ( χ i )            y = f ( x)    Py = AT Px A

                                                             S-P
                                true                         mean
                                mean



                   true                                                       A T Px A
                   covariance                  S-P                                       f (x)
                                               covariance transformed
                                                          sigma points


         Figure 18.10 An example of the unscented transform in two dimensions. Source: (Wan and der Merwe
         2001). Used with kind permission of Eric Wan.



         We see that the only difference from the regular Kalman ﬁlter is that, when we compute the
         state prediction, we use g(ut , μt−1 ) instead of At μt−1 + Bt ut , and when we compute the
         measurement update we use h(μt|t−1 ) instead of Ct μt|t−1 .
            It is possible to improve performance by repeatedly re-linearizing the equations around μt
         instead of μt|t−1 ; this is called the iterated EKF, and yields better results, although it is of
         course slower.
            There are two cases when the EKF works poorly. The ﬁrst is when the prior covariance is
         large. In this case, the prior distribution is broad, so we end up sending a lot of probability
         mass through different parts of the function that are far from the mean, where the function has
         been linearized. The other setting where the EKF works poorly is when the function is highly
         nonlinear near the current mean. In Section 18.5.2, we will discuss an algorithm called the UKF
         which works better than the EKF in both of these settings.

18.5.2   Unscented Kalman ﬁlter (UKF)
         The unscented Kalman ﬁlter (UKF) is a better version of the EKF (Julier and Uhlmann 1997).
         (Apparently it is so-called because it “doesn’t stink”!) The key intuition is this: it is easier
         to approximate a Gaussian than to approximate a function. So instead of performing a linear
         approximation to the function, and passing a Gaussian through it, instead pass a deterministically
         chosen set of points, known as sigma points, through the function, and ﬁt a Gaussian to the
         resulting transformed points. This is known as the unscented transform, and is sketched in
         Figure 18.10. (We explain this ﬁgure in detail below.)
           18.5. Approximate online inference for non-linear, non-Gaussian SSMs                            651


              The UKF basically uses the unscented transform twice, once to approximate passing through
           the system model g, and once to approximate passing through the measurement model h. We
           give the details below. Note that the UKF and EKF both perform O(d3 ) operations per time step
           where d is the size of the latent state-space. However, the UKF is accurate to at least second
           order, whereas the EKF is only a ﬁrst order approximation (although both the EKF and UKF can
           be extended to capture higher order terms). Furthermore, the unscented transform does not
           require the analytic evaluation of any derivatives or Jacobians (a so-called derivative free ﬁlter),
           making it simpler to implement and more widely applicable.

18.5.2.1   The unscented transform
           Before explaining the UKF, we ﬁrst explain the unscented transform. Assume p(x) = N (x|μ, Σ),
           and consider estimating p(y), where y = f (x) for some nonlinear function f . The unscented
           transform does this as follows. First we create a set of 2d + 1 sigma points xi , given by
                       !          "                            "                 #
              x =        μ, {μ + ( (d + λ)Σ):i }di=1 , {μ − ( (d + λ)Σ):i }di=1                       (18.93)

           where λ = α2 (d + κ) − d is a scaling parameter to be speciﬁed below, and the notation M:i
           means the i’th column of matrix M.
             These sigma points are propagated through the nonlinear function to yield yi = f (xi ), and
           the mean and covariance for y is computed as follows:
                         2d
                         
              μy     =          i
                               wm yi                                                                    (18.94)
                         i=0
                         2d
                         
              Σy     =         wci (yi − μy )(yi − μy )T                                                (18.95)
                         i=0

           where the w’s are weighting terms, given by

               i            λ
              wm     =                                                                                  (18.96)
                         d+λ
                            λ
               wci   =         + (1 − α2 + β)                                                           (18.97)
                         d+λ
               i                   1
              wm     =   wci =                                                                          (18.98)
                               2(d + λ)
           See Figure 18.10 for an illustration.
                                                                                                  they
              In general, the optimal values of α, β and κ are problem dependent, but when d = 1, √
           are α = √1, β = 0, κ = 2. Thus in the 1d case, λ = 2, so the 3 sigma points are μ, μ + 3σ
           and μ − 3σ.

18.5.2.2   The UKF algorithm
           The UKF algorithm is simply two applications of the unscented tranform, one to compute
           p(zt |y1:t−1 , u1:t ) and the other to compute p(zt |y1:t , u1:t ). We give the details below.
         652                                                                   Chapter 18. State space models


           The ﬁrst step is to approximate the predictive density p(zt |y1:t−1 , u1:t ) ≈ N (zt |μt , Σt ) by
         passing the old belief state N (zt−1 |μt−1 , Σt−1 ) through the system model g as follows:
                        !                   "                            "               #
            z0t−1 =       μt−1 , {μt−1 + γ( Σt−1 ):i }di=1 , {μt−1 − γ( Σt−1 ):i }di=1                 (18.99)
               z∗i
                t     =      g(ut , z0i
                                     t−1 )                                                              (18.100)
                             2d
                             
                                    i ∗i
                μt    =            wm zt                                                                (18.101)
                             i=0
                             2d
                             
               Σt     =            wci (z∗i        ∗i
                                         t − μt )(zt − μt ) + Qt                                        (18.102)
                             i=0
                     √
         where γ = d + λ.
            The second step is to approximate the likelihood p(yt |zt ) ≈ N (yt |ŷt , St ) by passing the
         prior N (zt |μt , Σt ) through the observation model h:
                                       $                      $
               0
             zt =         μt , {μt + γ( Σt ):i }di=1 , {μt − γ( Σt ):i }di=1                        (18.103)

            y∗i
             t        =    h(z0i
                              t )                                                                       (18.104)
                           2d
                           
               ŷt    =           i
                                 wm y∗i
                                     t                                                                  (18.105)
                           i=0
                           2d
                           
               St     =          wci (y∗i         ∗i
                                       t − ŷt )(yt − ŷt ) + Rt
                                                           T
                                                                                                        (18.106)
                           i=0

           Finally, we use Bayes rule for Gaussians to get the posterior p(zt |y1:t , u1:t ) ≈ N (zt |μt , Σt ):
                             2d
                             
                z,y
            Σt        =            wci (z∗i        ∗i
                                         t − μt )(yt − ŷt )
                                                             T
                                                                                                        (18.107)
                             i=0
                               z,y
               Kt     =      Σt S−1t                                                                    (18.108)
                μt    =      μt + Kt (yt − ŷt )                                                        (18.109)
                Σt    =      Σt −    Kt St KTt                                                          (18.110)

18.5.3   Assumed density ﬁltering (ADF)
         In this section, we discuss inference where we perform an exact update step, but then approx-
         imate the posterior by a distribution of a certain convenient form, such as a Gaussian. More
         precisely, let the unknowns that we want to infer be denoted by θ t . Suppose that Q is a set of
         tractable distributions, e.g., Gaussians with a diagonal covariance matrix, or a product of discrete
         distributions. Suppose that we have an approximate prior qt−1 (θ t−1 ) ≈ p(θ t−1 |y1:t−1 ), where
         qt−1 ∈ Q. We can update this with the new measurement to get the approximate posterior
                          1
            p̂(θ t ) =       p(yt |θ t )qt|t−1 (θ t )                                                    (18.111)
                          Zt
           18.5. Approximate online inference for non-linear, non-Gaussian SSMs                                                                 653


                                                             p̂t                                     p̂t+1      θ t−1              θt
                                                                                           t   e




                                                   e
                                                                                        da




                                                 at
                                              pd
                                                                                    p
                                                                                U




                                             U
                                                                                                             st−1             st




                                                       Project




                                                                                                   Project
                                          qt|t−1                            qt+1|t
                                    ict




                                                                      ict
                                  ed




                                                                    ed
                                Pr                                                                                  y t−1               yt




                                                                  Pr
                        qt−1                                     qt                                   qt+1      xt−1               xt


                                                             (a)                                                        (b)

           Figure 18.11 (a) Illustration of the predict-update-project cycle of assumed density ﬁltering. (b) A dynam-
           ical logistic regression model. Compare to Figure 18.4(a).


           where

              Zt =      p(yt |θ t )qt|t−1 (θ t )dθ t                                                                                         (18.112)

           is the normalization constant and

              qt|t−1 (θ t ) =        p(θ t |θ t−1 )qt−1 (θ t−1 )dθ t−1                                                                       (18.113)

           is the one step ahead predictive distribution. If the prior is from a suitably restricted family, this
           one-step update process is usually tractable. However, we often ﬁnd that the resulting posterior
           is no longer in our tractable family, p̂(θ t ) ∈ Q. So after updating we seek the best tractable
           approximation by computing
              q(θ t ) = argmin KL (p̂(θ t )||q(θ t ))                                                                                        (18.114)
                          q∈Q

           This minimizes the the Kullback-Leibler divergence (Section 2.8.2) from the approximation q(θ t )
           to the “exact” posterior p̂(θ t ), and can be thought of as projecting p̂ onto the space of tractable
           distributions. The whole algorithm consists of predict-update-project cycles. This is known as
           assumed density ﬁltering or ADF (Maybeck 1979). See Figure 18.11(a) for a sketch.
              If q is in the exponential family, one can show that this KL minimization can be done by
           moment matching. We give some examples of this below.

18.5.3.1   Boyen-Koller algorithm for online inference in DBNs
           If we are performing inference in a discrete-state dynamic Bayes net (Section 17.6.7), where θtj
           is the j’th hidden variable at time t, then the exact posterior p(θ t ) becomes intractable to
           compute because of the entanglement problem. Suppose we use a fully factored approximation
                                 D
           of the form q(θ t ) = j=1 Cat(θt,j |π t,j ), where πtjk = q(θt,j = k) is the probability variable
           j is in state k, and D is the number of variables. In this case, the moment matching operation
           becomes
              πtjk = p̂(θt,j = k)                                                                                                            (18.115)
           654                                                                  Chapter 18. State space models


           This can be computed by performing a predict-update step using the factored prior, and then
           computing the posterior marginals. This is known as the Boyen-Koller algorithm, named after
           the authors of (Boyen and Koller 1998), who demonstrated that the error incurred by this series
           of repeated approximations remains bounded (under certain assumptions about the stochasticity
           of the system).

18.5.3.2   Gaussian approximation for online inference in GLMs
                                   D
           Now suppose q(θ t ) = j=1 N (θt,j |μt,j , τt,j ), where τt,j is the variance. Then the optimal
           parameters of the tractable approximation to the posterior are
              μt,j = Ep̂ [θt,j ] , τt,j = varp̂ [θt,j ]                                                   (18.116)

           This method can be used to do online inference for the parameters of many statistical models.
           For example, theTrueSkill system, used in Microsoft’s Xbox to rank players over time, uses this
           form of approximation (Herbrich et al. 2007). We can also apply this method to simpler models,
           such as GLM, which have the advantage that the posterior is log-concave. Below we explain how
           to do this for binary logistic regression, following the presentation of (Zoeter 2007).
              The model has the form

              p(yt |xt , θ t )        =     Ber(yt |sigm(xTt θ t ))                                       (18.117)
                                                                2
                 p(θ t |θ t−1 )       =     N (θ t |θ t−1 , σ I)                                          (18.118)

           where σ 2 is some process noise which allows the parameters to change slowly over time. (This
           can be set to 0, as in     the recursive least squares method (Section 18.2.3), if desired.) We will
           assume qt−1 (θ t−1 ) = j N (θt−1,j |μt−1,j , τt−1,j ) is the tractable prior. We can compute the
           one-step-ahead predictive density qt|t−1 (θ t ) using the standard linear-Gaussian update. So now
           we concentrate on the measurement update step.
            Deﬁne the deterministic quantity st = θ t xt , as shown in Figure 18.11(b). If qt|t−1 (θ t ) =
                                                             T

             j N (θt,j |μt|t−1,j , τt|t−1,j ), then we can compute the predictive distribution for st as follows:

              qt|t−1 (st )        =       N (st |mt|t−1 , vt|t−1 )                                        (18.119)
                                          
                   mt|t−1         =           xt,j μt|t−1,j                                              (18.120)
                                           j
                                          
                     vt|t−1       =            x2t,j τt|t−1,j                                             (18.121)
                                           j

           The posterior for st is given by

              qt (st )    =       N (st |mt , vt )                                                       (18.122)
                                         1
                   mt     =          st p(yt |st )qt|t−1 (st )dst                                        (18.123)
                                       Zt
                                      2 1
                     vt   =          st p(yt |st )qt|t−1 (st )dst − m2t                                  (18.124)
                                        Zt
                    Zt    =           p(yt |st )qt|t−1 (st )dst                                          (18.125)
       18.6. Hybrid discrete/continuous SSMs                                                             655


       where p(yt |st ) = Ber(yt |st ). These integrals are one dimensional, and so can be computed
       using Gaussian quadrature (see (Zoeter 2007) for details). This is the same as one step of the
       UKF algorithm.
          Having inferred q(st ), we need to compute q(θ|st ). This can be done as follows. Deﬁne δm
       as the change in the mean of st and δv as the change in the variance:

          mt = mt|t−1 + δm , vt = vt|t−1 + δv                                                        (18.126)

       Then one can show that the new factored posterior over the model parameters is given by
          q(θt,j )   =   N (θt,j |μt,j , τt,j )                                                      (18.127)
             μt,j    =   μt|t−1,j + aj δm                                                            (18.128)
             τt,j    =   τt|t−1,j +    a2j δv                                                        (18.129)
                             xt,j τt|t−1,j
               aj        2 2                                                                       (18.130)
                             j  xt,j  τt|t−1,j

       Thus we see that the parameters which correspond to inputs with larger magnitude (big |xt,j |)
       or larger uncertainty (big τt|t−1,j ) get updated most, which makes intuitive sense.
          In (Opper 1998) a version of this algorithm is derived using a probit likelihood (see Section 9.4).
       In this case, the measurement update can be done in closed form, without the need for numerical
       integration. In either case, the algorithm only takes O(D) operations per time step, so it can
       be applied to models with large numbers of parameters. And since it is an online algorithm,
       it can also handle massive datasets. For example (Zhang et al. 2010) use a version of this
       algorithm to ﬁt a multi-class classiﬁer online to very large datasets. They beat alternative (non
       Bayesian) online learning algorithms, and sometimes even outperform state of the art batch
       (offline) learning methods such as SVMs (described in Section 14.5).

18.6   Hybrid discrete/continuous SSMs
       Many systems contain both discrete and continuous hidden variables; these are known as hybrid
       systems. For example, the discrete variables may indicate whether a measurement sensor is
       faulty or not, or which “regime” the system is in. We will see some other examples below.
          A special case of a hybrid system is when we combine an HMM and an LG-SSM. This is
       called a switching linear dynamical system (SLDS), a jump Markov linear system (JMLS),
       or a switching state space model (SSSM). More precisely, we have a discrete latent variable,
       qt ∈ {1, . . . , K}, a continuous latent variable, zt ∈ RL , an continuous observed response
       yt ∈ RD and an optional continuous observed input or control ut ∈ RU . We then assume that
       the continuous variables have linear Gaussian CPDs, conditional on the discrete states:
            p(qt = k|qt−1 = j, θ) = Aij                                                               (18.131)
          p(zt |zt−1 , qt = k, ut , θ) = N (zt |Ak zt−1 + Bk ut , Qk )                               (18.132)
            p(yt |zt , qt = k, ut , θ) = N (yt |Ck zt + Dk ut , Rk )                                 (18.133)

       See Figure 18.12(a) for the DGM representation.
           656                                                                        Chapter 18. State space models


                                             ut−1               ut


                                             qt−1               qt


                                         z t−1             zt



                                             y t−1              yt


                                                     (a)                        (b)

           Figure 18.12 A switching linear dynamical system. (a) Squares represent discrete nodes, circles represent
           continuous nodes. (b) Illustration of how the number of modes in the belief state grows exponentially over
           time. We assume there are two binary states.


 18.6.1    Inference
           Unfortunately inference (i.e., state estimation) in hybrid models, including the switching LG-
           SSM model, is intractable. To see why, suppose qt is binary, but that only the dynamics
           A depend on qt , not the observation matrix. Our initial belief state will be a mixture of
           2 Gaussians, corresponding to p(z1 |y1 , q1 = 1) and p(z1 |y1 , q1 = 2). The one-step-ahead
           predictive density will be a mixture of 4 Gaussians p(z2 |y1 , q1 = 1, q2 = 1), p(z2 |y1 , q1 =
           1, q2 = 2), p(z2 |y1 , q1 = 2, q2 = 1), and p(z2 |y1 , q1 = 2, q2 = 2), obtained by passing each of
           the prior modes through the 2 possible transition models. The belief state at step 2 will also be
           a mixture of 4 Gaussians, obtained by updating each of the above distributions with y2 . At step
           3, the belief state will be a mixture of 8 Gaussians. And so on. So we see there is an exponential
           explosion in the number of modes (see Figure 18.12(b)).
              Various approximate inference methods have been proposed for this model, such as the
           following:

           • Prune off low probability trajectories in the discrete tree; this is the basis of multiple
             hypothesis tracking (Bar-Shalom and Fortmann 1988; Bar-Shalom and Li 1993).
           • Use Monte Carlo. Essentially we just sample discrete trajectories, and apply an analytical
             ﬁlter to the continuous variables conditional on a trajectory. See Section 23.6 for details.
           • Use ADF, where we approximate the exponentially large mixture of Gaussians with a smaller
             mixture of Gaussians. See Section 18.6.1.1 for details.

18.6.1.1   A Gaussian sum ﬁlter for switching SSMs
           A Gaussian sum ﬁlter (Sorenson and Alspach 1971) approximates the belief state at each step
           by a mixture of K Gaussians. This can be implemented by running K Kalman ﬁlters in
18.6. Hybrid discrete/continuous SSMs                                                          657


                                        Filter 1   - b1,1
                                                      t
                                                        @
                    b1t−1                                    @
                                                             R
                                                             @ Merge        - b1t
                                 @                              
                                  @                   1,2
                                   @ Filter 2
                                   R               - bt        
                                                         B 
                                                          B
                                                          B
                                                   - b2,1    B
                                        Filter 1      t 
                                                              B
                    b2t−1                                       BBN         - b2t
                                                                    Merge
                                 @                           
                                  @                   2,2
                                   @ Filter 2
                                   R               - bt



                                                    (a)




       b1t−1                -                      - b̃1t−1          - Filter 1     - b1t

                                  Merge
       b2t−1                -                      - b̃2t−1          - Filter 2     - b2t



                                                    (b)

Figure 18.13 ADF for a switching linear dynamical system. (a) GPB2 method. (b) IMM method. See text
for details.


parallel. This is particularly well suited to switching SSMs. We now describe one version of this
algorithm, known as the “second order generalized pseudo Bayes ﬁlter” (GPB2) (Bar-Shalom
and Fortmann 1988). We assume that the prior belief state bt−1 is a mixture of K Gaussians,
one per discrete state:

   bit−1  p(zt−1 , qt−1 = i|y1:t−1 ) = πt−1,i N (zt−1 |μt−1,i , Σt−1,i )                   (18.134)

We then pass this through the K different linear models to get

   bij
    t  p(zt , qt−1 = i, qt = j|y1:t ) = πtij N (zt |μt,ij , Σt,ij )                        (18.135)

where πtij = πt−1,i p(qt = j|qt−1 = i). Finally, for each value of j, we collapse the K Gaussian
mixtures down to a single mixture to give

   bjt  p(zt , qt = j|y1:t ) = πtj N (zt |μt,j , Σt,j )                                   (18.136)
         658                                                                Chapter 18. State space models


         See Figure 18.13(a) for a sketch.
           The optimal way to approximate a mixture
                                                   of Gaussians with a single Gaussian is given by
         q = arg minq KL (q||p), where p(z) = k πk N (z|μk , Σk ) and q(z) = N (z|μ, Σ). This can
         be solved by moment matching, that is,
                               
            μ = E [z] =            πk μ k                                                    (18.137)
                                  k
                                                                  
            Σ       =   cov [z] =         πk Σk + (μk − μ)(μk − μ)T                                 (18.138)
                                      k

         In the graphical model literature, this is called weak marginalization (Lauritzen 1992), since it
         preserves the ﬁrst two moments. Applying these equations to our model, we can go from bij    t to
         bjt as follows (where we drop the t subscript for brevity):
                         
               πj =         πij                                                                    (18.139)
                           i
                          πij
            πj|i    =                                                                              (18.140)
                          j  πij
                                  
                         
               μj   =       πj|i μij                                                                (18.141)
                           i
                                                                
               Σj   =          πj|i Σij + (μij − μj )(μij − μj )T                                   (18.142)
                           i

            This algorithm requires running K 2 ﬁlters at each step. A cheaper alternative is to represent
         the belief state by a single Gaussian, marginalizing over the discrete switch at each step. This
         is a straightforward application of ADF. An offline extension to this method, called expectation
         correction, is described in (Barber 2006; Mesot and Barber 2009).
            Another heuristic approach, known as interactive multiple models or IMM (Bar-Shalom and
         Fortmann 1988), can be obtained by ﬁrst collapsing the prior to a single Gaussian (by moment
         matching), and then updating it using K different Kalman ﬁlters, one per value of qt . See
         Figure 18.13(b) for a sketch.

18.6.2   Application: data association and multi-target tracking
         Suppose we are tracking K objects, such as airplanes, and at time t, we observe K  detection
         events, e.g., “blips” on a radar screen. We can have K  < K due to occlusion or missed
         detections. We can have K  > K due to clutter or false alarms. Or we can have K  = K. In
         any case, we need to ﬁgure out the correspondence between the K  detections ytk and the K
         objects ztj . This is called the problem of data association, and it arises in many application
         domains.
            Figure 18.14 gives an example in which we are tracking K = 2 objects. At each time step, qt
         is the unknown mapping which speciﬁes which objects caused which observations. It speciﬁes
         the “wiring diagram” for time slice t. The standard way to solve this problem is to compute
         a weight which measures the “compatibility” between object j and measurement k, typically
         based on how close k is to where the model thinks j should be (the so-called nearest neighbor
         data association heuristic). This gives us a K × K  weight matrix. We can make this into a
         18.6. Hybrid discrete/continuous SSMs                                                             659


                                              z t−1,1     z t,1      z t+1,1
                                              z t−1,2     z t,2      z t+1,2



                                              y t−1,1
                                                                     y t+1,1
                                              y t−1,2     y t,1
                                                                     y t+1,2
                                              y t−1,3




                                               qt−1         qt        qt+1


         Figure 18.14 A model for tracking two objects in the presence of data-assocation ambiguity. We observe
         3, 1 and 2 detections in the ﬁrst three time steps.



         square matrix of size N × N , where N = max(K, K  ), by adding dummy background objects,
         which can explain all the false alarms, and adding dummy observations, which can explain all
         the missed detections. We can then compute the maximal weight bipartite matching using the
         Hungarian algorithm, which takes O(N 3 ) time (see e.g., (Burkard et al. 2009)). Conditional
         on this, we can perform a Kalman ﬁlter update, where objects that are assigned to dummy
         observations do not perform a measurement update.
            An extension of this method, to handle a variable and/or unknown number of objects, is
         known as multi-target tracking. This requires dealing with a variable-sized state space. There
         are many ways to do this, but perhaps the simplest and most robust methods are based on
         sequential Monte Carlo (e.g., (Ristic et al. 2004)) or MCMC (e.g., (Khan et al. 2006; Oh et al.
         2009)).

18.6.3   Application: fault diagnosis
         Consider the model in Figure 18.15(a). This represents an industrial plant consisting of various
         tanks of liquid, interconnected by pipes. In this example, we just have two tanks, for simplicity.
         We want to estimate the pressure inside each tank, based on a noisy measurement of the ﬂow
         into and out of each tank. However, the measurement devices can sometimes fail. Furthermore,
         pipes can burst or get blocked; we call this a “resistance failure”. This model is widely used as
         a benchmark in the fault diagnosis community (Mosterman and Biswas 1999).
            We can create a probabilistic model of the system as shown in Figure 18.15(b). The square
         nodes represent discrete variables, such as measurement failures and resistance failures. The
         remaining variables are continuous. A variety of approximate inference algorithms can be applied
         to this model. See (Koller and Lerner 2001) for one approach, based on Rao-Blackwellized particle
         ﬁltering (which is explained in Section 23.6).
         660                                                                         Chapter 18. State space models


                                                                     RF11                        RF21


                                                                      R11                         R21


                                                                                    M F11                       M F21


                                                                             F11     M11                 F21     M21


                                                                      P11                         P21


                                                                                    M F112                      M F212


                                                                             F112   M112                 F212   M212



                                                                     R112                        R212


                                                                     RF112                       RF212


                                                                      P12                         P22


                                                                             F12     M12                 F22     M22


                                                                                    M F12                       M F22


                                                                      R12                         R22


                                                                     RF12                        RF22



                                     (a)                                                   (b)

         Figure 18.15 (a) The two-tank system. The goal is to infer when pipes are blocked or have burst, or
         sensors have broken, from (noisy) observations of the ﬂow out of tank 1, F 1o, out of tank 2, F 2o, or
         between tanks 1 and 2, F 12. R1o is a hidden variable representing the resistance of the pipe out of
         tank 1, P 1 is a hidden variable representing the pressure in tank 1, etc. Source: Figure 11 of (Koller and
         Lerner 2001) . Used with kind permission of Daphne Koller. (b) Dynamic Bayes net representation of the
         two-tank system. Discrete nodes are squares, continuous nodes are circles. Abbreviations: R = resistance,
         P = pressure, F = ﬂow, M = measurement, RF = resistance failure, MF = measurement failure. Based on
         Figure 12 of (Koller and Lerner 2001).



18.6.4   Application: econometric forecasting
         The switching LG-SSM model is widely used in econometric forecasting, where it is called
         a regime switching model. For example, we can combine two linear trend models (see Sec-
         tion 18.2.4.2), one in which bt > 0 reﬂects a growing economy, and one in which bt < 0 reﬂects
         a shrinking economy. See (West and Harrison 1997) for further details.

         Exercises
         Exercise 18.1 Derivation of EM for LG-SSM
         Derive the E and M steps for computing a (locally optimal) MLE for an LG-SSM model. Hint: the results
         are in (Ghahramani and Hinton 1996b); your task is to derive these results.
         Exercise 18.2 Seasonal LG-SSM model in standard form
         Write the seasonal model in Figure 18.7(a) as an LG-SSM. Deﬁne the matrices A, C, Q and R.
19        Undirected graphical models (Markov
          random ﬁelds)



  19.1    Introduction
          In Chapter 10, we discussed directed graphical models (DGMs), commonly known as Bayes nets.
          However, for some domains, being forced to choose a direction for the edges, as required by
          a DGM, is rather awkward. For example, consider modeling an image. We might suppose that
          the intensity values of neighboring pixels are correlated. We can create a DAG model with a 2d
          lattice topology as shown in Figure 19.1(a). This is known as a causal MRF or a Markov mesh
          (Abend et al. 1965). However, its conditional independence properties are rather unnatural. In
          particular, the Markov blanket (deﬁned in Section 10.5) of the node X8 in the middle is the other
          colored nodes (3, 4, 7, 9, 12 and 13) rather than just its 4 nearest neighbors as one might expect.
             An alternative is to use an undirected graphical model (UGM), also called a Markov random
          ﬁeld (MRF) or Markov network. These do not require us to specify edge orientations, and are
          much more natural for some problems such as image analysis and spatial statistics. For example,
          an undirected 2d lattice is shown in Figure 19.1(b); now the Markov blanket of each node is just
          its nearest neighbors, as we show in Section 19.2.
             Roughly speaking, the main advantages of UGMs over DGMs are: (1) they are symmetric and
          therefore more “natural” for certain domains, such as spatial or relational data; and (2) discrimi-
          nativel UGMs (aka conditional random ﬁelds, or CRFs), which deﬁne conditional densities of the
          form p(y|x), work better than discriminative DGMs, for reasons we explain in Section 19.6.1. The
          main disadvantages of UGMs compared to DGMs are: (1) the parameters are less interpretable
          and less modular, for reasons we explain in Section 19.3; and (2) parameter estimation is com-
          putationally more expensive, for reasons we explain in Section 19.5. See (Domke et al. 2008) for
          an empirical comparison of the two approaches for an image processing task.

  19.2    Conditional independence properties of UGMs
 19.2.1   Key properties
          UGMs deﬁne CI relationships via simple graph separation as follows: for sets of nodes A, B,
          and C, we say xA ⊥G xB |xC iff C separates A from B in the graph G. This means that,
          when we remove all the nodes in C, if there are no paths connecting any node in A to any
          node in B, then the CI property holds. This is called the global Markov property for UGMs.
          For example, in Figure 19.2(b), we have that {1, 2} ⊥ {6, 7}|{3, 4, 5}.
662                                     Chapter 19. Undirected graphical models (Markov random ﬁelds)


             X1       X2          X3    X4     X5         X1     X2     X3          X4    X5


             X6       X7          X8    X9     X10        X6     X7     X8          X9    X10


             X11      X12         X13   X14    X15        X11    X12    X13         X14   X15


             X16      X17         X18   X19    X20        X16    X17    X18         X19   X20

                                  (a)                                   (b)

Figure 19.1 (a) A 2d lattice represented as a DAG. The dotted red node X8 is independent of all other
nodes (black) given its Markov blanket, which include its parents (blue), children (green) and co-parents
(orange). (b) The same model represented as a UGM. The red node X8 is independent of the other black
nodes given its neighbors (blue nodes).


                  2                     4                          2                      4
      1                     5                   7         1                   5                  7
                  3                     6                          3                      6

                            (a)                                               (b)

               Figure 19.2 (a) A DGM. (b) Its moralized version, represented as a UGM.



   The set of nodes that renders a node t conditionally independent of all the other nodes in
the graph is called t’s Markov blanket; we will denote this by mb(t). Formally, the Markov
blanket satisﬁes the following property:

   t ⊥ V \ cl(t)|mb(t)                                                                               (19.1)

where cl(t)  mb(t) ∪ {t} is the closure of node t. One can show that, in a UGM, a node’s
Markov blanket is its set of immediate neighbors. This is called the undirected local Markov
property. For example, in Figure 19.2(b), we have mb(5) = {2, 3, 4, 6}.
  From the local Markov property, we can easily see that two nodes are conditionally indepen-
dent given the rest if there is no direct edge between them. This is called the pairwise Markov
property. In symbols, this is written as
   s ⊥ t|V \ {s, t} ⇐⇒ Gst = 0                                                                       (19.2)

  Using the three Markov properties we have discussed, we can derive the following CI properties
(amongst others) from the UGM in Figure 19.2(b):

• Pairwise 1 ⊥ 7|rest
• Local 1 ⊥ rest|2, 3
         19.2. Conditional independence properties of UGMs                                                                   663



                                                       G             L             P

                                                               p(x) > 0

                                Figure 19.3 Relationship between Markov properties of UGMs.


                                  2                        4                           2                          4
                      1                        5                          1                         5
                                  3                                                    3
                                       (a)                                                    (b)

         Figure 19.4 (a) The ancestral graph induced by the DAG in Figure 19.2(a) wrt U = {2, 4, 5}. (b) The
         moralized version of (a).



         • Global 1, 2 ⊥ 6, 7|3, 4, 5

             It is obvious that global Markov implies local Markov which implies pairwise Markov. What is
         less obvious, but nevertheless true (assuming p(x) > 0 for all x, i.e., that p is a positive density),
         is that pairwise implies global, and hence that all these Markov properties are the same, as
         illustrated in Figure 19.3 (see e.g., (Koller and Friedman 2009, p119) for a proof).1 The importance
         of this result is that it is usually easier to empirically assess pairwise conditional independence;
         such pairwise CI statements can be used to construct a graph from which global CI statements
         can be extracted.

19.2.2   An undirected alternative to d-separation
         We have seen that determinining CI relationships in UGMs is much easier than in DGMs, because
         we do not have to worry about the directionality of the edges. In this section, we show how to
         determine CI relationships for a DGM using a UGM.
           It is tempting to simply convert the DGM to a UGM by dropping the orientation of the edges,
         but this is clearly incorrect, since a v-structure A → B ← C has quite different CI properties
         than the corresponding undirected chain A − B − C. The latter graph incorrectly states that
         A ⊥ C|B. To avoid such incorrect CI statements, we can add edges between the “unmarried”
         parents A and C, and then drop the arrows from the edges, forming (in this case) a fully
         connected undirected graph. This process is called moralization. Figure 19.2(b) gives a larger

         1. The restriction to positive densities arises because deterministic constraints can result in independencies present in
         the distribution that are not explicitly represented in the graph. See e.g., (Koller and Friedman 2009, p120) for some
         examples. Distributions with non-graphical CI properties are said to be unfaithful to the graph, so I(p) = I(G).
         664                               Chapter 19. Undirected graphical models (Markov random ﬁelds)


                                                               3UREDELOLVWLF0RGHOV


                                                     *UDSKLFDO0RGHOV




                                          'LUHFWHG      &KRUGDO         8QGLUHFWHG




         Figure 19.5 DGMs and UGMs can perfectly represent different sets of distributions. Some distributions
         can be perfectly represented by either DGMs or UGMs; the corresponding graph must be chordal.



         example of moralization: we interconnect 2 and 3, since they have a common child 5, and we
         interconnect 4, 5 and 6, since they have a common child 7.
            Unfortunately, moralization loses some CI information, and therefore we cannot use the
         moralized UGM to determine CI properties of the DGM. For example, in Figure 19.2(a), using
         d-separation, we see that 4 ⊥ 5|2. Adding a moralization arc 4 − 5 would lose this fact (see
         Figure 19.2(b)). However, notice that the 4-5 moralization edge, due to the common child 7,
         is not needed if we do not observe 7 or any of its descendants. This suggests the following
         approach to determining if A ⊥ B|C. First we form the ancestral graph of DAG G with respect
         to U = A ∪ B ∪ C. This means we remove all nodes from G that are not in U or are not
         ancestors of U . We then moralize this ancestral graph, and apply the simple graph separation
         rules for UGMs. For example, in Figure 19.4(a), we show the ancestral graph for Figure 19.2(a)
         using U = {2, 4, 5}. In Figure 19.4(b), we show the moralized version of this graph. It is clear
         that we now correctly conclude that 4 ⊥ 5|2.

19.2.3   Comparing directed and undirected graphical models
         Which model has more “expressive power”, a DGM or a UGM? To formalize this question, recall
         that we say that G is an I-map of a distribution p if I(G) ⊆ I(p). Now deﬁne G to be
         perfect map of p if I(G) = I(p), in other words, the graph can represent all (and only) the CI
         properties of the distribution. It turns out that DGMs and UGMs are perfect maps for different
         sets of distributions (see Figure 19.5). In this sense, neither is more powerful than the other as
         a representation language.
            As an example of some CI relationships that can be perfectly modeled by a DGM but not a
         UGM, consider a v-structure A → C ← B. This asserts that A ⊥ B, and A ⊥ B|C. If we drop
         the arrows, we get A − C − B, which asserts A ⊥ B|C and A ⊥ B, which is incorrect. In fact,
         there is no UGM that can precisely represent all and only the two CI statements encoded by a v-
         structure. In general, CI properties in UGMs are monotonic, in the following sense: if A ⊥ B|C,
         then A ⊥ B|(C ∪ D). But in DGMs, CI properties can be non-monotonic, since conditioning
         19.3. Parameterization of MRFs                                                                    665



                      A                                      A


           D                      B              D                       B                D               B


                      C                                      C                            C               A

                      (a)                                   (b)                                  (c)
         Figure 19.6 A UGM and two failed attempts to represent it as a DGM. Source: Figure 3.10 of (Koller and
         Friedman 2009). Used with kind permission of Daphne Koller.



         on extra variables can eliminate conditional independencies due to explaining away.
            As an example of some CI relationships that can be perfectly modeled by a UGM but not a
         DGM, consider the 4-cycle shown in Figure 19.6(a). One attempt to model this with a DGM is
         shown in Figure 19.6(b). This correctly asserts that A ⊥ C|B, D. However, it incorrectly asserts
         that B ⊥ D|A. Figure 19.6(c) is another incorrect DGM: it correctly encodes A ⊥ C|B, D, but
         incorrectly encodes B ⊥ D. In fact there is no DGM that can precisely represent all and only
         the CI statements encoded by this UGM.
            Some distributions can be perfectly modeled by either a DGM or a UGM; the resulting graphs
         are called decomposable or chordal. Roughly speaking, this means the following: if we collapse
         together all the variables in each maximal clique, to make “mega-variables”, the resulting graph
         will be a tree. Of course, if the graph is already a tree (which includes chains as a special case),
         it will be chordal. See Section 20.4.1 for further details.

 19.3    Parameterization of MRFs
         Although the CI properties of UGM are simpler and more natural than for DGMs, representing
         the joint distribution for a UGM is less natural than for a DGM, as we see below.

19.3.1   The Hammersley-Clifford theorem
         Since there is no topological ordering associated with an undirected graph, we can’t use the chain
         rule to represent p(y). So instead of associating CPDs with each node, we associate potential
         functions or factors with each maximal clique in the graph. We will denote the potential
         function for clique c by ψc (yc |θ c ). A potential function can be any non-negative function of
         its arguments. The joint distribution is then deﬁned to be proportional to the product of clique
         potentials. Rather surprisingly, one can show that any positive distribution whose CI properties
         can be represented by a UGM can be represented in this way. We state this result more formally
         below.
666                                    Chapter 19. Undirected graphical models (Markov random ﬁelds)


Theorem 19.3.1 (Hammersley-Clifford). A positive distribution p(y) > 0 satisﬁes the CI prop-
erties of an undirected graph G iff p can be represented as a product of factors, one per maximal
clique, i.e.,
                1 
    p(y|θ) =             ψc (yc |θ c )                                                       (19.3)
               Z(θ)
                        c∈C

where C is the set of all the (maximal) cliques of G, and Z(θ) is the partition function given by
            
  Z(θ)              ψc (yc |θ c )                                                           (19.4)
               x c∈C

Note that the partition function is what ensures the overall distribution sums to 1.2
  The proof was never published, but can be found in e.g., (Koller and Friedman 2009).
  For example, consider the MRF in Figure 10.1(b). If p satisﬁes the CI properties of this graph
then we can write p as follows:
                 1
   p(y|θ) =          ψ123 (y1 , y2 , y3 )ψ234 (y2 , y3 , y4 )ψ35 (y3 , y5 )                                 (19.5)
                Z(θ)
where
          
   Z=          ψ123 (y1 , y2 , y3 )ψ234 (y2 , y3 , y4 )ψ35 (y3 , y5 )                                       (19.6)
           y

 There is a deep connection between UGMs and statistical physics. In particular, there is a
model known as the Gibbs distribution, which can be written as follows:
              1         
  p(y|θ) =       exp(−      E(yc |θ c ))                                              (19.7)
            Z(θ)         c

where E(yc ) > 0 is the energy associated with the variables in clique c. We can convert this to
a UGM by deﬁning
   ψc (yc |θ c ) = exp(−E(yc |θ c ))                                                                        (19.8)
We see that high probability states correspond to low energy conﬁgurations. Models of this form
are known as energy based models, and are commonly used in physics and biochemistry, as
well as some branches of machine learning (LeCun et al. 2006).
   Note that we are free to restrict the parameterization to the edges of the graph, rather than
the maximal cliques. This is called a pairwise MRF. In Figure 10.1(b), we get
   p(y|θ)      ∝    ψ12 (y1 , y2 )ψ13 (y1 , y3 )ψ23 (y2 , y3 )ψ24 (y2 , y4 )ψ34 (y3 , y4 )ψ35 (y3 , y5 )    (19.9)
                    
               ∝       ψst (ys , yt )                                                                      (19.10)
                    s∼t

This form is widely used due to its simplicity, although it is not as general.

2. The partition function is denoted by Z because of the German word zustandssumme, which means “sum over states”.
This reﬂects the fact that a lot of pioneering working in statistical physics was done by Germans.
         19.3. Parameterization of MRFs                                                                  667


19.3.2   Representing potential functions
         If the variables are discrete, we can represent the potential or energy functions as tables of
         (non-negative) numbers, just as we did with CPTs. However, the potentials are not probabilities.
         Rather, they represent the relative “compatibility” between the different assignments to the
         potential. We will see some examples of this below.
            A more general approach is to deﬁne the log potentials as a linear function of the parameters:
            log ψc (yc )  φc (yc )T θ c                                                               (19.11)
         where φc (xc ) is a feature vector derived from the values of the variables yc . The resulting log
         probability has the form
                           
            log p(y|θ) =       φc (yc )T θ c − Z(θ)                                                   (19.12)
                              c

         This is also known as a maximum entropy or a log-linear model.
            For example, consider a pairwise MRF, where for each edge, we associate a feature vector of
         length K 2 as follows:
            φst (ys , yt ) = [. . . , I(ys = j, yt = k), . . .]                                        (19.13)
         If we have a weight for each feature, we can convert this into a K × K potential function as
         follows:
            ψst (ys = j, yt = k) = exp([θ Tst φst ]jk ) = exp(θst (j, k))                              (19.14)
         So we see that we can easily represent tabular potentials using a log-linear form. But the
         log-linear form is more general.
            To see why this is useful, suppose we are interested in making a probabilistic model of English
         spelling. Since certain letter combinations occur together quite frequently (e.g., “ing”), we will
         need higher order factors to capture this. Suppose we limit ourselves to letter trigrams. A
         tabular potential still has 263 = 17, 576 parameters in it. However, most of these triples will
         never occur.
            An alternative approach is to deﬁne indicator functions that look for certain “special” triples,
         such as “ing”, “qu-”, etc. Then we can deﬁne the potential on each trigram as follows:
                                         
             ψ(yt−1 , yt , yt+1 ) = exp(   θk φk (yt−1 , yt , yt+1 ))                                (19.15)
                                            k

         where k indexes the different features, corresponding to “ing”, “qu-”, etc., and φk is the corre-
         sponding binary feature function. By tying the parameters across locations, we can deﬁne the
         probability of a word of any length using
                           
            p(y|θ) ∝ exp(           θk φk (yt−1 , yt , yt+1 ))                                      (19.16)
                                  t   k

         This raises the question of where these feature functions come from. In many applications,
         they are created by hand to reﬂect domain knowledge (we will see examples later), but it is also
         possible to learn them from data, as we discuss in Section 19.5.6.
         668                                   Chapter 19. Undirected graphical models (Markov random ﬁelds)


 19.4    Examples of MRFs
         In this section, we show how several popular probability models can be conveniently expressed
         as UGMs.

19.4.1   Ising model
         The Ising model is an example of an MRF that arose from statistical physics.3 It was originally
         used for modeling the behavior of magnets. In particular, let ys ∈ {−1, +1} represent the spin
         of an atom, which can either be spin down or up. In some magnets, called ferro-magnets,
         neighboring spins tend to line up in the same direction, whereas in other kinds of magnets,
         called anti-ferromagnets, the spins “want” to be different from their neighbors.
            We can model this as an MRF as follows. We create a graph in the form of a 2D or 3D lattice,
         and connect neighboring variables, as in Figure 19.1(b). We then deﬁne the following pairwise
         clique potential:
                              w
                               e st e−wst
             ψst (ys , yt ) = −wst                                                                (19.17)
                              e      ewst
         Here wst is the coupling strength between nodes s and t. If two nodes are not connected in
         the graph, we set wst = 0. We assume that the weight matrix W is symmetric, so wst = wts .
         Often we assume all edges have the same strength, so wst = J (assuming wst = 0).
            If all the weights are positive, J > 0, then neighboring spins are likely to be in the same
         state; this can be used to model ferromagnets, and is an example of an associative Markov
         network. If the weights are sufficiently strong, the corresponding probability distribution will
         have two modes, corresponding to the all +1’s state and the all -1’s state. These are called the
         ground states of the system.
            If all of the weights are negative, J < 0, then the spins want to be different from their
         neighbors; this can be used to model an anti-ferromagnet, and results in a frustrated system,
         in which not all the constraints can be satisﬁed at the same time. The corresponding probability
         distribution will have multiple modes. Interestingly, computing the partition function Z(J) can
         be done in polynomial time for associative Markov networks, but is NP-hard in general (Cipra
         2000).
            There is an interesting analogy between Ising models and Gaussian graphical models. First,
         assuming yt ∈ {−1, +1}, we can write the unnormalized log probability of an Ising model as
         follows:
                                             1
             log p̃(y) = −      ys wst yt = − yT Wy                                                 (19.18)
                            s∼t
                                              2

         (The factor of 12 arises because we sum each edge twice.) If wst = J > 0, we get a low energy
         (and hence high probability) if neighboring states agree.
            Sometimes there is an external ﬁeld, which is an energy term which is added to each spin.
         This can be modelled using a local energy term of the form −bT y, where b is sometimes called

         3. Ernst Ising was a German-American physicist, 1900–1998.
         19.4. Examples of MRFs                                                                                             669


         a bias term. The modiﬁed distribution is given by
                                                   1
            log p̃(y) =       wst ys yt +    bs ys = yT Wy + bT y                                                        (19.19)
                          s∼t             s
                                                     2

         where θ = (W, b).
           If we deﬁne μ  − 12 Σ−1 b, Σ−1 = −W, and c  12 μT Σ−1 μ, we can rewrite this in a form
         that looks similar to a Gaussian:
                          1
             p̃(y) ∝ exp(− (y − μ)T Σ−1 (y − μ) + c)                                                                     (19.20)
                          2
         One very important difference is that, in the case of Gaussians, the normalization constant,
         Z = |2πΣ|, requires the computation of a matrix determinant, which can be computed in
         O(D3 ) time, whereas in the case of the Ising model, the normalization constant requires
         summing over all 2D bit vectors; this is equivalent to computing the matrix permanent, which
         is NP-hard in general (Jerrum et al. 2004).

19.4.2   Hopﬁeld networks
         A Hopﬁeld network (Hopﬁeld 1982) is a fully connected Ising model with a symmetric weight
         matrix, W = WT . These weights, plus the bias terms b, can be learned from training data
         using (approximate) maximum likelihood, as described in Section 19.5.4
            The main application of Hopﬁeld networks is as an associative memory or content ad-
         dressable memory. The idea is this: suppose we train on a set of fully observed bit vectors,
         corresponding to patterns we want to memorize. Then, at test time, we present a partial pattern
         to the network. We would like to estimate the missing variables; this is called pattern com-
         pletion. See Figure 19.7 for an example. This can be thought of as retrieving an example from
         memory based on a piece of the example itself, hence the term “associative memory”.
            Since exact inference is intractable in this model, it is standard to use a coordinate descent
         algorithm known as iterative conditional modes (ICM), which just sets each node to its most
         likely (lowest energy) state, given all its neighbors. The full conditional can be shown to be

             p(ys = 1|y−s , θ) = sigm(ws,:
                                       T
                                           y−s + bs )                                                                     (19.21)
                                                                                                
         Picking the most probable state amounts to using the rule ys∗ = 1 if t wst yt > bs and using
         ys∗ = 0 otherwise. (Much better inference algorithms will be discussed later in this book.)
            Since inference is deterministic, it is also possible to interpret this model as a recurrent
         neural network. (This is quite different from the feedforward neural nets studied in Section 16.5;
         they are univariate conditional density models of the form p(y|x, θ) which can only be used for
         supervised learning.) See Hertz et al. (1991) for further details on Hopﬁeld networks.
            A Boltzmann machine generalizes the Hopﬁeld / Ising model by including some hidden
         nodes, which makes the model representationally more powerful. Inference in such models
         often uses Gibbs sampling, which is a stochastic version of ICM (see Section 24.2 for details).

         4. ML estimation works much better than the outer product rule proposed in in (Hopﬁeld 1982), because it not only
         lowers the energy of the observed patterns, but it also raises the energy of the non-observed patterns, in order to make
         the distribution sum to one (Hillar et al. 2012).
670                                Chapter 19. Undirected graphical models (Markov random ﬁelds)




Figure 19.7 Examples of how an associative memory can reconstruct images. These are binary images
of size 50 × 50 pixels. Top: training images. Row 2: partially visible test images. Row 3: estimate after
5 iterations. Bottom: ﬁnal state estimate. Based on Figure 2.1 of Hertz et al. (1991). Figure generated by
hopfieldDemo.




               (a)                                 (b)                                 (c)

Figure 19.8 Visualizing a sample from a 10-state Potts model of size 128 × 128 for different association
strengths: (a) J = 1.42, (b) J = 1.44, (c) J = 1.46. The regions are labeled according to size: blue is
largest, red is smallest. Used with kind permission of Erik Sudderth. See gibbsDemoIsing for Matlab
code to produce a similar plot for the Ising model.



However, we could equally well apply Gibbs to a Hopﬁeld net and ICM to a Boltzmann machine:
the inference algorithm is not part of the model deﬁnition. See Section 27.7 for further details
on Boltzmann machines.
         19.4. Examples of MRFs                                                                          671




                                                ys                      yt


                                                xs                      xt


                               Figure 19.9 A grid-structured MRF with local evidence nodes.



19.4.3   Potts model
         It is easy to generalize the Ising model to multiple discrete states, yt ∈ {1, 2, . . . , K}. It is
         common to use a potential function of the following form:
                              ⎛ J         ⎞
                               e   0    0
             ψst (ys , yt ) = ⎝ 0 eJ 0 ⎠                                                              (19.22)
                                0  0 eJ

         This is called the Potts model.5 If J > 0, then neighboring nodes are encouraged to have the
         same label. Some samples from this model are shown in Figure 19.8. We see that for J > 1.44,
         large clusters occur, for J < 1.44, many small clusters occur, and at the critical value of
         K = 1.44, there is a mix of small and large clusters. This rapid change in behavior as we vary
         a parameter of the system is called a phase transition, and has been widely studied in the
         physics community. An analogous phenomenon occurs in the Ising model; see (MacKay 2003,
         ch 31) for details.
            The Potts model can be used as a prior for image segmentation, since it says that neighboring
         pixels are likely to have the same discrete label and hence belong to the same segment. We can
         combine this prior with a likelihood term as follows:
                                                                               
                                                        1                       
             p(y, x|θ) = p(y|J)       p(xt |yt , θ) =            ψ(ys , yt ; J)     p(xt |yt , θ)  (19.23)
                                    t
                                                        Z(J) s∼t                  t

         where p(xt |yt = k, θ) is the probability of observing pixel xt given that the corresponding
         segment belongs to class k. This observation model can be modeled using a Gaussian or a
         non-parametric density. (Note that we label the hidden nodes yt and the observed nodes xt , to
         be compatible with Section 19.6.)
            The corresponding graphical model is a mix of undirected and directed edges, as shown in
         Figure 19.9. The undirected 2d lattice represents the prior p(y); in addition, there are directed
         edge from each yt to its corresponding xt , representing the local evidence. Technically speak-
         ing, this combination of an undirected and directed graph is called a chain graph. However,

         5. Renfrey Potts was an Australian mathematician, 1925–2005.
           672                                     Chapter 19. Undirected graphical models (Markov random ﬁelds)


           since the xt nodes are observed, they can be “absorbed” into the model, thus leaving behind an
           undirected “backbone”.
              This model is a 2d analog of an HMM, and could be called a partially observed MRF. As
           in an HMM, the goal is to perform posterior inference, i.e., to compute (some function of)
           p(y|x, θ). Unfortunately, the 2d case is provably much harder than the 1d case, and we must
           resort to approximate methods, as we discuss in later chapters.
              Although the Potts prior is adequate for regularizing supervised learning problems, it is not
           sufficiently accurate to perform image segmentation in an unsupervised way, since the segments
           produced by this model do not accurately represent the kinds of segments one sees in natural
           images (Morris et al. 1996).6 For the unsupervised case, one needs to use more sophisticated
           priors, such as the truncated Gaussian process prior of (Sudderth and Jordan 2008).

 19.4.4    Gaussian MRFs
           An undirected GGM, also called a Gaussian MRF (see e.g., (Rue and Held 2005)), is a pairwise
           MRF of the following form:
                                                 
                 p(y|θ) ∝          ψst (ys , yt )   ψt (yt )                                     (19.24)
                                     s∼t                 t
                                          1
               ψst (ys , yt )   =    exp(− ys Λst yt )                                                                    (19.25)
                                          2
                                          1
                    ψt (yt )    =    exp(− Λtt yt2 + ηt yt )                                                              (19.26)
                                          2
           (Note that we could easily absorb the node potentials ψt into the edge potentials, but we have
           kept them separate for clarity.) The joint distribution can be written as follows:
                                           1
               p(y|θ)      ∝    exp[η T y − yT Λy]                                                                        (19.27)
                                           2
           We recognize this as a multivariate Gaussian written in information form where Λ = Σ−1 and
           η = Λμ.
             If Λst = 0 , then there is no pairwise term connecting s and t, so by the factorization theorem
           (Theorem 2.2.1), we conclude that
               ys ⊥ yt |y−(st) ⇐⇒ Λst = 0                                                                                 (19.28)
           The zero entries in Λ are called structural zeros, since they represent the absent edges in the
           graph. Thus undirected GGMs correspond to sparse precision matrices, a fact which we exploit
           in Section 26.7.2 to efficiently learn the structure of the graph.

19.4.4.1   Comparing Gaussian DGMs and UGMs *
           In Section 10.2.5, we saw that directed GGMs correspond to sparse regression matrices, and hence
           sparse Cholesky factorizations of covariance matrices, whereas undirected GGMs correspond to

           6. An inﬂuential paper (Geman and Geman 1984), which introduced the idea of a Gibbs sampler (Section 24.2), proposed
           using the Potts model as a prior for image segmentation, but the results in their paper are misleading because they did
           not run their Gibbs sampler for long enough. See Figure 24.10 for a vivid illustration of this point.
19.4. Examples of MRFs                                                                        673




Figure 19.10 A VAR(2) process represented as a dynamic chain graph. Source: (Dahlhaus and Eichler
2000). Used with kind permission of Rainer Dahlhaus and Oxford University Press.


sparse precision matrices. The advantage of the DAG formulation is that we can make the
regression weights W, and hence Σ, be conditional on covariate information (Pourahmadi 2004),
without worrying about positive deﬁnite constraints. The disadavantage of the DAG formulation
is its dependence on the order, although in certain domains, such as time series, there is already
a natural ordering of the variables.
   It is actually possible to combine both representations, resulting in a Gaussian chain graph.
For example, consider a a discrete-time, second-order Markov chain in which the states are
continuous, yt ∈ RD . The transition function can be represented as a (vector-valued) linear-
Gaussian CPD:
   p(yt |yt−1 , yt−2 , θ) = N (yt |A1 yt−1 + A2 yt−2 , Σ)                                  (19.29)
This is called vector auto-regressive or VAR process of order 2. Such models are widely used
in econometrics for time-series forecasting.
   The time series aspect is most naturally modeled using a DGM. However, if Σ−1 is sparse,
then the correlation amongst the components within a time slice is most naturally modeled
using a UGM. For example, suppose we have
          ⎛3                    ⎞           ⎛                    ⎞
             5   0 15    0    0              0 0 − 15 0 0
          ⎜0 3 0 − 1 0⎟                     ⎜0 0 0 0 0 ⎟
          ⎜ 2 51 3        5     ⎟           ⎜                    ⎟
          ⎜
    A1 = ⎜ 5 3 5         0      ⎟
                              0 ⎟ , A2 = ⎜   0 0 0 0 0 ⎟                              (19.30)
                                            ⎜                    ⎟
          ⎝0 0 0 − 1 1 ⎠                    ⎝0 0    1
                                                         0    1 ⎠
                          2   5                     5         3
             0 0 15      0    2
                              5              0 0 0 0 − 15
and
        ⎛        1      1
                                 ⎞       ⎛                                   ⎞
            1    2      3     0 0          2.13 −1.47            −1.2    0 0
     ⎜1          1     − 13   0 0⎟       ⎜−1.47 2.13              1.2    0 0⎟
     ⎜ 21                        ⎟       ⎜                                   ⎟
   Σ=⎜
     ⎜3         − 13    1     0 0⎟    −1 ⎜
                                 ⎟ , Σ = ⎜ −1.2  1.2              1.8    0 0⎟⎟              (19.31)
     ⎝0          0      0     1 0⎠       ⎝ 0      0                0     1 0⎠
       0         0      0     0 1            0    0                0     0 1
         674                               Chapter 19. Undirected graphical models (Markov random ﬁelds)




                          x1                               x2                              x3

                                                          (a)


                                               w1                    w2
                                    x1                     x2                    x3

                                                          (b)

         Figure 19.11 (a) A bi-directed graph. (b) The equivalent DAG. Here the w nodes are latent confounders.
         Based on Figures 5.12-5.13 of (Choi 2011). Used with kind permission of Myung Choi.



         The resulting graphical model is illustrated in Figure 19.10. Zeros in the transition matrices A1
         and A2 correspond to absent directed arcs from yt−1 and yt−2 into yt . Zeros in the precision
         matrix Σ−1 correspond to absent undirected arcs between nodes in yt .
            Sometimes we have a sparse covariance matrix rather than a sparse precision matrix. This can
         be represented using a bi-directed graph, where each edge has arrows in both directions, as in
         Figure 19.11(a). Here nodes that are not connected are unconditionally independent. For example
         in Figure 19.11(a) we see that Y1 ⊥ Y3 . In the Gaussian case, this means Σ1,3 = Σ3,1 = 0. (A
         graph representing a sparse covariance matrix is called a covariance graph.) By contrast, if
         this were an undirected model, we would have that Y1 ⊥ Y3 |Y2 , and Λ1,3 = Λ3,1 = 0, where
         Λ = Σ−1 .
            A bidirected graph can be converted to a DAG with latent variables, where each bidirected
         edge is replaced with a hidden variable representing a hidden common cause, or confounder,
         as illustrated in Figure 19.11(b). The relevant CI properties can then be determined using d-
         separation.
            We can combine bidirected and directed edges to get a directed mixed graphical model.
         This is useful for representing a variety of models, such as ARMA models (Section 18.2.4.4),
         structural equation models (Section 26.5.5), etc.

19.4.5   Markov logic networks *
         In Section 10.2.2, we saw how we could “unroll” Markov models and HMMs for an arbitrary
         number of time steps in order to model variable-length sequences. Similarly, in Section 19.4.1,
         we saw how we could expand a lattice UGM to model images of any size. What about more
         complex domains, where we have a variable number of objects and relationships between them?
         Creating models for such scenarios is often done using ﬁrst-order logic (see e.g., (Russell and
         Norvig 2010)). For example, consider the sentences “Smoking causes cancer” and “If two people
         are friends, and one smokes, then so does the other”. We can write these sentences in ﬁrst-order
19.4. Examples of MRFs                                                                                                 675




                                                    Friends(A,B)



          Friends(A,A)                 Smokes(A)                   Smokes(B)                  Friends(B,B)


                         Cancer(A)                                               Cancer(B)
                                                    Friends(B,A)




Figure 19.12 An example of a ground Markov logic network represented as a pairwise MRF for 2 people.
Based on Figure 2.1 from (Domingos and Lowd 2009). Used with kind permission of Pedro Domingos.



logic as follows:
                   ∀x.Sm(x) =⇒ Ca(x)                                                                                (19.32)
    ∀x.∀y.F r(x, y) ∧ Sm(x) =⇒ Sm(y)                                                                                (19.33)
where Sm and Ca are predicates, and F r is a relation.7
   Of course, such rules are not always true. Indeed, this brittleness is the main reason why
logical approaches to AI are no longer widely used, at least not in their pure form. There
have been a variety of attempts to combine ﬁrst order logic with probability theory, an area
known as statistical relational AI or probabilistic relational modeling (Kersting et al. 2011).
One simple approach is to take logical rules and attach weights (known as certainty factors) to
them, and then to interpret them as conditional probability distributions. For example, we might
say p(Ca(x) = 1|Sm(x) = 1) = 0.9. Unfortunately, the rule does not say what to predict if
Sm(x) = 0. Furthermore, combining CPDs in this way is not guaranteed to deﬁne a consistent
joint distribution, because the resulting graph may not be a DAG.
   An alternative approach is to treat these rules as a way of deﬁning potential functions in an
unrolled UGM. The result is known as a Markov logic network (Domingos and Lowd 2009).
To specify the network, we ﬁrst rewrite all the rules in conjunctive normal form (CNF), also
known as clausal form. In this case, we get
                 ¬Sm(x) ∨ Ca(x)                                                                                     (19.34)
    ¬F r(x, y) ∨ ¬Sm(x) ∨ Sm(y)                                                                                     (19.35)
The ﬁrst clause can be read as “Either x does not smoke or he has cancer”, which is logically
equivalent to Equation 19.32. (Note that in a clause, any unbound variable, such as x, is assumed
to be universally quantiﬁed.)

7. A predicate is just a function of one argument, known as an object, that evaluates to true or false, depending on
whether the property holds or not of that object. A (logical) relation is just a function of two or more arguments (objects)
that evaluates to true or false, depending on whether the relationship holds between that set of objects or not.
         676                               Chapter 19. Undirected graphical models (Markov random ﬁelds)


             Inference in ﬁrst-order logic is only semi-decidable, so it is common to use a restricted subset.
         A common approach (as used in Prolog) is to restrict the language to Horn clauses, which are
         clauses that contain at most one positive literal. Essentially this means the model is a series of
         if-then rules, where the right hand side of the rules (the “then” part, or consequence) has only
         a single term.
             Once we have encoded our knowledge base as a set of clauses, we can attach weights to
         each one; these weights are the parameter of the model, and they deﬁne the clique potentials
         as follows:

            ψc (xc ) = exp(wc φc (xc ))                                                                 (19.36)

         where φc (xc ) is a logical expression which evaluates clause c applied to the variables xc , and
         wc is the weight we attach to this clause. Roughly speaking, the weight of a clause speciﬁes
         the probability of a world in which this clause is satsiﬁed relative to a world in which it is not
         satisﬁed.
            Now suppose there are two objects (people) in the world, Anna and Bob, which we will denote
         by constant symbols A and B. We can make a ground network from the above clauses by
         creating binary random variables Sx , Cx , and Fx,y for x, y ∈ {A, B}, and then “wiring these
         up” according to the clauses above. The result is the UGM in Figure 19.12 with 8 binary nodes.
         Note that we have not encoded the fact that F r is a symmetric relation, so F r(A, B) and
         F r(B, A) might have different values. Similarly, we have the “degenerate” nodes F r(A, A) and
         F r(B, B), since we did not enforce x = y in Equation 19.33. (If we add such constraints,
         then the model compiler, which generates the ground network, could avoid creating redundant
         nodes.)
            In summary, we can think of MLNs as a convenient way of specifying a UGM template, that
         can get unrolled to handle data of arbitrary size. There are several other ways to deﬁne relational
         probabilistic models; see e.g., (Koller and Friedman 2009; Kersting et al. 2011) for details. In some
         cases, there is uncertainty about the number or existence of objects or relations (the so-called
         open universe problem). Section 18.6.2 gives a concrete example in the context of multi-object
         tracking. See e.g., (Russell and Norvig 2010; Kersting et al. 2011) and references therein for further
         details.

 19.5    Learning
         In this section, we discuss how to perform ML and MAP parameter estimation for MRFs. We will
         see that this is quite computationally expensive. For this reason, it is rare to perform Bayesian
         inference for the parameters of MRFs (although see (Qi et al. 2005)).

19.5.1   Training maxent models using gradient methods
         Consider an MRF in log-linear form:

                        1       
            p(y|θ) =        exp   θ Tc φc (y)                                                           (19.37)
                       Z(θ)     c
         19.5. Learning                                                                                    677


         where c indexes the cliques. The scaled log-likelihood is given by
                                                                              
                    1                    1   T
           (θ)           log p(yi |θ) =              θ c φc (yi ) − log Z(θ)                          (19.38)
                    N i                   N i       c

         Since MRFs are in the exponential family, we know that this function is convex in θ (see
         Section 9.2.3), so it has a unique global maximum which we can ﬁnd using gradient-based
         optimizers. In particular, the derivative for the weights of a particular clique, c, is given by
                                                          
             ∂          1                   ∂
                   =              φc (yi ) −      log Z(θ)                                              (19.39)
             ∂θ c        N i                 ∂θ c

         Exercise 19.1 asks you to show that the derivative of the log partition function wrt θ c is the
         expectation of the c’th feature under the model, i.e.,
            ∂ log Z(θ)                          
                           =   E [φc (y)|θ] =        φc (y)p(y|θ)                                       (19.40)
                ∂θ c                             y

         Hence the gradient of the log likelihood is
                                   
             ∂      1 
                 =          φ (yi ) − E [φc (y)]                                                         (19.41)
            ∂θ c     N i c

         In the ﬁrst term, we ﬁx y to its observed values; this is sometimes called the clamped term.
         In the second term, y is free; this is sometimes called the unclamped term or contrastive
         term. Note that computing the unclamped term requires inference in the model, and this must
         be done once per gradient step. This makes UGM training much slower than DGM training.
            The gradient of the log likelihood can be rewritten as the expected feature vector according
         to the empirical distribution minus the model’s expectation of the feature vector:
            ∂
                 = Epemp [φc (y)] − Ep(·|θ) [φc (y)]                                                    (19.42)
            ∂θ c
         At the optimum, the gradient will be zero, so the empirical distribution of the features will
         match the model’s predictions:

            Epemp [φc (y)] = Ep(·|θ) [φc (y)]                                                           (19.43)

         This is called moment matching. This observation motivates a different optimization algorithm
         which we discuss in Section 19.5.7.

19.5.2   Training partially observed maxent models
         Suppose we have missing data and/or hidden variables in our model. In general, we can
         represent such models as follows:
                          1        
            p(y, h|θ) =       exp(      θ Tc φc (h, y))                                  (19.44)
                         Z(θ)        c
         678                                   Chapter 19. Undirected graphical models (Markov random ﬁelds)


         The log likelihood has the form

                          1                                       1           1 
            (θ)     =        log   p(yi , hi |θ)               =       log          p̃(yi , hi |θ)   (19.45)
                          N i                                       N i         Z(θ)
                                          hi                                          hi

         where
                                   
            p̃(y, h|θ)  exp            θ Tc φc (h, y)                                                (19.46)
                                    c
                                                    
         is the unnormalized distribution. The term hi p̃(yi , hi |θ) is the same as the partition function
         for the whole model, except that y is ﬁxed at yi . Hence the gradient is just the expected features
         where we clamp yi , but average over h:

                ∂       
                    log   p̃(yi , hi |θ)        =    E [φc (h, yi )|θ]                                (19.47)
               ∂θ c
                         hi

         So the overall gradient is given by
             ∂          1 
                   =           {E [φc (h, yi )|θ] − E [φc (h, y)|θ]}                                  (19.48)
             ∂θ c        N i

         The ﬁrst set of expectations are computed by “clamping” the visible nodes to their observed
         values, and the second set are computed by letting the visible nodes be free. In both cases, we
         marginalize over hi .
            An alternative approach is to use generalized EM, where we use gradient methods in the M
         step. See (Koller and Friedman 2009, p956) for details.

19.5.3   Approximate methods for computing the MLEs of MRFs
         When ﬁtting a UGM there is (in general) no closed form solution for the ML or the MAP estimate
         of the parameters, so we need to use gradient-based optimizers. This gradient requires inference.
         In models where inference is intractable, learning also becomes intractable. This has motivated
         various computationally faster alternatives to ML/MAP estimation, which we list in Table 19.1. We
         dicsuss some of these alternatives below, and defer others to later sections.

19.5.4   Pseudo likelihood
         One alternative to MLE is to maximize the pseudo likelihood (Besag 1975), deﬁned as follows:
                              
                               D
                                                                      1 
                                                                         N D
            P L (θ)                   pemp (y log p(yd |y−d ) =            log p(yid |yi,−d , θ)    (19.49)
                                y d=1
                                                                      N i=1
                                                                              d=1

         That is, we optimize the product of the full conditionals, also known as the composite likeli-
         hood (Lindsay 1988), Compare this to the objective for maximum likelihood:
                                                        
                                                         N
            M L (θ) =          pemp (y log p(y|θ) =           log p(yi |θ)                           (19.50)
                          y,x                            i=1
         19.5. Learning                                                                                                  679

          Method                        Restriction                     Exact MLE?               Section
          Closed form                   Only Chordal MRF                Exact                    Section 19.5.7.4
          IPF                           Only Tabular / Gaussian MRF     Exact                    Section 19.5.7
          Gradient-based optimization   Low tree width                  Exact                    Section 19.5.1
          Max-margin training           Only CRFs                       N/A                      Section 19.7
          Pseudo-likelihood             No hidden variables             Approximate              Section 19.5.4
          Stochastic ML                 -                               Exact (up to MC error)   Section 19.5.5
          Contrastive divergence        -                               Approximate              Section 27.7.2.4
          Minimum probability ﬂow       Can integrate out the hiddens   Approximate              Sohl-Dickstein et al. (2011)

         Table 19.1 Some methods that can be used to compute approximate ML/ MAP parameter estimates for
         MRFs/ CRFs. Low tree-width means that, in order for the method to be efficient, the graph must “tree-like”;
         see Section 20.5 for details.




                                         (a)                                        (b)

         Figure 19.13 (a) A small 2d lattice. (b) The representation used by pseudo likelihood. Solid nodes are
         observed neighbors. Based on Figure 2.2 of (Carbonetto 2003).



         In the case of Gaussian MRFs, PL is equivalent to ML (Besag 1975), but this is not true in general
         (Liang and Jordan 2008).
            The PL approach is illustrated in Figure 19.13 for a 2d grid. We learn to predict each node,
         given all of its neighbors. This objective is generally fast to compute since each full conditional
         p(yid |yi,−d , θ) only requires summing over the states of a single node, yid , in order to compute
         the local normalization constant. The PL approach is similar to ﬁtting each full conditional
         separately (which is the method used to train dependency networks, discussed in Section 26.2.2),
         except that the parameters are tied between adjacent nodes.
            One problem with PL is that it is hard to apply to models with hidden variables (Parise and
         Welling 2005). Another more subtle problem is that each node assumes that its neighbors have
         known values. If node t ∈ nbr(s) is a perfect predictor for node s, then s will learn to rely
         completely on node t, even at the expense of ignoring other potentially useful information, such
         as its local evidence.
            However, experiments in (Parise and Welling 2005; Hoeﬂing and Tibshirani 2009) suggest that
         PL works as well as exact ML for fully observed Ising models, and of course PL is much faster.

19.5.5   Stochastic maximum likelihood
         Recall that the gradient of the log-likelihood for a fully observed MRF is given by
                         1 
            ∇θ (θ) =          [φ(yi ) − E [φ(y)]]                                                                    (19.51)
                        N i
         680                                Chapter 19. Undirected graphical models (Markov random ﬁelds)


         The gradient for a partially observed MRF is similar. In both cases, we can approximate the
         model expectations using Monte Carlo sampling. We can combine this with stochastic gradient
         descent (Section 8.5.2), which takes samples from the empirical distribution. Pseudocode for the
         resulting method is shown in Algorithm 3.

          Algorithm 19.1: Stochastic maximum likelihood for ﬁtting an MRF
          1   Initialize weights θ randomly;
         2    k = 0, η = 1 ;
         3    for each epoch do
         4         for each minibatch of size B do
         5             for each sample s = 1 : S do
         6                 Sample ys,k ∼ p(y|θ k ) ;
                                      S
         7             Ê(φ(y)) = S1 s=1 φ(ys,k );
         8             for each training case i in minibatch do
         9                 gik = φ(yi ) − Ê(φ(y)) ;
                                
         10            gk = B1 i∈B gik ;
         11            θ k+1 = θ k − ηgk ;
         12            k = k + 1;
         13            Decrease step size η;


            Typically we use MCMC to generate the samples. Of course, running MCMC to convergence
         at each step of the inner loop would be extremely slow. Fortunately, it was shown in (Younes
         1989) that we can start the MCMC chain at its previous value, and just take a few steps. In
         otherwords, we sample ys,k by initializing the MCMC chain at ys,k−1 , and then run for a few
         iterations. This is valid since p(y|θ k ) is likely to be close to p(y|θ k−1 ), since we only changed
         the parameters a small amount. We call this algorithm stochastic maximum likelihood or
         SML. (There is a closely related algorithm called persistent contrastive divergence which we
         discuss in Section 27.7.2.5.)

19.5.6   Feature induction for maxent models *
         MRFs require a good set of features. One unsupervised way to learn such features, known as
         feature induction, is to start with a base set of features, and then to continually create new
         feature combinations out of old ones, greedily adding the best ones to the model. This approach
         was ﬁrst proposed in (Pietra et al. 1997; Zhu et al. 1997), and was later extended to the CRF case
         in (McCallum 2003).
            To illustrate the basic idea, we present an example from (Pietra et al. 1997), which described
         how to build unconditional probabilistic models to represent English spelling. Initially the model
         has no features, which represents the uniform distribution. The algorithm starts by choosing to
         add the feature
                       
             φ1 (y) =       I(yt ∈ {a, . . . , z})                                                    (19.52)
                         t
         19.5. Learning                                                                                681


         which checks if any letter is lower case or not. After the feature is added, the parameters are
         (re)-ﬁt by maximum likelihood. For this feature, it turns out that θ̂1 = 1.944, which means that
         a word with a lowercase letter in any position is about e1.944 ≈ 7 times more likely than the
         same word without a lowercase letter in that position. Some samples from this model, generated
         using (annealed) Gibbs sampling (Section 24.2), are shown below.8

          m, r, xevo, ijjiir, b, to, jz, gsr, wq, vf, x, ga, msmGh, pcp, d, oziVlal,
          hzagh, yzop, io, advzmxnv, ijv_bolft, x, emx, kayerf, mlj, rawzyb, jp, ag,
          ctdnnnbg, wgdw, t, kguv, cy, spxcq, uzflbbf, dxtkkn, cxwx, jpd, ztzh, lv,
          zhpkvnu, l^, r, qee, nynrx, atze4n, ik, se, w, lrh, hp+, yrqyka’h, zcngotcnx,
          igcump, zjcjs, lqpWiqu, cefmfhc, o, lb, fdcY, tzby, yopxmvk, by, fz„ t, govyccm,
          ijyiduwfzo, 6xr, duh, ejv, pk, pjw, l, fl, w

            The second feature added by the algorithm checks if two adjacent characters are lower case:
                      
             φ2 (y) =    I(ys ∈ {a, . . . , z}, yt ∈ {a, . . . , z})                             (19.53)
                        s∼t

         Now the model has the form
                       1
            p(y) =       exp(θ1 φ1 (y) + θ2 φ2 (y))                                                 (19.54)
                       Z
         Continuing in this way, the algorithm adds features for the strings s> and ing>, where >
         represents the end of word, and for various regular expressions such as [0-9], etc. Some
         samples from the model with 1000 features, generated using (annealed) Gibbs sampling, are
         shown below.

          was, reaser, in, there, to, will, „ was, by, homes, thing, be, reloverated,
          ther, which, conists, at, fores, anditing, with, Mr., proveral, the, „ ***,
          on’t, prolling, prothere, „ mento, at, yaou, 1, chestraing, for, have, to,
          intrally, of, qut, ., best, compers, ***, cluseliment, uster, of, is, deveral,
          this, thise, of, offect, inatever, thifer, constranded, stater, vill, in, thase,
          in, youse, menttering, and, ., of, in, verate, of, to

            This approach of feature learning can be thought of as a form of graphical model structure
         learning (Chapter 26), except it is more ﬁne-grained: we add features that are useful, regardless
         of the resulting graph structure. However, the resulting graphs can become densely connected,
         which makes inference (and hence parameter estimation) intractable.

19.5.7   Iterative proportional ﬁtting (IPF) *
         Consider a pairwise MRF where the potentials are represented as tables, with one parameter per
         variable setting. We can represent this in log-linear form using
                                !                                                     #
            ψst (ys , yt ) = exp θ Tst [I(ys = 1, yt = 1), . . . , I(ys = K, yt = K)]            (19.55)

         and similarly for ψt (yt ). Thus the feature vectors are just indicator functions.

         8. We thank John Lafferty for sharing this example.
           682                                   Chapter 19. Undirected graphical models (Markov random ﬁelds)


              From Equation 19.43, we have that, at the maximum of the likelihood, the empirical expectation
           of the features equals the model’s expectation:

               Epemp [I(ys = j, yt = k)]        =    Ep(·|θ) [I(ys = j, yt = k)]                        (19.56)
                  pemp (ys = j, yt = k)         =    p(ys = j, yt = k|θ)                                (19.57)

           where pemp is the empirical probability:
                                                 N
                                      Nst,jk        I(yns = j, ynt = k)
             pemp (ys = j, yt = k) =         = n=1                                                      (19.58)
                                        N                N
           For a general graph, the condition that must hold at the optimum is

               pemp (yc ) = p(yc |θ)                                                                    (19.59)

           For a special family of graphs known as decomposable graphs (deﬁned in Section 20.4.1), one
           can show that p(yc |θ) = ψc (yc ). However, even if the graph is not decomposable, we can
           imagine trying to enforce this condition. This suggests an iterative coordinate ascent scheme
           where at each step we compute
                                           pemp (yc )
               ψct+1 (yc ) = ψct (yc ) ×                                                                (19.60)
                                           p(yc |ψ t )
           where the multiplication is elementwise. This is known as iterative proportional ﬁtting or IPF
           (Fienberg 1970; Bishop et al. 1975). See Algorithm 7 for the pseudocode.

            Algorithm 19.2: Iterative Proportional Fitting algorithm for tabular MRFs
           1   Initialize ψc = 1 for c = 1 : C;
           2   repeat
           3        for c = 1 : C do
           4            pc = p(yc |ψ);
           5            p̂c = pemp (yc );
           6            ψc = ψc ∗ p̂pcc ;
           7   until converged;



19.5.7.1   Example
           Let us consider a simple example from http://en.wikipedia.org/wiki/Iterative_propo
           rtional_fitting. We have two binary variables, Y1 and Y2 , where Yn1 = 1 if man n is left
           handed, and Yn1 = 0 otherwise; similarly, Yn2 = 1 if woman n is left handed, and Yn2 = 0
           otherwise. We can summarize the data using the following 2 × 2 contingency table:
                                              right-handed left-handed Total
                                     male     43           9             52
                                     female 44             4             48
                                     Total    87           13            100
           19.5. Learning                                                                                   683


              Suppose we want to ﬁt a disconnected graphical model containing nodes Y1 and Y2 but with
           no edge between them. That is, we want to ﬁnd vectors ψ 1 and ψ 2 such that M  ψ 1 ψ T2 ≈ C,
           where M are the model’s expected counts, and C are the empirical counts. By moment
           matching, we ﬁnd that the row and column sums of the model must exactly match the row
           and column sums of the data. One possible solution is to use ψ 1 = [0.5200, 0.4800] and
           ψ 2 = [87, 13]. Below we show the model’s predictions, M = ψ 1 ψ T2 .
                                                right-handed left-handed Total
                                        male    45.24            6.76          52
                                        female 41.76             6.24          48
                                        Total   87               13            100
              It is easy to see that this matches the required constraints. See IPFdemo2x2 for some Matlab
           code that computes these numbers. This method is easily to generalized to arbitrary graphs.

19.5.7.2   Speed of IPF
           IPF is a ﬁxed point algorithm for enforcing the moment matching constraints and is guaranteed
           to converge to the global optimum (Bishop et al. 1975). The number of iterations depends on the
           form of the model. If the graph is decomposable, then IPF converges in a single iteration, but in
           general, IPF may require many iterations.
              It is clear that the dominant cost of IPF is computing the required marginals under the model.
           Efficient methods, such as the junction tree algorithm (Section 20.4), can be used, resulting in
           something called efficient IPF (Jirousek and Preucil 1995).
              Nevertheless, coordinate descent can be slow. An alternative method is to update all the
           parameters at once, by simply following the gradient of the likelihood. This gradient approach
           has the further signiﬁcant advantage that it works for models in which the clique potentials may
           not be fully parameterized, i.e., the features may not consist of all possible indicators for each
           clique, but instead can be arbitrary. Although it is possible to adapt IPF to this setting of general
           features, resulting in a method known as iterative scaling, in practice the gradient method is
           much faster (Malouf 2002; Minka 2003).

19.5.7.3   Generalizations of IPF
           We can use IPF to ﬁt Gaussian graphical models: instead of working with empirical counts, we
           work with empirical means and covariances (Speed and Kiiveri 1986). It is also possible to create
           a Bayesian IPF algorithm for sampling from the posterior of the model’s parameters (see e.g.,
           (Dobra and Massam 2010)).

19.5.7.4   IPF for decomposable graphical models
           There is a special family of undirected graphical models known as decomposable graphical
           models. This is formally deﬁned in Section 20.4.1, but the basic idea is that it contains graphs
           which are “tree-like”. Such graphs can be represented by UGMs or DGMs without any loss of
           information.
              In the case of decomposable graphical models, IPF converges in one iteration. In fact, the
         684                              Chapter 19. Undirected graphical models (Markov random ﬁelds)


         MLE has a closed form solution (Lauritzen 1996). In particular, for tabular potentials we have
                           N
                                   I(yi,c = k)
            ψ̂c (yc = k) = i=1                                                                       (19.61)
                                    N
         and for Gaussian potentials, we have
                   N                 
                         yic              (yic − μ̂c )(xic − μ̂c )T
            μ̂c = i=1        , Σ̂c = i                                                              (19.62)
                      N                            N
         By using conjugate priors, we can also easily compute the full posterior over the model pa-
         rameters in the decomposable case, just as we did in the DGM case. See (Lauritzen 1996) for
         details.

 19.6    Conditional random ﬁelds (CRFs)
         A conditional random ﬁeld or CRF (Lafferty et al. 2001), sometimes a discriminative random
         ﬁeld (Kumar and Hebert 2003), is just a version of an MRF where all the clique potentials are
         conditioned on input features:
                            1      
            p(y|x, w) =               ψc (yc |x, w)                                             (19.63)
                         Z(x, w) c

         A CRF can be thought of as a structured output extension of logistic regression. We will usually
         assume a log-linear representation of the potentials:
            ψc (yc |x, w) = exp(wcT φ(x, yc ))                                                       (19.64)
         where φ(x, yc ) is a feature vector derived from the global inputs x and the local set of labels
         yc . We will give some examples below which will make this notation clearer.
            The advantage of a CRF over an MRF is analogous to the advantage of a discriminative
         classiﬁer over a generative classiﬁer (see Section 8.6), namely, we don’t need to “waste resources”
         modeling things that we always observe. Instead we can focus our attention on modeling what
         we care about, namely the distribution of labels given the data.
            Another important advantage of CRFs is that we can make the potentials (or factors) of the
         model be data-dependent. For example, in image processing applications, we may “turn off” the
         label smoothing between two neighboring nodes s and t if there is an observed discontinuity in
         the image intensity between pixels s and t. Similarly, in natural language processing problems,
         we can make the latent labels depend on global properties of the sentence, such as which
         language it is written in. It is hard to incorporate global features into generative models.
            The disadvantage of CRFs over MRFs is that they require labeled training data, and they
         are slower to train, as we explain in Section 19.6.3. This is analogous to the strengths and
         weaknesses of logistic regression vs naive Bayes, discussed in Section 8.6.

19.6.1   Chain-structured CRFs, MEMMs and the label-bias problem
         The most widely used kind of CRF uses a chain-structured graph to model correlation amongst
         neighboring labels. Such models are useful for a variety of sequence labeling tasks (see Sec-
         tion 19.6.2).
19.6. Conditional random ﬁelds (CRFs)                                                              685

yt−1          yt             yt+1                        xg                         xg



                                          yt−1                     yt+1   yt−1                  yt+1
                                                           yt                          yt


xt−1          xt             xt+1             xt−1       xt     xt+1         xt−1    xt     xt+1
              (a)                                        (b)                         (c)

Figure 19.14 Various models for sequential data. (a) A generative directed HMM. (b) A discriminative
directed MEMM. (c) A discriminative undirected CRF.


   Traditionally, HMMs (discussed in detail in Chapter 17) have been used for such tasks. These
are joint density models of the form
                    
                    T
   p(x, y|w) =            p(yt |yt−1 , w)p(xt |yt , w)                                        (19.65)
                    t=1

where we have dropped the initial p(y1 ) term for simplicity. See Figure 19.14(a). If we observe
both xt and yt for all t, it is very easy to train such models, using techniques described in
Section 17.5.1.
   An HMM requires specifying a generative observation model, p(xt |yt , w), which can be
difficult. Furthemore, each xt is required to be local, since it is hard to deﬁne a generative
model for the whole stream of observations, x = x1:T .
   An obvious way to make a discriminative version of an HMM is to “reverse the arrows” from
yt to xt , as in Figure 19.14(b). This deﬁnes a directed discriminative model of the form
                   
    p(y|x, w) =       p(yt |yt−1 , x, w)                                                  (19.66)
                     t

where x = (x1:T , xg ), xg are global features, and xt are features speciﬁc to node t. (This
partition into local and global is not necessary, but helps when comparing to HMMs.) This is
called a maximum entropy Markov model or MEMM (McCallum et al. 2000; Kakade et al.
2002).
   An MEMM is simply a Markov chain in which the state transition probabilities are conditioned
on the input features. (It is therefore a special case of an input-output HMM, discussed in
Section 17.6.3.) This seems like the natural generalization of logistic regression to the structured-
output setting, but it suffers from a subtle problem known (rather obscurely) as the label bias
problem (Lafferty et al. 2001). The problem is that local features at time t do not inﬂuence states
prior to time t. This follows by examining the DAG, which shows that xt is d-separated from
yt−1 (and all earlier time points) by the v-structure at yt , which is a hidden child, thus blocking
the information ﬂow.
   To understand what this means in practice, consider the part of speech (POS) tagging task.
Suppose we see the word “banks”; this could be a verb (as in “he banks at BoA”), or a noun (as
in “the river banks were overﬂowing”). Locally the POS tag for the word is ambiguous. However,
           686                                   Chapter 19. Undirected graphical models (Markov random ﬁelds)




                         (a)               (b)                (c)                (d)               (e)

           Figure 19.15 Example of handwritten letter recognition. In the word ’brace’, the ’r’ and the ’c’ look very
           similar, but can be disambiguated using context. Source: (Taskar et al. 2003) . Used with kind permission
           of Ben Taskar.


           suppose that later in the sentence, we see the word “ﬁshing”; this gives us enough context to
           infer that the sense of “banks” is “river banks”. However, in an MEMM (unlike in an HMM and
           CRF), the “ﬁshing” evidence will not ﬂow backwards, so we will not be able to disambiguate
           “banks”.
              Now consider a chain-structured CRF. This model has the form
                                       T              T−1
                                  1
              p(y|x, w) =                  ψ(yt |x, w)      ψ(yt , yt+1 |x, w)                                (19.67)
                               Z(x, w) t=1              t=1

           From the graph in Figure 19.14(c), we see that the label bias problem no longer exists, since yt
           does not block the information from xt from reaching other yt nodes.
              The label bias problem in MEMMs occurs because directed models are locally normalized,
           meaning each CPD sums to 1. By contrast, MRFs and CRFs are globally normalized, which
           means that local factors do not need to sum to 1, since the partition function Z, which sums over
           all joint conﬁgurations, will ensure the model deﬁnes a valid distribution. However, this solution
           comes at a price: we do not get a valid probability distribution over y until we have seen
           the whole sentence, since only then can we normalize over all conﬁgurations. Consequently,
           CRFs are not as useful as DGMs (whether discriminative or generative) for online or real-time
           inference. Furthermore, the fact that Z depends on all the nodes, and hence all their parameters,
           makes CRFs much slower to train than DGMs, as we will see in Section 19.6.3.

19.6.2     Applications of CRFs
           CRFs have been applied to many interesting problems; we give a representative sample below.
           These applications illustrate several useful modeling tricks, and will also provide motivation for
           some of the inference techniques we will discuss in Chapter 20.

19.6.2.1   Handwriting recognition
           A natural application of CRFs is to classify hand-written digit strings, as illustrated in Figure 19.15.
           The key observation is that locally a letter may be ambiguous, but by depending on the (un-
           known) labels of one’s neighbors, it is possible to use context to reduce the error rate. Note
           that the node potential, ψt (yt |xt ), is often taken to be a probabilistic discriminative classiﬁer,
           19.6. Conditional random ﬁelds (CRFs)                                                                                                687



                            B           I        O        O          O           B          I        O     B         I      I     NP



                           ADJ          N         V       IN         V         PRP          N        IN    DT        N      N     POS




                          British    Airways    rose     after   announcing     its    withdrawal   from   the      UAL    deal

                           KEY
                           B        Begin noun phrase    V       Verb
                           I        Within noun phrase   IN      Preposition
                           O        Not a noun phrase    PRP     Possesive pronoun
                           N        Noun                 DT      Determiner (e.g., a, an, the)
                           ADJ      Adjective



           Figure 19.16 A CRF for joint POS tagging and NP segmentation.                                         Source: Figure 4.E.1 of (Koller and
           Friedman 2009). Used with kind permission of Daphne Koller.



           such as a neural network or RVM, that is trained on isolated letters, and the edge potentials,
           ψst (ys , yt ), are often taken to be a language bigram model. Later we will discuss how to train
           all the potentials jointly.

19.6.2.2   Noun phrase chunking
           One common NLP task is noun phrase chunking, which refers to the task of segmenting a
           sentence into its distinct noun phrases (NPs). This is a simple example of a technique known as
           shallow parsing.
              In more detail, we tag each word in the sentence with B (meaning beginning of a new NP), I
           (meaning inside a NP), or O (meaning outside an NP). This is called BIO notation. For example,
           in the following sentence, the NPs are marked with brackets:
               B      I        O     O      O         B    I         O    B   I   I
           (British Airways) rose after announcing (its withdrawl) from (the UAI deal)

           (We need the B symbol so that we can distinguish I I, meaning two words within a single NP,
           from B B, meaning two separate NPs.)
              A standard approach to this problem would ﬁrst convert the string of words into a string of
           POS tags, and then convert the POS tags to a string of BIOs. However, such a pipeline method
           can propagate errors. A more robust approach is to build a joint probabilistic model of the
           form p(NP1:T , POS1:T |words1:T ). One way to do this is to use the CRF in Figure 19.16. The
           connections between adjacent labels encode the probability of transitioning between the B, I
           and O states, and can enforce constraints such as the fact that B must preceed I. The features
           are usually hand engineered and include things like: does this word begin with a capital letter, is
           this word followed by a full stop, is this word a noun, etc. Typically there are ∼ 1, 000 − 10, 000
           features per node.
              The number of features has minimal impact on the inference time, since the features are
           observed and do not need to be summed over. (There is a small increase in the cost of
           688                                       Chapter 19. Undirected graphical models (Markov random ﬁelds)




                 B-PER   I-PER    OTH        OTH       OTH    B-LOC         I-LOC   B-PER   OTH      OTH    OTH     OTH




                 Mrs.    Green    spoke      today      in     New          York    Green   chairs   the   ﬁnance committee

                 KEY
                 B-PER Begin person name       I-LOC Within location name
                 I-PER Within person name      OTH Not an entitiy
                 B-LOC Begin location name
                                                                      ( )
           Figure 19.17 A skip-chain CRF for named entity recognition. Source: Figure 4.E.1 of (Koller and Friedman
           2009). Used with kind permission of Daphne Koller.



           evaluating potential functions with many features, but this is usually negligible; if not, one can
           use 1 regularization to prune out irrelevant features.) However, the graph structure can have a
           dramatic effect on inference time. The model in Figure 19.16 is tractable, since it is essentially a
           “fat chain”, so we can use the forwards-backwards algorithm (Section 17.4.3) for exact inference
           in O(T |POS|2 |NP|2 ) time, where |POS| is the number of POS tags, and |NP| is the number
           of NP tags. However, the seemingly similar graph in Figure 19.17, to be explained below, is
           computationally intractable.

19.6.2.3   Named entity recognition
           A task that is related to NP chunking is named entity extraction. Instead of just segmenting
           out noun phrases, we can segment out phrases to do with people and locations. Similar
           techniques are used to automatically populate your calendar from your email messages; this is
           called information extraction.
              A simple approach to this is to use a chain-structured CRF, but to expand the state space
           from BIO to B-Per, I-Per, B-Loc, I-Loc, and Other. However, sometimes it is ambiguous whether
           a word is a person, location, or something else. (Proper nouns are particularly difficult to deal
           with because they belong to an open class, that is, there is an unbounded number of possible
           names, unlike the set of nouns and verbs, which is large but essentially ﬁxed.) We can get better
           performance by considering long-range correlations between words. For example, we might add
           a link between all occurrences of the same word, and force the word to have the same tag in
           each occurence. (The same technique can also be helpful for resolving the identity of pronouns.)
           This is known as a skip-chain CRF. See Figure 19.17 for an illustration.
              We see that the graph structure itself changes depending on the input, which is an additional
           advantage of CRFs over generative models. Unfortunately, inference in this model is gener-
           ally more expensive than in a simple chain with local connections, for reasons explained in
           Section 20.5.
           19.6. Conditional random ﬁelds (CRFs)                                                           689




           Figure 19.18 Illustration of a simple parse tree based on a context free grammar in Chomsky normal
           form. The feature vector φ(x, y) = Ψ(x, y) counts the number of times each production rule was used.
           Source: Figure 5.2 of (Altun et al. 2006) . Used with kind permission of Yasemin Altun.



19.6.2.4   Natural language parsing
           A generalization of chain-structured models for language is to use probabilistic grammars. In
           particular, a probabilistic context free grammar or PCFG is a set of re-write or production
           rules of the form σ → σ  σ  or σ → x, where σ, σ  , σ  ∈ Σ are non-terminals (analogous to
           parts of speech), and x ∈ X are terminals, i.e., words. See Figure 19.18 for an example. Each
           such rule has an associated probability. The resulting model deﬁnes a probability distribution
           over sequences of words. We can compute the probability of observing a particular sequence
           x = x1 . . . xT by summing over all trees that generate it. This can be done in O(T 3 ) time
           using the inside-outside algorithm; see e.g., (Jurafsky and Martin 2008; Manning and Schuetze
           1999) for details.
              PCFGs are generative models. It is possible to make discriminative versions which encode
           the probability of a labeled tree, y, given a sequence of words, x, by using a CRF of the form
           p(y|x) ∝ exp(wT φ(x, y)). For example, we might deﬁne φ(x, y) to count the number of
           times each production rule was used (which is analogous to the number of state transitions in
           a chain-structured model). See e.g., (Taskar et al. 2004) for details.

19.6.2.5   Hierarchical classiﬁcation
           Suppose we are performing multi-class classiﬁcation, where we have a label taxonomy, which
           groups the classes into a hierarchy. We can encode the position of y within this hierarchy by
           deﬁning a binary vector φ(y), where we turn on the bit for component y and for all its children.
           This can be combined with input features φ(x) using a tensor product, φ(x, y) = φ(x) ⊗ φ(y).
           See Figure 19.19 for an example.
              This method is widely used for text classiﬁcation, where manually constructed taxnomies
           (such as the Open Directory Project at www.dmoz.org) are quite common. The beneﬁt is that
           information can be shared between the parameters for nearby categories, enabling generalization
           across classes.
           690                               Chapter 19. Undirected graphical models (Markov random ﬁelds)




                 w, Ψ(x, 2) = w2 , x + w6 , x + w9 , x

           Figure 19.19 Illustration of a simple label taxonomy, and how it can be used to compute a distributed
           representation for the label for class 2. In this ﬁgure, φ(x) = x, φ(y = 2) = Λ(2), φ(x, y) is denoted
           by Ψ(x, 2), and wT φ(x, y) is denoted by w, Ψ(x, 2). Source: Figure 5.1 of (Altun et al. 2006) . Used
           with kind permission of Yasemin Altun.



19.6.2.6   Protein side-chain prediction
           An interesting analog to the skip-chain model arises in the problem of predicting the structure
           of protein side chains. Each residue in the side chain has 4 dihedral angles, which are usually
           discretized into 3 values called rotamers. The goal is to predict this discrete sequence of angles,
           y, from the discrete sequence of amino acids, x.
              We can deﬁne an energy function E(x, y), where we include various pairwise interaction
           terms between nearby residues (elements of the y vector). This energy is usually deﬁned as a
                                                                       D
           weighted sum of individual energy terms, E(x, y|w) = j=1 θj Ej (x, y), where the Ej are
           energy contribution due to various electrostatic charges, hydrogen bonding potentials, etc, and
           w are the parameters of the model. See (Yanover et al. 2007) for details.
              Given the model, we can compute the most probable side chain conﬁguration using y∗ =
           argmin E(x, y|w). In general, this problem is NP-hard, depending on the nature of the graph
           induced by the Ej terms, due to long-range connections between the variables. Nevertheless,
           some special cases can be efficiently handled, using methods discussed in Section 22.6.

19.6.2.7   Stereo vision
           Low-level vision problems are problems where the input is an image (or set of images), and
           the output is a processed version of the image. In such cases, it is common to use 2d lattice-
           structured models; the models are similar to Figure 19.9, except that the features can be global,
           and are not generated by the model. We will assume a pairwise CRF.
              A classic low-level vision problem is dense stereo reconstruction, where the goal is to
           estimate the depth of every pixel given two images taken from slightly different angles. In this
           section (based on (Sudderth and Freeman 2008)), we give a sketch of how a simple CRF can be
           used to solve this task. See e.g., (Sun et al. 2003) for a more sophisticated model.
              By using some standard preprocessing techniques, one can convert depth estimation into a
19.6. Conditional random ﬁelds (CRFs)                                                                               691


problem of estimating the disparity ys between the pixel at location (is , js ) in the left image
and the corresponding pixel at location (is + ys , js ) in the right image. We typically assume
that corresponding pixels have similar intensity, so we deﬁne a local node potential of the form
                                                              %
                         1                                   2
   ψs (ys |x) ∝ exp − 2 (xL (is , js ) − xR (is + ys , js ))                                (19.68)
                        2σ
where xL is the left image and xR is the right image. This equation can be generalized to model
the intensity of small windows around each location. In highly textured regions, it is usually
possible to ﬁnd the corresponding patch using cross correlation, but in regions of low texture,
there will be considerable ambiguity about the correct value of ys .
  We can easily add a Gaussian prior on the edges of the MRF that encodes the assumption
that neighboring disparities ys , yt should be similar, as follows:
                       
                            1
   ψst (ys , yt ) ∝ exp − 2 (ys − yt )2                                                   (19.69)
                          2γ
The resulting model is a Gaussian CRF.
   However, using Gaussian edge-potentials will oversmooth the estimate, since this prior fails
to account for the occasional large changes in disparity that occur between neighboring pixels
which are on different sides of an occlusion boundary. One gets much better results using a
truncated Gaussian potential of the form
                                                  %
                          1                 2 2
                                                 
   ψst (ys , yt ) ∝ exp − 2 min (ys − yt ) , δ0                                         (19.70)
                         2γ
where γ encodes the expected smoothness, and δ0 encodes the maximum penalty that will
be imposed if disparities are signiﬁcantly different. This is called a discontinuity preserving
potential; note that such penalties are not convex. The local evidence potential can be made
robust in a similar way, in order to handle outliers due to specularities, occlusions, etc.
   Figure 19.20 illustrates the difference between these two forms of prior. On the top left is an
image from the standard Middlebury stereo benchmark dataset (Scharstein and Szeliski 2002).
On the bottom left is the corresponding true disparity values. The remaining columns represent
the estimated disparity after 0, 1 and an “inﬁnite” number of rounds of loopy belief propagation
(see Section 22.2), where by “inﬁnite” we mean the results at convergence. The top row shows
the results using a Gaussian edge potential, and the bottom row shows the results using the
truncated potential. The latter is clearly better.
   Unfortunately, performing inference with real-valued variables is computationally difficult,
unless the model is jointly Gaussian. Consequently, it is common to discretize the variables.
(For example, Figure 19.20(bottom) used 50 states.) The edge potentials still have the form given
in Equation 19.69. The resulting model is called a metric CRF, since the potentials form a
metric. 9 Inference in metric CRFs is more efficient than in CRFs where the discrete labels
have no natural ordering, as we explain in Section 22.6.3.3. See Section 22.6.4 for a comparison
of various approximate inference methods applied to low-level CRFs, and see (Blake et al. 2011;
Prince 2012) for more details on probabilistic models for computer vision.
9. A function f is said to be a metric if it satisﬁes the following three properties: Reﬂexivity: f (a, b) = 0 iff a = b;
Symmetry: f (a, b) = f (b, a); and Triangle inequality: f (a, b) + f (b, c) ≥ f (a, c). If f satisﬁes only the ﬁrst two
properties, it is called a semi-metric.
         692                                Chapter 19. Undirected graphical models (Markov random ﬁelds)




                                                                                         

         Figure 19.20 Illustration of belief propagation for stereo depth estimation. Left column: image and true
         disparities. Remaining columns: initial estimate, estimate after 1 iteration, and estimate at convergence.
         Top row: Gaussian edge potentials. Bottom row: robust edge potentials. Source: Figure 4 of (Sudderth and
         Freeman 2008). Used with kind permission of Erik Sudderth.



19.6.3   CRF training
         We can modify the gradient based optimization of MRFs described in Section 19.5.1 to the CRF
         case in a straightforward way. In particular, the scaled log-likelihood becomes
                                                                                             
                      1                         1   T
            (w)            log p(yi |xi , w) =             wc φc (yi , xi ) − log Z(w, xi )   (19.71)
                      N i                        N i       c

         and the gradient becomes
                                                                   
             ∂         1                        ∂
                   =            φc (yi , xi ) −       log Z(w, xi )                                         (19.72)
            ∂wc         N i                     ∂wc
                        1 
                   =          [φc (yi , xi ) − E [φc (y, xi )]]                                             (19.73)
                        N i

         Note that we now have to perform inference for every single training case inside each gradient
         step, which is O(N ) times slower than the MRF case. This is because the partition function
         depends on the inputs xi .
            In most applications of CRFs (and some applications of MRFs), the size of the graph structure
         can vary. Hence we need to use parameter tying to ensure we can deﬁne a distribution of
         arbitrary size. In the pairwise case, we can write the model as follows:
                             1                   
            p(y|x, w) =            exp wT φ(y, x)                                                           (19.74)
                           Z(w, x)
         19.7. Structural SVMs                                                                           693


         where w = [wn , we ] are the node and edge parameters, and
                                      
           φ(y, x)  [    φt (yt , x),   φst (ys , yt , x)]                                           (19.75)
                          t             s∼t
         are the summed node and edge features (these are the sufficient statistics). The gradient
         expression is easily modiﬁed to handle this case.
            In practice, it is important to use a prior/ regularization to prevent overﬁtting. If we use a
         Gaussian prior, the new objective becomes
                       1 
              (w)           log p(yi |xi , w) − λ||w||22                                         (19.76)
                      N i
         It is simple to modify the gradient expression.
            Alternatively, we can use 1 regularization. For example, we could use 1 for the edge weights
         we to learn a sparse graph structure, and 2 for the node weights wn , as in (Schmidt et al.
         2008). In other words, the objective becomes
                       1 
              (w)          log p(yi |xi , w) − λ1 ||we ||1 − λ2 ||wn ||22                        (19.77)
                       N i
         Unfortunately, the optimization algorithms are more complicated when we use 1 (see Sec-
         tion 13.4), although the problem is still convex.
            To handle large datasets, we can use stochastic gradient descent (SGD), as described in
         Section 8.5.2.
            It is possible (and useful) to deﬁne CRFs with hidden variables, for example to allow for an
         unknown alignment between the visible features and the hidden labels (see e.g., (Schnitzspan
         et al. 2010)). In this case, the objective function is no longer convex. Nevertheless, we can ﬁnd
         a locally optimal ML or MAP parameter estimate using EM and/ or gradient methods.

 19.7    Structural SVMs
         We have seen that training a CRF requires inference, in order to compute the expected sufficient
         statistics needed to evaluate the gradient. For certain models, computing a joint MAP estimate
         of the states is provably simpler than computing marginals, as we discuss in Section 22.6. In this
         section, we discuss a way to train structured output classiﬁers that that leverages the existence of
         fast MAP solvers. (To avoid confusion with MAP estimation of parameters, we will often refer to
         MAP estimation of states as decoding.) These methods are known as structural support vector
         machines or SSVMs (Tsochantaridis et al. 2005). (There is also a very similar class of methods
         known as max margin Markov networks or M3nets (Taskar et al. 2003); see Section 19.7.2 for
         a discussion of the differences.)

19.7.1   SSVMs: a probabilistic view
         In this book, we have mostly concentrated on ﬁtting models using MAP parameter estimation,
         i.e., by minimizing functions of the form
                                          
                                          N
            RM AP (w) = − log p(w) −            log p(yi |xi , w)                                     (19.78)
                                          i=1
694                                       Chapter 19. Undirected graphical models (Markov random ﬁelds)


However, at test time, we pick the label so as to minimize the posterior expected loss (deﬁned
in Section 5.7):
                       
   ŷ(x|w) = argmin       L(ŷ, y)p(y|x, w)                                              (19.79)
                      ŷ      y
             ∗
where L(y , ŷ) is the loss we incur when we estimate ŷ but the truth is y∗ . It therefore seems
reasonable to take the loss function into account when performing parameter estimation.10 So,
following (Yuille and He 2011), let us instead minimized the posterior expected loss on the
training set:
                                                               
                              N        
    REL (w)  − log p(w) +        log      L(yi , y)p(y|xi , w)                             (19.80)
                                      i=1          y

In the special case of 0-1 loss, L(yi , y) = 1 − δy,yi , this reduces to RM AP .
   We will assume that we can write our model in the following form:
                     exp(wT φ(x, y))
    p(y|x, w)       =                                                                       (19.81)
                         Z(x, w)
                     exp(−E(w))
         p(w) =                                                                            (19.82)
                           Z
                    
where Z(x, w) = y exp(wT φ(x, y)). Also, let us deﬁne L(yi , y) = exp L̃(yi , y). With
this, we can rewrite our objective as follows:
                                                                             
                                                            exp(wT φ(x, y))
    REL (w) = − log p(w) +             log     exp L̃(yi , y)                              (19.83)
                                    i        y
                                                                  Z(x, w)
                                                              !                         #
               = E(w) +          − log Z(xi , w) + log      exp L̃(vyi , y) + wT φ(xi , y) (19.84)
                                     i                                y

  We will now consider various bounds in order to simplify this objective. First note that for
any function f (y) we have
                                                          
   max f (y) ≤ log      exp[f (y)] ≤ log |Y| exp max f (y)      = log |Y| + max f (y) (19.85)
      y∈Y                                                            y                                 y
                           y∈Y

For example, suppose Y = {0, 1, 2} and f (y) = y. Then we have
    2 = log[exp(2)] ≤ log[exp(0) + exp(1) + exp(2)] ≤ log[3 × exp(2)] = log(3) + 2 (19.86)
We can ignore the log |Y| term, which is independent of y, and treat maxy∈Y f (y) as both a
lower and upper bound. Hence we see that
                           N       &                       '                    
   REL (w) ∼ E(w) +             max L̃(yi , y) + wT φ(xi , y) − max wT φ(xi , y) (19.87)
                                            y                                             y
                                    i=1

10. Note that this violates the fundamental Bayesian distinction between inference and decision making. However,
performing these tasks separately will only result in an optimal decision if we can compute the exact posterior. In most
cases, this is intractable, so we need to perform loss-calibrated inference (Lacoste-Julien et al. 2011). In this section,
we just perform loss-calibrated MAP parameter estimation, which is computationally simpler. (See also (Stoyanov et al.
2011).)
         19.7. Structural SVMs                                                                              695


         where x ∼ y means c1 + x ≤ y + c2 for some constants c1 , c2 . Unfortunately, this objective
         is not convex in w. However, we can devise a convex upper bound by exploiting the following
         looser lower bound on the log-sum-exp function:
                           
             f (y ) ≤ log   exp[f (y)]                                                        (19.88)
                             y

         for any y ∈ Y. Applying this equation to our earlier example, for f (y) = y and y  = 1, we get
         1 = log[exp(1)] ≤ log[exp(0) + exp(1) + exp(2)]. And applying this bound to REL we get
                                          N 
                                                  &                         '                 
            REL (w)      ≤       E(w) +         max L̃(yi , y) + wT φ(xi , y) − wT φ(xi , yi )           (19.89)
                                                 y
                                          i=1

                             1
         If we set E(w) = − 2C ||w||22 (corresponding to a spherical Gaussian prior), we get

                                               N     &                        '               
                                   1      2
            RSSV M (w)              ||w|| + C      max L̃(yi , y) + w φ(xi , y) − w φ(xi , yi )(19.90)
                                                                      T             T
                                   2                 y
                                               i=1

         This is the same objective as used in the SSVM approach of (Tsochantaridis et al. 2005).
            In the special case that Y = {−1, +1} L(y ∗ , y) = 1 − δy,y∗ , and φ(x, y) = 12 yx, this
         criterion reduces to the following (by considering the two cases that y = yi and y = yi ):

                                  1             N
                                                                         
            RSV M (w)              ||w||2 + C     max{0, 1 − yi wT xi }                                 (19.91)
                                  2            i=1

         which is the standard binary SVM objective (see Equation 14.57).
           So we see that the SSVM criterion can be seen as optimizing an upper bound on the Bayesian
         objective, a result ﬁrst shown in (Yuille and He 2011). This bound will be tight (and hence
         the approximation will be a good one) when ||w|| is large, since in that case, p(y|x, w) will
         concentrate its mass on argmaxy p(y|x, w). Unfortunately, a large ||w|| corresponds to a
         model that is likely to overﬁt, so it is unlikely that we will be working in this regime (because we
         will tune the strength of the regularizer to avoid this situation). An alternative justiﬁcation for the
         SVM criterion is that it focusses effort on ﬁtting parameters that affect the decision boundary.
         This is a better use of computational resources than ﬁtting the full distribution, especially when
         the model is wrong.

19.7.2   SSVMs: a non-probabilistic view
         We now present SSVMs in a more traditional (non-probabilistic) way, following (Tsochantaridis
         et al. 2005). The resulting objective will be the same as the one above. However, this derivation
         will set the stage for the algorithms we discuss below.
            Let f (x; w) = argmaxy∈Y wT φ(x, y) be the prediction function. We can obtain zero loss
         on the training set using this predictor if
            ∀i. max wT φ(xi , y) ≤ wT φ(xi , yi )                                                        (19.92)
                y∈Y\yi
696                               Chapter 19. Undirected graphical models (Markov random ﬁelds)


Each one of these nonlinear inequalities can be equivalently replaced by |Y| − 1 linear inequal-
ities, resulting in a total of N |Y| − N linear constraints of the following form:
   ∀i.∀y ∈ Y \ yi .wT φ(xi , yi ) − wT φ(xi , y) ≥ 0                                        (19.93)
For brevity, we introduce the notation
   δ i (y)  φ(xi , yi ) − φ(xi , y)                                                        (19.94)
so we can rewrite these constraints as wT δ i (y) ≥ 0.
  If we can achieve zero loss, there will typically be multiple solution vectors w. We pick the
one that maximizes the margin, deﬁned as
   γ  min f (x, yi ; w) − max
                           
                               f (x, y ; w)                                                (19.95)
          i                  y ∈Y\y

Since the margin can be made arbitrarily large by rescaling w, we ﬁx its norm to be 1, resulting
in the optimization problem
      max         s.t. ∀i.∀y ∈ Y \ yi . wT δ i (y) ≥ γ                                      (19.96)
   γ,w:||w||=1

Equivalently, we can write
      1
   min ||w||2       s.t. ∀i.∀y ∈ Y \ yi . wT δ i (y) ≥ 1                                    (19.97)
    w 2

To allow for the case where zero loss cannot be achieved (equivalent to the data being inseparable
in the case of binary classiﬁcation), we relax the constraints by introducing slack terms ξi , one
per data case. This yields

       1              N
   min ||w||2 + C     ξi        s.t. ∀i.∀y ∈ Y \ yi . wT δ i (y) ≥ 1 − ξi , ξi ≥ 0          (19.98)
   w,ξ 2
                  i=1

   In the case of structured outputs, we don’t want to treat all constraint violations equally. For
example, in a segmentation problem, getting one position wrong should be punished less than
getting many positions wrong. One way to achieve this is to divide the slack variable by the size
of the loss (this is called slack re-scaling). This yields

       1              N
                                                                           ξi
   min ||w||2 + C     ξi        s.t. ∀i.∀y ∈ Y \ yi . wT δ i (y) ≥ 1 −             , ξi ≥ 0 (19.99)
   w,ξ 2
                  i=1
                                                                         L(yi , y)

Alternatively, we can deﬁne the margin to be proportional to the loss (this is called margin
re-rescaling). This yields

       1              N
   min ||w||2 + C     ξi        s.t. ∀i.∀y ∈ Y \ yi . wT δ i (y) ≥ L(yi , y) − ξi , ξi ≥ 0(19.100)
   w,ξ 2
                  i=1

(In fact, we can write ∀y ∈ Y instead of ∀y ∈ Y \ yi , since if y = yi , then wT δ i (y) = 0 and
ξi = 0. By using the simpler notation, which doesn’t exclude yi , we add an extra but redundant
constraint.) This latter approach is used in M3nets.
           19.7. Structural SVMs                                                                           697


             For future reference, note that we can solve for the ξi∗ terms as follows:

              ξi∗ (w) = max{0, max(L(yi , y) − wT δ i ))} = max(L(yi , y) − wT δ i ))                   (19.101)
                                    y                             y

           Substituting in, and dropping the constraints, we get the following equivalent problem:
                   1                    (                         )
              min ||w||2 + C        max L(yi , y) + wT φ(xi , y) − wT φ(xi , yi )                  (19.102)
               w 2                    y
                                  i


19.7.2.1   Empirical risk minimization
           Let us pause and consider whether the above objective is reasonable. Recall that in the frequen-
           tist approach to machine learning (Section 6.5), the goal is to minimize the regularized empirical
           risk, deﬁned by

                        C 
                           N
              R(w) +          L(yi , f (xi , w))                                                       (19.103)
                        N i=1

           where R(w) is the regularizer, and f (xi , w) = argmaxy wT φ(xi , y) = ŷi is the prediction.
           Since this objective is hard to optimize, because the loss is not differentiable, we will construct
           a convex upper bound instead.
              We can show that
                        C 
              R(w) +            max(L(yi , y) − wT δ i ))                                              (19.104)
                        N i y

           is such a convex upper bound. To see this, note that

              L(yi , f (xi , w))   ≤ L(yi , f (xi , w)) − wT φ(xi , yi ) + wT φ(xi , ŷi )             (19.105)
                                   ≤ max L(yi , y) − wT φ(xi , yi ) + wT φ(xi , y)                     (19.106)
                                         y

           Using this bound and R(w) = 12 ||w||2 yields Equation 19.102.

19.7.2.2   Computational issues
           Although the above objectives are simple quadratic programs (QP), they have O(N |Y|) con-
           straints. This is intractable, since Y is usually exponentially large. In the case of the margin
           rescaling formulation, it is possible to reduce the exponential number of constraints to a poly-
           nomial number, provided the loss function and the feature vector decompose according to a
           graphical model. This is the approach used in M3nets (Taskar et al. 2003).
              An alternative approach is to work directly with the exponentially sized QP. This allows for
           the use of more general loss functions. There are several possible methods to make this feasible.
           One is to use cutting plane methods. Another is to use stochastic subgradient methods. We
           discuss both of these below.
           698                                   Chapter 19. Undirected graphical models (Markov random ﬁelds)




           Fi             C           l      l       h    S                  f h               l      l     h    I
           Figure 19.21 Illustration of the cutting plane algorithm in 2d. We start with the estimate w = w0 = 0.
           (a) We add the ﬁrst constraint; the shaded region is the new feasible set. The new minimum norm solution
           is w1 . (b) We add another constraint; the dark shaded region is the new feasible set. (c) We add a third
           constraint. Source: Figure 5.3 of (Altun et al. 2006) . Used with kind permission of Yasemin Altun.



 19.7.3    Cutting plane methods for ﬁtting SSVMs
           In this section, we discuss an efficient algorithm for ﬁtting SSVMs due to (Joachims et al. 2009).
           This method can handle general loss functions, and is implemented in the popular SVMstruct
           package11 . The method is based on the cutting plane method from convex optimization (Kelley
           1960).
              The basic idea is as follows. We start with an initial guess w and no constraints. At each
           iteration, we then do the following: for each example i, we ﬁnd the “most violated” constraint
           involving xi and ŷi . If the loss-augmented margin violation exceeds the current value of ξi by
           more than , we add ŷi to the working set of constraints for this training case, Wi , and then
           solve the resulting new QP to ﬁnd the new w, ξ. See Figure 19.21 for a sketch, and Algorithm 11
           for the pseudo code. (Since at each step we only add one new constraint, we can warm-start
           the QP solver.) We can can easily modify the algorithm to optimize the slack rescaling version
           by replacing the expression L(yi , y) − wT δ i (ŷi ) with L(yi , y)(1 − wT δ i (ŷi )).
              The key to the efficiency of this method is that only polynomially many constraints need to
           be added, and as soon as they are, the exponential number of other constraints are guaranteed
           to also be satisﬁed to within a tolerance of  (see (Tsochantaridis et al. 2005) for the proof).

19.7.3.1   Loss-augmented decoding
           The other key to efficiency is the ability to ﬁnd the most violated constraint in line 5 of the
           algorithm, i.e., to compute

                argmax L(yi , y) − wT δ i (y) = argmax L(yi , y) + wT φ(xi , y)                             (19.107)
                 y∈Y                                  y∈Y


           11. http://svmlight.joachims.org/svm_struct.html
           19.7. Structural SVMs                                                                           699


            Algorithm 19.3: Cutting plane algorithm for SSVMs (margin rescaling, N -slack version)
            1   Input D = {(x1 , y1 ), . . . , (xN , yn )}, C,  ;
           2    Wi = ∅, ξi = 0 for i = 1 : N ;
           3    repeat
           4       for i = 1 : N do
           5           ŷi = argmaxŷi ∈Y L(yi , y) − wT δ i (ŷi ) ;
           6           if L(yi , y) − wT δ i (ŷi ) > ξi +  then
           7               Wi = Wi ∪ {ŷi } ;
                                                                   N
           8               (w, ξ) = argminw,ξ≥0 12 ||w||22 + C i=1 ξi ;
           9                       s.t. ∀i = 1 : N, ∀y ∈ Wi : wT δ i (ŷi ) ≥ L(yi , y ) − ξi ;

           10   until no Wi has changed;
           11   Return (w, ξ)



           We call this process loss-augmented decoding. (In (Joachims et al. 2009), this procedure is
           called the separation oracle.) If the loss function has an additive decomposition of the same
           form as the features, then we can fold the loss into the weight vector, i.e., we can ﬁnd a new
           set of parameters w such that (w )T δ i (y) = wT δ i (y). We can then use a standard decoding
           algorithm, such as Viterbi, on the model p(y|x, w ).
              In the special case of 0-1 loss, the optimum will either be the best solution, argmaxy wT φ(xi , y),
           with a value of of 0 − wT δi (ŷ), or it will be the second best solution, i.e.,
                ỹ = argmax wT φ(xi , y)                                                               (19.108)
                       y=ŷ

           which achieves an overall value of 1 − wT δi (ỹ). For chain structured CRFs, we can use the
           Viterbi algorithm to do decoding; the second best path will differ from the best path in a single
           position, which can be obtained by changing the variable whose max marginal is closest to its
           decision boundary to its second best value. We can generalize this (with a bit more work) to
           ﬁnd the N -best list (Schwarz and Chow 1990; Nilsson and Goldberger 2001).
              For Hamming loss, L(y∗ , y) = t I(yt∗ = yt ), and for the F1 score (deﬁned in Section 5.7.2.3),
           we can devise a dynamic programming algorithm to compute Equation 19.107. See (Altun et al.
           2006) for details. Other models and loss function combinations will require different methods.

19.7.3.2   A linear time algorithm
           Although the above algorithm takes polynomial time, we can do better, and devise an algorithm
           that runs in linear time, assuming we use a linear kernel (i.e., we work with the original features
           φ(x, y) and do not apply the kernel trick). The basic idea, as explained in (Joachims et al.
           2009), is to have a single slack variable, ξ, instead of N , but to use |Y|N constraints, instead of
           700                                 Chapter 19. Undirected graphical models (Markov random ﬁelds)


           just N |Y|. Speciﬁcally, we optimize the following (assuming the margin rescaling formulation):
                            1
                 min          ||w||22 + Cξ
                w,ξ≥0       2
                                                                  1 T                1 
                                                                       N                 N
                               s.t. ∀(y1 , . . . , yN ) ∈ Y N :     w     δ i (yi ) ≥       L(yi , yi ) − ξ(19.109)
                                                                  N   i=1
                                                                                      N i=1

           Compare this to the original version, which was
                        1          C
                 min      ||w||22 + ξ     s.t. ∀i = 1 : N, ∀y ∈ Y : wT δ i (y) ≥ L(yi , yi ) − ξi                 (19.110)
                w,ξ≥0   2          N
           One can show that any solution w∗ of Equation 19.109 is also a solution of Equation 19.110 and
           vice versa, with ξ ∗ = N1 ξi∗ .

            Algorithm 19.4: Cutting plane algorithm for SSVMs (margin rescaling, 1-slack version)
            1   Input D = {(x1 , y1 ), . . . , (xN , yn )}, C,  ;
           2    W = ∅;
           3    repeat
                                                             N
           4       (w, ξ) = argminw,ξ≥0 12 ||w||22 + C i=1 ξ ;
                                                                   N                   N
           5               s.t. ∀(y1 , . . . , yN ) ∈ W : N1 wT i=1 δ i (yi ) ≥     1
                                                                                    N    i=1   L(yi , yi ) − ξ;
           6       for i = 1 : N do
           7           ŷi = argmaxŷi ∈Y L(yi , ŷi ) + wT φ(xi , ŷi )
           8        W = W ∪ {(ŷ1 , . . . , ŷN )};
                         N                         N
           9    until N1 i=1 L(yi , ŷi ) − N1 wT i=1 δ i (ŷi ) ≤ ξ + ;
           10   Return (w, ξ)

              We can optimize Equation 19.109 using the cutting plane algorithm in Algorithm 10. (This
           is what is implemented in SVMstruct.) The inner QP in line 4 can be solved in O(N ) time
           using the method of (Joachims 2006). In line 7 we make N calls to the loss-augmented decoder.
           Finally, it can be shown that the number of iterations is a constant independent on N . Thus
           the overall running time is linear.

 19.7.4    Online algorithms for ﬁtting SSVMs
           Although the cutting plane algorithm can be made to run in time linear in the number of data
           points, that can still be slow if we have a large dataset. In such cases, it is preferable to use
           online learning. We brieﬂy mention a few possible algorithms below.

19.7.4.1   The structured perceptron algorithm
           A very simple algorithm for ﬁtting SSVMs is the structured perceptron algorithm (Collins
           2002). This method is an extension of the regular perceptron algorithm of Section 8.5.4. At each
           19.7. Structural SVMs                                                                           701


           step, we compute ŷ = argmax p(y|x) (e.g., using the Viterbi algorithm) for the current training
           sample x. If ŷ = y, we do nothing, otherwise we update the weight vector using

              wk+1 = wk + φ(y, x) − φ(ŷ, x)                                                           (19.111)

           To get good performance, it is necessary to average the parameters over the last few updates
           (see Section 8.5.2 for details), rather than using the most recent value.

19.7.4.2   Stochastic subgradient descent
           The disadvantage of the structured perceptron algorithm is that it implicitly assumes 0-1 loss,
           and it does not enforce any kind of margin. An alternative approach is to perform stochastic
           subgradient descent. A speciﬁc instance of this the Pegasos algorithm (Shalev-Shwartz et al.
           2007), which stands for “primal estimated sub-gradient solver for SVM”. Pegasos was designed
           for binary SVMs, but can be extended to SSVMS.
              Let us start by considering the objective function:

                        
                        N
                                                                
              f (w) =         max L(yi , ŷi ) + wT φ(xi , ŷi ) − wT φ(xi , yi ) + λ||w||2            (19.112)
                               ŷi
                        i=1

           Letting ŷi be the argmax of this max. Then the subgradient of this objective function is

                           
                           N
              g(w)    =              φ(xi , ŷi ) − φ(xi , yi ) + 2λw                                  (19.113)
                              i=1

           In stochastic subgradient descent, we approximate this gradient with a single term, i, and then
           perform an update:

              wk+1 = wk − ηk gi (wk ) = wk − ηk [φ(xi , ŷi ) − φ(xi , yi ) + (2/N )λw]                (19.114)

           where ηk is the step size parameter, which should satisfy the Robbins-Monro conditions (Sec-
           tion 8.5.2.1). (Notice that the perceptron algorithm is just a special case where λ = 0 and
           ηk = 1.) To ensure that w has unit norm, we can project it onto the 2 ball after each update.

 19.7.5    Latent structural SVMs
           In many applications of interest, we have latent or hidden variables h. For example, in object
           detections problems, we may be told that the image contains an object, so y = 1, but we may
           not know where it is. The location of the object, or its pose, can be considered a hidden variable.
           Or in machine translation, we may know the source text x (say English) and the target text y
           (say French), but we typically do not know the alignment between the words.
              We will extend our model as follows, to get a latent CRF:
                                        exp(wT φ(x, y, h))
              p(y, h|x, w)      =                                                                      (19.115)
                                             Z(x, w)
                                        
                  Z(x, w)       =          exp(wT φ(x, y, h))                                          (19.116)
                                         y,h
702                                       Chapter 19. Undirected graphical models (Markov random ﬁelds)


In addition, we introduce the loss function L(y∗ , y, h); this measures the loss when the “action”
that we take is to predict y using latent variables h. We could just use L(y∗ , y) as before, since
h is usually a nuisance variable and not of direct interest. However, h can sometimes play a
useful role in deﬁning a loss function.12
   Given the loss function, we deﬁne our objective as
                                           ⎡                                           ⎤
                                                                 exp(w T
                                                                           φ(x, y, h))
    REL (w) = − log p(w) +             log ⎣     exp L̃(yi , y, h)                     ⎦    (19.117)
                                                                       Z(x,  w)
                                     i                y,h

Using the same loose lower bound as before, we get

                                    
                                    N        &                                '
    REL (w)       ≤     E(w) +            max L̃(yi , y, h) + wT φ(xi , y, h)
                                          y,h
                                    i=1
                            
                            N
                        −         max wT φ(xi , yi , h)                                                        (19.118)
                                   h
                            i=1

                       1
If we set E(w) = − 2C    ||w||22 , we get the same objective as is optimized in latent SVMs (Yu
and Joachims 2009).
   Unfortunately, this objective is no longer convex. However, it is a difference of convex
functions, and hence can be solved efficiently using the CCCP or concave-convex procedure
(Yuille and Rangarajan 2003). This is a method for minimizing functions of the form f (w) −
g(w), where f and g are convex. The method alternates between ﬁnding a linear upper bound
u on −g, and then minimizing the convex function f (w) + u(w); see Algorithm 6 for the
pseudocode. CCCP is guaranteed to decrease the objective at every iteration, and to converge to
a local minimum or a saddle point.

 Algorithm 19.5: Concave-Convex Procedure (CCCP)
1   Set t = 0 and initialize w0 ;
2   repeat
3       Find hyperplane vt such that −g(w) ≤ −g(wt ) + (w − wt )T vt for all w ;
4       Solve wt+1 = argminw f (w) + wT vt ;
5       Set t = t + 1
6   until converged;


    When applied to latent SSVMs, CCCP is very similar to (hard) EM. In the “E step”, we compute

12. For example, consider the problem of learning to classify a set of documents as relevant or not to a query. That
is, given n documents x1 , . . . , xn for a single query q, we want to produce a labeling yj ∈ {−1, +1}, representing
whether document j is relevant to q or not. Suppose our goal is to maximize the precision at k, which is a metric widely
used in ranking (see Section 9.7.4). We will introduce a latent variable for each document hj representing its degree
of relevance. This corresponds to a latent total ordering, that has to be consistent with the observed partial ordering
                                                                                  n(y)        
y. Given this, we can deﬁne the following loss function: L(y, ŷ, ĥ) = min{1, k } − k1 kj=1 I(yhj = 1), where
n(y) is the total number of relevant documents. This loss is essentially just 1 minus the precision@k, except we replace
1 with n(y)/k so that the loss will have a minimum of zero. See (Yu and Joachims 2009) for details.
19.7. Structural SVMs                                                                                 703

                                                  N
the linear upper bound by setting vt = −C            i=1   φ(xi , yi , h∗i ), where
   hi = argmax wtT φ(xi , yi , h)                                                                 (19.119)
              h

In the “M step”, we estimate w using techniques for solving fully visible SSVMs. Speciﬁcally, we
minimize
    1             N
                         (                             )                 N
      ||w||2 + C     max L(yi , y, h) + wT φ(xi , y, h) − C     wT φ(xi , yi , h∗i )              (19.120)
    2            i=1
                     y,h
                                                            i=1


Exercises
Exercise 19.1 Derivative of the log partition function
Derive Equation 19.40.
Exercise 19.2 CI properties of Gaussian graphical models
(Source: Jordan.)
In this question, we study the relationship between sparse matrices and sparse graphs for Gaussian
graphical models. Consider a multivariate Gaussian N (x|μ, Σ) in 3 dimensions. Suppose μ = (0, 0, 0)T
throughout.
Recall that for jointly Gaussian random variables, we know that Xi and Xj are independent iff they are
uncorrelated, ie. Σij = 0. (This is not true in general, or even if Xi and Xj are Gaussian but not jointly
Gaussian.) Also, Xi is conditionally independent of Xj given all the other variables iff Σ−1
                                                                                          ij = 0.


a. Suppose
             ⎛                    ⎞
            0.75       0.5   0.25
       Σ = ⎝ 0.5       1.0    0.5 ⎠
            0.25       0.5   0.75
   Are there any marginal independencies amongst X1 , X2 and X3 ? What about conditional indepen-
   dencies? Hint: compute Σ−1 and expand out xT Σ−1 x: which pairwise terms xi xj are missing? Draw
   an undirected graphical model that captures as many of these independence statements (marginal and
   conditional) as possible, but does not make any false independence assertions.
b. Suppose
            ⎛           ⎞
              2 1 0
      Σ = ⎝1 2 1⎠
              0 1 2
   Are there any marginal independencies amongst X1 , X2 and X3 ? Are there any conditional inde-
   pendencies amongst X1 , X2 and X3 ? Draw an undirected graphical model that captures as many of
   these independence statements (marginal and conditional) as possible, but does not make any false
   independence assertions.
c. Now suppose the distribution on X can be represented by the following DAG:
       X 1 → X2 → X3
   Let the CPDs be as follows:
       P (X1 ) = N (X1 ; 0, 1), P (X2 |x1 ) = N (X2 ; x1 , 1), P (X3 |x2 ) = N (X3 ; x2 , 1)       (19.121)
   Multiply these 3 CPDs together and complete the square (Bishop p101) to ﬁnd the corresponding joint
   distribution N (X1:3 |μ, Σ). (You may ﬁnd it easier to solve for Σ−1 rather than Σ.)
704                                         Chapter 19. Undirected graphical models (Markov random ﬁelds)


d. For the DAG model in the previous question: Are there any marginal independencies amongst X1 , X2
   and X3 ? What about conditional independencies? Draw an undirected graphical model that captures
   as many of these independence statements as possible, but does not make any false independence
   assertions (either marginal or conditional).

Exercise 19.3 Independencies in Gaussian graphical models
(Source: MacKay.)

a. Consider the DAG X1 ← X2 → X3. Assume that all the                             CPDs are linear-Gaussian. Which of the
   following matrices could be the covariance matrix?
            ⎛          ⎞        ⎛                ⎞      ⎛                               ⎞      ⎛                ⎞
              9 3 1                 8    −3    1          9                       3   0          9      −3   0
       A = ⎝3 9 3⎠ , B = ⎝−3              9   −3⎠ , C = ⎝3                        9   3⎠ , D = ⎝−3      10   −3⎠(19.122)
              1 3 9                 1    −3    8          0                       3   9          0      −3    9

b. Which of the above matrices could be inverse covariance matrix?
c. Consider the DAG X1 → X2 ← X3. Assume that all the CPDs are linear-Gaussian. Which of the
   above matrices could be the covariance matrix?
d. Which of the above matrices could be the inverse covariance matrix?
e. Let three variables x1 , x2 , x4 have covariance matrix Σ(1:3) and precision matrix Ω(1:3) = Σ−1
                                                                                                 (1:3) as
   follows
                 ⎛                   ⎞            ⎛                ⎞
                    1    0.5       0                1.5 −1 0.5
       Σ(1:3) = ⎝0.5       1      0.5⎠ , Ω(1:3) = ⎝−1      2   −1⎠                                (19.123)
                    0    0.5       1                0.5 −1 1.5
    Now focus on x1 and x2 . Which of the following statements about their covariance matrix Σ(1:2) and
    precision matrix Ω(1:2) are true?
                                                         
                        1    0.5                    1.5 −1
       A : Σ(1:2) =                , B : Ω(1:2) =                                                (19.124)
                       0.5    1                     −1    2

Exercise 19.4 Cost of training MRFs and CRFs
(Source: Koller.) Consider the process of gradient-ascent training for a log-linear model with k features,
given a data set with N training instances. Assume for simplicity that the cost of computing a single
feature over a single instance in our data set is constant, as is the cost of computing the expected value
of each feature once we compute a marginal over the variables in its scope. Assume that it takes c time
to compute all the marginals for each data case. Also, assume that we need r iterations for the gradient
process to converge.
•   Using this notation, what is the time required to train an MRF in big-O notation?
•   Using this notation, what is the time required to train a CRF in big-O notation?
Exercise 19.5 Full conditional in an Ising model
Consider an Ising model
                                                              n
                               1
    p(x1 , . . . , xn |θ) =                 exp(Jij xi xj )         exp(hi xi )                                  (19.125)
                              Z(θ)   <ij>                     i=1

where < ij > denotes all unique pairs (i.e., all edges), Jij ∈ R is the coupling strength (weight) on edge
i − j, hi ∈ R is the local evidence (bias term), and θ = (J, h) are all the parameters.
19.7. Structural SVMs                                                                               705


If xi ∈ {0, 1}, derive an expression for the full conditional
   p(xi = 1|x−i , θ) = p(xi = 1|xnbi , θ)                                                        (19.126)
where x−i are all nodes except i, and nbi are the neighbors of i in the graph. Hint: you answer should
use the sigmoid/ logistic function σ(z) = 1/(1 + e−z ). Now suppose xi ∈ {−1, +1}. Derive a related
expression for p(xi |x−i , θ) in this case. (This result can be used when applying Gibbs sampling to the
model.)
20        Exact inference for graphical models



  20.1    Introduction
          In Section 17.4.3, we discussed the forwards-backwards algorithm, which can exactly compute the
          posterior marginals p(xt |v, θ) in any chain-structured graphical model, where x are the hidden
          variables (assumed discrete) and v are the visible variables. This algorithm can be modiﬁed
          to compute the posterior mode and posterior samples. A similar algorithm for linear-Gaussian
          chains, known as the Kalman smoother, was discussed in Section 18.3.2. Our goal in this chapter
          is to generalize these exact inference algorithms to arbitrary graphs. The resulting methods apply
          to both directed and undirected graphical models. We will describe a variety of algorithms, but
          we omit their derivations for brevity. See e.g., (Darwiche 2009; Koller and Friedman 2009) for a
          detailed exposition of exact inference techniques for discrete directed graphical models.

  20.2    Belief propagation for trees
          In this section, we generalize the forwards-backwards algorithm from chains to trees. The
          resulting algorithm is known as belief propagation (BP) (Pearl 1988), or the sum-product
          algorithm.

 20.2.1   Serial protocol
          We initially assume (for notational simplicity) that the model is a pairwise MRF (or CRF), i.e.,
                             1                 
            p(x|v) =                  ψs (xs )       ψs,t (xs , xt )                                   (20.1)
                            Z(v)
                                  s∈V         (s,t)∈E

          where ψs is the local evidence for node s, and ψst is the potential for edge s − t. We will
          consider the case of models with higher order cliques (such as directed trees) later on.
             One way to implement BP for undirected trees is as follows. Pick an arbitrary node and call it
          the root, r. Now orient all edges away from r (intuitively, we can imagine “picking up the graph”
          at node r and letting all the edges “dangle” down). This gives us a well-deﬁned notion of parent
          and child. Now we send messages up from the leaves to the root (the collect evidence phase)
          and then back down from the root (the distribute evidence phase), in a manner analogous to
          forwards-backwards on chains.
708                                                               Chapter 20. Exact inference for graphical models

                                                                                     v+
                                                                                      st
                                                      root
                                                                                                     root

                                             t                                             t
                   v−
                    st

                              s                        u                         s                    u


                         s1       s2             u1          u2             s1       s2         u1          u2


                                       (a)                                                (b)

   Figure 20.1 Message passing on a tree. (a) Collect-to-root phase. (b) Distribute-from-root phase.



   To explain the process in more detail, consider the example in Figure 20.1. Suppose we want
to compute the belief state at node t. We will initially condition the belief only on evidence that
is at or below t in the graph, i.e., we want to compute bel−                  −
                                                             t (xt )  p(xt |vt ). We will call this a
“bottom-up belief state”. Suppose, by induction, that we have computed “messages” from t’s two
children, summarizing what they think t should know about the evidence in their subtrees, i.e.,
we have computed m−                        −             −
                        s→t (xt ) = p(xt |vst ), where vst is all the evidence on the downstream
side of the s − t edge (see Figure 20.1(a)), and similarly we have computed mu→t (xt ). Then we
can compute the bottom-up belief state at t as follows:
                                1          
    bel−                −
       t (xt )  p(xt |vt ) =     ψt (xt )       m−c→t (xt )                                    (20.2)
                               Zt
                                                        c∈ch(t)

where ψt (xt ) ∝ p(xt |vt ) is the local evidence for node t, and Zt is the local normalization
constant. In words, we multiply all the incoming messages from our children, as well as the
incoming message from our local evidence, and then normalize.
   We have explained how to compute the bottom-up belief states from the bottom-up messages.
How do we compute the messages themselves? Consider computing m−        s→t (xt ), where s is one
of t’s children. Assume, by recursion, that we have computed bel− s (x              −
                                                                       s = p(xs |vs ). Then we
                                                                        )
can compute the message as follows:
                   
   m−  s→t (xt ) =   ψst (xs , xt )bel−
                                      s (xs )                                               (20.3)
                  xs

Essentially we convert beliefs about xs into beliefs about xt by using the edge potential ψst .
   We continue in this way up the tree until we reach the root. Once at the root, we have “seen”
all the evidence in the tree, so we can compute our local belief state at the root using
                                                   
    belr (xr )  p(xr |v) = p(xt |vr− ) ∝ ψr (xr )     m−c→r (xr )                         (20.4)
                                                                  c∈ch(r)

This completes the end of the upwards pass, which is analogous to the forwards pass in an
HMM. As a “side effect”, we can compute the probability of the evidence by collecting the
         20.2. Belief propagation for trees                                                             709


         normalization constants:
                    
            p(v) =     Zt                                                                             (20.5)
                      t

            We can now pass messages down from the root. For example, consider node s, with parent t,
         as shown in Figure 20.1(b). To compute the belief state for s, we need to combine the bottom-up
         belief for s together with a top-down message from t, which summarizes all the information in
         the rest of the graph, m+                     +            +
                                    t→s (xs )  p(xt |vst ), where vst is all the evidence on the upstream
         (root) side of the s − t edge, as shown in Figure 20.1(b). We then have
                                                 
             bels (xs )  p(xs |v) ∝ bel−s (xs )       m+ t→s (xt )                                   (20.6)
                                              t∈pa(s)

            How do we compute these downward messages? For example, consider the message from t
         to s. Suppose t’s parent is r, and t’s children are s and u, as shown in Figure 20.1(b). We want
         to include in m+ t→s all the information that t has received, except for the information that s
         sent it:
                                                         belt (xt )
             m+                   +
               t→s (xs )  p(xs |vst ) =    ψst (xs , xt ) −                                         (20.7)
                                         xt
                                                          m s→t (xt )

         Rather than dividing out the message sent up to t, we can plug in the equation of belt to get
                                                                     
            m+t→s (xs ) =     ψst (xs , xt )ψt (xt )      m− c→t (xt )      m+p→t (xt )           (20.8)
                           xt                    c∈ch(t),c=s          p∈pa(t)

         In other words, we multiply together all the messages coming into t from all nodes except for
         the recipient s, combine together, and then pass through the edge potential ψst . In the case of
         a chain, t only has one child s and one parent p, so the above simpliﬁes to
                           
            m+ t→s (xs ) =    ψst (xs , xt )ψt (xt )m+
                                                     p→t (xt )                                      (20.9)
                           xt

            The version of BP in which we use division is called belief updating, and the version in
         which we multiply all-but-one of the messages is called sum-product. The belief updating
         version is analogous to how we formulated the Kalman smoother in Section 18.3.2: the top-
         down messages depend on the bottom-up messages. This means they can be interpreted as
         conditional posterior probabilities. The sum-product version is analogous to how we formulated
         the backwards algorithm in Section 17.4.3: the top-down messages are completely independent
         of the bottom-up messages, which means they can only be interpreted as conditional likelihoods.
         See Section 18.3.2.3 for a more detailed discussion of this subtle difference.

20.2.2   Parallel protocol
         So far, we have presented a serial version of the algorithm, in which we send messages up
         to the root and back. This is the optimal approach for a tree, and is a natural extension of
         forwards-backwards on chains. However, as a prelude to handling general graphs with loops, we
         now consider a parallel version of BP. This gives equivalent results to the serial version but is
         less efficient when implemented on a serial machine.
         710                                              Chapter 20. Exact inference for graphical models


           The basic idea is that all nodes receive messages from their neighbors in parallel, they then
         updates their belief states, and ﬁnally they send new messages back out to their neighbors.
         This process repeats until convergence. This kind of computing architecture is called a systolic
         array, due to its resemblance to a beating heart.
           More precisely, we initialize all messages to the all 1’s vector. Then, in parallel, each node
         absorbs messages from all its neighbors using
                                  
            bels (xs ) ∝ ψs (xs )      mt→s (xs )                                                   (20.10)
                                 t∈nbrs

         Then, in parallel, each node sends messages to each of its neighbors:
                                  ⎛                                      ⎞
                                                         
            ms→t (xt ) =          ⎝ψs (xs )ψst (xs , xt )     mu→s (xs )⎠                              (20.11)
                                xs                      u∈nbrs \t

         The ms→t message is computed by multiplying together all incoming messages, except the one
         sent by the recipient, and then passing through the ψst potential.
            At iteration T of the algorithm, bels (xs ) represents the posterior belief of xs conditioned on
         the evidence that is T steps away in the graph. After D(G) steps, where D(G) is the diameter
         of the graph (the largest distance between any two pairs of nodes), every node has obtained
         information from all the other nodes. Its local belief state is then the correct posterior marginal.
         Since the diameter of a tree is at most |V| − 1, the algorithm converges in a linear number of
         steps.
            We can actually derive the up-down version of the algorithm by imposing the condition that
         a node can only send a message once it has received messages from all its other neighbors.
         This means we must start with the leaf nodes, which only have one neighbor. The messages
         then propagate up to the root and back. We can also update the nodes in a random order.
         The only requirement is that each node get updated D(G) times. This is just enough time for
         information to spread throughout the whole tree.
            Similar parallel, distributed algorithms for solving linear systems of equations are discussed
         in (Bertsekas 1997). In particular, the Gauss-Seidel algorithm is analogous to the serial up-down
         version of BP, and the Jacobi algorithm is analogous to the parallel version of BP.

20.2.3   Gaussian BP *
         Now consider the case where p(x|v) is jointly Gaussian, so it can be represented as a Gaussian
         pairwise MRF, as in Section 19.4.4. We now present the belief propagation algorithm for this
         class of models, follow the presentation of (Bickson 2009) (see also (Malioutov et al. 2006)). We
         will assume the following node and edge potentials:
                                     1
                 ψt (xt )   = exp(− Att x2t + bt xt )                                                 (20.12)
                                     2
                                     1
            ψst (xs , xt ) = exp(− xs Ast xt )                                                        (20.13)
                                     2
         so the overall model has the form
                             1
            p(x|v) ∝ exp(− xT Ax + bT x)                                                              (20.14)
                             2
20.2. Belief propagation for trees                                                                   711


This is the information form of the MVN (see Exercise 9.2), where A is the precision matrix.
Note that by completing the square, the local evidence can be rewritten as a Gaussian:

   ψt (xt ) ∝ N (bt /Att , A−1              −1
                            tt )  N (mt , t )                                                  (20.15)

  Below we describe how to use BP to compute the posterior node marginals,

   p(xt |v) = N (μt , λ−1
                       t )                                                                       (20.16)

If the graph is a tree, the method is exact. If the graph is loopy, the posterior means may still
be exact, but the posterior variances are often too small (Weiss and Freeman 1999).
   Although the precision matrix A is often sparse, computing the posterior mean requires
inverting it, since μ = A−1 b. BP provides a way to exploit graph structure to perform this
computation in O(D) time instead of O(D3 ). This is related to various methods from linear
algebra, as discussed in (Bickson 2009).
   Since the model is jointly Gaussian, all marginals and all messages will be Gaussian. The
key operations we need are to multiply together two Gaussian factors, and to marginalize out a
variable from a joint Gaussian factor.
   For multiplication, we can use the fact that the product of two Gaussians is Gaussian:

   N (x|μ1 , λ−1               −1
              1 ) × N (x|μ2 , λ2 )         =           CN (x|μ, λ−1 )                            (20.17)
                                         λ =           λ1 + λ 2                                  (20.18)
                                         μ     =       λ−1 (μ1 λ1 + μ2 λ2 )                      (20.19)

where
         .               
              λ              1
   C=              exp         (λ1 μ21 (λ−1 λ1 − 1) + λ2 μ22 (λ−1 λ2 − 1) + 2λ−1 λ1 λ2 μ1 μ2 )   (20.20)
             λ1 λ2           2
See Exercise 20.2 for the proof.
  For marginalization, we have the following result:
                                    "
        exp(−ax2 + bx)dx =           π/a exp(b2 /4a)                                             (20.21)

which follows from the normalization constant of a Gaussian (Exercise 2.11).
  We now have all the pieces we need. In particular, let the message ms→t (xt ) be a Gaussian
with mean μst and precision λst . From Equation 20.10, the belief at node s is given by the
product of incoming messages times the local evidence (Equation 20.15) and hence
                           
   bels (xs ) = ψs (xs )         mts (xs ) = N (xs |μs , λ−1
                                                          s )                          (20.22)
                                 t∈nbr(s)
                                 
          λs   =    s +                λts                                                      (20.23)
                             t∈nbr(s)
                             ⎛                               ⎞
                                              
          μs   =    λ−1
                     s
                        ⎝s ms +                       λts μts ⎠                                 (20.24)
                                            t∈nbr(s)
         712                                                         Chapter 20. Exact inference for graphical models


           To compute the messages themselves, we use Equation 20.11, which is given by
                              ⎛                                       ⎞
                                                      
            ms→t (xt ) =      ⎝ψst (xs , xt )ψs (xs )      mu→s (xs )⎠ dxs                                    (20.25)
                                   xs                              u∈nbrs \t

                            =           ψst (xs , xt )fs\t (xs )dxs                                           (20.26)
                                   xs

         where fs\t (xs ) is the product of the local evidence and all incoming messages excluding the
         message from t:
                                      
           fs\t (xs )  ψs (xs )            mu→s (xs )                                          (20.27)
                                          u∈nbrs \t

                            =   N (xs |μs\t , λ−1
                                               s\t )                                                          (20.28)
                                        
                   λs\t        s +             λus                                                          (20.29)
                                        u∈nbr(s)\t
                                    ⎛                                    ⎞
                                                        
                   μs\t        λ−1  ⎝s ms +                     λus μus ⎠                                   (20.30)
                                 s\t
                                                     u∈nbr(s)\t

         Returning to Equation 20.26 we have

               ms→t (xt )   =           exp(−xs Ast xt ) exp(−λs\t /2(xs − μs\t )2 ) dxs                       (20.31)
                                   xs   /    01       2/            01            2
                                            ψst (xs ,xt )                fs\t (xs )
                                                                                
                            =        exp (−λs\t x2s /2) + (λs\t μs\t − Ast xt )xs dxs + const                 (20.32)
                                  xs
                                                                     
                            ∝    exp (λs\t μs\t − Ast xt )2 /(2λs\t )                                         (20.33)
                            ∝    N (μst , λ−1
                                           st )                                                               (20.34)
                                  2
                     λst    =    Ast /λs\t                                                                    (20.35)
                     μst    =    Ast μs\t /λst                                                                (20.36)

            One can generalize these equations to the case where each node is a vector, and the messages
         become small MVNs instead of scalar Gaussians (Alag and Agogino 1996). If we apply the
         resulting algorithm to a linear dynamical system, we recover the Kalman smoothing algorithm
         of Section 18.3.2.
            To perform message passing in models with non-Gaussian potentials, one can use sampling
         methods to approximate the relevant integrals. This is called non-parametric BP (Sudderth
         et al. 2003; Isard 2003; Sudderth et al. 2010).

20.2.4   Other BP variants *
         In this section, we brieﬂy discuss several variants of the main algorithm.
           20.2. Belief propagation for trees                                                                713



                                  ft                   ψt,t+1                         βt+1
                                            xt                          xt+1
                                                    ψt                             ψt+1
                                            vt                          v t+1
           Figure 20.2 Illustration of how to compute the two-slice distribution for an HMM. The ψt and ψt+1
           terms are the local evidence messages from the visible nodes vt , vt+1 to the hidde nodes xt , xt+1
           respectively; ft is the forwards message from xt−1 and βt+1 is the backwards message from xt+2 .



20.2.4.1   Max-product algorithm
                                                                                                     
           It is possible to devise a max-product version of the BP algorithm, by replacing the         operator
           with the max operator. We can then compute the local MAP marginal of each node. However,
           if there are ties, this might not be globally consistent, as discussed in Section 17.4.4. Fortunately,
           we can generalize the Viterbi algorithm to trees, where we use max and argmax in the collect-
           to-root phase, and perform traceback in the distribute-from-root phase. See (Dawid 1992) for
           details.

20.2.4.2   Sampling from a tree
           It is possible to draw samples from a tree structured model by generalizing the forwards ﬁltering
           / backwards sampling algorithm discussed in Section 17.4.5. See (Dawid 1992) for details.

20.2.4.3   Computing posteriors on sets of variables
           In Section 17.4.3.2, we explained how to compute the “two-slice” distribution ξt,t+1 (i, j) =
           p(xt = i, xt+1 = j|v) in an HMM, namely by using
              ξt,t+1 (i, j)   =   αt (i)ψt+1 (j)βt+1 (j)ψt,t+1 (i, j)                                     (20.37)
           Since αt (i) ∝ ψt (i)ft (i), where ft = p(xt |v1:t−1 ) is the forwards message, we can think of
           this as sending messages ft and ψt into xt , βt+1 and φt+1 into xt+1 , and then combining
           them with the Ψ matrix, as shown in Figure 20.2. This is like treating xt and xt+1 as a single
           “mega node”, and then multiplying all the incoming messages as well as all the local factors
           (here, ψt,t+1 ).
       714                                                        Chapter 20. Exact inference for graphical models



                       Coherence                                           Coherence


                         Diﬃculty             Intelligence                  Diﬃculty            Intelligence


                                     Grade            SAT                               Grade           SAT


                                             Letter                                        Letter
                                                       Job                                               Job
                            Happy                                              Happy


                                       (a)                                                (b)

       Figure 20.3 Left: The “student” DGM. Right: the equivalent UGM. We add moralization arcs D-I, G-J and
       L-S. Based on Figure 9.8 of (Koller and Friedman 2009).


20.3   The variable elimination algorithm
       We have seen how to use BP to compute exact marginals on chains and trees. In this section,
       we discuss an algorithm to compute p(xq |xv ) for any kind of graph.
          We will explain the algorithm by example. Consider the DGM in Figure 20.3(a). This model,
       from (Koller and Friedman 2009), is a hypothetical model relating various variables pertaining to
       a typical student. The corresponding joint has the following form:
             P (C, D, I, G, S, L, J, H)                                                                               (20.38)
                = P (C)P (D|C)P (I)P (G|I, D)P (S|I)P (L|G)P (J|L, S)P (H|G, J)                                       (20.39)
       Note that the forms of the CPDs do not matter, since all our calculations will be symbolic.
       However, for illustration purposes, we will assume all variables are binary.
         Before proceeding, we convert our model to undirected form. This is not required, but it
       makes for a more uniﬁed presentation, since the resulting method can then be applied to both
       DGMs and UGMs (and, as we will see in Section 20.3.1, to a variety of other problems that
       have nothing to do with graphical models). Since the computational complexity of inference in
       DGMs and UGMs is, generally speaking, the same, nothing is lost in this transformation from a
       computational point of view.1
         To convert the DGM to a UGM, we simply deﬁne a potential or factor for every CPD, yielding
             p(C, D, I, G, S, L, J, H)                                                     (20.40)
               = ψC (C)ψD (D, C)ψI (I)ψG (G, I, D)ψS (S, I)ψL (L, G)ψJ (J, L, S)ψH (H, G, J)(20.41)
       1. There are a few “tricks” one can exploit in the directed case that cannot easily be exploited in the undirected case.
       One important example is barren node removal. To explain this, consider a naive Bayes classiﬁer, as in Figure 10.2.
       Suppose we want   to infer y and we observe x1 and x2 , but not x3 and x4 . It is clear that we can safely remove
       x3 and x4 , since x3 p(x3 |y) = 1, and similarly for x4 . In general, once we have removed hidden leaves, we can
       apply this process recursively. Since potential functions do not necessary sum to one, we cannot use this trick in the
       undirected case. See (Koller and Friedman 2009) for a variety of other speedup tricks.
20.3. The variable elimination algorithm                                                            715


Since all the potentials are locally normalized, since they are CPDs, there is no need for a
global normalization constant, so Z = 1. The corresponding undirected graph is shown in
Figure 20.3(b). Note that it has more edges than the DAG. In particular, any “unmarried” nodes
that share a child must get “married”, by adding an edge between them; this process is known
as moralization. Only then can the arrows be dropped. In this example, we added D-I, G-J, and
L-S moralization arcs. The reason this operation is required is to ensure that the CI properties
of the UGM match those of the DGM, as explained in Section 19.2.2. It also ensures there is a
clique that can “store” the CPDs of each family.
   Now suppose we want to compute p(J = 1), the marginal probability that a person will get a
job. Since we have 8 binary variables, we could simply enumerate over all possible assignments
to all the variables (except for J), adding up the probability of each joint instantiation:
                
    p(J) =                                   p(C, D, I, G, S, L, J, H)                      (20.42)
                   L       S    G   H   I   D    C

However, this would take O(27 ) time. We can be smarter by pushing sums inside products.
This is the key idea behind the variable elimination algorithm (Zhang and Poole 1996), also
called bucket elimination (Dechter 1996), or, in the context of genetic pedigree trees, the
peeling algorithm (Cannings et al. 1978). In our example, we get
                    
    p(J) =                  p(C, D, I, G, S, L, J, H)
               L,S,G,H,I,D,C
                           
           =                         ψC (C)ψD (D, C)ψI (I)ψG (G, I, D)ψS (S, I)ψL (L, G)
               L,S,G,H,I,D,C
               ×ψJ (J, L, S)ψH (H, G, J)
                                                       
           =     ψJ (J, L, S)    ψL (L, G)   ψH (H, G, J)   ψS (S, I)ψI (I)
                   L,S                  G             H                   I
                                           
               ×           ψG (G, I, D)         ψC (C)ψD (D, C)
                       D                    C

We now evaluate this expression, working right to left as shown in Table 20.1. First we multiply
together all the terms in the scope of the C operator to create the temporary factor

   τ1 (C, D) = ψC (C)ψD (D, C)                                                                 (20.43)

Then we marginalize out C to get the new factor
            
   τ1 (D) =   τ1 (C, D)                                                                         (20.44)
               C
                                                                  
Next we multiply together all the terms in the scope of the           D   operator and then marginalize
out to create

   τ2 (G, I, D)       =       ψG (G, I, D)τ1 (D)                                               (20.45)
                               
      τ2 (G, I)        =           τ2 (G, I, D)                                                (20.46)
                               D
716                                                                         Chapter 20. Exact inference for graphical models


                                                                                                                          
            ψJ (J, L, S)        ψL (L, G)         ψH (H, G, J)              ψS (S, I)ψI (I)              ψG (G, I, D)                 ψC (C)ψD (D, C)
L      S                   G                H                          I                         D                              C
                                                                                                                                
                                                                                                                                           τ1 (D)
                                                                                                                       
                               ψJ (J, L, S)          ψL (L, G)             ψH (H, G, J)          ψS (S, I)ψI (I)                     ψG (G, I, D)τ1 (D)
                       L   S                    G                  H                         I                               D
                                                                                                                            
                                                                                                                                         τ2 (G,I)
                                                                                                                
                                                    ψJ (J, L, S)           ψL (L, G)         ψH (H, G, J)                   ψS (S, I)ψI (I)τ2 (G, I)
                                       L      S                    G                     H                              I
                                                                                                                    
                                                                                                                                       τ3 (G,S)
                                                                                                                     
                                                                               ψJ (J, L, S)          ψL (L, G)               ψH (H, G, J) τ3 (G, S)
                                                                   L       S                     G                      H
                                                                                                                        
                                                                                                                                τ4 (G,J)
                                                                                                          
                                                                                         ψJ (J, L, S)               ψL (L, G)τ4 (G, J)τ3 (G, S)
                                                                                 L   S                       G
                                                                                                            
                                                                                                                                    τ5 (J,L,S)
                                                                                                            
                                                                                                                            ψJ (J, L, S)τ5 (J, L, S)
                                                                                                                L       S
                                                                                                                    
                                                                                                                                       τ6 (J,L)
                                                                                                                                             
                                                                                                                                                     τ6 (J, L)
                                                                                                                                                 L
                                                                                                                                             
                                                                                                                                                     τ7 (J)




 Table 20.1 Eliminating variables from Figure 20.3 in the order C, D, I, H, G, S, L to compute P (J).

                                                                                                 
Next we multiply together all the terms in the scope of the                                          I   operator and then marginalize
out to create
      τ3 (G, I, S)        =    ψS (S, I)ψI (I)τ2 (G, I)                                                                                               (20.47)
                                
           τ3 (G, S)       =        τ3 (G, I, S)                                                                                                      (20.48)
                                  I

And so on.
  The above technique can be used to compute any marginal of interest, such as p(J) or
p(J, H). To compute a conditional, we can take a ratio of two marginals, where the visible
variables have been clamped to their known values (and hence don’t need to be summed over).
For example,
                                                    p(J = j, I = 1, H = 0)
      p(J = j|I = 1, H = 0) =                                 
                                                                                                                                                       (20.49)
                                                    j  p(J = j , I = 1, H = 0)

In general, we can write
                                              
                               p(xq , xv )         p(xh , xq , xv )
      p(xq |xv )       =                   =  xh
                                                               
                                                                                                                                                       (20.50)
                                 p(xv )       xh   xq p(xh , xq , xv )
         20.3. The variable elimination algorithm                                                       717


         The normalization constant in the denominator, p(xv ), is called the probability of the evi-
         dence.
            See variableElimination for a simple Matlab implementation of this algorithm, which
         works for arbitrary graphs, and arbitrary discrete factors. But before you go too crazy, please
         read Section 20.3.2, which points out that VE can be exponentially slow in the worst case.

20.3.1   The generalized distributive law *
         Abstractly, VE can be thought of as computing the following expression:
                         
            p(xq |xv ) ∝        ψc (xc )                                                            (20.51)
                          x       c

         It is understood that the visible variables xv are clamped, and not summed over. VE uses
         non-serial dynamic programming (Bertele and Brioschi 1972), caching intermediate results to
         avoid redundant computation.
            However, there are other tasks we might like to solve for any given graphical model. For
         example, we might want the MAP estimate:
                          
             x∗ = argmax      ψc (xc )                                                        (20.52)
                      x
                              c

         Fortunately, essentially the same algorithm can also be used to solve this task: we just replace
         sum with max. (We also need a traceback step, which actually recovers the argmax, as opposed
         to just the value of max; these details are explained in Section 17.4.4.)
            In general, VE can be applied to any commutative semi-ring. This is a set K, together with
         two binary operations called “+” and “×”, which satisfy the following three axioms:
         1. The operation “+” is associative and commutative, and there is an additive identity element
            called “0” such that k + 0 = k for all k ∈ K.
         2. The operation “×” is associative and commutative, and there is a multiplicative identity
            element called “1” such that k × 1 = k for all k ∈ K.
         3. The distributive law holds, i.e.,

               (a × b) + (a × c) = a × (b + c)                                                      (20.53)

            for all triples (a, b, c) from K.
            This framework covers an extremely wide range of important applications, including constraint
         satisfaction problems (Bistarelli et al. 1997; Dechter 2003), the fast Fourier transform (Aji and
         McEliece 2000), etc. See Table 20.2 for some examples.

20.3.2   Computational complexity of VE
         The running time of VE is clearly exponential in the size of the largest factor, since we have sum
         over all of the corresponding variables. Some of the factors come from the original model (and
         are thus unavoidable), but new factors are created in the process of summing out. For example,
718                                                                    Chapter 20. Exact inference for graphical models


                          Domain                 +                 ×           Name
                          [0, ∞)                 (+, 0)            (×, 1)      sum-product
                          [0, ∞)                 (max, 0)          (×, 1)      max-product
                          (−∞, ∞]                (min, ∞)          (+, 0)      min-sum
                          {T, F }                (∨, F )           (∧, T )     Boolean satisﬁability

                                          Table 20.2 Some commutative semirings.

                                                                             
              ψD (D, C)                       ψJ (J, L, S)       ψI (I)ψS (S, I)           ψG (G, I, D)ψL (L, )ψH (H, G, J)
      D   C               H       L       S                  I                     G
                                                                                   
                                                                                                           τ1 (I,D,L,J,H)
                                                                                  
                                          ψD (D, C)                    ψJ (J, L, S)                ψI (I)ψS (S, I)τ1 (I, D, L, J, H)
                              D       C                 H    L     S                       I
                                                                                       
                                                                                                            τ2 (D,L,S,J,H)
                                                                            
                                                                  ψD (D, C)                            ψJ (J, L, S)τ2 (D, L, S, J, H)
                                                        D    C                 H       L           S
                                                                                               
                                                                                                               τ3 (D,L,J,H)
                                                                                                             
                                                                                               ψD (D, C)                        τ3 (D, L, J, H)
                                                                              D        C                           H    L
                                                                                                                       
                                                                                                                                τ4 (D,J,H)
                                                                                                                          
                                                                                                           ψD (D, C)              τ4 (D, J, H)
                                                                                           D           C                    H
                                                                                                                            
                                                                                                                                   τ5 (D,J)
                                                                                                           
                                                                                                                       ψD (D, C)τ5 (D, J)
                                                                                                           D   C
                                                                                                               
                                                                                                                            τ6 (D,J)
                                                                                                                                  
                                                                                                                                       τ6 (D, J)
                                                                                                                                   D
                                                                                                                                  
                                                                                                                                       τ7 (J)




              Table 20.3 Eliminating variables from Figure 20.3 in the order G, I, S, L, H, C, D.



in Equation 20.47, we created a factor involving G, I and S; but these nodes were not originally
present together in any factor.
   The order in which we perform the summation is known as the elimination order. This
can have a large impact on the size of the intermediate factors that are created. For example,
consider the ordering in Table 20.1: the largest created factor (beyond the original ones in the
model) has size 3, corresponding to τ5 (J, L, S). Now consider the ordering in Table 20.3: now
the largest factors are τ1 (I, D, L, J, H) and τ2 (D, L, S, J, H), which are much bigger.
   We can determine the size of the largest factor graphically, without worrying about the actual
numerical values of the factors. When we eliminate a variable Xt , we connect it to all variables
20.3. The variable elimination algorithm                                                                         719


     Coherence                          Coherence                          Coherence


      Diﬃculty           Intelligence    Diﬃculty           Intelligence    Diﬃculty           Intelligence


                 Grade           SAT                Grade           SAT                Grade           SAT


                  Letter                             Letter                             Letter
                                  Job                                Job                                Job
        Happy                              Happy                              Happy


                 (a)                                 (b)                               (c)

Figure 20.4 Example of the elimination process, in the order C, D, I, etc. When we eliminate I (ﬁgure
c), we add a ﬁll-in edge between G and S, since they are not connected. Based on Figure 9.10 of (Koller
and Friedman 2009).



that share a factor with Xt (to reﬂect the new temporary factor τt ). The edges created by this
process are called ﬁll-in edges. For example, Figure 20.4 shows the ﬁll-in edges introduced
when we eliminate in the order C, D, I, . . .. The ﬁrst two steps do not introduce any ﬁll-ins,
but when we eliminate I, we connect G and S, since they co-occur in Equation 20.48.
   Let G(≺) be the (undirected) graph induced by applying variable elimination to G using
elimination ordering ≺. The temporary factors generated by VE correspond to maximal cliques
in the graph G(≺). For example, with ordering (C, D, I, H, G, S, L), the maximal cliques are
as follows:
   {C, D}, {D, I, G}, {G, L, S, J}, {G, J, H}, {G, I, S}                                                      (20.54)

  It is clear that the time complexity of VE is
       
               K |c|                                                                                          (20.55)
   c∈C(G(≺))

where C are the cliques that are created, |c| is the size of the clique c, and we assume for
notational simplicity that all the variables have K states each.
  Let us deﬁne the induced width of a graph given elimination ordering ≺, denoted w(≺), as
the size of the largest factor (i.e., the largest clique in the induced graph ) minus 1. Then it is
easy to see that the complexity of VE with ordering ≺ is O(K w(≺)+1 ).
  Obviously we would like to minimize the running time, and hence the induced width. Let us
deﬁne the treewidth of a graph as the minimal induced width.

   w  min max |c| − 1                                                                                        (20.56)
           ≺ c∈G(≺)

Then clearly the best possible running time for VE is O(DK w+1 ). Unfortunately, one can show
that for arbitrary graphs, ﬁnding an elimination ordering ≺ that minimizes w(≺) is NP-hard
(Arnborg et al. 1987). In practice greedy search techniques are used to ﬁnd reasonable orderings
(Kjaerulff 1990), although people have tried other heuristic methods for discrete optimization,
         720                                             Chapter 20. Exact inference for graphical models


         such as genetic algorithms (Larranaga et al. 1997). It is also possible to derive approximate
         algorithms with provable performance guarantees (Amir 2010).
            In some cases, the optimal elimination ordering is clear. For example, for chains, we should
         work forwards or backwards in time. For trees, we should work from the leaves to the root.
         These orderings do not introduce any ﬁll-in edges, so w = 1. Consequently, inference in chains
         and trees takes O(V K 2 ) time. This is one reason why Markov chains and Markov trees are so
         widely used.
            Unfortunately, for other graphs, the treewidth is large. For example, for an m × n 2d lattice,
         the treewidth is O(min{m, n}) (Lipton and Tarjan 1979). So VE on a 100 × 100 Ising model
         would take O(2100 ) time.
            Of course, just because VE is slow doesn’t mean that there isn’t some smarter algorithm out
         there. We discuss this issue in Section 20.5.

20.3.3   A weakness of VE
         The main disadvantage of the variable elimination algorithm (apart from its exponential depen-
         dence on treewidth) is that it is inefficient if we want to compute multiple queries conditioned
         on the same evidence. For example, consider computing all the marginals in a chain-structured
         graphical model such as an HMM. We can easily compute the ﬁnal marginal p(xT |v) by elimi-
         nating all the nodes x1 to xT −1 in order. This is equivalent to the forwards algorithm, and takes
         O(K 2 T ) time. But now suppose we want to compute p(xT −1 |v). We have to run VE again, at
         a cost of O(K 2 T ) time. So the total cost to compute all the marginals is O(K 2 T 2 ). However,
         we know that we can solve this problem in O(K 2 T ) using forwards-backwards. The difference
         is that FB caches the messages computed on the forwards pass, so it can reuse them later.
            The same argument holds for BP on trees. For example, consider the 4-node tree in Fig-
         ure 20.5. We can compute p(x1 |v) by eliminating x2:4 ; this is equivalent to sending messages
         up to x1 (the messages correspond to the τ factors created by VE). Similarly we can compute
         p(x2 |v), p(x3 |v) and then p(x4 |v). We see that some of the messages used to compute the
         marginal on one node can be re-used to compute the marginals on the other nodes. By storing
         the messages for later re-use, we can compute all the marginals in O(DK 2 ) time. This is what
         the up-down (collect-distribute) algorithm on trees does.
            The question is: how can we combine the efficiency of BP on trees with the generality of VE?
         The answer is given in Section 20.4.

 20.4    The junction tree algorithm *
         The junction tree algorithm or JTA generalizes BP from trees to arbitrary graphs. We sketch
         the basic idea below; for details, see e.g., (Koller and Friedman 2009).

20.4.1   Creating a junction tree
         The basic idea behind the JTA is this. We ﬁrst run the VE algorithm “symbolically”, adding ﬁll-in
         edges as we go, according to a given elimination ordering. The resulting graph will be a chordal
         graph, which means that every undirected cycle X1 − X2 · · · Xk − X1 of length k ≥ 4 has a
20.4. The junction tree algorithm *                                                                     721




                                      ;                                      ;
                                                                            


                       P [                                   P [
                                      ;                                      ;
                                                        P [              
                   P [                 P [                                       P [

                       ;                      ;              ;                             ;
                                                                                         
                                      D                                      E

                                      ;                                      ;
                                                                            

                      P [                                    P [             P [
                                      ;                                      ;
                  P [                                                    
                                                         P [                        P [
                       ;       P [         ;              ;                             ;
                                                                                         
                                                                    P [        P [


Figure 20.5 Sending multiple messages along a tree. (a) X1 is root. (b) X2 is root. (c) X4 is root. (d) All
of the messages needed to compute all singleton marginals. Based on Figure 4.3 of (Jordan 2007).




                                                                                


                                                                                             

                                                                                



                                                                                         


                                (a)                                              (b)

Figure 20.6 Left: this graph is not triangulated, despite appearances, since it contains a chordless 5-cycle
1-2-3-4-5-1. Right: one possible triangulation, by adding the 1-3 and 1-4 ﬁll-in edges. Based on (Armstrong
2005, p46)
         722                                                        Chapter 20. Exact inference for graphical models


         chord, i.e., an edge connects Xi , Xj for all non-adjacent nodes i,j in the cycle.2
            Having created a chordal graph, we can extract its maximal cliques. In general, ﬁnding max
         cliques is computationally hard, but it turns out that it can be done efficiently from this special
         kind of graph. Figure 20.7(b) gives an example, where the max cliques are as follows:
             {C, D}, {G, I, D}, {G, S, I}, {G, J, S, L}, {H, G, J}                                                      (20.57)
         Note that if the original graphical model was already chordal, the elimination process would not
         add any extra ﬁll-in edges (assuming the optimal elimination ordering was used). We call such
         models decomposable, since they break into little pieces deﬁned by the cliques.
            It turns out that the cliques of a chordal graph can be arranged into a special kind of
         tree known as a junction tree. This enjoys the running intersection property (RIP), which
         means that any subset of nodes containing a given variable forms a connected component.
         Figure 20.7(c) gives an example of such a tree. We see that the node I occurs in two adjacent
         tree nodes, so they can share information about this variable. A similar situation holds for all
         the other variables.
            One can show that if a tree that satisﬁes the running intersection property, then applying
         BP to this tree (as we explain below) will return the exact values of p(xc |v) for each node c
         in the tree (i.e., clique in the induced graph). From this, we can easily extract the node and
         edge marginals, p(xt |v) and p(xs , xt |v) from the original model, by marginalizing the clique
         distributions.3

20.4.2   Message passing on a junction tree
         Having constructed a junction tree, we can use it for inference. The process is very similar
         to belief propagation on a tree. As in Section 20.2, there are two versions: the sum-product
         form, also known as the Shafer-Shenoy algorithm, named after (Shafer and Shenoy 1990); and
         the belief updating form (which involves division), also known as the Hugin (named after a
         company) or the Lauritzen-Spiegelhalter algorithm (named after (Lauritzen and Spiegelhalter
         1988)). See (Lepar and Shenoy 1998) for a detailed comparison of these methods. Below we
         sketch how the Hugin algorithm works.
            We assume the original model has the following form:
                     1 
            p(x) =            ψc (xc )                                                         (20.58)
                     Z
                          c∈C(G)

         where C(G) are the cliques of the original graph. On the other hand, the tree deﬁnes a
         distribution of the following form:
                     
                        c∈C(T ) ψc (xc )
             p(x) =                                                                     (20.59)
                        s∈S(T ) ψs (xs )

         2. The largest loop in a chordal graph is length 3. Consequently chordal graphs are sometimes called triangulated.
         However, it is not enough for the graph to look like it is made of little triangles. For example, Figure 20.6(a) is not
         chordal, even though it is made of little triangles, since it contains the chordless 5-cycle 1-2-3-4-5-1.
         3. If we want the joint distribution of some variables that are not in the same clique — a so-called out-of-clique
         query — we can adapt the technique described in Section 20.2.4.3 as follows: create a mega node containing the query
         variables and any other nuisance variables that lie on the path between them, multiply in messages onto the boundary
         of the mega node, and then marginalize out the internal nuisance variables. This internal marginalization may require
         the use of BP or VE. See (Koller and Friedman 2009) for details.
20.4. The junction tree algorithm *                                                                                         723


               Coherence                                                     Coherence



               Difﬁculty            Intelligence                              Difﬁculty                Intelligence



                           Grade                   SAT                                       Grade                    SAT



                           Letter                                                           Letter

                                                    Job                                                               Job
                Happy                                                          Happy

                                    (a)                                                                (b)



                                    C, D           G, I, D         G, S, I          G, J, S, L         H, G, J
                                            D                G,I             G, S                G,J

                                                                    (c)

Figure 20.7 (a) The student graph with ﬁll-in edges added. (b) The maximal cliques. (c) The junction
tree. An edge between nodes s and t is labeled by the intersection of the sets on nodes s and t; this is
called the separating set. From Figure 9.11 of (Koller and Friedman 2009). Used with kind permission of
Daphne Koller.



where C(T ) are the nodes of the junction tree (which are the cliques of the chordal graph), and
S(T ) are the separators of the tree. To make these equal, we initialize by deﬁning ψs = 1 for
all separators and ψc = 1 for all cliques. Then, for each clique in the original model, c ∈ C(G),
we ﬁnd a clique in the tree c ∈ C(T ) which contains it, c ⊇ c. We then multiply ψc onto ψc
by computing ψc = ψc ψc . After doing this for all the cliques in the original graph, we have
                     
           ψc (xc ) =      ψc (xc )                                                        (20.60)
   c∈C(T )              c∈C(G)

   As in Section 20.2.1, we now send messages from the leaves to the root and back, as sketched
in Figure 20.1. In the upwards pass, also known as the collect-to-root phase, node i sends to
its parent j the following message:
                    
    mi→j (Sij ) =         ψi (Ci )                                                       (20.61)
                   Ci \Sij

That is, we marginalize out the variables that node i “knows about” which are irrelevant to j,
and then we send what is left over. Once a node has received messages from all its children, it
updates its belief state using
                        
   ψi (Ci ) ∝ ψi (Ci )      mj→i (Sij )                                                 (20.62)
                        j∈chi
           724                                               Chapter 20. Exact inference for graphical models


           At the root, ψr (Cr ) represents p(xCr |v), which is the posterior over the nodes in clique
           Cr conditioned on all the evidence. Its normalization constant is p(v)/Z0 , where Z0 is the
           normalization constant for the unconditional prior, p(x). (We have Z0 = 1 if the original model
           was a DGM.)
             In the downwards pass, also known as the distribute-from-root phase, node i sends to its
           children j the following message:
                              
                                Ci \Sij ψi (Ci )
              mi→j (Sij ) =                                                                          (20.63)
                                mj→i (Sij )
           We divide out by what j sent to i to avoid double counting the evidence. This requires that we
           store the messages from the upwards pass. Once a node has received a top-down message from
           its parent, it can compute its ﬁnal belief state using
              ψj (Cj ) ∝ ψj (Cj )mi→j (Sij )                                                              (20.64)
             An equivalent way to present this algorithm is based on storing the messages inside the
           separator potentials. So on the way up, sending from i to j we compute the separator potential
                           
                ∗
              ψij (Sij ) =        ψi (Ci )                                                        (20.65)
                           Ci \Sij

           and then update the recipient potential:
                                      ∗
                                     ψij (Sij )
              ψj∗ (Cj ) ∝ ψj (Cj )                                                                        (20.66)
                                     ψij (Sij )
           (Recall that we initialize ψij (Sij ) = 1.) This is sometimes called passing a ﬂow from i to j.
           On the way down, from i to j, we compute the separator potential
                            
                ∗∗
              ψij  (Sij ) =        ψi∗ (Ci )                                                       (20.67)
                           Ci \Sij

           and then update the recipient potential:
                                        ∗∗
                                       ψij (Sij )
              ψj∗∗ (Cj ) ∝ ψj∗ (Cj )    ∗ (S )                                                            (20.68)
                                       ψij   ij

           This process is known as junction tree calibration. See Figure 20.1 for an illustration. Its
           correctness follows from the fact that each edge partitions the evidence into two distinct groups,
           plus the fact that the tree satisﬁes RIP, which ensures that no information is lost by only
           performing local computations.

20.4.2.1   Example: jtree algorithm on a chain
           It is interesting to see what happens if we apply this process to a chain structured graph such as
           an HMM. A detailed discussion can be found in (Smyth et al. 1997), but the basic idea is this. The
           cliques are the edges, and the separators are the nodes, as shown in Figure 20.8. We initialize
           the potentials as follows: we set ψs = 1 for all the separators, we set ψc (xt−1 , xt ) = p(xt |xt−1 )
           for clique c = (Xt−1 , Xt ) , and we set ψc (xt , yt ) = p(yt |xt ) for clique c = (Xt , Yt ).
         20.4. The junction tree algorithm *                                                            725



                          X1 X2                X2          X2 X3             X3           X3 X4

                       X1         X2                         X3                              X4

                  X1 Y1            X2 Y2                   X3 Y3                           X4 Y4


                      Figure 20.8 The junction tree derived from an HMM/SSM of length T = 4.



            Next we send messages from left to right. Consider clique (Xt−1 , Xt ) with potential
          t |Xt−1 ). It receives a message from clique (Xt−2 , Xt−1 ) via separator Xt−1 of the form
         p(X
            xt−2 p(Xt−2 , Xt−1 |v1:t−1 ) = p(Xt−1 |v1:t−1 ). When combined with the clique potential,
         this becomes the two-slice predictive density
            p(Xt |Xt−1 )p(Xt−1 |v1:t−1 ) = p(Xt−1 , Xt |v1:t−1                                       (20.69)

         The clique (Xt−1 , Xt ) also receives a message from (Xt , Yt ) via separator Xt of the form
         p(yt |Xt ), which corresponds to its local evidence. When combined with the updated clique
         potential, this becomes the two-slice ﬁltered posterior
            p(Xt−1 , Xt |v1:t−1 )p(vt |Xt ) = p(Xt−1 , Xt |v1:t )                                    (20.70)

         Thus the messages in the forwards pass are the ﬁltered belief states αt , and the clique potentials
         are the two-slice distributions. In the backwards pass, the messages are the update factors αγtt ,
         where γt (k) = p(xt = k|v1:T ) and αt (k) = p(xt = k|v1:t ). By multiplying by this message,
         we “swap out” the old αt message and “swap in” the new γt message. We see that the backwards
         pass involves working with posterior beliefs, not conditional likelihoods. See Section 18.3.2.3 for
         further discussion of this difference.

20.4.3   Computational complexity of JTA
         If all nodes are discrete with K states each, it is clear that the JTA takes O(|C|K w+1 ) time
         and space, where |C| is the number of cliques and w is the treewidth of the graph, i.e., the
         size of the largest clique minus 1. Unfortunately, choosing a triangulation so as to minimize the
         treewidth is NP-hard, as explained in Section 20.3.2.
            The JTA can be modiﬁed to handle the case of Gaussian graphical models. The graph-theoretic
         steps remain unchanged. Only the message computation differs. We just need to deﬁne how
         to multiply, divide, and marginalize Gaussian potential functions. This is most easily done in
         information form. See e.g., (Lauritzen 1992; Murphy 1998; Cemgil 2001) for the details. The
         algorithm takes O(|C|w3 ) time and O(|C|w2 ) space. When applied to a chain structured graph,
         the algorithm is equivalent to the Kalman smoother in Section 18.3.2.
         726                                                 Chapter 20. Exact inference for graphical models


                    Q1              Q2              Q3              Q4                              Qn




                            C1              C2              C3    ...      Cm – 1          Cm




                                    A1              A2     ...             Am–2             X


         Figure 20.9 Encoding a 3-SAT problem on n variables and m clauses as a DGM. The Qs variables are
         binary random variables. The Ct variables are deterministic functions of the Qs ’s, and compute the truth
         value of each clause. The At nodes are a chain of AND gates, to ensure that the CPT for the ﬁnal x node
         has bounded size. The double rings denote nodes with deterministic CPDs. Source: Figure 9.1 of (Koller
         and Friedman 2009). Used with kind permission of Daphne Koller.



20.4.4   JTA generalizations *
         We have seen how to use the JTA algorithm to compute posterior marginals in a graphical model.
         There are several possible generalizations of this algorithm, some of which we mention below.
         All of these exploit graph decomposition in some form or other. They only differ in terms of
         how they deﬁne/ compute messages and “beliefs”. The key requirement is that the operators
         which compute messages form a commutative semiring (see Section 20.3.1).

         • Computing the MAP estimate. We just replace the sum-product with max-product in the
           collect phase, and use traceback in the distribute phase, as in the Viterbi algorithm (Sec-
           tion 17.4.4). See (Dawid 1992) for details.
         • Computing the N-most probable conﬁgurations (Nilsson 1998).
         • Computing posterior samples. The collect pass is the same as usual, but in the distribute
           pass, we sample variables given the values higher up in the tree, thus generalizing forwards-
           ﬁltering backwards-sampling for HMMs described in Section 17.4.5. See (Dawid 1992) for
           details.
         • Solving constraint satisfaction problems (Dechter 2003).
         • Solving logical reasoning problems (Amir and McIlraith 2005).

 20.5    Computational intractability of exact inference in the worst case
         As we saw in Sections 20.3.2 and 20.4.3, VE and JTA take time that is exponential in the treewidth
         of a graph. Since the treewidth can be O(number of nodes) in the worst case, this means these
         algorithms can be exponential in the problem size.
            Of course, just because VE and JTA are slow doesn’t mean that there isn’t some smarter algo-
         rithm out there. Unfortunately, this seems unlikely, since it is easy to show that exact inference
         is NP-hard (Dagum and Luby 1993). The proof is a simple reduction from the satisﬁability prob-
         20.5. Computational intractability of exact inference in the worst case                                              727


                 Method                               Restriction                                        Section
                 Forwards-backwards                   Chains, D or LG                                    Section   17.4.3
                 Belief propagation                   Trees, D or LG                                     Section   20.2
                 Variable elimination                 Low treewidth, D or LG, single query               Section   20.3
                 Junction tree algorithm              Low treewidth, D or LG                             Section   20.4
                 Loopy belief propagation             Approximate, D or LG                               Section   22.2
                 Convex belief propagation            Approximate, D or LG                               Section   22.4.2
                 Mean ﬁeld                            Approximate, C-E                                   Section   21.3
                 Gibbs sampling                       Approximate                                        Section   24.2

         Table 20.4 Summary of some methods that can be used for inference in graphical models. “D” means
         that all the hidden variables must be discrete. “L-G” means that all the factors must be linear-Gaussian.
         The term “single query” refers to the restriction that VE only computes one marginal p(xq |xv ) at a time.
         See Section 20.3.3 for a discussion of this point. “C-E” stands for “conjugate exponential”; this means that
         variational mean ﬁeld only applies to models where the likelihood is in the exponential family, and the
         prior is conjugate. This includes the D and LG case, but many others as well, as we will see in Section 21.5.



         lem. In particular, note that we can encode any 3-SAT problem4 as a DGM with deterministic
         links, as shown in Figure 20.9. We clamp the ﬁnal node, x, to be on, and we arrange the CPTs
         so that p(x = 1) > 0 iff there a satisfying assignment. Computing any posterior marginal
         requires evaluating the normalization constant p(x = 1), which represents the probability of the
         evidence, so inference in this model implicitly solves the SAT problem.
            In fact, exact inference is #P-hard (Roth 1996), which is even harder than NP-hard. (See e.g.,
         (Arora and Barak 2009) for deﬁnitions of these terms.) The intuitive reason for this is that to
         compute the normalizing constant Z, we have to count how many satisfying assignments there
         are. By contrast, MAP estimation is provably easier for some model classes (Greig et al. 1989),
         since, intuitively speaking, it only requires ﬁnding one satisfying assignment, not counting all of
         them.

20.5.1   Approximate inference
         Many popular probabilistic models support efficient exact inference, since they are based on
         chains, trees or low treewidth graphs. But there are many other models for which exact
         inference is intractable. In fact, even simple two node models of the form θ → x may not
         support exact inference if the prior on θ is not conjugate to the likelihood p(x|θ).5
            Therefore we will need to turn to approximate inference methods. See Table 20.4 for a
         summary of coming attractions. For the most part, these methods do not come with any
         guarantee as to their accuracy or running time. Theoretical computer scientists would therefore
         describe them as heuristics rather than approximation algorithms. In fact, one can prove that

         4. A 3-SAT problem is a logical expression of the form (Q1 ∧ Q2 ∧ ¬Q3 ) ∨ (Q1 ∧ ¬Q4 ∧ Q5 ) · · · , where the Qi are
         binary variables, and each clause consists of the conjunction of three variables (or their negation). The goal is to ﬁnd a
         satisfying assignment, which is a set of values for the Qi variables such that the expression evaluates to true.
         5. For discrete random variables, conjugacy is not a concern, since discrete distributions are always closed under
         conditioning and marginalization. Consequently, graph-theoretic considerations are of more importance when discussing
         inference in models with discrete hidden states.
728                                                             Chapter 20. Exact inference for graphical models


it is not possible to construct polynomial time approximation schemes for inference in general
discrete GMs (Dagum and Luby 1993; Roth 1996). Fortunately, we will see that for many of these
heuristic methods often perform well in practice.

Exercises
Exercise 20.1 Variable elimination
Consider the MRF in Figure 10.14(b).
a. Suppose we want to compute the partition function using the elimination ordering ≺= (1, 2, 3, 4, 5, 6),
   i.e.,
                                    ψ12 (x1 , x2 )ψ13 (x1 , x3 )ψ24 (x2 , x4 )ψ34 (x3 , x4 )ψ45 (x4 , x5 )ψ56 (x5 , x6 )(20.71)
      x6   x5   x4   x3   x2   x1

   If we use the variable elimination algorithm, we will create new intermediate factors. What is the largest
   intermediate factor?
b. Add an edge to the original MRF between every pair of variables that end up in the same factor. (These
   are called ﬁll in edges.) Draw the resulting MRF. What is the size of the largest maximal clique in this
   graph?
c. Now consider elimination ordering ≺= (4, 1, 2, 3, 5, 6), i.e.,

                                    ψ12 (x1 , x2 )ψ13 (x1 , x3 )ψ24 (x2 , x4 )ψ34 (x3 , x4 )ψ45 (x4 , x5 )ψ56 (x5 , x6 )(20.72)
      x6   x5   x3   x2   x1   x4

   If we use the variable elimination algorithm, we will create new intermediate factors. What is the largest
   intermediate factor?
d. Add an edge to the original MRF between every pair of variables that end up in the same factor. (These
   are called ﬁll in edges.) Draw the resulting MRF. What is the size of the largest maximal clique in this
   graph?
Exercise 20.2 Gaussian times Gaussian is Gaussian
Prove Equation 20.17. Hint: use completing the square.
Exercise 20.3 Message passing on a tree
Consider the DGM in Figure 20.10 which represents the following ﬁctitious biological model. Each Gi
represents the genotype of a person: Gi = 1 if they have a healthy gene and Gi = 2 if they have an
unhealthy gene. G2 and G3 may inherit the unhealthy gene from their parent G1 . Xi ∈ R is a continuous
measure of blood pressure, which is low if you are healthy and high if you are unhealthy. We deﬁne the
CPDs as follows
                p(G1 )    =    [0.5, 0.5]                                                                             (20.73)
                                         
                                 0.9 0.1
           p(G2 |G1 )     =                                                                                            (20.74)
                                 0.1 0.9
                                         
                                 0.9 0.1
           p(G3 |G1 )     =                                                                                           (20.75)
                                 0.1 0.9
   p(Xi |Gi = 1)          =    N (Xi |μ = 50, σ 2 = 10)                                                               (20.76)
                                                     2
   p(Xi |Gi = 2)          =    N (Xi |μ = 60, σ = 10)                                                                  (20.77)
The meaning of the matrix for p(G2 |G1 ) is that p(G2 = 1|G1 = 1) = 0.9, p(G2 = 1|G1 = 2) = 0.1,
etc.
20.5. Computational intractability of exact inference in the worst case                                   729


                                                       X1



                                                  G1


                                             G2                  G3



                                                  X2        X3



                      Figure 20.10 A simple DAG representing inherited diseases.



a. Suppose you observe X2 = 50, and X1            is unobserved. What is the posterior belief on G1 , i.e.,
   p(G1 |X2 = 50)?
b. Now suppose you observe X2 = 50 amd            X3 = 50. What is p(G1 |X2 , X3 )? Explain your answer
   intuitively.
c. Now suppose X2 = 60, X3 = 60. What is          p(G1 |X2 , X3 )? Explain your answer intuitively.
d. Now suppose X2 = 50, X3 = 60. What is          p(G1 |X1 , X2 )? Explain your answer intuitively.

Exercise 20.4 Inference in 2D lattice MRFs
Consider an MRF with a 2D m × n lattice graph structure, so each hidden node, Xij , is connected to its
4 nearest neighbors, as in an Ising model. In addition, each hidden node has its own local evidence, Yij .
Assume all hidden nodes have K > 2 states. In general, exact inference in such models is intractable,
because the maximum cliques of the corresponding triangulated graph have size O(max{m, n}). Suppose
m  n i.e., the lattice is short and fat.
a. How can one efficiently perform exact inference (using a deterministic algorithm) in such models? (By
                                                                    y ) exactly, where 
   exact inference, I mean computing marginal probabilities P (Xij |                  y is all the evidence.)
   Give a brief description of your method.
b. What is the asymptotic complexity (running time) of your algorithm?
c. Now suppose the lattice is large and square, so m = n, but all hidden states are binary (ie K = 2). In
   this case, how can one efficiently exactly compute (using a deterministic algorithm) the MAP estimate
   arg maxx P (x|y), where x is the joint assignment to all hidden nodes?
21      Variational inference



 21.1   Introduction
        We have now seen several algorithms for computing (functions of) a posterior distribution. For
        discrete graphical models, we can use the junction tree algorithm to perform exact inference,
        as explained in Section 20.4. However, this takes time exponential in the treewidth of the
        graph, rendering exact inference often impractical. For the case of Gaussian graphical models,
        exact inference is cubic in the treewidth. However, even this can be too slow if we have many
        variables. In addition, the JTA does not work for continuous random variables outside of the
        Gaussian case, nor for mixed discrete-continuous variables, outside of the conditionally Gaussian
        case.
           For some simple two node graphical models, of the form x → D, we can compute the
        exact posterior p(x|D) in closed form, provided the prior p(x) is conjugate to the likelihood,
        p(D|x) (which means the likelihood must be in the exponential family). See Chapter 5 for some
        examples of this. (Note that in this chapter, x represent the unknown variables, whereas in
        Chapter 5, we used θ to represent the unknowns.)
           In more general settings, we must use approximate inference methods. In Section 8.4.1, we
        discussed the Gaussian approximation, which is useful for inference in two node models of the
        form x → D, where the prior is not conjugate. (For example, Section 8.4.3 applied the method
        to logistic regression.)
           The Gaussian approximation is simple. However, some posteriors are not naturally modelled
        using Gaussians. For example, when inferring multinomial parameters, a Dirichlet distribution is
        a better choice, and when inferring states in a discrete graphical model, a categorical distribution
        is a better choice.
           In this chapter, we will study a more general class of deterministic approximate inference
        algorithms based on variational inference (Jordan et al. 1998; Jaakkola and Jordan 2000; Jaakkola
        2001; Wainwright and Jordan 2008a). The basic idea is to pick an approximation q(x) to the
        distribution from some tractable family, and then to try to make this approximation as close
        as possible to the true posterior, p∗ (x)  p(x|D). This reduces inference to an optimization
        problem. By relaxing the constraints and/or approximating the objective, we can trade accuracy
        for speed. The bottom line is that variational inference often gives us the speed beneﬁts of MAP
        estimation but the statistical beneﬁts of the Bayesian approach.
       732                                                              Chapter 21. Variational inference


21.2   Variational inference
       Suppose p∗ (x) is our true but intractable distribution and q(x) is some approximation, chosen
       from some tractable family, such as a multivariate Gaussian or a factored distribution. We
       assume q has some free parameters which we want to optimize so as to make q “similar to” p∗ .
          An obvious cost function to try to minimize is the KL divergence:
                                      p∗ (x)
           KL (p∗ ||q) =    p∗ (x) log                                                           (21.1)
                          x
                                        q(x)
       However, this is hard to compute, since taking expectations wrt p∗ is assumed to be intractable.
       A natural alternative is the reverse KL divergence:
                                       q(x)
          KL (q||p∗ ) =       q(x) log ∗                                                          (21.2)
                           x
                                       p  (x)
       The main advantage of this objective is that computing expectations wrt q is tractable (by choos-
       ing a suitable form for q). We discuss the statistical differences between these two objectives in
       Section 21.2.2.
          Unfortunately, Equation 21.2 is still not tractable as written, since even evaluating p∗ (x) =
       p(x|D) pointwise is hard, since it requires evaluating the intractable normalization constant
       Z = p(D). However, usually the unnormalized distribution p̃(x)  p(x, D) = p∗ (x)Z is
       tractable to compute. We therefore deﬁne our new objective function as follows:
          J(q)       KL (q||p̃)                                                                     (21.3)
       where we are slightly abusing notation, since p̃ is not a normalized distribution. Plugging in the
       deﬁnition of KL, we get
                                  q(x)
          J(q) =          q(x) log                                                                  (21.4)
                       x
                                   p̃(x)
                                    q(x)
                 =        q(x) log                                                                  (21.5)
                       x
                                   Zp∗ (x)
                                   q(x)
                 =        q(x) log ∗      − log Z                                                   (21.6)
                       x
                                   p  (x)
                 =    KL (q||p∗ ) − log Z                                                            (21.7)
                                                                                          ∗
       Since Z is a constant, by minimizing J(q), we will force q to become close to p .
          Since KL divergence is always non-negative, we see that J(q) is an upper bound on the NLL
       (negative log likelihood):
          J(q) = KL (q||p∗ ) − log Z ≥ − log Z = − log p(D)                                          (21.8)
       Alternatively, we can try to maximize the following quantity (in (Koller and Friedman 2009), this
       is referred to as the energy functional), which is a lower bound on the log likelihood of the
       data:
          L(q)  −J(q) = −KL (q||p∗ ) + log Z ≤ log Z = log p(D)                                     (21.9)
                                             ∗
       Since this bound is tight when q = p , we see that variational inference is closely related to EM
       (see Section 11.4.7).
         21.2. Variational inference                                                                 733


21.2.1   Alternative interpretations of the variational objective
         There are several equivalent ways of writing this objective that provide different insights. One
         formulation is as follows:

            J(q) = Eq [log q(x)] + Eq [− log p̃(x)] = −H (q) + Eq [E(x)]                           (21.10)

         which is the expected energy (recall E(x) = − log p̃(x)) minus the entropy of the system. In
         statistical physics, J(q) is called the variational free energy or the Helmholtz free energy.1
            Another formulation of the objective is as follows:

            J(q)   =    Eq [log q(x) − log p(x)p(D|x)]                                             (21.11)
                   =    Eq [log q(x) − log p(x) − log p(D|x)]                                      (21.12)
                   =    Eq [− log p(D|x)] + KL (q(x)||p(x))                                        (21.13)

         This is the expected NLL, plus a penalty term that measures how far the approximate posterior
         is from the exact prior.
            We can also interpret the variational objective from the point of view of information theory
         (the so-called bits-back argument). See (Hinton and Camp 1993; Honkela and Valpola 2004), for
         details.

21.2.2   Forward or reverse KL? *
         Since the KL divergence is not symmetric in its arguments, minimizing KL (q||p) wrt q will give
         different behavior than minimizing KL (p||q). Below we discuss these two different methods.
            First, consider the reverse KL, KL (q||p), also known as an I-projection or information
         projection. By deﬁnition, we have
                                        q(x)
            KL (q||p) =        q(x) ln                                                             (21.14)
                           x
                                         p(x)

         This is inﬁnite if p(x) = 0 and q(x) > 0. Thus if p(x) = 0 we must ensure q(x) = 0. We say
         that the reverse KL is zero forcing for q. Hence q will typically under-estimate the support of
         p.
            Now consider the forwards KL, also known as an M-projection or moment projection:
                                        p(x)
            KL (p||q) =        p(x) ln                                                             (21.15)
                           x
                                         q(x)

         This is inﬁnite if q(x) = 0 and p(x) > 0. So if p(x) > 0 we must ensure q(x) > 0. We say
         that the forwards KL is zero avoiding for q. Hence q will typically over-estimate the support of
         p.
            The difference between these methods is illustrated in Figure 21.1. We see that when the true
         distribution is multimodal, using the forwards KL is a bad idea (assuming q is constrained to
         be unimodal), since the resulting posterior mode/mean will be in a region of low density, right
         between the two peaks. In such contexts, the reverse KL is not only more tractable to compute,
         but also more sensible statistically.
734                                                                                                                  Chapter 21. Variational inference




                             (a)                                                   (b)                                                  (c)

Figure 21.1 Illustrating forwards vs reverse KL on a bimodal distribution. The blue curves are the contours
of the true distribution p. The red curves are the contours of the unimodal approximation q. (a) Minimizing
forwards KL: q tends to “cover” p. (b-c) Minimizing reverse KL: q locks on to one of the two modes. Based
on Figure 10.3 of (Bishop 2006b). Figure generated by KLfwdReverseMixGauss.
              1                                                                            1


             0.8                                                                          0.8


             0.6                                                                          0.6


             0.4                                                                          0.4


             0.2                                                                          0.2


              0                                                                            0


            −0.2                                                                         −0.2


            −0.4                                                                         −0.4


            −0.6                                                                         −0.6


            −0.8                                                                         −0.8


             −1                                                                           −1
              −1   −0.8   −0.6     −0.4   −0.2     0   0.2   0.4   0.6   0.8   1           −1   −0.8   −0.6   −0.4   −0.2     0   0.2     0.4   0.6   0.8   1



                                                 (a)                                                                        (b)

Figure 21.2 Illustrating forwards vs reverse KL on a symmetric Gaussian. The blue curves are the
contours of the true distribution p. The red curves are the contours of a factorized approximation q. (a)
Minimizing KL (q||p). (b) Minimizing KL (p||q). Based on Figure 10.2 of (Bishop 2006b). Figure generated
by KLpqGauss.



  Another example of the difference is shown in Figure 21.2, where the target distribution is
an elongated 2d Gaussian and the approximating distribution is a product of two 1d Gaussians.
That is, p(x) = N (x|μ, Λ−1 ), where
                     
           μ1           Λ11 Λ12
   μ=          , Λ=                                                                    (21.16)
           μ2           Λ21 Λ22

In Figure 21.2(a) we show the result of minimizing KL (q||p). In this simple example, one can
show that the solution has the form

    q(x)     =      N (x1 |m1 , Λ−1               −1
                                 11 )N (x2 |m2 , Λ22 )                                                                                                          (21.17)
      m1     =      μ1 −           Λ−1
                                    11 Λ12 (m2               − μ2 )                                                                                             (21.18)
      m2     =      μ2 −           Λ−1
                                    22 Λ21 (m1               − μ1 )                                                                                             (21.19)

1. It is called “free” because the variables x are free to vary, rather than being ﬁxed. The variational free energy is a
function of the distribution q, whereas the regular energy is a function of the state vector x.
       21.3. The mean ﬁeld method                                                                        735


       Figure 21.2(a) shows that we have correctly captured the mean, but the approximation is too
       compact: its variance is controlled by the direction of smallest variance of p. In fact, it is
       often the case (although not always (Turner et al. 2008)) that minimizing KL (q||p), where q is
       factorized, results in an approximation that is overconﬁdent.
          In Figure 21.2(b), we show the result of minimizing KL (p||q). As we show in Exercise 21.7,
       the optimal solution when minimizing the forward KL wrt a factored approximation is to set q
       to be the product of marginals. Thus the solution has the form

          q(x) = N (x1 |μ1 , Λ−1               −1
                              11 )N (x2 |μ2 , Λ22 )                                                   (21.20)

       Figure 21.2(b) shows that this is too broad, since it is an over-estimate of the support of p.
          For the rest of this chapter, and for most of the next, we will focus on minimizing KL (q||p).
       In Section 22.5, when we discuss expectation proagation, we will discuss ways to locally optimize
       KL (p||q).
          One can create a family of divergence measures indexed by a parameter α ∈ R by deﬁning
       the alpha divergence as follows:
                                 
                            4
           Dα (p||q)              1 − p(x)(1+α)/2 q(x)(1−α)/2 dx                                     (21.21)
                        1 − α2
       This measure satisﬁes Dα (p||q) = 0 iff p = q, but is obviously not symmetric, and hence is
       not a metric. KL (p||q) corresponds to the limit α → 1, whereas KL (q||p) corresponds to the
       limit α → −1. When α = 0, we get a symmetric divergence measure that is linearly related to
       the Hellinger distance, deﬁned by
                          !      1        1
                                            #2
          DH (p||q)        p(x) 2 − q(x) 2 dx                                               (21.22)
                  "
       Note that DH (p||q) is a valid distance metric, that is, it is symmetric, non-negative and
       satisﬁes the triangle inequality. See (Minka 2005) for details.

21.3   The mean ﬁeld method
       One of the most popular forms of variational inference is called the mean ﬁeld approxima-
       tion (Opper and Saad 2001). In this approach, we assume the posterior is a fully factorized
       approximation of the form
                 
          q(x) =     qi (xi )                                                               (21.23)
                       i

       Our goal is to solve this optimization problem:

            min KL (q||p)                                                                             (21.24)
          q1 ,...,qD

       where we optimize over the parameters of each marginal distribution qi . In Section 21.3.1, we
       derive a coordinate descent method, where at each step we make the following update:

          log qj (xj ) = E−qj [log p̃(x)] + const                                                     (21.25)
         736                                                                   Chapter 21. Variational inference


                                       Model                         Section
                                       Ising model                   Section   21.3.2
                                       Factorial HMM                 Section   21.4.1
                                       Univariate Gaussian           Section   21.5.1
                                       Linear regression             Section   21.5.2
                                       Logistic regression           Section   21.8.1.1
                                       Mixtures of Gaussians         Section   21.6.1
                                       Latent Dirichlet allocation   Section   27.3.6.3

         Table 21.1 Some models in this book for which we provide detailed derivations of the mean ﬁeld inference
         algorithm.


         where p̃(x) = p(x, D) is the unnormalized posterior and the notation E−qj [f (x)] means to
         take the expectation over f (x) with respect to all the variables except for xj . For example, if
         we have three variables, then
                            
            E−q2 [f (x)] =          q(x1 )q3 (x3 )f (x1 , x2 , x3 )                                (21.26)
                             x1   x3

         where sums get replaced by integrals where necessary.
            When updating qj , we only need to reason about the variables which share a factor with xj ,
         i.e., the terms in j’s Markov blanket (see Section 10.5.3); the other terms get absorbed into the
         constant term. Since we are replacing the neighboring values by their mean value, the method
         is known as mean ﬁeld. This is very similar to Gibbs sampling (Section 24.2), except instead
         of sending sampled values between neighboring nodes, we send mean values between nodes.
         This tends to be more efficient, since the mean can be used as a proxy for a large number of
         samples. (On the other hand, mean ﬁeld messages are dense, whereas samples are sparse; this
         can make sampling more scalable to very large models.)
            Of course, updating one distribution at a time can be slow, since it is a form of coordinate
         descent. Several methods have been proposed to speed up this basic approach, including using
         pattern search (Honkela et al. 2003), and techniques based on parameter expansion (Qi and
         Jaakkola 2008). However, we will not consider these methods in this chapter.
            It is important to note that the mean ﬁeld method can be used to infer discrete or continuous
         latent quantities, using a variety of parametric forms for qi , as we will see below. This is
         in contrast to some of the other variational methods we will encounter later, which are more
         restricted in their applicability. Table 21.1 lists some of the examples of mean ﬁeld that we cover
         in this book.

21.3.1   Derivation of the mean ﬁeld update equations
         Recall that the goal of variational inference is to minimize the upper bound J(q) ≥ − log p(D).
         Equivalently, we can try to maximize the lower bound
                                             p̃(x)
            L(q)  −J(q) =          q(x) log        ≤ log p(D)                                     (21.27)
                                 x
                                              q(x)
         We will do this one term at a time.
         21.3. The mean ﬁeld method                                                                                 737


            If we write the objective singling out the terms that involve qj , and regarding all the other
         terms as constants, we get
                                                                     
                                                    
             L(qj ) =            qi (xi ) log p̃(x) −    log qk (xk )                               (21.28)
                           x         i                                   k
                                                                                                            
                                                                                      
                       =                  qj (xj )          qi (xi ) log p̃(x) −              log qk (xk )       (21.29)
                           xj x−j                    i=j                                 k
                                             
                       =        qj (xj )                    qi (xi ) log p̃(x)
                           xj                 x−j i=j
                                                                         ⎡                                   ⎤
                                                                          
                           −             qj (xj )              qi (xi ) ⎣           log qk (xk ) + qj (xj )⎦     (21.30)
                                xj                  x−j i=j                 k=j
                                                                  
                       =        qj (xj ) log fj (xj ) −                  qj (xj ) log qj (xj ) + const           (21.31)
                           xj                                       xj

         where
                                 
            log fj (xj )                       qi (xi ) log p̃(x) = E−qj [log p̃(x)]                            (21.32)
                                 x−j i=j

         So we average out all the hidden variables except for xj . Thus we can rewrite L(qj ) as follows:

            L(qj ) = −KL (qj ||fj )                                                                              (21.33)

         We can maximize L by minimizing this KL, which we can do by setting qj = fj , as follows:
                           1                      
            qj (xj )   =      exp E−qj [log p̃(x)]                                                               (21.34)
                           Zj
         We can usually ignore the local normalization constant Zj , since we know qj must be a
         normalized distribution. Hence we usually work with the form

            log qj (xj ) = E−qj [log p̃(x)] + const                                                              (21.35)

            The functional form of the qj distributions will be determined by the type of variables xj , as
         well as the form of the model. (This is sometimes called free-form optimization.) If xj is a
         discrete random variable, then qj will be a discrete distribution; if xj is a continuous random
         variable, then qj will be some kind of pdf. We will see examples of this below.

21.3.2   Example: mean ﬁeld for the Ising model
         Consider the image denoising example from Section 19.4.1, where xi ∈ {−1, +1} are the hidden
         pixel values of the “clean” image. We have a joint model of the form

            p(x, y)    =   p(x)p(y|x)                                                                            (21.36)
738                                                                         Chapter 21. Variational inference


where the prior has the form
                       1
      p(x)   =           exp(−E0 (x))                                                                  (21.37)
                      Z0
                         
                         D  
   E0 (x)    =        −        Wij xi xj                                                              (21.38)
                          i=1 j∈nbri

and the likelihood has the form
                             
   p(y|x) =      p(yi |xi ) =   exp(−Li (xi ))                                                        (21.39)
                  i                      i

Therefore the posterior has the form
                      1
   p(x|y)    =          exp(−E(x))                                                                    (21.40)
                      Z
                               
      E(x)   =        E0 (x) −   Li (xi )                                                              (21.41)
                                     i

  We will now approximate this by a fully factored approximation
          
  q(x) =     q(xi , μi )                                                                               (21.42)
             i

where μi is the mean value of node i. To derive the update for the variational parameter μi , we
ﬁrst write out log p̃(x) = −E(x), dropping terms that do not involve xi :
                    
   log p̃(x) = xi        Wij xj + Li (xi ) + const                                       (21.43)
                      j∈nbri


 only depends on the states of the neighboring nodes. Now we take expectations of this wrt
This
  j=i qj (xj ) to get
                    ⎛                     ⎞
                       
   qi (xi ) ∝ exp ⎝xi    Wij μj + Li (xi )⎠                                          (21.44)
                            j∈nbri

Thus we replace the states of the neighbors by their average values. Let
          
  mi =         Wij μj                                                                                  (21.45)
         j∈nbri

be the mean ﬁeld inﬂuence on node i. Also, let L+                −
                                                i  Li (+1) and Li  Li (−1). The
approximate marginal posterior is given by
                                              +
                                  emi +Li                            1
   qi (xi = 1)        =           +                 −   =                −   +   = sigm(2ai )          (21.46)
                            emi +Li+         e−mi +Li       1+   e−2mi +Li −Li
             ai           mi + 0.5(L+    −
                                     i − Li )                                                          (21.47)
       21.4. Structured mean ﬁeld *                                                                                                         739

                        sample 1, meanfieldH                   sample 3, meanfieldH          mean after 15 sweeps of meanfieldH


                                               0.8                                    0.8                                         0.8

                                               0.6                                    0.6                                         0.6

                                               0.4                                    0.4                                         0.4

                                               0.2                                    0.2                                         0.2

                                               0                                      0                                           0

                                               −0.2                                   −0.2                                        −0.2

                                               −0.4                                   −0.4                                        −0.4

                                                                                      −0.6                                        −0.6
                                               −0.6
                                                                                      −0.8                                        −0.8
                                               −0.8




                                  (a)                                    (b)                                  (c)

       Figure 21.3 Example of image denoising using mean ﬁeld (with parallel updates and a damping factor
       of 0.5). We use an Ising prior with Wij = 1 and a Gaussian noise model with σ = 2. We show
       the results after 1, 3 and 15 iterations across the image. Compare to Figure 24.1. Figure generated by
       isingImageDenoiseDemo.


       Similarly, we have qi (xi = −1) = sigm(−2ai ). From this we can compute the new mean for
       site i:
          μi   =    Eqi [xi ] = qi (xi = +1) · (+1) + qi (xi = −1) · (−1)                                                                (21.48)
                         1             1            e ai        e−ai
               =                −            =             −             = tanh(ai )                                                     (21.49)
                    1 + e−2ai       1 + e2ai    eai + e−ai    e−ai + eai
       Hence the update equation becomes
                    ⎛                              ⎞
                       
         μi = tanh ⎝        Wij μj + 0.5(L+    − ⎠
                                          i − Li )                                                                                       (21.50)
                         j∈nbri

       See also Exercise 21.6 for an alternative derivation of these equations.
         We can turn the above equations in to a ﬁxed point algorithm by writing
                     ⎛                                     ⎞
                         
          μti = tanh ⎝         Wij μt−1
                                     j   + 0.5(L+        − ⎠
                                                  i − Li )                                                                               (21.51)
                         j∈nbri

       It is usually better to use damped updates of the form
                                        ⎛                               ⎞
                                          
           μti = (1 − λ)μt−1
                           i   + λ tanh ⎝     Wij μt−1
                                                    j   + 0.5(L+    − ⎠
                                                               i − Li )                                                                  (21.52)
                                                      j∈nbri

       for 0 < λ < 1. We can update all the nodes in parallel, or update them asychronously.
          Figure 21.3 shows the method in action, applied to a 2d Ising model with homogeneous
       attractive potentials, Wij = 1. We use parallel updates with a damping factor of λ = 0.5. (If we
       don’t use damping, we tend to get “checkerboard” artefacts.)

21.4   Structured mean ﬁeld *
       Assuming that all the variables are independent in the posterior is a very strong assumption that
       can lead to poor results. Sometimes we can exploit tractable substructure in our problem, so
         740                                                                Chapter 21. Variational inference



               x1,1    x1,2     x1,3
                                                     x1,1   x1,2   x1,3        x1,1      x1,2      x1,3
               x2,1    x2,2     x2,3
                                                     x2,1   x2,2   x2,3
                                                                               x2,1      x2,2      x2,3
               x3,1    x3,2     x3,3

                                                     x3,1   x3,2   x3,3
               y1      y2       y3
                                                                               x3,1      x3,2      x3,3

                      (a)                                   (b)                          (c)

         Figure 21.4 (a) A factorial HMM with 3 chains. (b) A fully factorized approximation. (c) A product-of-
         chains approximation. Based on Figure 2 of (Ghahramani and Jordan 1997).



         that we can efficiently handle some kinds of dependencies. This is called the structured mean
         ﬁeld approach (Saul and Jordan 1995). The approach is the same as before, except we group sets
         of variables together, and we update them simultaneously. (This follows by simply treating all
         the variables in the i’th group as a single “mega-variable”, and then repeating the derivation in
         Section 21.3.1.) As long as we can perform efficient inference in each qi , the method is tractable
         overall. We give an example below. See (Bouchard-Cote and Jordan 2009) for some more recent
         work in this area.

21.4.1   Example: factorial HMM
         Consider the factorial HMM model (Ghahramani and Jordan 1997) introduced in Section 17.6.5.
         Suppose there are M chains, each of length T , and suppose each hidden node has K states.
         The model is deﬁned as follows
                      
            p(x, y) =         p(xtm |xt−1,m )p(yt |xtm )                                     (21.53)
                            m   t

         where p(xtm = k|xt−1,m = j) = Amjk is an entry in the transition matrix for chain m,
         p(x1m = k|x0m ) = p(x1m = k) = πmk , is the initial state distribution for chain m, and

                                            
                                            M
            p(yt |xt ) = N           yt |         Wm xtm , Σ                                              (21.54)
                                            m=1

         is the observation model, where xtm is a 1-of-K encoding of xtm and Wm is a D × K
         matrix (assuming yt ∈ RD ). Figure 21.4(a) illustrates the model for the case where M = 3.
         Even though each chain is a priori independent, they become coupled in the posterior due
         to having an observed common child, yt . The junction tree algorithm applied to this graph
         takes O(T M K M +1 ) time. Below we will derive a structured mean ﬁeld algorithm that takes
         O(T M K 2 I) time, where I is the number of mean ﬁeld iterations (typically I ∼ 10 suffices for
         good performance).
21.4. Structured mean ﬁeld *                                                                           741


  We can write the exact posterior in the following form:
                         1
    p(x|y)      =           exp(−E(x, y))                                                           (21.55)
                         Z
                                                             T
                         1                                                    
                            T
   E(x, y)      =               yt −    Wm xtm                   Σ−1     yt −       Wm xtm
                         2 t=1       m                                          m
                                                T 
                                                 
                       −          xT1m π̃ m −             xTtm Ãm xt−1,m                           (21.56)
                            m                    t=2 m

where Ãm  log Am and π̃ m  log π m (both interpreted elementwise).
  We can approximate the posterior as a product of marginals, as in Figure 21.4(b), but a better
approximation is to use a product of chains, as in Figure 21.4(c). Each chain can be tractably
updated individually, using the forwards-backwards algorithm. More precisely, we assume

                                        1                   
                                            M                 T
                     q(x|y)        =           q(x1m |ξ 1m )     q(xtm |xt−1,m , ξtm )              (21.57)
                                        Zq m=1               t=2
                                        
                                        K
            q(x1m |ξ 1m )          =          (ξ1mk πmk )x1mk                                       (21.58)
                                        k=1
                                              ⎛                              ⎞xtmk
                                        
                                        K             
                                                      K
   q(xtm |xt−1,m , ξtm )           =          ⎝ξtmk        (Amjk )xt−1,m,j ⎠                        (21.59)
                                        k=1           j=1

We see that the ξtmk parameters play the role of an approximate local evidence, averaging out
the effects of the other chains. This is contrast to the exact local evidence, which couples all
the chains together.
  We can rewrite the approximate posterior as q(x) = Z1q exp(−Eq (x)), where
                         T 
                          M                        
                                                    M                   T 
                                                                         M
   Eq (x)       =    −               xTtm ξ̃ tm −         xT1m π̃ m −             xTtm Ãm xt−1,m   (21.60)
                         t=1 m=1                    m=1                 t=2 m=1

where ξ̃tm = log ξ tm . We see that this has the same temporal factors as the exact posterior,
but the local evidence term is different. The objective function is given by
   KL (q||p) = E [E] − E [Eq ] − log Zq + log Z                                                     (21.61)
where the expectations are taken wrt q. One can show (Exercise 21.8) that the update has the
form
                 
                                    1
   ξ tm = exp Wm      T
                        Σ−1 ỹtm − δ m                                                (21.62)
                                    2
    δm                   T
                    diag(Wm Σ−1 Wm )                                                                (21.63)
                           
                           M
   ỹtm            yt −          W E [xt, ]                                                      (21.64)
                           =m
         742                                                                         Chapter 21. Variational inference


         The ξ tm parameter plays the role of the local evidence, averaging over the neighboring chains.
         Having computed this for each chain, we can perform forwards-backwards in parallel, using
         these approximate local evidence terms to compute q(xt,m |y1:T ) for each m and t.
            The update cost is O(T M K 2 ) for a full “sweep” over all the variational parameters, since we
         have to run forwards-backwards M times, for each chain independently. This is the same cost
         as a fully factorized approximation, but is much more accurate.

 21.5    Variational Bayes
         So far we have been concentrating on inferring latent variables zi assuming the parameters θ
         of the model are known. Now suppose we want to infer the parameters         themselves. If we
         make a fully factorized (i.e., mean ﬁeld) approximation, p(θ|D) ≈ k q(θ k ), we get a method
         known as variational Bayes or VB (Hinton and Camp 1993; MacKay 1995a; Attias 2000; Beal
         and Ghahramani 2006; Smidl and Quinn 2005).2 We give some examples of VB below, assuming
                                                                         variables and parameters, and
         that there are no latent variables. If we want to infer both latent
         we make an approximation of the form p(θ, z1:N |D) ≈ q(θ) i qi (zi ), we get a method known
         as variational Bayes EM, which we described in Section 21.6.

21.5.1   Example: VB for a univariate Gaussian
         Following (MacKay 2003, p429), let us consider how to apply VB to infer the posterior over the
         parameters for a 1d Gaussian, p(μ, λ|D), where λ = 1/σ 2 is the precision. For convenience, we
         will use a conjugate prior of the form
            p(μ, λ) = N (μ|μ0 , (κ0 λ)−1 )Ga(λ|a0 , b0 )                                                             (21.65)

         However, we will use an approximate factored posterior of the form
            q(μ, λ) = qμ (μ)qλ (λ)                                                                                   (21.66)

         We do not need to specify the forms for the distributions qμ and qλ ; the optimal forms will “fall
         out” automatically during the derivation (and conveniently, they turn out to be Gaussian and
         Gamma respectively).
            You might wonder why we would want to do this, since we know how to compute the
         exact posterior for this model (Section 4.6.3.7). There are two reasons. First, it is a useful
         pedagogical exercise, since we can compare the quality of our approximation to the exact
         posterior. Second, it is simple to modify the method to handle a semi-conjugate prior of the
         form p(μ, λ) = N (μ|μ0 , τ0 )Ga(λ|a0 , b0 ), for which exact inference is no longer possible.

         2. This method was originally called ensemble learning (MacKay 1995a), since we are using an ensemble of parameters
         (a distribution) instead of a point estimate. However, the term “ensemble learning” is also used to describe methods
         such as boosting, so we prefer the term VB.
           21.5. Variational Bayes                                                                   743


21.5.1.1   Target distribution
           The unnormalized log posterior has the form

              log p̃(μ, λ)   =     log p(μ, λ, D) = log p(D|μ, λ) + log p(μ|λ) + log p(λ)         (21.67)
                                              λ
                                               N
                                   N                                 κ0 λ
                             =       log λ −           (xi − μ)2 −        (μ − μ0 )2
                                   2         2   i=1
                                                                      2
                                    1
                                   + log(κ0 λ) + (a0 − 1) log λ − b0 λ + const                    (21.68)
                                    2

21.5.1.2   Updating qμ (μ)
           The optimal form for qμ (μ) is obtained by averaging over λ:

              log qμ (μ)     =    Eqλ [log p(D|μ, λ) + log p(μ|λ)] + const                        (21.69)
                                            3                              4
                                    Eqλ [λ]                  N
                                                          2              2
                             =    −           κ0 (μ − μ0 ) +     (xi − μ) + const                 (21.70)
                                       2                     i=1

           By completing the square one can show that qμ (μ) = N (μ|μN , κ−1
                                                                          N ), where

                     κ0 μ0 + N x
              μN =               , κN = (κ0 + N )Eqλ [λ]                                          (21.71)
                       κ0 + N
           At this stage we don’t know what qλ (λ) is, and hence we cannot compute E [λ], but we will
           derive this below.

21.5.1.3   Updating qλ (λ)
           The optimal form for qλ (λ) is given by

              log qλ (λ)     =    Eqμ [log p(D|μ, λ) + log p(μ|λ) + log p(λ)] + const             (21.72)
                                                          1          N
                             =    (a0 − 1) log λ − b0 λ + log λ +       log λ
                                                          2          2
                                                                         
                                    λ                       N
                                                        2               2
                                  − Eqμ κ0 (μ − μ0 ) +          (xi − μ) + const                  (21.73)
                                    2                       i=1

           We recognize this as the log of a Gamma distribution, hence qλ (λ) = Ga(λ|aN , bN ), where
                               N +1
              aN    =      a0 +                                                                   (21.74)
                                 2
                                                                 
                               1                   N
                                                2               2
              bN    =      b0 + Eqμ κ0 (μ − μ0 ) +     (xi − μ)                                   (21.75)
                               2                   i=1
           744                                                             Chapter 21. Variational inference


21.5.1.4   Computing the expectations
           To implement the updates, we have to specify how to compute the various expectations. Since
           q(μ) = N (μ|μN , κ−1
                             N ), we have

               Eq(μ) [μ]    =     μN                                                                  (21.76)
                                  1
              Eq(μ) μ2      =        + μ2N                                                             (21.77)
                                  κN
           Since q(λ) = Ga(λ|aN , bN ), we have
                                 aN
              Eq(λ) [λ]    =                                                                          (21.78)
                                 bN
           We can now give explicit forms for the update equations. For q(μ) we have
                          κ0 μ0 + N x
              μN      =                                                                               (21.79)
                            κ0 + N
                                    aN
                 κN   =   (κ0 + N )                                                                   (21.80)
                                    bN
           and for q(λ) we have
                                 N +1
              aN      =   a0 +                                                                         (21.81)
                                   2
                                                             1  2                    
                                                                 N
                 bN   =   b0 + κ0 (E μ2 + μ20 − 2E [μ] μ0 ) +       x + E μ2 − 2E [μ] xi              (21.82)
                                                              2 i=1 i

              We see that μN and aN are in fact ﬁxed constants, and only κN and bN need to be updated
           iteratively. (In fact, one can solve for the ﬁxed points of κN and bN analytically, but we don’t
           do this here in order to illustrate the iterative updating scheme.)

21.5.1.5   Illustration
           Figure 21.5 gives an example of this method in action. The green contours represent the
           exact posterior, which is Gaussian-Gamma. The dotted red contours represent the variational
           approximation over several iterations. We see that the ﬁnal approximation is reasonably close to
           the exact solution. However, it is more “compact” than the true distribution. It is often the case
           that mean ﬁeld inference underestimates the posterior uncertainty; See Section 21.2.2 for more
           discussion of this point.

21.5.1.6   Lower bound *
           In VB, we are maximizing L(q), which is a lower bound on the log marginal likelihood:

              L(q) ≤ log p(D) = log          p(D|μ, λ)p(μ, λ)dμdλ                                     (21.83)

           It is very useful to compute the lower bound itself, for three reasons. First, it can be used to
           assess convergence of the algorithm. Second, it can be used to assess the correctness of one’s
21.5. Variational Bayes                                                                                                                745

                 2                                                                         2
                                                                              exact                                         exact
                                                                              vb                                            vb
                1.8                                                                       1.8


                1.6                                                                       1.6


                1.4                                                                       1.4


                1.2                                                                       1.2


                 1                                                                         1




            λ




                                                                                      λ
                0.8                                                                       0.8


                0.6                                                                       0.6


                0.4                                                                       0.4


                0.2                                                                       0.2


                 0                                                                         0
                      −1        −0.5              0       0.5         1                         −1   −0.5     0   0.5   1
                                                      μ                                                       μ



                                                  (a)                                                       (b)
                 2                                                                         2
                                                                              exact                                         exact
                                                                              vb                                            vb
                1.8                                                                       1.8


                1.6                                                                       1.6


                1.4                                                                       1.4


                1.2                                                                       1.2


                 1                                                                         1
            λ




                                                                                      λ
                0.8                                                                       0.8


                0.6                                                                       0.6


                0.4                                                                       0.4


                0.2                                                                       0.2


                 0                                                                         0
                           −1          −0.5           0         0.5       1                     −1   −0.5     0   0.5   1
                                                      μ                                                       μ



                                                  (c)                                                       (d)

Figure 21.5 Factored variational approximation (red) to the Gaussian-Gamma distribution (green). (a)
Initial guess. (b) After updating qμ . (c) After updating qλ . (d) At convergence (after 5 iterations). Based on
10.4 of (Bishop 2006b). Figure generated by unigaussVbDemo.



code: as with EM, if the bound does not increase monotonically, there must be a bug. Third,
the bound can be used as an approximation to the marginal likelihood, which can be used for
Bayesian model selection.
  Unfortunately, computing this lower bound involves a fair amount of tedious algebra. We
work out the details for this example, but for other models, we will just state the results without
proof, or even omit discussion of the bound altogether, for brevity.
  For this model, L(q) can be computed as follows:
                                             p(D, μ, λ)
   L(q)     =                      q(μ, λ) log          dμdλ                                                                        (21.84)
                                              q(μ, λ)
            =              E [log p(D|μ, λ)] + E [log p(μ|λ)] + E [log p(λ)]
                           −E [log q(μ)] − E [log q(λ)]                                                                             (21.85)
where all expectations are wrt q(μ, λ). We recognize the last two terms as the entropy of a
Gaussian and the entropy of a Gamma distribution, which are given by
                                                      1           1
   H N (μN , κ−1
              N )   =                                 − log κN + (1 + log(2π))                                                      (21.86)
                                                        2           2
    H (Ga(aN , bN ))                          =       log Γ(aN ) − (aN − 1)ψ(aN ) − log(bN ) + aN                                   (21.87)
         746                                                              Chapter 21. Variational inference


         where ψ() is the digamma function.
           To compute the other terms, we need the following facts:

            E [log x|x ∼ Ga(a, b)]     ψ(a) − log(b)
                                        =                                                            (21.88)
                                       a
                 E [x|x ∼ Ga(a, b)] =                                                                (21.89)
                                      b
                E x|x ∼ N (μ, σ 2 ) = μ                                                              (21.90)
                                    
               E x2 |x ∼ N (μ, σ 2 ) = μ + σ 2                                                       (21.91)

           For the expected log likelihood, one can show that

            Eq(μ,λ) [log p(D|μ, λ)]                                                                  (21.92)
                        N          N                E [λ]q(λ) N
                                                                                  
                =   −     log(2π) + Eq(λ) [log λ] −               Eq(μ) (xi − μ)2
                        2          2                    2     i=1
                      N              N
                =   −    log(2π) +      (ψ(aN ) − log bN )                                           (21.93)
                      2              2
                      N aN                                 1
                    −         σ̂ 2 + x2 − 2μN x + μ2N +                                              (21.94)
                      2bN                                κN
         where x and σ̂ 2 are the empirical mean and variance.
           For the expected log prior of λ, we have
            Eq(λ) [log p(λ)]    =   (a0 − 1)E [log λ] − b0 E [λ] + a0 log b0 − log Γ(a0 )            (21.95)
                                                                     aN
                                =   (a0 − 1)(ψ(aN ) − log bN ) − b0       + a0 log b0 − log Γ(a0 )   (21.96)
                                                                     bN
           For the expected log prior of μ, one can show that
                                        1     κ0   1                 1                      
            Eq(μ,λ) [log p(μ|λ)]    =     log    + E [log λ] q(λ) − Eq(μ,λ) (μ − μ0 )2 κ0 λ
                                        2     2π 2                   2
                                        1     κ0   1
                                    =     log    + (ψ(aN ) − log bN )
                                        2     2π  2               
                                          κ0 aN 1
                                        −            + (μN − μ0 )2                                   (21.97)
                                           2 b N κN
           Putting it altogether, one can show that
                          1      1
            L(q)    =       log    + log Γ(aN ) − aN log bN + const                                  (21.98)
                          2     κN
           This quantity monotonically increases after each VB update.

21.5.2   Example: VB for linear regression
         In Section 7.6.4, we discussed an empirical Bayes approach to setting the hyper-parameters for
         ridge regression known as the evidence procedure. In particular, we assumed a likelihood of
         the form p(y|X, θ) = N (Xw, λ−1 ) and a prior of the form p(w) = N (w|0, α−1 I). We then
21.5. Variational Bayes                                                                                         747


computed a type II estimate of α and λ. The same approach was extended in Section 13.7 to
handle a prior of the form N (w|0, diag(α)−1 ), which allows one hyper-parameter per feature,
a technique known as automatic relevancy determination.
   In this section, we derive a VB algorithm for this model. We follow the presentation of
(Drugowitsch 2008).3 Initially we will use the following prior:
   p(w, λ, α)      =     N (w|0, (λα)−1 I)Ga(λ|aλ0 , bλ0 )Ga(α|aα    α
                                                                0 , b0 )                                    (21.99)

We choose to use the following factorized approximation to the posterior:
   q(w, α, λ) = q(w, λ)q(α)                                                                                (21.100)

Given these assumptions, one can show (see (Drugowitsch 2008)) that the optimal form for the
posterior is

   q(w, α, λ)      =     N (w|wN , λ−1 VN )Ga(λ|aλN , bλN )Ga(α|aα    α
                                                                 N , bN )                                   (21.101)

where
    −1
   VN       =     A + XX                                                                                   (21.102)
   wN       =     VN X y  T
                                                                                                           (21.103)
                        N
     aλN    =     aλ0 +                                                                                    (21.104)
                         2
                        1
      bλN   =     b0 + (||y − Xw||2 + wN
                   λ                    T
                                          AwN )                                                            (21.105)
                        2
                        D
     aα
      N     =     aα0 +                                                                                    (21.106)
                         2
                            λ
                        1   aN T
      bα
       N    =      α
                  b0 +         w wN + tr(VN )                                                              (21.107)
                        2 bλN N
                           aα
        A   =     αI = αN I                                                                              (21.108)
                           bN
   This method can be extended to the ARD case in a straightforward way, by using the following
priors:

   p(w)      =    N (0, diag(α)−1 )                                                                        (21.109)
                  
                  D
    p(α)     =          Ga(αj |aα    α
                                0 , b0 )                                                                    (21.110)
                  j=1

The posterior for w and λ is computed as before, except we use A = diag(aα   α
                                                                         N /bNj ) instead of

3. Note that Drugowitsch uses a0 , b0 as the hyper-parameters for p(λ) and c0 , d0 as the hyper-parameters for p(α),
whereas (Bishop 2006b, Sec 10.3) uses a0 , b0 as the hyper-parameters for p(α) and treats λ as ﬁxed. To (hopefully)
avoid confusion, I use aλ    λ                                        α α
                        0 , b0 as the hyper-parameters for p(λ), and a0 , b0 as the hyper-parameters for p(α).
748                                                                      Chapter 21. Variational inference


 N /bN I. The posterior for α has the form
aα   α

               
   q(α) =         Ga(αj |aα      α
                            N , bNj )                                                              (21.111)
                    j
                        1
      aα
       N      =    aα
                    0 +                                                                            (21.112)
                        2
                          
                        1 aλN 2
      bα
       Nj     =     α
                   b0 +      w    + (VN )jj                                                        (21.113)
                        2 bλN N,j
   The algorithm alternates between updating q(w, λ) and q(α). Once w and λ have been
inferred, the posterior predictive is a Student distribution, as shown in Equation 7.76. Speciﬁcally,
for a single data case, we have
                                       bλN
   p(y|x, D)       =      T (y|wN
                                T
                                  x,       (1 + xT VN x), 2aλN )                                   (21.114)
                                       aλN
  The exact marginal likelihood, which can be used for model selection, is given by

   p(D) =                 p(y|X, w, λ)p(w|α)p(λ)dwdαdλ                                             (21.115)

We can compute a lower bound on log p(D) as follows:
                                             
                                    1
                                         N
                        N                        aλN
   L(q)       =    −      log(2π) −                  (yi − wN
                                                            T
                                                              xi )2 + xTi VN xi
                        2           2 i=1        bλN
                    1            D
                   + log |VN | +
                    2            2
                                                aλN
                   − log Γ(aλ0 ) + aλ0 log bλ0 − bλ0+ log Γ(aλN ) − aλN log bλN + aλN
                                                bλN
                            0 ) + a0 log b0 + log Γ(aN ) − aN log bN
                   − log Γ(aα      α      α          α      α      α
                                                                                                   (21.116)

In the ARD case, the last line becomes
   D 
                                                                    
            − log Γ(aα
                     0 ) + a0 log b0 + log Γ(aN ) − aN log bNj
                            α      α          α      α      α
                                                                                                   (21.117)
   j=1

Figure 21.6 compare VB and EB on a model selection problem for polynomial regression. We
see that VB gives similar results to EB, but the precise behavior depends on the sample size.
When N = 5, VB’s estimate of the posterior over models is more diffuse than EB’s, since VB
models uncertainty in the hyper-parameters. When N = 30, the posterior estimate of the hyper-
parameters becomes more well-determined. Indeed, if we compute E [α|D] when we have an
uninformative prior, aα     α
                      0 = b0 = 0, we get

            aα
             N                 D/2
   α=          =        λ                                                                          (21.118)
            bα     1 aN      T w + tr(V ))
                            wN
                   2 ( bλ
             N                  N      N
                        N
       21.6. Variational Bayes EM                                                                            749

                                   N=5, method=VB                             N=5, method=EB
                              1                                          1


                             0.8                                        0.8




                    P(M|D)




                                                               P(M|D)
                             0.6                                        0.6


                             0.4                                        0.4


                             0.2                                        0.2


                              0                                          0
                                     1             2   3                        1          2    3
                                               M                                       M
                                      (a)                                        (b)
                                   N=30, method=VB                            N=30, method=EB
                              1                                          1


                             0.8                                        0.8
                    P(M|D)




                                                               P(M|D)
                             0.6                                        0.6


                             0.4                                        0.4


                             0.2                                        0.2


                              0                                          0
                                     1             2   3                        1          2    3
                                               M                                       M
                                         (c)                                     (d)

       Figure 21.6 We plot the posterior over models (polynomials of degree 1, 2 and 3) assuming a uniform
       prior p(m) ∝ 1. We approximate the marginal likelihood using (a,c) VB and (b,d) EB. In (a-b), we use
       N = 5 data points (shown in Figure 5.7). In (c-d), we use N = 30 data points (shown in Figure 5.8). Figure
       generated by linregEbModelSelVsN.



       Compare this to Equation 13.167 for EB:
                    D            D
          α̂ =            = T                                                                            (21.119)
                 E [wT w]  wN wN + tr(VN )

       Modulo the aλN and bλN terms, these are the same. In hindsight this is perhaps not that
       surprising, since EB is trying to maximize log p(D), and VB is trying to maximize a lower
       bound on log p(D).

21.6   Variational Bayes EM
       Now consider latent variable models of the form zi → xi ← θ. This includes mixtures models,
       PCA, HMMs, etc. There are now two kinds of unknowns: parameters, θ, and latent variables, zi .
       As we saw in Section 11.4, it is common to ﬁt such models using EM, where in the E step we
       infer the posterior over the latent variables, p(zi |xi , θ), and in the M step, we compute a point
       estimate of the parameters, θ. The justiﬁcation for this is two-fold. First, it results in simple
       algorithms. Second, the posterior uncertainty in θ is usually less than in zi , since the θ are
       informed by all N data cases, whereas zi is only informed by xi ; this makes a MAP estimate of
           750                                                              Chapter 21. Variational inference


           θ more reasonable than a MAP estimate of zi .
             However, VB provides a way to be “more Bayesian”, by modeling uncertainty in the parameters
           θ as well in the latent variables zi , at a computational cost that is essentially the same as EM.
           This method is known as variational Bayes EM or VBEM. The basic idea is to use mean ﬁeld,
           where the approximate posterior has the form
                                                   
              p(θ, z1:N |D) ≈ q(θ)q(z) = q(θ)          q(zi )                                          (21.120)
                                                   i

           The ﬁrst factorization, between θ and z, is a crucial assumption to make the algorithm tractable.
           The second factorization follows from the model, since the latent variables are iid conditional
           on θ.
              In VBEM, we alternate between updating q(zi |D) (the variational E step) and updating q(θ|D)
           (the variational M step). We can recover standard EM from VBEM by approximating the param-
           eter posterior using a delta function, q(θ|D) ≈ δθ̂ (θ).
              The variational E step is similar to a standard E step, except instead of plugging in a MAP
           estimate of the parameters and computing p(zi |D, θ̂), we need to average over the parameters.
           Roughly speaking, this can be computed by plugging in the posterior mean of the parameters
           instead of the MAP estimate, and then computing p(zi |D, θ) using standard algorithms, such
           as forwards-backwards. Unfortunately, things are not quite this simple, but this is the basic idea.
           The details depend on the form of the model; we give some examples below.
              The variational M step is similar to a standard M step, except instead of computing a point
           estimate of the parameters, we update the hyper-parameters, using the expected sufficient statis-
           tics. This process is usually very similar to MAP estimation in regular EM. Again, the details on
           how to do this depend on the form of the model.
              The principle advantage of VBEM over regular EM is that by marginalizing out the parameters,
           we can compute a lower bound on the marginal likelihood, which can be used for model
           selection. We will see an example of this in Section 21.6.1.6. VBEM is also “egalitarian”, since
           it treats parameters as “ﬁrst class citizens”, just like any other unknown quantity, whereas EM
           makes an artiﬁcial distinction between parameters and latent variables.

 21.6.1    Example: VBEM for mixtures of Gaussians *
           Let us consider how to “ﬁt” a mixture of Gaussians using VBEM. (We use scare quotes since we
           are not estimating the model parameters, but inferring a posterior over them.) We will follow
           the presentation of (Bishop 2006b, Sec 10.2). Unfortunately, the details are rather complicated.
           Fortunately, as with EM, one gets used to it after a bit of practice. (As usual with math, simply
           reading the equations won’t help much, you should really try deriving these results yourself (or
           try some of the exercises) if you want to learn this stuff in depth.)

21.6.1.1   The variational posterior
           The likelihood function is the usual one for Gaussian mixture models:
                             z
              p(z, X|θ) =          πkik N (xi |μk , Λ−1
                                                     k )
                                                         zik
                                                                                                        (21.121)
                             i   k

           where zik = 1 if data point i belongs to cluster k, and zik = 0 otherwise.
           21.6. Variational Bayes EM                                                                     751


             We will assume the following factored conjugate prior
                                
             p(θ) = Dir(π|α0 )      N (μk |m0 , (β0 Λk )−1 )Wi(Λk |L0 , ν0 )                          (21.122)
                                     k

           where Λk is the precision matrix for cluster k. The subscript 0 means these are parameters
           of the prior; we assume all the prior parameters are the same for all clusters. For the mixing
           weights, we usually use a symmetric prior, α0 = α0 1.
              The exact posterior p(z, θ|D) is a mixture of K N distributions, corresponding to all possible
           labelings z. We will try to approximate the volume around one of these modes. We will use the
           standard VB approximation to the posterior:
                                     
               p(θ, z1:N |D) ≈ q(θ)      q(zi )                                                      (21.123)
                                         i

           At this stage we have not speciﬁed the forms of the q functions; these will be determined by
           the form of the likelihood and prior. Below we will show that the optimal form is as follows:
                                                            
                                             
              q(z, θ) = q(z|θ)q(θ) =            Cat(zi |ri )                                         (21.124)
                                                  i
                                                                                                
                                             
                                                                        −1
                              Dir(π|α)           N (μk |mk , (βk Λk )        )Wi(Λk |Lk , νk )        (21.125)
                                             k

           (The lack of 0 subscript means these are parameters of the posterior, not the prior.) Below we
           will derive the update equations for these variational parameters.

21.6.1.2   Derivation of q(z) (variational E step)
           The form for q(z) can be obtained by looking at the complete data log joint, ignoring terms that
           do not involve z, and taking expectations of what’s left over wrt all the hidden variables except
           for z. We have
              log q(z)   = Eq(θ) [log p(x, z, θ)] + const                                             (21.126)
                           
                         =          zik log ρik + const                                               (21.127)
                                 i   i

           where we deﬁne
                                              1                     D
              log ρik       Eq(θ) [log πk ] + Eq(θ) [log |Λk |] − log(2π)
                                              2                     2
                               1                                  
                             − Eq(θ) (xi − μk )T Λk (xi − μk )                                        (21.128)
                               2
           Using the fact that q(π) = Dir(π), we have
                                                  
              log π̃k  E [log πk ] = ψ(αk ) − ψ(   αk  )                                            (21.129)
                                                       k
           752                                                                        Chapter 21. Variational inference


           where ψ() is the digamma function. (See Exercise 21.5 for the detailed derivation.) Next, we use
           the fact that
              q(μk , Λk ) = N (μk |mk , (βk Λk )−1 )Wi(Λk |Lk , νk )                                            (21.130)
           to get
                                              
                                              D         
                                                            νk + 1 − j
              log Λ̃k  E [log |Λk |] =             ψ                    + D log 2 + log |Λk |                  (21.131)
                                              j=1
                                                                2

           Finally, for the expected value of the quadratic form, we get
                                            
              E (xi − μk )T Λk (xi − μk ) = Dβk−1 + νk (xi − mk )T Λk (xi − mk )                                (21.132)
           Putting it altogether, we get that the posterior responsibility of cluster k for datapoint i is
                                    
                              1           D     νk
              rik ∝ π̃k Λ̃k exp −
                              2
                                              − (xi − mk )T Λk (xi − mk )                                (21.133)
                                        2βk      2
           Compare this to the expression used in regular EM:
                                     
                                1        1
              EM
             rik    ∝ π̂k |Λ̂|k2 exp − (xi − μ̂k )T Λ̂k (xi − μ̂k )                                             (21.134)
                                         2
           The signiﬁcance of this difference is discussed further in Section 21.6.1.7.

21.6.1.3   Derivation of q(θ) (variational M step)
           Using the mean ﬁeld recipe, we have
                                                            
              log q(θ) = log p(π) +        log p(μk , Λk ) +   Eq(z) [log p(zi |π)]
                                                  k                        i
                                      
                                  +           Eq(z) [zik ] log N (xi |μk , Λ−1
                                                                            k ) + const                         (21.135)
                                      k   i

           We see this factorizes into the form
                                
             q(θ) = q(π)            q(μk , Λk )                                                                 (21.136)
                                      k

           For the π term, we have
                                                               
              log q(π)    =       (α0 − 1)          log πk +             rik log πk + const                     (21.137)
                                              k                  k   i

           Exponentiating, we recognize this as a Dirichlet distribution:
              q(π)    =    Dir(π|α)                                                                             (21.138)
                αk    =    α0 + Nk                                                                              (21.139)
                           
                 Nk   =       rik                                                                               (21.140)
                              i
           21.6. Variational Bayes EM                                                                                                                           753

                                                                                           variational Bayes objective for GMM on old faithful data
                                                                               −600

                                                                               −650




                                      lower bound on log marginal likelihood
                                                                               −700

                                                                               −750

                                                                               −800

                                                                               −850

                                                                               −900

                                                                               −950

                                                                               −1000

                                                                               −1050

                                                                               −1100
                                                                                       0       20             40             60            80         100
                                                                                                                     iter



           Figure 21.7 Lower bound vs iterations for the VB algorithm in Figure 21.8. The steep parts of the
           curve correspond to places where the algorithm ﬁgures out that it can increase the bound by “killing
           off” unnecessary mixture components, as described in Section 21.6.1.6. The plateaus correspond to slowly
           moving the clusters around. Figure generated by mixGaussVbDemoFaithful.


             For the μk and Λk terms, we have
              q(μk , Λk )   =    N (μk |mk , (βk Λk )−1 )Wi(Λk |Lk , νk )                                                                                   (21.141)
                       βk   =    β0 + Nk                                                                                                                    (21.142)
                     mk     =    (β0 m0 + Nk xk )/βk                                                                                                        (21.143)
                                                    β 0 Nk
                     L−1
                      k     =    L−1
                                   0 + Nk S k +            (xk − m0 )(xk − m0 )T                                                                            (21.144)
                                                  β 0 + Nk
                       νk   =    ν 0 + Nk + 1                                                                                                               (21.145)
                                   1 
                      xk    =            rik xi                                                                                                             (21.146)
                                 Nk i
                                   1 
                      Sk    =            rik (xi − xk )(xi − xk )T                                                                                          (21.147)
                                 Nk i

             This is very similar to the M step for MAP estimation discussed in Section 11.4.2.8, except here
           we are computing the parameters of the posterior over θ, rather than MAP estimates of θ.

21.6.1.4   Lower bound on the marginal likelihood
           The algorithm is trying to maximize the following lower bound
                                     p(x, z, θ)
              L=          q(z, θ) log            dθ ≤ log p(D)                                                                                              (21.148)
                    z
                                       q(z, θ)

           This quantity should increase monotonically with each iteration, as shown in Figure 21.7. Un-
           fortunately, deriving the bound is a bit messy, because we need to compute expectations of the
           unnormalized log posterior as well as entropies of the q distribution. We leave the details (which
           are similar to Section 21.5.1.6) to Exercise 21.4.
           754                                                               Chapter 21. Variational inference


21.6.1.5   Posterior predictive distribution
           We showed that the approximate posterior has the form
                               
             q(θ) = Dir(π|α)      N (μk |mk , (βk Λk )−1 )Wi(Λk |Lk , νk )                             (21.149)
                                   k

           Consequently the posterior predictive density can be approximated as follows, using the results
           from Section 4.6.3.6:
                             
              p(x|D) ≈            p(x|z, θ)p(z|θ)q(θ)dθ                                            (21.150)
                              z
                            
                        =              πk N (x|μk , Λ−1
                                                     k )q(θ)dθ                                         (21.151)
                              k
                                      αk
                        =                      T (x|mk , Mk , νk + 1 − D)                             (21.152)
                                       k  αk
                                              
                              k
                             (νk + 1 − D)βk
                 Mk     =                   Lk                                                         (21.153)
                                 1 + βk
           This is just a weighted sum of Student distributions. If instead we used a plug-in approximation,
           we would get a weighted sum of Gaussian distributions.

21.6.1.6   Model selection using VBEM
           The simplest way to select K when using VB is to ﬁt several models, and then to use the
           variational lower bound to the log marginal likelihood, L(K) ≤ log p(D|K), to approximate
           p(K|D):

                             eL(K)
              p(K|D) =           L(K  )
                                                                                                       (21.154)
                             K e

           However, the lower bound needs to be modiﬁed somewhat to take into account the lack of
           identiﬁability of the parameters (Section 11.3.1). In particular, although VB will approximate the
           volume occupied by the parameter posterior, it will only do so around one of the local modes.
           With K components, there are K! equivalent modes, which differ merely by permuting the
           labels. Therefore we should use log p(D|K) ≈ L(K) + log(K!).

21.6.1.7   Automatic sparsity inducing effects of VBEM
           Although VB provides a reasonable approximation to the marginal likelihood (better than BIC
           (Beal and Ghahramani 2006)), this method still requires ﬁtting multiple models, one for each
           value of K being considered. A faster alternative is to ﬁt a single model, where K is set large,
           but where α0 is set very small, α0  1. From Figure 2.14(d), we see that the resulting prior for
           the mixing weights π has “spikes” near the corners of the simplex, encouraging a sparse mixing
           weight vector.
              In regular EM, the MAP estimate of the mixing weights will have the form π̂k ∝ (αk − 1),
           where αk = α0 + Nk . Unforuntately, this can be negative if α0 = 0 and Nk = 0 (Figueiredo
21.6. Variational Bayes EM                                                                                                                                       755

                                                   iter 1                                                                   iter 94
                 2                                                                             2

                1.5                                                                           1.5

                 1                                                         5                   1
                                                                                                                                                5
                0.5                                                            6              0.5
                                                                 1
                 0                                                                             0

               −0.5                                                                          −0.5
                                    2
                −1                                                                            −1
                                                                                                            4
                                4
               −1.5                 3                                                        −1.5

                −2                                                                            −2

               −2.5                                                                          −2.5
                  −2     −1.5       −1      −0.5             0       0.5           1   1.5      −2   −1.5       −1   −0.5             0   0.5       1   1.5


                                                   (a)                                                                    (b)

Figure 21.8 We visualize the posterior mean parameters at various stages of the VBEM algorithm applied
to a mixture of Gaussians model on the Old Faithful data. Shading intensity is proportional to the mixing
weight. We initialize with K-means and use α0 = 0.001 as the Dirichlet hyper-parameter. Based on Figure
10.6 of (Bishop 2006b). Figure generated by mixGaussVbDemoFaithful, based on code by Emtiyaz Khan.

                                                    iter 1                                                               iter 94
                 90                                                                          180

                 80                                                                          160

                 70                                                                          140

                 60                                                                          120

                 50                                                                          100

                 40                                                                           80

                 30                                                                           60

                 20                                                                           40

                 10                                                                           20

                  0                                                                            0
                           1            2     3              4        5            6                 1          2    3                4   5         6


                                                   (a)                                                                   (b)

Figure 21.9 We visualize the posterior values of αk for the model in Figure 21.8. We see that unnecessary
components get “killed off”. Figure generated by mixGaussVbDemoFaithful.



and Jain 2002). However, in VBEM, we use
                        exp[Ψ(αk )]
    π̃k    =                                                                                                                                                 (21.155)
                      exp[Ψ( k αk )]
Now exp(Ψ(x)) ≈ x − 0.5 for x > 1. So if αk = 0, when we compute π̃k , it’s like we substract
0.5 from the posterior counts. This will hurt small clusters more than large clusters (like a
regressive tax).4 The effect is that clusters which have very few (weighted) members become
more and more empty over successive iterations, whereas the popular clusters get more and
more members. This is called the rich get richer phenomenon; we will encounter it again in
Section 25.2, when we discuss Dirichlet process mixture models.
   This automatic pruning method is demonstrated in Figure 21.8. We ﬁt a mixture of 6 Gaussians
to the Old Faithful dataset, but the data only really “needs” 2 clusters, so the rest get “killed off”.

4. For more details, see (Liang et al. 2007).
           756                                                              Chapter 21. Variational inference


           In this example, we used α0 = 0.001; if we use a larger α0 , we do not get a sparsity effect.
           In Figure 21.9, we plot q(α|D) at various iterations; we see that the unwanted components
           get extinguished. This provides an efficient alternative to performing a discrete search over the
           number of clusters.

  21.7     Variational message passing and VIBES
           We have seen that mean ﬁeld methods, at least of the fully-factorized variety, are all very similar:
           just compute each node’s full conditional, and average out the neighbors. This is very similar
           to Gibbs sampling (Section 24.2), except the derivation of the equations is usually a bit more
           work. Fortunately it is possible to derive a general purpose set of update equations that work for
           any DGM for which all CPDs are in the exponential family, and for which all parent nodes have
           conjugate distributions (Ghahramani and Beal 2001). (See (Wand et al. 2011) for a recent extension
           to handle non-conjugate priors.) One can then sweep over the graph, updating nodes one at a
           time, in a manner similar to Gibbs sampling. This is known as variational message passing or
           VMP (Winn and Bishop 2005), and has been implemented in the open-source program VIBES5 .
           This is a VB analog to BUGS, which is a popular generic program for Gibbs sampling discussed
           in Section 24.2.6.
              VMP/ mean ﬁeld is best-suited to inference where one or more of the hidden nodes are
           continuous (e.g., when performing “Bayesian learning”). For models where all the hidden nodes
           are discrete, more accurate approximate inference algorithms can be used, as we discuss in
           Chapter 22.

  21.8     Local variational bounds *
           So far, we have been focusing on mean ﬁeld inference, which is a form of variational inference
           based on minimizing KL (q||p̃), where q is the approximate posterior, assumed to be factorized,
           and p̃ is the exact (but unnormalized) posterior. However, there is another kind of variational
           inference, where we replace a speciﬁc term in the joint distribution with a simpler function, to
           simplify computation of the posterior. Such an approach is sometimes called a local variational
           approximation, since we are only modifying one piece of the model, unlike mean ﬁeld, which
           is a global approximation. In this section, we study several examples of this method.

 21.8.1    Motivating applications
           Before we explain how to derive local variational bounds, we give some examples of where this
           is useful.

21.8.1.1   Variational logistic regression
           Consider the problem of how to approximate the parameter posterior for multiclass logistic
           regression model under a Gaussian prior. One approach is to use a Gaussian (Laplace) approx-
           imation, as discussed in Section 8.4.3. However, a variational approach can produce a more

           5. Available at http://vibes.sourceforge.net/.
           21.8. Local variational bounds *                                                               757


           accurate approximation to the posterior, since it has tunable parameters. Another advantage is
           that the variational approach monotonically optimizes a lower bound on the likelihood of the
           data, as we will see.
             To see why we need a bound, note that the likelihood can be written as follows:

                                 
                                 N
                                                                 
              p(y|X, w)    =           exp yiT η i − lse(η i )                                        (21.156)
                                 i=1

           where η i = Xi wi = [xTi w1 , . . . , xTi wM ], where M = C − 1 (since we set wC = 0 for
           identiﬁability), and where we deﬁne the log-sum-exp or lse function as follows:

                                    
                                    M
              lse(η i )  log 1 +          eηim                                                       (21.157)
                                    m=1

           The main problem is that this likelihood is not conjugate to the Gaussian prior. Below we discuss
           how to compute “Gaussian-like” lower bounds to this likelihood, which give rise to approximate
           Gaussian posteriors.

21.8.1.2   Multi-task learning
           One important application of Bayesian inference for logistic regression is where we have multiple
           related classiﬁers we want to ﬁt. In this case, we want to share information between the
           parameters for each classiﬁer; this requires that we maintain a posterior distibution over the
           parameters, so we have a measure of conﬁdence as well as an estimate of the value. We can
           embed the above variational method inside of a larger hierarchical model in order to perform
           such multi-task learning, as described in e.g., (Braun and McAuliffe 2010).

21.8.1.3   Discrete factor analysis
           Another situation where variational bounds are useful arises when we ﬁt a factor analysis
           model to discrete data. This model is just like multinomial logistic regression, except the input
           variables are hidden factors. We need to perform inference on the hidden variables as well as
           the regression weights. For simplicity, we might perform point estimation of the weights, and
           just integrate out the hidden variables. We can do this using variational EM, where we use the
           variational bound in the E step. See Section 12.4 for details.

21.8.1.4   Correlated topic model
           A topic model is a latent variable model for text documents and other forms of discrete data; see
           Section 27.3 for details. Often we assume the distribution over topics has a Dirichlet prior, but
           a more powerful model, known as the correlated topic model, uses a Gaussian prior, which can
           model correlations more easily (see Section 27.4.1 for details). Unfortunately, this also involves
           the lse function. However, we can use our variational bounds in the context of a variational EM
           algorithm, as we will see later.
         758                                                                  Chapter 21. Variational inference


21.8.2   Bohning’s quadratic bound to the log-sum-exp function
         All of the above examples require dealing with multiplying a Gaussian prior by a multinomial
         likelihood; this is difficult because of the log-sum-exp (lse) term. In this section, we derive a way
         to derive a “Gaussian-like” lower bound on this likelihood.
            Consider a Taylor series expansion of the lse function around ψ i ∈ RM :
                                                               1
            lse(η i )   =   lse(ψ i ) + (η i − ψ i )T g(ψ i ) + (η i − ψ i )T H(ψ i )(η i − ψ i )       (21.158)
                                                               2
            g(ψ i )     =   exp[ψ i − lse(ψ i )] = S(ψ i )                                              (21.159)
            H(ψ i )     =   diag(g(ψ i )) − g(ψ i )g(ψ i )   T
                                                                                                        (21.160)

         where g and H are the gradient and Hessian of lse, and ψ i ∈ RM is chosen such that equality
         holds. An upper bound to lse can be found by replacing the Hessian matrix H(ψ i ) with a
         matrix Ai such thatAi ≺ H(ψ i ). (Bohning
                                                     1992) showed that this can be achieved if we use
                             1         1
         the matrix Ai = 2 IM − M +1 1M 1M . (Recall that M + 1 = C is the number of classes.)
                                               T

         Note that Ai is independent of ψ i ; however, we still write it as Ai (rather than dropping the
         i subscript), since other bounds that we consider below will have a data-dependent curvature
         term. The upper bound on lse therefore becomes
                            1 T
            lse(η i )   ≤     η Ai η i − bTi η i + ci                                                   (21.161)
                            2 i                      
                            1           1
                 Ai     =      IM −           1 M 1M
                                                   T
                                                                                                        (21.162)
                            2         M +1
                 bi     =   Ai ψ i − g(ψ i )                                                            (21.163)
                            1 T
                  ci    =     ψ Ai ψ i − g(ψ i )T ψ i + lse(ψ i )                                       (21.164)
                            2 i
         where ψ i ∈ RM is a vector of variational parameters.
           We can use the above result to get the following lower bound on the softmax likelihood:
                                                                                 
                                                   1
           log p(yi = c|xi , w) ≥      yiT Xi w − wT Xi Ai Xi w + bTi Xi w − ci                 (21.165)
                                                   2                                c

         To simplify notation, deﬁne the pseudo-measurement
            ỹi  A−1
                   i (bi + yi )                                                                         (21.166)

         Then we can get a “Gaussianized” version of the observation model:
            p(yi |xi , w)   ≥    f (xi , ψ i ) N (ỹi |Xi w, A−1
                                                              i )                                       (21.167)
         where f (xi , ψ i ) is some function that does not depend on w. Given this, it is easy to compute
         the posterior q(w) = N (mN , VN ), using Bayes rule for Gaussians. Below we will explain how
         to update the variational parameters ψ i .
           21.8. Local variational bounds *                                                              759


21.8.2.1   Applying Bohning’s bound to multinomial logistic regression
           Let us see how to apply this bound to multinomial logistic regression. From Equation 21.13, we
           can deﬁne the goal of variational inference as maximizing
                                                       N                     
                                                        
              L(q)  −KL (q(w)||p(w|D)) + Eq                log p(yi |xi , w)                     (21.168)
                                                              i=1
                                                                                         
                                                              
                                                              N
                       =     −KL (q(w)||p(w|D)) + Eq                yiT η i − lse(η i )              (21.169)
                                                              i=1
                                                      
                                                      N                       
                                                                              N
                       =     −KL (q(w)||p(w|D)) +           yiT Eq [η i ] −         Eq [lse(η i )]   (21.170)
                                                      i=1                     i=1

           where q(w) = N (w|mN , VN ) is the approximate posterior. The ﬁrst term is just the KL
           divergence between two Gaussians, which is given by
                                                               1
              −KL (N (m0 , V0 )||N (mN , VN ))        =       −  tr(VN V0−1 ) − log |VN V0−1 |
                                                               2                               
                                                              +(mN − m0 )T V0−1 (mN − m0 ) − DM (21.171)

           where DM is the dimensionality of the Gaussian, and we assume a prior of the form p(w) =
           N (m0 , V0 ), where typically μ0 = 0DM , and V0 is block diagonal. The second term is simply

              
              N                       
                                      N
                    yiT Eq [η i ] =         yiT m̃i                                                  (21.172)
              i=1                     i=1

           where m̃i  Xi mN . The ﬁnal term can be lower bounded by taking expectations of our
           quadratic upper bound on lse as follows:

                  
                  N
                                        1             1
              −       Eq [lse(η i )] ≥ − tr(Ai Ṽi ) − m̃i Ai m̃i + bTi m̃i − ci                     (21.173)
                  i=1
                                        2             2

           where Ṽi  Xi VN XTi . Putting it altogether, we have
                                 1                                                             
              LQJ (q)      ≥    −  tr(VN V0−1 ) − log |VN V0−1 | + (mN − m0 )T V0−1 (mN − m0 )
                                 2
                                 1      N
                                                       1            1
                                − DM +      yiT m̃i − tr(Ai Ṽi ) − m̃i Ai m̃i + bTi m̃i − ci    (21.174)
                                 2      i=1
                                                       2            2

           This lower bound combines Jensen’s inequality (as in mean ﬁeld inference), plus the quadratic
           lower bound due to the lse term, so we write it as LQJ .
             We will use coordinate ascent to optimize this lower bound. That is, we update the variational
           posterior parameters VN and mN , and then the variational likelihood parameters ψ i . We leave
         760                                                                        Chapter 21. Variational inference


         the detailed derivation as an exercise, and just state the results. We have
                                                          −1
                                    
                                    N
               VN     =      V0 +         XTi Ai Xi                                                           (21.175)
                                    i=1
                                                 
                                                 N
              mN      =   Vn     V0−1 m0 +             XTi (yi + bi )                                         (21.176)
                                                 i=1
                ψi    =   m̃i = Xi mN                                                                         (21.177)
         We can exploit the fact that Ai is a constant matrix, plus the fact that Xi has block structure,
         to simplify the ﬁrst two terms as follows:
                                                          −1
                                           
                                           N
               VN     =      V0 + A ⊗            xi xTi                                                       (21.178)
                                           i=1
                                                 
                                                 N
              mN      =   Vn     V0−1 m0    +          (yi + bi ) ⊗ xi                                        (21.179)
                                                 i=1

         where ⊗ denotes the kronecker product. See Algorithm 15 for some pseudocode, and http:
         //www.cs.ubc.ca/~emtiyaz/software/catLGM.html for some Matlab code.

          Algorithm 21.1: Variational inference for multi-class logistic regression using Bohning’s
          bound
         1 Input: yi ∈ {1, . . . , C}, xi ∈ R , i = 1 : N , prior m0 , V0 ;
                                             D

         2 Deﬁne M := C − 1; dummy encode yi ∈ {0, 1} ; deﬁne Xi = blockdiag(xi ) ;
                                                                M                      T
                                                                                         
                                                                                1            1
         3    Deﬁne y := [y1 ; . . . ; yN ], X := [X1 ; . . . ; XN ] and A :=   2    IM −   M +1 1M 1M
                                                                                                     T
                                                                                                         ;
                              n                −1
         4    VN := V0−1 + i=1 XTi AXi               ;
         5    Initialize mN := m0 ;
         6    repeat
         7         ψ := XmN ;
         8         Ψ := reshape(m, M, N );
         9         G := exp(Ψ − lse(Ψ));
         10        B := AΨ − G;
         11        b := (B) ;
                                                            
         12        mN := VN V0−1 m0 + XT (y + b) ;
         13        Compute the lower bound LQJ using Equation 21.174;
         14   until converged;
         15   Return mN and VN ;



21.8.3   Bounds for the sigmoid function
         In many models, we just have binary data. In this case, we have yi ∈ {0, 1}, M = 1 and
         ηi = wT xi where w ∈ RD is a weight vector (not matrix). In this case, the Bohning bound
21.8. Local variational bounds *                                                                            761

                        Bohning bound, χ=−2.5                             JJ bound, χ=2.5
              1                                            1


             0.9                                          0.9


             0.8                                          0.8


             0.7                                          0.7


             0.6                                          0.6


             0.5                                          0.5


             0.4                                          0.4


             0.3                                          0.3


             0.2                                          0.2


             0.1                                          0.1


              0                                            0
              −6   −4   −2        0        2    4   6      −6   −4   −2          0          2   4   6




                               (a)                                            (b)

Figure 21.10 Quadratic lower bounds on the sigmoid (logistic) function. In solid red, we plot sigm(x) vs
x. In dotted blue, we plot the lower bound L(x, ξ) vs x for ξ = 2.5. (a) Bohning bound. This is tight at
−ξ = 2.5. (b) JJ bound. This is tight at ξ = ±2.5. Figure generated by sigmoidLowerBounds.


becomes
                        1 2
   log(1 + eη )    ≤      aη − bη + c                                                     (21.180)
                        2
                        1
               a =                                                                         (21.181)
                        4
               b = Aψ − (1 + e−ψ )−1                                                      (21.182)
                        1
               c =        Aψ 2 − (1 + e−ψ )−1 ψ + log(1 + eψ )                            (21.183)
                        2
It is possible to derive an alternative quadratic bound for this case, as shown in (Jaakkola and
Jordan 1996b, 2000). This has the following form
                                          1
   log(1 + eη )    ≤    λ(ξ)(η 2 − ξ 2 ) + (η − ξ) + log(1 + eξ )                                       (21.184)
                                          2               
                         1                 1             1
           λ(ξ)           tanh(ξ/2) =        sigm(ξ) −                                                 (21.185)
                        4ξ                2ξ             2
We shall refer to this as the JJ bound, after its inventors, (Jaakkola and Jordan 1996b, 2000).
   To facilitate comparison with Bohning’s bound, let us rewrite the JJ bound as a quadratic form
as follows
                        1
    log(1 + eη ) ≤        a(ξ)η 2 − b(ξ)η + c(ξ)                                            (21.186)
                        2
             a(ξ) = 2λ(ξ)                                                                   (21.187)
                          1
             b(ξ) = −                                                                       (21.188)
                          2
                                    1
             c(ξ) = −λ(ξ)ξ 2 − ξ + log(1 + eξ )                                             (21.189)
                                    2
The JJ bound has an adaptive curvature term, since a depends on ξ. In addition, it is tight at
two points, as is evident from Figure 21.10(b). By contrast, the Bohning bound is a constant
curvature bound, and is only tight at one point, as is evident from Figure 21.10(a).
           762                                                               Chapter 21. Variational inference


             If we wish to use the JJ bound for binary logistic regression, we can make some small
           modiﬁcations to Algorithm 15. First, we use the new deﬁnitions for ai , bi and ci . The fact that
           ai is not constant when using the JJ bound, unlike when using the Bohning bound, means we
           cannot compute VN outside of the main loop, making the method a constant factor slower.
           Next we note that Xi = xTi , so the updates for the posterior become

                                         
                                         N
               −1
              VN       =      V0−1 + 2         λ(ξi )xi xTi                                            (21.190)
                                         i=1
                                                   
                                                   N
                                                             1
                 mN    =      VN      V0−1 m0 +         (yi − )xi                                      (21.191)
                                                    i=1
                                                             2

           Finally, to compute the update for ξi , we isolate the terms in LQJ that depend on ξi to get

                              
                              N
                                (                                                      )
              L(ξ)     =             ln sigm(ξi ) − ξi /2 − λ(ξi )(xTi Eq wwT xi − ξi2 ) + const       (21.192)
                               i=1

           Optimizing this wrt ξi gives the equation
                                       
              0 = λ (ξi )(xTi Eq wwT xi − ξi2 )                                                       (21.193)

           Now λ (ξi ) is monotonic for ξi ≥ 0, and we do not need to consider negative values of ξi by
                                                   Figure 21.10). Hence the only way to make the above
           symmetry of the bound around ξi = 0 (see
           expression 0 is if we have (xTi E wwT xi − ξi2 ) = 0. Hence the update becomes

              (ξinew )2 = xTi (VN + mN mTN )xi                                                         (21.194)

              Although the JJ bound is tighter than the Bohning bound, sometimes it is not tight enough
           in order to estimate the posterior covariance accurately. A more accurate approach, which uses
           a piecewise quadratic upper bound to lse, is described in (Marlin et al. 2011). By increasing the
           number of pieces, the bound can be made arbitrarily tight.

21.8.4     Other bounds and approximations to the log-sum-exp function *
           There are several other bounds and approximations to the multiclass lse function which we
           can use, which we brieﬂy summarize below. Note, however, that all of these require numerical
           optimization methods to compute mN and VN , making them more complicated to implement.

21.8.4.1   Product of sigmoids
           The approach in (Bouchard 2007) exploits the fact that

                      
                      K                    
                                           K
              log           e ηk     ≤α+         log(1 + eηk −α )                                      (21.195)
                      k=1                  k=1

           It then applies the JJ bound to the term on the right.
           21.8. Local variational bounds *                                                                      763


21.8.4.2   Jensen’s inequality
           The approach in (Blei and Lafferty 2006a, 2007) uses Jensen’s inequality as follows:
                                                                
                                               M
              Eq [lse(η i )] = Eq log 1 +         exp(xTi wc )                                           (21.196)
                                                    c=1
                                              
                                              M
                                                                      
                            ≤    log 1 +            Eq exp(xTi wc )                                      (21.197)
                                              c=1
                                              
                                              M
                                                                1
                            ≤    log 1 +          exp(xTi mN,c + xTi VN,cc xi )                          (21.198)
                                              c=1
                                                                2
                                                                                                    2
           where the last term follows from the mean of a log-normal distribution, which is eμ+σ        /2
                                                                                                             .

21.8.4.3   Multivariate delta method
           The approach in (Ahmed and Xing 2007; Braun and McAuliffe 2010) uses the multivariate delta
           method, which is a way to approximate moments of a function using a Taylor series expansion.
           In more detail, let f (w) be the function of interest. Using a second-order approximation around
           m we have
                                                               1
              f (w) ≈ f (m) + (w − m)T g(w − m) + (w − m)T H(w − m)                                  (21.199)
                                                               2
           where g and H are the gradient and Hessian evaluated at m. If q(w) = N (w|m, V), we have
                                       1
              Eq [f (w)]   ≈   f (m) + tr[HV]                                                           (21.200)
                                       2
           If we use f (w) = lse(Xi w), we get
                                            1
             Eq [lse(Xi w)] ≈ lse(Xi m) + tr[Xi HXTi V]                                                  (21.201)
                                            2
           where g and H for the lse function are deﬁned in Equations 21.159 and 21.160.

 21.8.5    Variational inference based on upper bounds
           So far, we have been concentrating on lower bounds. However, sometimes we need to use an
           upper bound. For example, (Saul et al. 1996) derives a mean ﬁeld algorithm for sigmoid belief
           nets, which are DGMs in which each CPD is a logistic regression function (Neal 1992). Unlike the
           case of Ising models, the resulting MRF is not pairwise, but contains higher order interactions.
           This makes the standard mean ﬁeld updates intractable. In particular, they turn out to involve
           computing an expression which requires evaluating
                                                                     
              E log(1 + e− j∈pai wij xj ) = E − log sigm(wiT xpa(i) )                              (21.202)

           (Notice the minus sign in front.) (Saul et al. 1996) show how to derive an upper bound on the
           sigmoid function so as to make this update tractable, resulting in a monotonically convergent
           inference procedure.
764                                                                    Chapter 21. Variational inference


Exercises
Exercise 21.1 Laplace approximation to p(μ, log σ|D) for a univariate Gaussian
Compute a Laplace approximation of p(μ, log σ|D) for a Gaussian, using an uninformative prior p(μ, log σ) ∝
1.
Exercise 21.2 Laplace approximation to normal-gamma
Consider estimating μ and  = log σ for a Gaussian using an uniformative normal-Gamma prior. The log
posterior is
                                     1
   log p(μ, |D) = −n log σ −            [ns2 + n(y − μ)2 ]                                      (21.203)
                                    2σ 2

a. Show that the ﬁrst derivatives are
         ∂                         n(y − μ)
           log p(μ, |D)      =                                                                  (21.204)
        ∂μ                            σ2
         ∂                               ns2 + n(y − μ)2
           log p(μ, |D)      =    −n +                                                          (21.205)
        ∂                                     σ2
b. Show that the Hessian matrix is given by
                % 2                                         &
                   ∂                     ∂2
                  ∂μ2
                       log p(μ, |D) ∂μ∂      log p(μ, |D)
      H =          ∂2                    ∂2
                                                                                                 (21.206)
                  ∂ 2
                       log p(μ, |D)    ∂ 2
                                             log p(μ, |D)
                       n                   y−μ
                                                         
                     − σ2             −2n σ2
           =                                                                                     (21.207)
                 −2n y−μ σ2
                              − σ22 (ns2 + n(y − μ)2 )

c. Use this to derive a Laplace approximation to the posterior p(μ, |D).

Exercise 21.3 Variational lower bound for VB for univariate Gaussian
Fill in the details of the derivation in Section 21.5.1.6.
Exercise 21.4 Variational lower bound for VB for GMMs
Consider VBEM for GMMs as in Section 21.6.1.4. Show that the lower bound has the following form
   L    =     E [ln p(x|z, μ, Λ)] + E [ln p(z|π)] + E [ln p(π)] + E [ln p(μ, Λ)]
              −E [ln q(z)] − E [ln q(π)] − E [ln q(μ, Λ)]                                        (21.208)
21.8. Local variational bounds *                                                                      765


where
                                1              (
   E [ln p(x|z, μ, Λ)]     =                 Nk ln Λ̃k − Dβk−1 − νk tr(Sk Lk )
                                2
                                     k
                                                                                      )
                                −νk (xk − mk )T Lk (xk − mk ) − D ln(2π)                           (21.209)

         E [ln p(z|π)]     =                  rik ln π̃k                                           (21.210)
                                 i       k

           E [ln p(π)]     =   ln Cdir (α0 ) + (α0 − 1)             ln π̃k                         (21.211)
                                                               k

                                1                                           Dβ0
        E [ln p(μ, Λ)]     =                  D ln(β0 /2π) + ln Λ̃k −
                                2                                           βk
                                     k

                                −β0 νk (mk − m0 )T Lk (mk − m0 )
                                                                                         *
                                                       ν0 − D − 1         1       −1
                                + ln CW i (L0 , ν0 ) +            ln Λ̃k − νk tr(L0 Lk )           (21.212)
                                                            2             2
            E [ln q(z)]    =                  rik ln rik                                           (21.213)
                                 i       k

           E [ln q(π)]     =         (αk − 1) ln π̃k + ln Cdir (α)                                 (21.214)
                                 k
                                                                                           *
                                         1          D          βk           D
        E [ln q(μ, Λ)]     =               ln Λ̃k +   ln                −     − H (q(Λk ))         (21.215)
                                         2          2          2π           2
                                 k

where the normalization constant for the Dirichlet and Wishart is given by
                         
                      Γ(    αk )
     Cdir (α)   k                                                                                (21.216)
                        k Γ(αk )
                                              −1
   CW i (L, ν)  |L|−ν/2 2νD/2 ΓD (ν/2)                                                            (21.217)
                                         D
        ΓD (α)         π D(D−1)/4            Γ (α + (1 − j)/2)                                    (21.218)
                                     j=1

where ΓD (ν) is the multivariate Gamma function. Finally, the entropy of the Wishart is given by
                                                     ν−D−1              νD
   H (Wi(L, ν))       =    − ln CW i (L, ν) −              E [ln |Λ|] +                            (21.219)
                                                       2                 2
where E [ln |Λ|] is given in Equation 21.131.
Exercise 21.5 Derivation of E [log πk ] under a Dirichlet distribution
Show that
                            exp(Ψ(αk ))
   exp(E [log πk ]) =                                                                             (21.220)
                          exp(Ψ( k αk ))

where π ∼ Dir(α).
Exercise 21.6 Alternative derivation of the mean ﬁeld updates for the Ising model
Derive Equation 21.50 by directly optimizing the variational free energy one term at a time.
766                                                                        Chapter 21. Variational inference


Exercise 21.7 Forwards vs reverse KL divergence
(Source: Exercise 33.7 of (MacKay 2003).) Consider a factored approximation q(x, y) = q(x)q(y) to a joint
distribution p(x, y). Show that to minimize the forwards KL KL (p||q) we should set q(x) = p(x) and
q(y) = p(y), i.e., the optimal approximation is a product of marginals
Now consider the following joint distribution, where the   rows represent y and the columns x.
                                                   x
                                              1    2       3        4
                                         1 1/8 1/8         0        0
                                         2 1/8 1/8         0        0
                                         3 0       0       1/4      0
                                         4 0       0       0        1/4
Show that the reverse KL KL (q||p) for this p has three distinct minima. Identify those minima and
evaluate KL (q||p) at each of them. What is the value of KL (q||p) if we set q(x, y) = p(x)p(y)?
Exercise 21.8 Derivation of the structured mean ﬁeld updates for FHMM
Derive the updates in Section 21.4.1.
Exercise 21.9 Variational EM for binary FA with sigmoid link
Consider the binary FA model:
                        D                                     D
   p(xi |zi , θ)   =         Ber(xij |sigm(wjT zi + βj )) =         Ber(xij |sigm(ηij ))             (21.221)
                       j=1                                    j=1

             ηi    =   W̃z̃i                                                                         (21.222)
             z̃i      (zi ; 1)                                                                      (21.223)
           W̃         (W, β)                                                                        (21.224)
         p(zi )    =   N (0, I)                                                                      (21.225)
Derive an EM algorithm to ﬁt this model, using the Jaakkola-Jordan bound. Hint: the answer is in (Tipping
1998), but the exercise asks you to derive these equations.
Exercise 21.10 VB for binary FA with probit link
In Section 11.4.6, we showed how to use EM to ﬁt probit regression, using a model of the form p(yi =
1|zi ) = I(zi > 0), where zi ∼ N (wT xi , 1) is latent. Now consider the case where the inputs xi are
also unknown, as in binary factor analysis. Show how to ﬁt this model using variational Bayes, making an
                                                                              L
approximation to the posterior of the form q(x, z, W) = N     i=1 q(xi )q(zi )  l=1 q(wl ). Hint: q(xi ) and
q(wi ) will be Gaussian, and q(zi ) will be a truncated univariate Gaussian.
22        More variational inference



  22.1    Introduction
          In Chapter 21, we discussed mean ﬁeld inference, which approximates the posterior by a product
          of marginal distributions. This allows us to use different parametric forms for each variable,
          which is particularly useful when performing Bayesian inference for the parameters of statistical
          models (such as the mean and variance of a Gaussian or GMM, or the regression weights in a
          GLM), as we saw when we discussed variational Bayes and VB-EM.
             In this chapter, we discuss a slightly different kind of variational inference. The basic idea is
          to minimize J(q) = KL (q||p̃), where p̃ is the exact but unnormalized posterior as before, but
          where we no longer require q to be factorized. In fact, we do not even require q to be a globally
          valid joint distribution. Instead, we only require that q is locally consistent, meaning that the
          joint distribution of two adjacent nodes agrees with the corresponding marginals (we will deﬁne
          this more precisely below).
             In addition to this new kind of inference, we will discuss approximate methods for MAP
          state estimation in discrete graphical models. It turns out that algorithms for solving the MAP
          problem are very similar to some approximate methods for computing marginals, as we will see.

  22.2    Loopy belief propagation: algorithmic issues
          There is a very simple approximate inference algorithm for discrete (or Gaussian) graphical
          models known as loopy belief propagation or LBP. The basic idea is extremely simple: we
          apply the belief propagation algorithm of Section 20.2 to the graph, even if it has loops (i.e.,
          even if it is not a tree). This method is simple and efficient, and often works well in practice,
          outperforming mean ﬁeld (Weiss 2001). In this section, we discuss the algorithm in more detail.
          In the next section, we analyse this algorithm in terms of variational inference.

 22.2.1   A brief history
          When applied to loopy graphs, BP is not guaranteed to give correct results, and may not even
          converge. Indeed, Judea Pearl, who invented belief propagation for trees, wrote the following
          about loopy BP in 1988:

             When loops are present, the network is no longer singly connected and local propagation
         768                                                        Chapter 22. More variational inference


             schemes will invariably run into trouble . . . If we ignore the existence of loops and
             permit the nodes to continue communicating with each other as if the network were
             singly connected, messages may circulate indeﬁnitely around the loops and the process
             may not converge to a stable equilibrium . . . Such oscillations do not normally occur in
             probabilistic networks . . . which tend to bring all messages to some stable equilibrium as
             time goes on. However, this asymptotic equilibrium is not coherent, in the sense that it
             does not represent the posterior probabilities of all nodes of the network — (Pearl 1988,
             p.195)

         Despite these reservations, Pearl advocated the use of belief propagation in loopy networks as
         an approximation scheme (J. Pearl, personal communication) and exercise 4.7 in (Pearl 1988)
         investigates the quality of the approximation when it is applied to a particular loopy belief
         network.
            However, the main impetus behind the interest in BP arose when McEliece et al. (1998) showed
         that a popular algorithm for error correcting codes known as turbo codes (Berrou et al. 1993)
         could be viewed as an instance of BP applied to a certain kind of graph. This was an important
         observation since turbo codes have gotten very close to the theoretical lower bound on coding
         efficiency proved by Shannon. (Another approach, known as low density parity check or LDPC
         codes, has achieved comparable performance; it also uses LBP for decoding — see Figure 22.1
         for an example.) In (Murphy et al. 1999), LBP was experimentally shown to also work well for
         inference in other kinds of graphical models beyond the error-correcting code context, and since
         then, the method has been widely used in many different applications.

22.2.2   LBP on pairwise models
         We now discuss how to apply LBP to an undirected graphical model with pairwise factors (we
         discuss the directed case, which can involve higher order factors, in the next section). The
         method is simple: just continually apply Equations 20.11 and 20.10 until convergence. See
         Algorithm 8 for the pseudocode, and beliefPropagation for some Matlab code. We will
         discuss issues such as convergence and accuracy of this method shortly.

          Algorithm 22.1: Loopy belief propagation for a pairwise MRF
         1   Input: node potentials ψs (xs ), edge potentials ψst (xs , xt );
         2   Initialize messages ms→t (xt ) = 1 for all edges s − t;
         3   Initialize beliefs bels (xs ) = 1 for all nodes s;
         4   repeat
         5        Send message on each      edge
                                  !                                         #
                  ms→t (xt ) = xs ψs (xs )ψst (xs , xt ) u∈nbrs \t mu→s (xs ) ;
                                                                   
         6        Update belief of each node bels (xs ) ∝ ψs (xs ) t∈nbrs mt→s (xs );
         7   until beliefs don’t change signiﬁcantly;
         8   Return marginal beliefs bels (xs );
           22.2. Loopy belief propagation: algorithmic issues                                                       769




           Figure 22.1 (a) A simple factor graph representation of a (2,3) low-density parity check code (factor graphs
           are deﬁned in Section 22.2.3.1). Each message bit (hollow round circle) is connected to two parity factors
           (solid black squares), and each parity factor is connected to three bits. Each parity factor has the form
           ψstu (xs , xt , xu ) = I(xs ⊗ xt ⊗ xu = 1), where ⊗ is the xor operator. The local evidence factors for
           each hidden node are not shown. (b) A larger example of a random LDPC code. We see that this graph is
           “locally tree-like”, meaning there are no short cycles; rather, each cycle has length ∼ log m, where m is the
           number of nodes. This gives us a hint as to why loopy BP works so well on such graphs. (Note, however,
           that some error correcting code graphs have short loops, so this is not the full explanation.) Source:
           Figure 2.9 from (Wainwright and Jordan 2008b). Used with kind permission of Martin Wainwright.



22.2.3     LBP on a factor graph
           To handle models with higher-order clique potentials (which includes directed models where
           some nodes have more than one parent), it is useful to use a representation known as a factor
           graph. We explain this representation below, and then describe how to apply LBP to such
           models.

22.2.3.1   Factor graphs
           A factor graph (Kschischang et al. 2001; Frey 2003) is a graphical representation that uniﬁes
           directed and undirected models, and which simpliﬁes certain message passing algorithms. More
           precisely, a factor graph is an undirected bipartite graph with two kinds of nodes. Round nodes
           represent variables, square nodes represent factors, and there is an edge from each variable to
           every factor that mentions it. For example, consider the MRF in Figure 22.2(a). If we assume
           one potential per maximal clique, we get the factor graph in Figure 22.2(b), which represents the
           function

              f (x1 , x2 , x3 , x4 ) = f124 (x1 , x2 , x4 )f234 (x2 , x3 , x4 )                                   (22.1)
           If we assume one potential per edge. we get the factor graph in Figure 22.2(c), which represents
           the function

              f (x1 , x2 , x3 , x4 ) = f14 (x1 , x4 )f12 (x1 , x2 )f34 (x3 , x4 )f23 (x2 , x3 )f24 (x2 , x4 )     (22.2)
770                                                                    Chapter 22. More variational inference


                                                       1                                             1
                 1


      4                     2                4                     2                    4                 2


                 3                                                                                   3
                                                       3

                (a)                                   (b)                                           (c)

Figure 22.2 (a) A simple UGM. (b) A factor graph representation assuming one potential per maximal
clique. (c) A factor graph representation assuming one potential per edge.


                                                             p(x1)                          p(x2)
                        x1            x2
                                                                       x1            x2

                                                                        p(x3|x1, x2)
                                x3
                                                                              x3

                                                                   p(x4|x3)        p(x5|x3)
                        x4            x5                      x4                              x5


                                (a)                                         (b)

Figure 22.3 (a) A simple DGM. (b) Its corresponding factor graph. Based on Figure 5 of (Yedidia et al.
2001)..



   We can also convert a DGM to a factor graph: just create one factor per CPD, and connect that
factor to all the variables that use that CPD. For example, Figure 22.3 represents the following
factorization:
   f (x1 , x2 , x3 , x4 , x5 ) = f1 (x1 )f2 (x2 )f123 (x1 , x2 , x3 )f34 (x3 , x4 )f35 (x3 , x5 )             (22.3)

where we deﬁne f123 (x1 , x2 , x3 ) = p(x3 |x1 , x2 ), etc. If each node has at most one parent (and
hence the graph is a chain or simple tree), then there will be one factor per edge (root nodes
can have their prior CPDs absorvbed into their children’s factors). Such models are equivalent
to pairwise MRFs.
           22.2. Loopy belief propagation: algorithmic issues                                                  771




           Figure 22.4 Message passing on a bipartite factor graph. Square nodes represent factors, and circles
           represent variables. Source: Figure 6 of (Kschischang et al. 2001). Used with kind permission of Brendan
           Frey.



22.2.3.2   BP on a factor graph
           We now derive a version of BP that sends messages on a factor graph, as proposed in (Kschis-
           chang et al. 2001). Speciﬁcally, we now have two kinds of messages: variables to factors
                                 
              mx→f (x) =                  mh→x (x)                                                  (22.4)
                            h∈nbr(x)\{f }

           and factors to variables:
                                              
              mf →x (x) =       f (x, y)                   my→f (y)                                          (22.5)
                              y            y∈nbr(f )\{x}

           Here nbr(x) are all the factors that are connected to variable x, and nbr(f ) are all the variables
           that are connected to factor f . These messages are illustrated in Figure 22.4. At convergence,
           we can compute the ﬁnal beliefs as a product of incoming messages:
                          
              bel(x) ∝           mf →x (x)                                                               (22.6)
                         f ∈nbr(x)

             In the following sections, we will focus on LBP for pairwise models, rather than for factor
           graphs, but this is just for notational simplicity.

 22.2.4    Convergence
           LBP does not always converge, and even when it does, it may converge to the wrong answers.
           This raises several questions: how can we predict when convergence will occur? what can we do
           to increase the probability of convergence? what can we do to increase the rate of convergence?
           We brieﬂy discuss these issues below. We then discuss the issue of accuracy of the results at
           convergence.
           772                                                                                                                                  Chapter 22. More variational inference

                                        1.0                                                               1.0                                                             1.0




              % of messages converged
                                        0.9                                                               0.9                                                             0.9
                                        0.8                                                               0.8                                                             0.8
                                        0.7                                                               0.7                                                             0.7




                                                                                          P (X 115 = 0)




                                                                                                                                                           P (X 10 = 0)
                                        0.6                                                               0.6                                                             0.6
                                        0.5                                                               0.5                                                             0.5
                                        0.4                                                               0.4                                                             0.4
                                        0.3                                                               0.3                                                             0.3
                                        0.2                                                               0.2                                                             0.2
                                        0.1                                                               0.1                                                             0.1
                                          0                                                                 0                                                               0
                                              0   10 20 30 40 50 60 70 80 90 100                                0   0.1     0.2         0.3   0.4    0.5                        0      0.1     0.2          0.3   0.4   0.5
                                                          Time (seconds)                                                  Time (seconds)                                                     Time (seconds)

                                                                  (a)                                                             (b)                                                                (c)

                                        1.0                                                               1.0                                                             1.0
                                        0.9                                                               0.9                                                             0.9
                                        0.8                                                               0.8                                                             0.8
                                        0.7                                                               0.7                                                             0.7
              P (X 61 = 0)




                                                                                                                                                           P (X 17 = 0)
                                                                                          P (X 7 = 0)
                                        0.6                                                               0.6                                                             0.6
                                        0.5                                                               0.5                                                             0.5
                                        0.4                                                               0.4                                                             0.4
                                        0.3                                                               0.3                                                             0.3
                                        0.2                                                               0.2                                                             0.2
                                        0.1                                                               0.1                                                             0.1
                                          0                                                                 0                                                               0
                                              0     0.1     0.2         0.3   0.4   0.5                         0   0.1     0.2         0.3   0.4    0.5                        0      0.1     0.2          0.3   0.4   0.5
                                                          Time (seconds)                                                  Time (seconds)                                                     Time (seconds)

                                                                  (d)                                                             (e)                                                                (f )

                                                                                     Synchronous                      Asynchronous            No smoothing                      True



           Figure 22.5 Illustration of the behavior of loopy belief propagation on an 11 × 11 Ising grid with
           random potentials, wij ∼ Unif(−C, C), where C = 11. For larger C, inference becomes harder. (a)
           Percentage of messasges that have converged vs time for 3 different update schedules: Dotted = damped
           sychronous (few nodes converge), dashed = undamped asychnronous (half the nodes converge), solid =
           damped asychnronous (all nodes converge). (b-f) Marginal beliefs of certain nodes vs time. Solid straight
           line = truth, dashed = sychronous, solid = damped asychronous. Source: Figure 11.C.1 of (Koller and
           Friedman 2009). Used with kind permission of Daphne Koller.



22.2.4.1   When will LBP converge?
           The details of the analysis of when LBP will converge are beyond the scope of this chapter, but
           we brieﬂy sketch the basic idea. The key analysis tool is the computation tree, which visualizes
           the messages that are passed as the algorithm proceeds. Figure 22.6 gives a simple example.
           In the ﬁrst iteration, node 1 receives messages from nodes 2 and 3. In the second iteration, it
           receives one message from node 3 (via node 2), one from node 2 (via node 3), and two messages
           from node 4 (via nodes 2 and 3). And so on.
              The key insight is that T iterations of LBP is equivalent to exact computation in a computation
           tree of height T + 1. If the strengths of the connections on the edges is sufficiently weak, then
           the inﬂuence of the leaves on the root will diminish over time, and convergence will occur. See
           (Wainwright and Jordan 2008b) and references therein for more information.
           22.2. Loopy belief propagation: algorithmic issues                                                773




           Figure 22.6 (a) A simple loopy graph. (b) The computation tree, rooted at node 1, after 4 rounds of
           message passing. Nodes 2 and 3 occur more often in the tree because they have higher degree than nodes
           1 and 2. Source: Figure 8.2 of (Wainwright and Jordan 2008b). Used with kind permission of Martin
           Wainwright.


22.2.4.2   Making LBP converge
           Although the theoretical convergence analysis is very interesting, in practice, when faced with a
           model where LBP is not converging, what should we do?
              One simple way to reduce the chance of oscillation is to use damping. That is, instead of
                                   k
           sending the message Mts   , we send a damped message of the form
                k
              M̃ts (xs ) = λMts (xs ) + (1 − λ)M̃ts
                                                 k−1
                                                     (xs )                                                 (22.7)
           where 0 ≤ λ ≤ 1 is the damping factor Clearly if λ = 1 this reduces to the standard scheme,
           but for λ < 1, this partial updating scheme can help improve convergence. Using a value such
           as λ ∼ 0.5 is standard practice. The beneﬁts of this approach are shown in Figure 22.5, where
           we see that damped updating results in convergence much more often than undamped updating.
              It is possible to devise methods, known as double loop algorithms, which are guaranteed to
           converge to a local minimum of the same objective that LBP is minimizing (Yuille 2001; Welling
           and Teh 2001). Unfortunately, these methods are rather slow and complicated, and the accuracy
           of the resulting marginals is usually not much greater than with standard LBP. (Indeed, oscillating
           marginals is sometimes a sign that the LBP approximation itself is a poor one.) Consequently,
           these techniques are not very widely used. In Section 22.4.2, we will see a different convergent
           version of BP that is widely used.

22.2.4.3   Increasing the convergence rate: message scheduling
           Even if LBP converges, it may take a long time. The standard approach when implementing
           LBP is to perform synchronous updates, where all nodes absorb messages in parallel, and then
           send out messages in parallel. That is, the new messages at iteration k + 1 are computed in
           parallel using
              mk+1 = (f1 (mk ), . . . , fE (mk ))                                                          (22.8)
           where E is the number of edges, and fst (m) is the function that computes the message for
           edge s → t given all the old messages. This is analogous to the Jacobi method for solving linear
         774                                                              Chapter 22. More variational inference


         systems of equations. It is well known (Bertsekas 1997) that the Gauss-Seidel method, which
         performs asynchronous updates in a ﬁxed round-robin fashion, converges faster when solving
         linear systems of equations. We can apply the same idea to LBP, using updates of the form
                                                         
             mk+1
               i    = fi {mk+1
                             j    : j < i}, {mkj : j > i}                                         (22.9)

         where the message for edge i is computed using new messages (iteration k + 1) from edges
         earlier in the ordering, and using old messages (iteration k) from edges later in the ordering.
            This raises the question of what order to update the messages in. One simple idea is to use
         a ﬁxed or random order. The beneﬁts of this approach are shown in Figure 22.5, where we see
         that (damped) asynchronous updating results in convergence much more often than synchronous
         updating.
            A smarter approach is to pick a set of spanning trees, and then to perform an up-down
         sweep on one tree at a time, keeping all the other messages ﬁxed. This is known as tree
         reparameterization (TRP) (Wainwright et al. 2001), which should not be confused with the more
         sophisticated tree-reweighted BP (often abbreviated to TRW) to be discussed in Section 22.4.2.1.
            However, we can do even better by using an adaptive ordering. The intuition is that we should
         focus our computational efforts on those variables that are most uncertain. (Elidan et al. 2006)
         proposed a technique known as residual belief propagation, in which messages are scheduled
         to be sent according to the norm of the difference from their previous value. That is, we deﬁne
         the residual of new message mst at iteration k to be
                                                                    mst (i)
               r(s, t, k) = || log mst − log mkst ||∞ = max | log            |                            (22.10)
                                                         i          mkst (i)
         We can store messages in a priority queue, and always send the one with highest residual. When
         a message is sent from s to t, all of the other messages that depend on mst (i.e., messages of
         the form mtu where u ∈ nbr(t) \ s) need to be recomputed; their residual is recomputed, and
         they are added back to the queue. In (Elidan et al. 2006), they showed (experimentally) that this
         method converges more often, and much faster, than using sychronous updating, asynchronous
         updating with a ﬁxed order, and the TRP approach.
            A reﬁnement of residual BP was presented in (Sutton and McCallum 2007). In this paper, they
         use an upper bound on the residual of a message instead of the actual residual. This means
         that messages are only computed if they are going to be sent; they are not just computed for
         the purposes of evaluating the residual. This was observed to be about ﬁve times faster than
         residual BP, although the quality of the ﬁnal results is similar.

22.2.5   Accuracy of LBP
         For a graph with a single loop, one can show that the max-product version of LBP will ﬁnd the
         correct MAP estimate, if it converges (Weiss 2000). For more general graphs, one can bound
         the error in the approximate marginals computed by LBP, as shown in (Wainwright et al. 2003;
         Vinyals et al. 2010). Much stronger results are available in the case of Gaussian models (Weiss
         and Freeman 2001a; Johnson et al. 2006; Bickson 2009). In particular, in the Gaussian case, if
         the method converges, the means are exact, although the variances are not (typically the beliefs
         are over conﬁdent).
           22.2. Loopy belief propagation: algorithmic issues                                            775


 22.2.6    Other speedup tricks for LBP *
           There are several tricks one can use to make BP run faster. We discuss some of them below.

22.2.6.1   Fast message computation for large state spaces
           The cost of computing each message in BP (whether in a tree or a loopy graph) is O(K f ),
           where K is the number of states, and f is the size of the largest factor (f = 2 for pairwise
           UGMs). In many vision problems (e.g., image denoising), K is quite large (say 256), because
           it represents the discretization of some underlying continuous space, so O(K 2 ) per message
           is too expensive. Fortunately, for certain kinds of pairwise potential functions of the form
           ψst (xs , xt ) = ψ(xs − xt ), one can compute the sum-product messages in O(K log K) time
           using the fast Fourier transform or FFT, as explained in (Felzenszwalb and Huttenlocher 2006).
           The key insight is that message computation is just convolution:
                            
                 k
               Mst  (xt ) =    ψ(xs − xt )h(xs )                                                   (22.11)
                           xs
                                                k−1
           where h(xs ) = ψs (xs ) v∈nbr(s)\t Mvs    (xs ). If the potential function ψ(z) is a Gaussian-like
           potential, we can compute the convolution in O(K) time by sequentially convolving with a
           small number of box ﬁlters (Felzenszwalb and Huttenlocher 2006).
             For the max-product case, a technique called the distance transform can be used to compute
           messages in O(K) time. However, this only works if ψ(z) = exp(−E(z)) and where E(z)
           has one the following forms: quadratic, E(z) = z 2 ; truncated linear, E(z) = min(c1 |z|, c2 ); or
           Potts model, E(z) = c I(z = 0). See (Felzenszwalb and Huttenlocher 2006) for details.

22.2.6.2   Multi-scale methods
           A method which is speciﬁc to 2d lattice structures, which commonly arise in computer vision,
           is based on multi-grid techniques. Such methods are widely used in numerical linear algebra,
           where one of the core problems is the fast solution of linear systems of equations; this is
           equivalent to MAP estimation in a Gaussian MRF. In the computer vision context, (Felzenszwalb
           and Huttenlocher 2006) suggested using the following heuristic to signiﬁcantly speedup BP:
           construct a coarse-to-ﬁne grid, compute messages at the coarse level, and use this to initialize
           messages at the level below; when we reach the bottom level, just a few iterations of standard BP
           are required, since long-range communication has already been achieved via the initialization
           process.
              The beliefs at the coarse level are computed over a small number of large blocks. The local
           evidence is computed from the average log-probability each possible block label assigns to all
           the pixels in the block. The pairwise potential is based on the discrepancy between labels of
           neighboring blocks, taking into account their size. We can then run LBP at the coarse level,
           and then use this to initialize the messages one level down. Note that the model is still a
           ﬂat grid; however, the initialization process exploits the multi-scale nature of the problem. See
           (Felzenszwalb and Huttenlocher 2006) for details.
           776                                                       Chapter 22. More variational inference


22.2.6.3   Cascades
           Another trick for handling high-dimensional state-spaces, that can also be used with exact
           inference (e.g., for chain-structured CRFs), is to prune out improbable states based on a com-
           putationally cheap ﬁltering step. In fact, one can create a hierarchy of models which tradeoff
           speed and accuracy. This is called a computational cascade. In the case of chains, one can
           guarantee that the cascade will never ﬁlter out the true MAP solution (Weiss et al. 2010).

  22.3     Loopy belief propagation: theoretical issues *
           We now attempt to understand the LBP algorithm from a variational point of view. Our presen-
           tation is closely based on an excellent 300-page review article (Wainwright and Jordan 2008a).
           This paper is sometimes called “the monster” (by its own authors!) in view of its length and
           technical difficulty. This section just sketches some of the main results.
              To simplify the presentation, we focus on the special case of pairwise UGMs with discrete
           variables and tabular potentials. Many of the results generalize to UGMs with higher-order clique
           potentials (which includes DGMs), but this makes the notation more complex (see (Koller and
           Friedman 2009) for details of the general case).

 22.3.1    UGMs represented in exponential family form
           We assume the distribution has the following form:
                                        ⎧                                    ⎫
                                1       ⎨                                  ⎬
             p(x|θ, G) =            exp        θs (xs ) +     θst (xs , xt )                           (22.12)
                              Z(θ)      ⎩                                    ⎭
                                            s∈V           (s,t)∈E

           where graph G has nodes V and edges E. (Henceforth we will drop the explicit conditioning
           on θ and G for brevity, since we assume both are known and ﬁxed.) We can rewrite this in
           exponential family form as follows:
                             1
              p(x|θ)    =        exp(−E(x))                                                            (22.13)
                            Z(θ)
                 E(x)      −θ T φ(x)                                                                  (22.14)
           where θ = ({θs;j }, {θs,t;j,k }) are all the node and edge parameters (the canonical parameters),
           and φ(x) = ({I(xs = j)}, {I(xs = j, xt = k)}) are all the node and edge indicator functions
           (the sufficient statistics). Note: we use s, t ∈ V to index nodes and j, k ∈ X to index states.
              The mean of the sufficient statistics are known as the mean parameters of the model, and are
           given by
              μ = E [φ(x)] = ({p(xs = j)}s , {p(xs = j, xt = k)}s=t ) = ({μs;j }s , {μst;jk }s=t )   (22.15)
           This is a vector of length d = |X ||V | + |X |2 |E|, containing the node and edge marginals.
           It completely characterizes the distribution p(x|θ), so we sometimes treat μ as a distribution
           itself.
              Equation 22.12 is called the standard overcomplete representation. It is called “overcom-
           plete” because it ignores the sum-to-one constraints. In some cases, it is convenient to remove
         22.3. Loopy belief propagation: theoretical issues *                                       777


         this redundancy. For example, consider an Ising model where Xs ∈ {0, 1}. The model can be
         written as
                              ⎧                             ⎫
                      1       ⎨                           ⎬
             p(x) =       exp      θs xs +        θst xs xt                                  (22.16)
                    Z(θ)      ⎩                             ⎭
                                  s∈V          (s,t)∈E

         Hence we can use the following minimal parameterization

            φ(x) = (xs , s ∈ V ; xs xt , (s, t) ∈ E) ∈ Rd                                        (22.17)

         where d = |V | + |E|. The corresponding mean parameters are μs = p(xs = 1) and μst =
         p(xs = 1, xt = 1).

22.3.2   The marginal polytope
         The space of allowable μ vectors is called the marginal polytope, and is denoted M(G), where
         G is the structure of the graph deﬁning the UGM. This is deﬁned to be the set of all mean
         parameters for the given model that can be generated from a valid probability distribution:
                                                                                  
            M(G)  {μ ∈ Rd : ∃p s.t. μ =              φ(x)p(x) for some p(x) ≥ 0,      p(x) = 1}(22.18)
                                                     x                              x

           For example, consider an Ising model. If we have just two nodes connected as X1 − X2 ,
         one can show that we have the following minimal set of constraints: 0 ≤ μ12 , 0 ≤ μ12 ≤ μ1 ,
         0 ≤ μ12 ≤ μ2 , and 1 + μ12 − μ1 − μ2 ≥ 0. We can write these in matrix-vector form as
            ⎛               ⎞            ⎛ ⎞
               0    0     1 ⎛ ⎞             0
            ⎜1              ⎟    μ1      ⎜0⎟
            ⎜       0    −1 ⎟ ⎝ μ2 ⎠ ≥ ⎜ ⎟
            ⎝0                                                                                 (22.19)
                    1 −1⎠                ⎝0⎠
                                μ12
              −1 −1 1                      −1
            These four constraints deﬁne a series of half-planes, whose intersection deﬁnes a polytope,
         as shown in Figure 22.7(a).
            Since M(G) is obtained by taking a convex combination of the φ(x) vectors, it can also be
         written as the convex hull of the feature set:

            M(G) = conv{φ1 (x), . . . , φd (x)}                                                 (22.20)

         For example, for a 2 node MRF X1 − X2 with binary states, we have
            M(G) = conv{(0, 0, 0), (1, 0, 0), (0, 1, 0), (1, 1, 1)}                              (22.21)
         These are the four black dots in Figure 22.7(a). We see that the convex hull deﬁnes the same
         volume as the intersection of half-spaces.
            The marginal polytope will play a crucial role in the approximate inference algorithms we
         discuss in the rest of this chapter.
         778                                                               Chapter 22. More variational inference




                           (a)                                 (b)                                (c)

         Figure 22.7 (a) Illustration of the marginal polytope for an Ising model with two variables. (b) Cartoon
         illustration of the set MF (G), which is a nonconvex inner bound on the marginal polytope M(G). MF (G)
         is used by mean ﬁeld. (c) Cartoon illustration of the relationship between M(G) and L(G), which is used
         by loopy BP. The set L(G) is always an outer bound on M(G), and the inclusion M(G) ⊂ L(G) is strict
         whenever G has loops. Both sets are polytopes, which can be deﬁned as an intersection of half-planes
         (deﬁned by facets), or as the convex hull of the vertices. L(G) actually has fewer facets than M(G), despite
         the picture. In fact, L(G) has O(|X ||V | + |X |2 |E|) facets, where |X | is the number of states per variable,
         |V | is the number of variables, and |E| is the number of edges. By contrast, M(G) has O(|X ||V | ) facets.
         On the other hand, L(G) has more vertices than M(G), despite the picture, since L(G) contains all the
         binary vector extreme points μ ∈ M(G), plus additional fractional extreme points. Source: Figures 3.6,
         5.4 and 4.2 of (Wainwright and Jordan 2008a). Used with kind permission of Martin Wainwright.


22.3.3   Exact inference as a variational optimization problem
         Recall from Section 21.2 that the goal of variational inference is to ﬁnd the distribution q that
         maximizes the energy functional
            L(q) = −KL (q||p) + log Z = Eq [log p̃(x)] + H (q) ≤ log Z                                          (22.22)
         where p̃(x) = Zp(x) is the unnormalized posterior. If we write log p̃(x) = θ T φ(x), and we
         let q = p, then the exact energy functional becomes
               max θ T μ + H (μ)                                                                                (22.23)
            μ∈M(G)

         where μ = Ep [φ(x)] is a joint distribution over all state conﬁgurations x (so it is valid to write
         H (μ)). Since the KL divergence is zero when p = q, we know that
               max θ T μ + H (μ) = log Z(θ)                                                                     (22.24)
            μ∈M(G)

         This is a way to cast exact inference as a variational optimization problem.
            Equation 22.24 seems easy to optimize: the objective is concave, since it is the sum of a linear
         function and a concave function (see Figure 2.21 to see why entropy is concave); furthermore, we
         are maximizing this over a convex set. However, the marginal polytope M(G) has exponentially
         many facets. In some cases, there is structure to this polytope that can be exploited by dynamic
         programming (as we saw in Chapter 20), but in general, exact inference takes exponential time.
         Most of the existing deterministic approximate inference schemes that have been proposed in
         the literature can be seen as different approximations to the marginal polytope, as we explain
         below.
         22.3. Loopy belief propagation: theoretical issues *                                         779


22.3.4   Mean ﬁeld as a variational optimization problem
         We discussed mean ﬁeld at length in Chapter 21. Let us re-interpret mean ﬁeld inference in
         our new more abstract framework. This will help us compare it to other approximate methods
         which we discuss below.
            First, let F be an edge subgraph of the original graph G, and let I(F ) ⊆ I be the subset of
         sufficient statistics associated with the cliques of F . Let Ω be the set of canonical parameters
         for the full model, and deﬁne the canonical parameter space for the submodel as follows:
            Ω(F )  {θ ∈ Ω : θ α = 0 ∀α ∈ I \ I(F )}                                               (22.25)
         In other words, we require that the natural parameters associated with the sufficient statistics
         α outside of our chosen class to be zero. For example, in the case of a fully factorized
         approximation, F0 , we remove all edges from the graph, giving
            Ω(F0 )  {θ ∈ Ω : θ st = 0 ∀(s, t) ∈ E}                                                (22.26)
         In the case of structured mean ﬁeld (Section 21.4), we set θst = 0 for edges which are not in
         our tractable subgraph.
            Next, we deﬁne the mean parameter space of the restricted model as follows:
            MF (G)  {μ ∈ Rd : μ = Eθ [φ(x)] for some θ ∈ Ω(F )}                                   (22.27)
         This is called an inner approximation to the marginal polytope, since MF (G) ⊆ M(G). See
         Figure 22.7(b) for a sketch. Note that MF (G) is a non-convex polytope, which results in multiple
         local optima. By contrast, some of the approximations we will consider later will be convex.
            We deﬁne the entropy of our approximation H (μ(F )) as the entropy of the distribution
         μ deﬁned on submodel F . Then we deﬁne the mean ﬁeld energy functional optimization
         problem as follows:
              max      θ T μ + H (μ) ≤ log Z(θ)                                                    (22.28)
            μ∈MF (G)

         In the case of the fully factorized mean ﬁeld approximation for pairwise UGMs, we can write
         this objective as follows:
                                                                                   
             max            θs (xs )μs (xs ) +        θst (xs , xt )μs (xs )μt (xt ) +   H (μs ) (22.29)
            μ∈P d
                    s∈V xs                   (s,t)∈E xs ,xt                        s∈V

         where μs ∈ P, and P is the probability simplex over X .
            Mean ﬁeld involves a concave objective being maximized over a non-convex set. It is typically
         optimized using coordinate ascent, since it is easy to optimize a scalar concave function over P
         for each μs . For example, for a pairwise UGM we get
                                          ⎛                                  ⎞
                                              
             μs (xs ) ∝ exp(θs (xs )) exp ⎝            μt (xt )θst (xs , xt )⎠                     (22.30)
                                           t∈nbr(s) xt


22.3.5   LBP as a variational optimization problem
         In this section, we explain how LBP can be viewed as a variational inference problem.
           780                                                              Chapter 22. More variational inference




           Figure 22.8 (a) Illustration of pairwise UGM on binary nodes, together with a set of pseudo marginals
           that are not globally consistent. (b) A slice of the marginal polytope illustrating the set of feasible edge
           marginals, assuming the node marginals are clamped at μ1 = μ2 = μ3 = 0.5. Source: Figure 4.1 of
           (Wainwright and Jordan 2008a). Used with kind permission of Martin Wainwright.



22.3.5.1   An outer approximation to the marginal polytope
           If we want to consider all possible probability distributions which are Markov wrt our model, we
           need to consider all vectors μ ∈ M(G). Since the set M(G) is exponentially large, it is usually
           infeasible to optimize over. A standard strategy in combinatorial optimization is to relax the
           constraints. In this case, instead of requiring probability vector μ to live in M(G), we consider
           a vector τ that only satisﬁes the following local consistency constraints:
                   
                       τs (xs ) = 1                                                                   (22.31)
                       xs
              
                      τst (xs , xt )   =   τs (xs )                                                            (22.32)
                 xt

           The ﬁrst constraint is called the normalization constraint, and the second is called the marginal-
           ization constraint. We then deﬁne the set
              L(G)  {τ ≥ 0 : (22.31) holds ∀s ∈ V and (22.32) holds ∀(s, t) ∈ E}                              (22.33)
           The set L(G) is also a polytope, but it only has O(|V | + |E|) constraints. It is a convex outer
           approximation on M(G), as shown in Figure 22.7(c).
              We call the terms τs , τst ∈ L(G) pseudo marginals, since they may not correspond to
           marginals of any valid probability distribution. As an example of this, consider Figure 22.8(a).
           The picture shows a set of pseudo node and edge marginals, which satisfy the local consistency
           requirements. However, they are not globally consistent. To see why, note that τ12 implies
           p(X1 = X2 ) = 0.8, τ23 implies p(X2 = X3 ) = 0.8, but τ13 implies p(X1 = X3 ) = 0.2, which
           is not possible (see (Wainwright and Jordan 2008b, p81) for a formal proof). Indeed, Figure 22.8(b)
           shows that L(G) contains points that are not in M(G).
              We claim that M(G) ⊆ L(G), with equality iff G is a tree. To see this, ﬁrst consider
           22.3. Loopy belief propagation: theoretical issues *                                          781


           an element μ ∈ M(G). Any such vector must satisfy the normalization and marginalization
           constraints, hence M(G) ⊆ L(G).
              Now consider the converse. Suppose T is a tree, and let μ ∈ L(T ). By deﬁnition, this satisﬁes
           the normalization and marginalization constraints. However, any tree can be represented in the
           form
                                     μst (xs , xt )
              pμ (x) =      μs (xs )                                                                  (22.34)
                                          μs (xs )μt (xt )
                           s∈V             (s,t)∈E

           Hence satsifying normalization and local consistency is enough to deﬁne a valid distribution for
           any tree. Hence μ ∈ M(T ) as well.
             In contrast, if the graph has loops, we have that M(G) = L(G). See Figure 22.8(b) for an
           example of this fact.

22.3.5.2   The entropy approximation
           From Equation 22.34, we can write the exact entropy of any tree structured distribution μ ∈
           M(T ) as follows:
                                          
               H (μ) =          Hs (μs ) −       Ist (μst )                                      (22.35)
                                 s∈V                  (s,t)∈E
                                       
               Hs (μs )    =     −            μs (xs ) log μs (xs )                                   (22.36)
                                     xs ∈Xs
                                                                          μst (xs , xt )
              Ist (μst )   =                         μst (xs , xt ) log                               (22.37)
                                                                          μs (xs )μt (xt )
                                 (xs ,xt )∈Xs ×Xt

           Note that we can rewrite the mutual information term in the form Ist (μst ) = Hs (μs )+Ht (μt )−
           Hst (μst ), and hence we get the following alternative but equivalent expression:
                                                      
              H (μ) = −          (ds − 1)Hs (μs ) +          Hst (μst )                              (22.38)
                                 s∈V                            (s,t)∈E

           where ds is the degree (number of neighbors) for node s.
             The Bethe1 approximation to the entropy is simply the use of Equation 22.35 even when we
           don’t have a tree:
                                              
              HBethe (τ ) =         Hs (τs ) −     Ist (τst )                                   (22.39)
                                     s∈V                (s,t)∈E

           We deﬁne the Bethe free energy as
                                                
             FBethe (τ )  − θ T τ + HBethe (τ )                                                      (22.40)

           We deﬁne the Bethe energy functional as the negative of the Bethe free energy.

           1. Hans Bethe was a German-American physicist, 1906–2005.
           782                                                                          Chapter 22. More variational inference


22.3.5.3   The LBP objective
           Combining the outer approximation L(G) with the Bethe approximation to the entropy, we get
           the following Bethe variational problem (BVP):
                 min FBethe (τ ) = max θ T τ + HBethe (τ )                                                              (22.41)
              τ ∈L(G)                       τ ∈L(G)

           The space we are optimizing over is a convex set, but the objective itself is not concave (since
           HBethe is not concave). Thus there can be multiple local optima of the BVP.
              The value obtained by the BVP is an approximation to log Z(θ). In the case of trees, the
           approximation is exact, and in the case of models with attractive potentials, the approximation
           turns out to be an upper bound (Sudderth et al. 2008).

22.3.5.4   Message passing and Lagrange multipliers
           In this subsection, we will show that any ﬁxed point of the LBP algorithm deﬁnes a stationary
                                                                                             at Css (τ ) 
           pointof the above constrained objective. Let us deﬁne the normalization constraint
           1 − xs τs (xs ), and the marginalization constraint as Cts (xs ; τ )  τs (xs ) − xt τst (xs , xt )
           for each edge t → s. We can now write the Lagrangian as
                                                      
               L(τ , λ; θ)  θT τ + HBethe (τ ) +         λss Css (τ )
                                                                    s
                                                                                                                
                                                                                 
                                       +                λts (xs )Cts (xs ; τ ) +        λst (xt )Cst (xt ; τ )         (22.42)
                                           s,t     xs                              xt

           (The constraint that τ ≥ 0 is not explicitly enforced, but one can show that it will hold at the
           optimum since θ > 0.) Some simple algebra then shows that ∇τ L = 0 yields
                                                         
                    log τs (xs ) = λss + θs (xs ) +            λts (xs )                             (22.43)
                                                                    t∈nbr(s)

                    τst (xs , xt )
              log                          =     θst (xs , xt ) − λts (xs ) − λst (xt )                                (22.44)
                  τ̃s (xs )τ̃t (xt )
                                                  
           where we have deﬁned τ̃s (xs )  xt τ (xs , xt ). Using the fact that the marginalization con-
           straint implies τ̃s (xs ) = τs (xs ), we get
              log τst (xs , xt )       =    λss + λtt + θst (xs , xt ) + θs (xs ) + θt (xt )
                                                                        
                                            +           λus (xs ) +               λut (xt )                            (22.45)
                                                 u∈nbr(s)\t              u∈nbr(t)\s

             To make the connection to message passing, deﬁne Mts (xs ) = exp(λts (xs )). With this
           notation, we can rewrite the above equations (after taking exponents of both sides) as follows:
                                              
                  τs (xs ) ∝ exp(θs (xs ))          Mts (xs )                                         (22.46)
                                                         t∈nbr(s)

              τst (xs , xt )   ∝       exp (θst (xs , xt ) + θs (xs ) + θt (xt ))
                                                                    
                                       ×             Mus (xs )              Mut (xt )                                  (22.47)
                                           u∈nbr(s)\t               u∈nbr(t)\s
         22.4. Extensions of belief propagation *                                                                          783


         where the λ terms are absorbed into the constant of proportionality. We see that this is
         equivalent to the usual expression for the node and edge marginals in LBP.
           To derive an equation for the messages in terms    of other messages (rather than in terms of
         λts ), we enforce the marginalization condition xt τst (xs , xt ) = τs (xs ). Then one can show
         that
                             ⎡                                                ⎤
                                                             
             Mts (xs ) ∝     ⎣exp {θst (xs , xt ) + θt (xt )}        Mut (xt )⎦                    (22.48)
                            xt                                      u∈nbr(t)\s

         We see that this is equivalent to the usual expression for the messages in LBP.

22.3.6   Loopy BP vs mean ﬁeld
         It is interesting to compare the naive mean ﬁeld (MF) and LBP approximations. There are several
         obvious differences. First, LBP is exact for trees whereas MF is not, suggesting LBP will in general
         be more accurate (see (Wainwright et al. 2003) for an analysis). Second, LBP optimizes over node
         and edge marginals, whereas MF only optimizes over node marginals, again suggesting LBP will
         be more accurate. Third, in the case that the true edge marginals factorize, so μst = μs μt , the
         free energy approximations will be the same in both cases.
             What is less obvious, but which nevertheless seems to be true, is that the MF objective has
         many more local optima than the LBP objective, so optimizing the MF objective seems to be
         harder. In particular, (Weiss 2001), shows empirically that optimizing MF starting from uniform
         or random initial conditions often leads to poor results, whereas optimizing BP from uniform
         initial messages often leads to good results. Furthermore, initializing MF with the BP marginals
         also leads to good results (although MF tends to be more overconﬁdent than BP), indicating that
         the problem is caused not by the inaccuracy of the MF approximation, but rather by the severe
         non-convexity of the MF objective, and by the weakness of the standard coordinate descent
         optimization method used by MF.2 However, the advantage of MF is that it gives a lower bound
         on the partition function, unlike BP, which is useful when using it as a subroutine inside a
         learning algorithm. Also, MF is easier to extend to other distributions besides discrete and
         Gaussian, as we saw in Chapter 21. Intuitively, this is because MF only works with marginal
         distributions, which have a single type, rather than needing to deﬁne pairwise distributions,
         which may need to have two different types.

 22.4    Extensions of belief propagation *
         In this section, we discuss various extensions of LBP.

22.4.1   Generalized belief propagation
         We can improve the accuracy of loopy BP by clustering together nodes that form a tight loop.
         This is known as the cluster variational method. The result is a hyper-graph, which is a graph

         2. (Honkela et al. 2003) discusses the use of the pattern search algorithm to speedup mean ﬁeld inference in the case
         of continuous random variables. It is possible that similar ideas could be adapted to the discrete case, although there
         may be no reason to do this, given that LBP already works well in the discrete case.
784                                                          Chapter 22. More variational inference


                       1         2        3        1245                     2356
                                                                  25
                       4         5        6
                                                          45       5     56

                       7         8        9                       58
                                                   4578                     5689



Figure 22.9 (a) Kikuchi clusters superimposed on a 3 × 3 lattice graph. (b) Corresponding hyper-graph.
Source: Figure 4.5 of (Wainwright and Jordan 2008b). Used with kind permission of Martin Wainwright.



where there are hyper-edges between sets of vertices instead of between single vertices. Note
that a junction tree (Section 20.4.1) is a kind of hyper-graph. We can represent hyper-graph using
a poset (partially ordered set) diagram, where each node represents a hyper-edge, and there is
an arrow e1 → e2 if e2 ⊂ e1 . See Figure 22.9 for an example.
   Let t be the size of the largest hyper-edge in the hyper-graph. If we allow t to be as large as
the treewidth of the graph, then we can represent the hyper-graph as a tree, and the method
will be exact, just as LBP is exact on regular trees (with treewidth 1). In this way, we can deﬁne
a continuum of approximations, from LBP all the way to exact inference.
   Deﬁne Lt (G) to be the set of all pseudo-marginals such that normalization and marginaliza-
tion constraints hold on a hyper-graph whose largest hyper-edge is of size t + 1. For example,
in Figure 22.9, we impose constraints of the form
                                                     
         τ1245 (x1 , x2 , x4 , x5 ) = τ45 (x4 , x5 ),   τ56 (x5 , x6 ) = τ5 (x5 ), . . .     (22.49)
    x1 ,x2                                        x6

Furthermore, we approximate the entropy as follows:
                   
   HKikuchi (τ )    c(g)Hg (τg )                                                              (22.50)
                        g∈E

where Hg (τg ) is the entropy of the joint (pseudo) distribution on the vertices in set g, and c(g)
is called the overcounting number of set g. These are related to Mobious numbers in set
theory. Rather than giving a precise deﬁnition, we just give a simple example. For the graph in
Figure 22.9, we have
    HKikuchi (τ )      =    [H1245 + H2356 + H4578 + H5689 ]
                            −[H25 + H45 + H56 + H58 ] + H5                                     (22.51)
Putting these two approximations together, we can deﬁne the Kikuchi free energy3 as follows:
                                          
   FKikuchi (τ )  − θ T τ + HKikuchi (τ )                                            (22.52)

3. Ryoichi Kikuchi is a Japanese physicist.
         22.4. Extensions of belief propagation *                                                      785


         Our variational problem becomes
              min FKikuchi (τ ) = max θ T τ + HKikuchi (τ )                                         (22.53)
            τ ∈Lt (G)                  τ ∈Lt (G)

            Just as with the Bethe free energy, this is not a concave objective. There are several possible
         algorithms for ﬁnding a local optimum of this objective, including a message passing algorithm
         known as generalized belief propagation. However, the details are beyond the scope of this
         chapter. See e.g., (Wainwright and Jordan 2008b, Sec 4.2) or (Koller and Friedman 2009, Sec
         11.3.2) for more information. Suffice it to say that the method gives more accurate results than
         LBP, but at increased computational cost (because of the need to handle clusters of nodes). This
         cost, plus the complexity of the approach, have precluded it from widespread use.

22.4.2   Convex belief propagation
         The mean ﬁeld energy functional is concave, but it is maximized over a non-convex inner
         approximation to the marginal polytope. The Bethe and Kikuchi energy functionals are not
         concave, but they are maximized over a convex outer approximation to the marginal polytope.
         Consequently, for both MF and LBP, the optimization problem has multiple optima, so the
         methods are sensitive to the initial conditions. Given that the exact formulation (Equation 22.24)
         a concave objective maximized over a convex set, it is natural to try to come up with an
         appproximation which involves a concave objective being maximized over a convex set.
           We now describe one method, known as convex belief propagation. This involves working
         with a set of tractable submodels, F, such as trees or planar graphs. For each model F ⊂ G,
         the entropy is higher, H (μ(F )) ≥ H (μ(G)), since F has fewer constraints. Consequently, any
         convex combination of such subgraphs will have higher entropy, too:
                           
            H (μ(G)) ≤         ρ(F )H (μ(F ))  H(μ, ρ)                                             (22.54)
                            F ∈F
                             
         where ρ(F ) ≥ 0 and F ρ(F ) = 1. Furthermore, H(μ, ρ) is a concave function of μ. We now
         deﬁne the convex free energy as
                                              
            FConvex (μ, ρ)  − μT θ + H(μ, ρ)                                               (22.55)
         We deﬁne the concave energy functional as the negative of the convex free energy. We discuss
         how to optimize ρ below.
            Having deﬁned an upper bound on the entropy, we now consider a convex outerbound on
         the marginal polytope of mean parameters. We want to ensure we can evaluate the entropy of
         any vector τ in this set, so we restrict it so that the projection of τ onto the subgraph G lives
         in the projection of M onto F :
            L(G; F)  {τ ∈ Rd : τ (F ) ∈ M(F ) ∀F ∈ F}                                              (22.56)
         This is a convex set since each M(F ) is a projection of a convex set. Hence we deﬁne our
         problem as
              min        FConvex (τ , ρ) =     max        τ T θ + H(τ , ρ)                          (22.57)
            τ ∈L(G;F )                       τ ∈L(G;F )

         This is a concave objective being maximized over a convex set, and hence has a unique maxi-
         mum. We give a speciﬁc example below.
           786                                                                Chapter 22. More variational inference


                                  f                        f              f                      f


                                       b                       b                b                    b


                              e                        e              e                      e


           Figure 22.10 (a) A graph. (b-d) Some of its spanning trees. Source: Figure 7.1 of (Wainwright and Jordan
           2008b). Used with kind permission of Martin Wainwright.


22.4.2.1   Tree-reweighted belief propagation
           Consider the speciﬁc case where F is all spanning trees of a graph. For any given tree, the
           entropy is given by Equation  22.35. To compute the upper bound, obtained by averaging over
           all trees, note that the terms F ρ(F )H(μ(F )s ) for single nodes will just be Hs , since node s
           appears in every tree, and F ρ(F ) = 1. But the mutual information term Ist receives weight
           ρst = Eρ [I((s, t) ∈ E(T ))], known as the edge appearance probability. Hence we have the
           following upper bound on the entropy:
                                         
               H (μ) ≤        Hs (μs ) −       ρst Ist (μst )                                         (22.58)
                        s∈V                 (s,t)∈E

              The edge appearance probabilities live in a space called the spanning tree polytope. This
           is because they are constrained to arise from a distribution over trees. Figure 22.10 gives an
           example of a graph and three of its spanning trees. Suppose each tree has equal weight under
           ρ. The edge f occurs in 1 of the 3 trees, so ρf = 1/3. The edge e occurs in 2 of the 3 trees,
           so ρe = 2/3. The edge b appears in all of the trees, so ρb = 1. And so on. Ideally we can
           ﬁnd a distribution ρ, or equivalently edge probabilities in the spanning tree polytope, that make
           the above bound as tight as possible. An algorithm to do this is described in (Wainwright et al.
           2005). (A simpler approach is to generate spanning trees of G at random until all edges are
           covered, or use all single edges with weight ρe = 1/E.)
              What about the set we are optimizing over? We require μ(T ) ∈ M(T ) for each tree T , which
           means enforcing normalization and local consistency. Since we have to do this for every tree,
           we are enforcing normalization and local consistency on every edge. Hence L(G; F) = L(G).
           So our ﬁnal optimization problem is as follows:
                       ⎧                                                ⎫
                       ⎨                                              ⎬
                max      τTθ +       Hs (τs ) −          ρst Ist (τst )                                (22.59)
               τ ∈L(G) ⎩                                                ⎭
                                      s∈V             (s,t)∈E(G)

           which is the same as the LBP objective except for the crucial ρst weights. So long as ρst > 0
           for all edges (s, t), this problem is strictly concave with a unique maximum.
              How can we ﬁnd this global optimum? As for LBP, there are several algorithms, but perhaps the
           simplest is a modiﬁcation of belief propagation known as tree reweighted belief propagation,
       22.5. Expectation propagation                                                                                      787


       also called TRW or TRBP for short. The message from t to s is now a function of all messages
       sent from other neighbors v to t, as before, but now it is also a function of the message sent
       from s to t. Speciﬁcally
                                                                 
                                    1                              v∈nbr(t)\s [Mvt (xt )]
                                                                                           ρvt
          Mts (xs ) ∝         exp       θst (xs , xt ) + θt (xt )                              (22.60)
                          x
                                    ρst                               [Mst (xt )]1−ρts
                                   t


       At convergence, the node and edge pseudo marginals are given by
                                          
              τs (xs ) ∝ exp(θs (xs ))        [Mvs (xs )]ρvs                                                           (22.61)
                                                   v∈nbr(s)
                                                                             ρvs
                                                                                                                ρvt
                                                     v∈nbr(s)\t [Mvs (xs )]             v∈nbr(t)\s [Mvt (xt )]
          τst (xs , xt )   ∝        ϕst (xs , xt )                                                                     (22.62)
                                                       [Mts (xs )]1−ρst                   [Mst (xt )]1−ρts
                                         
                                             1
          ϕst (xs , xt )           exp        θst (xs , xt ) + θs (xs ) + θt (xt )                                    (22.63)
                                           ρst
       This algorithm can be derived using a method similar to that described in Section 22.3.5.4.
         If ρst = 1 for all edges (s, t) ∈ E, the algorithm reduces to the standard LBP algorithm.
       However, the condition ρst = 1 implies every edge is present in every spanning tree with
       probability 1, which is only possible if the original graph is a tree. Hence the method is only
       equivalent to standard LBP on trees, when the method is of course exact.
         In general, this message passing scheme is not guaranteed to converge to the unique global
       optimum. One can devise double-loop methods that are guaranteed to converge (Hazan and
       Shashua 2008), but in practice, using damped updates as in Equation 22.7 is often sufficient to
       ensure convergence.
         It is also possible to produce a convex version of the Kikuchi free energy, which one can
       optimize with a modiﬁed version of generalized belief propagation. See (Wainwright and Jordan
       2008b, Sec 7.2.2) for details.
         From Equation 22.59, and using the fact that the TRBP entropy approximation is an upper
       bound on the true entropy, wee see that the TRBP objective is an upper bound on log Z. Using
       the fact that Ist = Hs + Ht − Hst , we can rewrite the upper bound as follows:
                                                    
          log Ẑ(θ)  τ T θ +       ρst Hst (τst ) +   cs Hs (τs ) ≤ log Z(θ)                   (22.64)
                                           st                 s
                           
       where cs  1 −          t   ρst .

22.5   Expectation propagation
       Expectation propagation (EP) (Minka 2001c) is a form of belief propagation where the mes-
       sages are approximated. It is a generalization of the assumed density ﬁltering (ADF) algorithm,
       discussed in Section 18.5.3. In that method, we approximated the posterior at each step using
       an assumed functional form, such as a Gaussian. This posterior can be computed using mo-
       ment matching, which locally optimizes KL (p||q) for a single term. From this, we derived the
       message to send to the next time step.
         788                                                                  Chapter 22. More variational inference


           ADF works well for sequential Bayesian updating, but the answer it gives depends on the
         order in which the data is seen. EP essentially corrects this ﬂaw by making multiple passes over
         the data (thus EP is an offline or batch inference algorithm).

22.5.1   EP as a variational inference problem
         We now explain how to view EP in terms of variational inference. We follow the presentation of
         (Wainwright and Jordan 2008b, Sec 4.3), which should be consulted for further details.
           Suppose the joint distribution can be written in exponential family form as follows:
                                                     
                                                     dI
                                                                 T
            p(x|θ, θ̃) ∝ f0 (x) exp(θ T φ(x))              exp(θ̃ i Φi (x))                                  (22.65)
                                                     i=1

         where we have partitioned the parameters and the sufficient statistics into a tractable term θ of
         size dT and dI intractable terms θ̃ i , each of size b.
            For example, consider the problem of inferring an unknown vector x, when the observation
         model is a mixture of two Gaussians, one centered at x and one centered at 0. (This can be
         used to represent outliers, for example.) Minka (who invented EP) calls this the clutter problem.
         More formally, we assume an observation model of the form
            p(y|x) = (1 − w)N (y|x, I) + wN (y|0, aI)                                                        (22.66)
         where 0 < w < 1 is the known mixing weight (fraction of outliers), and a > 0 is the variance
         of the background distribution. Assuming a ﬁxed prior of the form p(x) = N (x|0, Σ), we can
         write our model in the required form as follows:
                                               
                                               N
            p(x|y1:N )      ∝    N (x|0, Σ)          p(yi |x)                                                (22.67)
                                               i=1
                                                   N
                                      1
                            =    exp − xT Σ−1 x exp     log p(yi |x)                                         (22.68)
                                      2             i=1
                                                                                                   
         This matches our canonical form where f0 (x) exp(θ T φ(x)) corresponds to exp − 12 xT Σ−1 x ,
         using φ(x) = (x, xxT ), and we set Φi (x) = log p(yi |x), θ̃ i = 1, and dI = N .
           The exact inference problem corresponds to
                 max          τ T θ + τ̃ T θ̃ + H ((τ , τ̃ ))                                                (22.69)
            (τ ,τ̃ )∈M(φ,Φ)

         where M(φ, Φ) is the set of mean parameters realizable by any probability distribution as seen
         through the eyes of the sufficient statistics:
            M(φ, Φ) = {(μ, μ̃) ∈ RdT × RdI b : (μ, μ̃) = E [(φ(X), Φ1 (X), . . . , ΦdI (X))]}                (22.70)
            As it stands, it is intractable to perform inference in this distribution. For example, in our
         clutter example, the posterior contains 2N modes. But suppose we incorporate just one of the
         intractable terms, say the i’th one; we will call this the Φi -augmented distribution:
                                                                  T
            p(x|θ, θ̃ i )   ∝    f0 (x) exp(θ T φ(x)) exp(θ̃ i Φi (x))                                        (22.71)
         22.5. Expectation propagation                                                                                         789


         In our clutter example, this becomes
                                  
                                       1
            p(x|θ, θ̃ i ) = exp − xT Σ−1 x [wN (yi |0, aI) + (1 − w)N (yi |x, I)]                                           (22.72)
                                       2
         This is tractable to compute, since it is just a mixture of 2 Gaussians.
            The key idea behind EP is to work with these the Φi -augmented distributions in an iterative
         fashion. First, we approximate the convex set M(φ, Φ) with another, larger convex set:
            L(φ, Φ)  {(τ , τ̃ ) : τ ∈ M(φ), (τ , τ̃ i ) ∈ M(φ, Φi )}                                                       (22.73)

         where M(φ) = {μ ∈ RdT : μ = E [φ(X)]} and M(φ, Φi ) = {(μ, μ̃i ) ∈ RdT × Rb :
         (μ, μ̃i ) = E [(φ(X), Φi (X))]. Next we approximate the entropy by the following term-by-term
         approximation:

                                         
                                         dI
            Hep (τ , τ̃ )  H (τ ) +           [H (τ , τ̃ i ) − H (τ )]                                                     (22.74)
                                         i=1

         Then the EP problem becomes

                max           τ T θ + τ̃ T θ̃ + Hep (τ , τ̃ )                                                               (22.75)
            (τ ,τ̃ )∈L(φ,Φ)


22.5.2   Optimizing the EP objective using moment matching
         We now discuss how to maximize the EP objective in Equation 22.75. Let us duplicate τ dI
         times to yield η i = τ . The augmented set of parameters we need to optimize is now

            (τ , (η i , τ̃ i )di=1
                                I
                                   ) ∈ RdT × (RdT × Rb )dI                                                                  (22.76)

         subject to the constraints that η i = τ and (η i , τ̃ i ) ∈ M(φ; Φi ). Let us associate a vector of
         Lagrange multipliers λi ∈ RdT with the ﬁrst set of constraints. Then the partial Lagrangian
         becomes
                                                     di 
                                                                                                                       
            L(τ ; λ)    =       τ T θ + H (τ ) +           τ̃ Ti θ̃ i + H ((η i , τ̃ i )) − H (η i ) + λTi (τ − η i )       (22.77)
                                                     i=1

           By solving ∇τ L(τ ; λ) = 0, we can show that the corresponding distribution in M(φ) has
         the form
                                                  
                                                  dI
            q(x|θ, λ) ∝ f0 (x) exp{(θ +                 λi )T φ(x)}                                                         (22.78)
                                                  i=1

         The λTi φ(x) terms represents an approximation to the i’th intractable term using the sufficient
         statistics from the base distribution, as we will see below. Similarly, by solving ∇(ηi ,τ̃ i ) L(τ ; λ) =
         0, we ﬁnd that the corresponding distribution in M(φ, Φi ) has the form
                                                                    T
             qi (x|θ, θ̃ i , λ) ∝ f0 (x) exp{(θ +    λj )T φ(x) + θ̃ i Φi (x)}                              (22.79)
                                                        j=i
790                                                            Chapter 22. More variational inference


This corresponds to removing the approximation to the i’th term, λi , from the base distribution,
and adding in the correct i’th term, Φi . Finally, ∇λ L(τ ; λ) = 0 just enforces the constraints
that τ = Eq [φ(X)] and η i = Eqi [φ(X)] are equal. In other words, we get the following
moment matching constraints:

      q(x|θ, λ)φ(x)dx =         qi (x|θ, θ̃ i , λ)φ(x)dx                                         (22.80)

   Thus the overall algorithm is as follows. First we initialize the λi . Then we iterate the following
to convergence: pick a term i; compute qi (corresponding to removing the old approximation
to Φi and adding in the new one); then update the λi term in q by solving the moment
matching equation Eqi [φ(X)] = Eq [φ(X)]. (Note that this particular optimization scheme is
not guaranteed to converge to a ﬁxed point.)
   An equivalent way of stating the algorithm is as follows. Let us assume the true distribution
is given by
               1 
    p(x|D) =          fi (x)                                                                      (22.81)
              Z i

We approximate each fi by f˜i and set
          1 ˜
  q(x) =        fi (x)                                                                            (22.82)
          Z i

Now we repeat the following until convergence:
1. Choose a factor f˜i to reﬁne.
2. Remove f˜i from the posterior by dividing it out:

                    q(x)
       q−i (x) =                                                                                  (22.83)
                   f˜i (x)

   This can be implemented by substracting off the natural parameters of f˜i from q.
3. Compute the new posterior q new (x) by solving
                
                  1
       min KL        fi (x)q−i (x)||q new (x)                                                     (22.84)
     q new (x)    Zi

   This can be done by equating the moments of q new (x) with those of qi (x) ∝ q−i (x)fi (x).
   The corresponding normalization constant has the form

       Zi =     q−i (x)fi (x)dx                                                                   (22.85)

4. Compute the new factor (message) that was implicitly used (so it can be later removed):

                    q new (x)
       f˜i (x) = Zi                                                                               (22.86)
                     q−i (x)
         22.5. Expectation propagation                                                                                     791


         After convergence, we can approximate the marginal likelihood using
                       
            p(D) ≈         f˜i (x)dx                                                                                   (22.87)
                               i

            We will give some examples of this below which will make things clearer.

22.5.3   EP for the clutter problem
         Let us return to considering the clutter problem. Our presentation is based on (Bishop 2006b).4
         For simplicity, we will assume that the prior is a spherical Gaussian, p(x) = N (0, bI). Also, we
         choose to approximate the posterior by a spherical Gaussian, q(x) = N (m, vI). We set f0 (x)
         to be the prior; this can be held ﬁxed. The factor approximations will be “Gaussian like” terms
         of the form
            f˜i (x) = si N (x|mi , vi I)                                                                               (22.88)
         Note, however, that in the EP updates, the variances may be negative! Thus these terms should
         be interpreted as functions, but not necessarily probability distributions. (If the variance is
         negative, it means the that f˜i curves upwards instead of downwards.)
           First we remove f˜i (x) from q(x) by division, which yields q−i (x) = N (m−i , v−i I), where
              −1
             v−i        =     v −1 − vi−1                                                                              (22.89)
            m−i         =     m+   v−i vi−1 (m   − mi )                                                                (22.90)
         The normalization constant is given by
            Zi = (1 − w)N (yi |m−i , (v−i + 1)I) + wN (yi |0, aI)                                                      (22.91)
            Next we compute q new (x) by computing the mean and variance of q−i(x)fi (x) as follows:
                                        v−i
            m       =       m−i + ρi          (yi − m−i )                                                              (22.92)
                                      v−i + 1
                                        2
                                       v−i                 v 2 ||yi − mi ||2
              v     =       v−i − ρi         + ρi (1 − ρi ) −i                                                         (22.93)
                                     v−i + 1                 D(v−i + 1)2
                                w
             ρi     =       1 − N (yi |0, aI)                                                                          (22.94)
                                Zi
         where D is the dimensionality of x and ρi can be interpreted as the probability that yi is not
         clutter.
            Finally, we compute the new factor f˜i whose parameters are given by
            vi−1    =                −1
                             v −1 − v−i                                                                                (22.95)
                                                  −1
             mi     =        m−i + (vi +    v−i )v−i (m   − m−i )                                                      (22.96)
                                             Zi
               si   =                                                                                                  (22.97)
                             (2πvi )D/2 N (mi |m−i , (vi + v−i )I)

         4. For a handy “crib sheet”, containing many of the standard equations needed for deriving Gaussian EP algorithms, see
         http://research.microsoft.com/en-us/um/people/minka/papers/ep/minka-ep-quickref.pdf.
         792                                                                 Chapter 22. More variational inference


           At convergence, we can approximate the marginal likelihood as follows:

                                                 
                                                 N
            p(D)    ≈    (2πv)D/2 exp(c/2)             si (2πvi )−D/2                                          (22.98)
                                                 i=1

                         mT m  mTi mi
                                     N
                c           −                                                                                 (22.99)
                          v    i=1
                                   vi

            In (Minka 2001d), it is shown that, at least on this example, EP gives better accuracy per unit
         of CPU time than VB and MCMC.

22.5.4   LBP is a special case of EP
         We now show that loopy belief propagation is a special case of EP, where the base distribution
         contains the node marginals and the “intractable” terms correspond to the edge potentials. We
         assume the model has the pairwise form shown in Equation 22.12. If there are m nodes, the
         base distribution takes the form
                                         
            p(x|θ 1 , . . . , θ m , 0) ∝   exp(θs (xs ))                                        (22.100)
                                     s∈V

         The entropy of this distribution is simply
                         
            H (τ 1:m ) =     H (τ s )                                                                          (22.101)
                           s

         If we add in the u − v edge, the Φuv augmented distribution has the form
                                                  
                                    
             p(x|θ 1:m , θ uv ) ∝     exp(θs (xs )) exp(θuv (xu , xv ))                                        (22.102)
                                   s∈V

         Since this graph is a tree, the exact entropy of this distribution is given by
                                   
            H (τ 1:m , τ̃ uv ) =       H (τ s ) − I(τ̃ uv )                                                    (22.103)
                                     s

         where I(τ uv ) = H (τ u ) + H (τ v ) − H (τ uv ) is the mutual information. Thus the EP approxi-
         mation to the entropy of the full distribution is given by
                                        
           Hep (τ , τ̃ ) = H (τ ) +            [H (τ 1:m , τ̃ uv ) − H (τ )]                      (22.104)
                                           (u,v)∈E
                                                                                                          
                                                                                         
                         =          H (τ s ) +                     H (τ s ) − I(τ̃ uv ) −       H (τ s )       (22.105)
                               s                 (u,v)∈E       s                            s
                                                 
                         =          H (τ s ) −             I(τ̃ uv )                                           (22.106)
                               s                 (u,v)∈E

         which is precisely the Bethe approximation to the entropy.
         22.5. Expectation propagation                                                                      793


            We now show that the convex set that EP is optimizing over, L(φ, Φ) given by Equation 22.73,
         is the same as the one that LBP is optimizing over, L(G) given in Equation 22.33. First, let us
         consider the set M(φ). This consists of all marginal distributions (τ s , s ∈ V ), realizable by
                                                                            all distributions which satisfy
         a factored distribution. This is therefore equivalent to the set of
         non-negativity τs (xs ) ≥ 0 and the local normalization constraint xs τ (xs ) = 1. Now consider
         the set M(φ, Φuv ) for a single u−v edge. This is equivalent to the marginal polytope M(Guv ),
         where Guv is the graph with the single u − v edge added. Since this graph corresponds to a
         tree, this set also satisﬁes the marginalization conditions
                                           
                 τuv (xu , xv ) = τu (xu ),   τuv (xu , xv ) = τv (xv )                            (22.107)
             xv                                  xu

         Since L(φ, Φ) is the union of such sets, as we sweep over all edges in the graph, we recover
         the same set as L(G).
            We have shown that the Bethe approximation is equivalent to the EP approximation. We now
         show how the EP algorithm reduces to LBP. Associated with each intractable term i = (u, v)
         will be a pair of Lagrange multipliers, (λuv (xv ), λvu (xu )). Recalling that θ T φ(x) = [θs (xs )]s ,
         the base distribution in Equation 22.78 has the form
                                                
             q(x|θ, λ) ∝         exp(θs (xs ))         exp(λuv (xv ) + λvu (xu ))                     (22.108)
                                   s                  (u,v)∈E
                                            ⎛                              ⎞
                                                          
                           =            exp ⎝θs (xs ) +             λts (xs )⎠                          (22.109)
                                   s                      t∈N (s)

         Similarly, the augmented distribution in Equation 22.79 has the form
            quv (x|θ, λ)       ∝       q(x|θ, λ) exp (θuv (xu , xv ) − λuv (xv ) − λvu (xu ))           (22.110)
         We now need to update τu (xu ) and τv (xv ) to enforce the moment matching constraints:
            (Eq [xs ] , Eq [xt ]) = (Equv [xs ] , Equv [xt ])                                            (22.111)
         It can be shown that this can be done by performing the usual sum-product message passing
         step along the u − v edge (in both directions), where the messages are given by Muv (xv ) =
         exp(λuv (xv )), and Mvu (xu ) = exp(λvu (xu )). Once we have updated q, we can derive the
         corresponding messages λuv and λvu .
            The above analysis suggests a natural extension, where we make the base distribution be a
         tree structure instead of a fully factored distribution. We then add in one edge at a time, absorb
         its effect, and approximate the resulting distribution by a new tree. This is known as tree EP
         (Minka and Qi 2003), and is more accurate than LBP, and sometimes faster. By considering other
         kinds of structured base distributions, we can derive algorothms that outperform generalization
         belief propagation (Welling et al. 2005).

22.5.5   Ranking players using TrueSkill
         We now present an interesting application of EP to the problem of ranking players who compete
         in games. Microsoft uses this method — known as TrueSkill (Herbrich et al. 2007) — to rank
794                                                                                       Chapter 22. More variational inference



                                     6

                                                                6

                                                                                    6

                                                                                                6




                                     3                         3                  3          3




                                         W                                W                   W


                                                           G                            G



                                                           \                            \


                                                                     (a)


                                )                                   )                         )



                               6                                   6                        6
                                                      

                                 
                                                                
                                                  K                                 K

                                                           


                                                 G                                 G



                                                  N                                 N



                                                  \                                 \



                                                                     (b)

Figure 22.11 (a) A DGM representing the TrueSkill model for 4 players and 3 teams, where team 1 is player
1, team 2 is players 2 and 3, and team 3 is player 4. We assume there are two games, team 1 vs team 2,
and team 2 vs team 3. Nodes with double circles are deterministic. (b) A factor graph representation of the
model where we assume there are 3 players (and no teams). There are 2 games, player 1 vs player 2, and
player 2 vs player 3. The numbers inside circles represent steps in the message passing algorithm.
22.5. Expectation propagation                                                                                          795


players who use the Xbox 360 Live online gaming system; this system process over 105 games
per day, making this one of the largest application of Bayesian statistics to date.5 The same
method can also be applied to other games, such as tennis or chess.6
   The basic idea is shown in Figure 22.11(a). We assume each player i has a latent or true
underlying skill level si ∈ R. These skill levels can evolve over time according to a simple
dynamical model, p(sti |st−1
                          i  ) = N (sti |st−1
                                          i   , γ 2 ). In any given game, we deﬁne the performance
of player i to be pi , which has the conditional distribution p(pi |si ) = N (pi |si , β 2 ). We then
deﬁne the performance of a team to be the sum of the performance of its constituent players.
For example, in Figure 22.11(a), we assume team 2 is composed of players 2 and 3, so we deﬁne
t2 = p2 + p3 . Finally, we assume that the outcome of a game depends on the difference in
performance levels of the two teams. For example, in Figure 22.11(a), we assume y1 = sign(d1 ),
where d1 = t1 − t2 , and where y1 = +1 means team 1 won, and y1 = −1 means team 2 won.
Thus the prior probability that team 1 wins is

    p(y1 = +1|s) =            p(d1 > 0|t1 , t2 )p(t1 |s1 )p(t2 |s2 )dt1 dt2                                        (22.112)

where t1 ∼ N (s1 , β 2 ) and t2 ∼ N (s2 + s3 , β 2 ).7
  To simplify the presentation of the algorithm, we will ignore the dynamical model and assume
a common static factored Gaussian prior, N (μ0 , σ02 ), on the skills. Also, we will assume that
each team consists of 1 player, so ti = pi , and that there can be no ties. Finally, we will integrate
out the performance variables pi , and assume β 2 = 1, leading to a ﬁnal model of the form
                   
        p(s) =          N (si |μ0 , σ 2 )                                                      (22.113)
                          i
     p(dg |s)     =     N (dg |sig − sjg , 1)                                                                      (22.114)
    p(yg |dg )    =     I(yg = sign(dg ))                                                                          (22.115)

where ig is the ﬁrst player of game g, and jg is the second player. This is represented in
factor graph form in in Figure 22.11(b). We have 3 kinds of factors: the prior factor, fi (si ) =
N (si |μ0 , σ02 ), the game factor, hg (sig , sjg , dg ) = N (dg |sig − sjg , 1), and the outcome factor,
kg (dg , yg ) = I(yg = sign(dg )).
    Since the likelihood term (yg |dg ) is not conjugate to the Gaussian priors, we will have to
perform approximate inference. Thus even when the graph is a tree, we will need to iterate.
(If there were an additional game, say between player 1 and player 3, then the graph would no
longer be a tree.) We will represent all messages and marginal beliefs by 1d Gaussians. We will
use the notation μ and v for the mean and variance (the moment parameters), and λ = 1/v
and η = λμ for the precision and precision-adjusted mean (the natural parameters).

5. Naive Bayes classiﬁers, which are widely used in spam ﬁlters, are often described as the most common application
of Bayesian methods. However, the parameters of such models are usually ﬁt using non-Bayesian methods, such as
penalized maximum likelihood.
6. Our presentation of this algorithm is based in part on lecture notes by Carl Rasmussen Joaquin Quinonero-Candela,
available at http://mlg.eng.cam.ac.uk/teaching/4f13/1112/lect13.pdf.
7. Note that this is very similar to probit regression, discussed in Section 9.4, except the inputs are (the differences of)
latent 1 dimensional factors. If we assume a logistic noise model instead of a Gaussian noise model, we recover the
Bradley Terry model of ranking.
796                                                                            Chapter 22. More variational inference


  We initialize by assuming that at iteration 0, the initial upward messages from factors hg to
variables si are uniform, i.e.,
   m0hg →sig (sig ) = 1, λ0hg →sig = 0, ηh0 g →sig = 0                                                        (22.116)

and similarly m0hg →sjg (sjg ) = 1. The messages passing algorithm consists of 6 steps per game,
as illustrated in Figure 22.11(b). We give the details of these steps below.

1. Compute the posterior over the skills variables:
                                    
      q t (si )                          hg →si (si ) = Nc (si |ηi , λi )
                                        mt−1                     t    t
                  =       f (si )                                                                             (22.117)
                                    g
                                                                       
           λti    =       λ0 +          λt−1       t
                                         hg →si , ηi = η0 +                 ηht−1
                                                                               g →si
                                                                                                              (22.118)
                                    g                                   g


2. Compute the message from the skills variables down to the game factor hg :

                                    q t (sig )                                       q t (sjg )
      mtsig →hg (sig ) =          t             ,          mtsjg →hg (sjg ) =      t                          (22.119)
                                 mhg →si (sig )                                   mhg →sj (sjg )
                                          g                                                g



   where the division is implemented by subtracting the natural parameters as follows:

      λtsig →hg = λtsig − λthg →sig , ηst ig →hg = ηst ig − ηht g →sig                                       (22.120)

   and similarly for sjg .
3. Compute the message from the game factor hg down to the difference variable dg :

      mthg →dg (dg )         =             hg (dg , sig , sjg )mtsig →hg (sig )mtsjg →hg (sjg )dsig dsjg      (22.121)

                             =             N (dg |sig − sjg , 1)N (sig |μtsig →hg , vst ig →hg )              (22.122)

                                    N (sjg |μtsjg →hg , vst jg →hg )dsig dsjg                                 (22.123)
                             =      N (dg |μthg →dg , vht g →dg )                                             (22.124)
              vht g →dg      =      1+    vst ig →hg   +   vst jg →hg                                         (22.125)
             μthg →dg        =      μtsig →hg − μtsjg →hg                                                    (22.126)


4. Compute the posterior over the difference variables:

      q t (dg )   ∝       mthg →dg (dg )mkg →dg (dg )                                                         (22.127)
                  =       N (dg |μthg →dg , vht g →dg )I(yg        = sign(dg ))                              (22.128)
                  ≈       N (dg |μtg , vgt )                                                                 (22.129)
22.5. Expectation propagation                                                                                              797

                                          Ψ function                                          Λ function
                7                                                             1


                                                                             0.9
                6
                                                                             0.8

                5                                                            0.7


                                                                             0.6
                4

                                                                             0.5

                3
                                                                             0.4


                2                                                            0.3


                                                                             0.2
                1
                                                                             0.1


                0                                                             0
                −6       −4        −2          0       2    4     6           −6    −4   −2       0        2   4   6



                                            (a)                                                 (b)

Figure 22.12 (a) Ψ function. (b) Λ function. Based on Figure 2 of (Herbrich et al. 2007). Figure generated
by trueskillPlot.



   (Note that the upward message from the kg factor is constant.) We can ﬁnd these parameters
   by moment matching as follows:

                                                                      yg μthg →dg
          μtg        =        yg μthg →dg + σht g →dg Ψ                                                                (22.130)
                                                                        σht g →dg
                                                                             
                                                           yg μthg →dg
          vgt        =        vht g →dg       1−Λ                                                                      (22.131)
                                                            σht g →dg
                              N (x|0, 1)
       Ψ(x)                                                                                                           (22.132)
                                Φ(x)
       Λ(x)                  Ψ(x)(Ψ(x) + x)                                                                           (22.133)

   (The derivation of these equations is left as a modiﬁcation to Exercise 11.15.) These functions
   are plotted in Figure 22.12. Let us try to understand these equations. Suppose μthg →dg is a
   large positive number. That means we expect, based on the current estimate of the skills,
   that dg will be large and positive. Consequently, if we observe yg = +1, we will not be
   surprised that ig is the winner, which is reﬂected in the fact that the update factor for the
   mean is small, Ψ(yg μthg →dg ) ≈ 0. Similarly, the update factor for the variance is small,
   Λ(yg μthg →dg ) ≈ 0. However, if we observe yg = −1, then the update factor for the mean
   and variance becomes quite large.

5. Compute the upward message from the difference variable to the game factor hg :

                                               q t (dg )
       mtdg →hg (dg )             =          t                                                                         (22.134)
                                          mdg →hg (dg )
            λtdg →hh              =       λtg − λthg →dg ,       ηdt g →hh = ηgt − ηht g →dg                           (22.135)

6. Compute the upward messages from the game factor to the skill variables. Let us assume
798                                                                           Chapter 22. More variational inference

                                                                 2



                           1                                    1.5



                                                                 1




        2                                    3                  0.5



                                                                 0


                           4                                   −0.5



                                                                −1



                                                               −1.5
               5                        6
                                                                −2
                                                                      0   1    2     3         4   5    6     7


                           (a)                                                           (b)

Figure 22.13 (a) A DAG representing a partial ordering of players. (b) Posterior mean plus/minus 1 standard
deviation for the latent skills of each player based on 26 games. Figure generated by trueskillDemo.



   that ig is the winner, and jg is the loser. Then we have

       mthg →sig (sig )          =           hg (dg , sig , sjg )mtdg →hg (dg )mtsjg →hg (sjg )ddg dsjg     (22.136)

                                 =   N (sig |μthg →sig , vht g →sig )                                        (22.137)
             vht g →sig          =   1+   vdt g →hg     +   vst jg →hg                                      (22.138)
             μthg →sig           =   μtdg →hg + μtsjg →hg                                                   (22.139)

   And similarly

       mthg →sjg (sjg )          =           hg (dg , sig , sjg )mtdg →hg (dg )mtsig →hg (sig )ddg dsig     (22.140)

                                 =   N (sjg |μthg →sjg , vht g →sjg )                                        (22.141)
              vht g →sjg         =   1+     vdt g →hg   +   vst ig →hg                                       (22.142)
             μthg →sjg           =   μtdg →hg    −   μtsig →hg                                               (22.143)

   When we compute q t+1 (sig ) at the next iteration, by combining mthg →sig (sig ) with the
   prior factor, we will see that the posterior mean of sig goes up. Similarly, the posterior mean
   of sjg goes down.

   It is straightforward to combine EP with ADF to perform online inference, which is necessary
for most practical applications.
   Let us consider a simple example of this method. We create a partial ordering of 5 players
as shown in Figure 22.13(a). We then sample some game outcomes from this graph, where a
         22.6. MAP state estimation                                                                       799


         parent always beats a child. We pass this data into (5 iterations of) the EP algorithm and infer the
         posterior mean and variance for each player’s skill level. The results are shown in Figure 22.13(b).
         We see that the method has correctly inferred the rank ordering of the players.

22.5.6   Other applications of EP
         The TrueSkill model was developed by researchers at Microsoft. They and others have extended
         the model to a variety of other interesting applications, including personalized ad recommenda-
         tion (Stern et al. 2009), predicting click-through-rate on ads in the Bing search engine (Graepel
         et al. 2010), etc. They have also developed a general purpose Bayesian inference toolbox based
         on EP called infer.net (Minka et al. 2010).
            EP has also been used for a variety of other models, such as Gaussian process classiﬁcation
         (Nickisch and Rasmussen 2008). See http://research.microsoft.com/en-us/um/people/
         minka/papers/ep/roadmap.html for a list of other EP applications.

 22.6    MAP state estimation
         In this section, we consider the problem of ﬁnding the most probable conﬁguration of variables
         in a discrete-state graphical model, i.e., our goal is to ﬁnd a MAP assignment of the following
         form:
                                                                 
             x∗ = arg maxm p(x|θ) = arg maxm           θi (xi ) +    θf (xf ) = arg maxm θ T φ(x) (22.144)
                      x∈X                   x∈X                                      x∈X
                                                   i∈V           f ∈F

         where θi are the singleton node potentials, and θf are the factor potentials. (In this section, we
         follow the notation of (Sontag et al. 2011), which considers the case of general potentials, not just
         pairwise ones.) Note that the partition function Z(θ) plays no role in MAP estimation.
            If the treewidth is low, we can solve this problem with the junction tree algorithm (Sec-
         tion 20.4), but in general this problem is intractable. In this section, we discuss various approxi-
         mations, building on the material from Section 22.3.

22.6.1   Linear programming relaxation
         We can rewrite the objective in terms of the variational parameters as follows:

            arg maxm θ T φ(x) = arg max θ T μ                                                         (22.145)
                x∈X                    μ∈M(G)

         where φ(x) = [{I(xs = j)}, {I(xf = k)}) and μ is a probability vector in the marginal
         polytope. To see why this equation is true, note that we can just set μ to be a degenerate
         distribution with μ(xs ) = I(xs = x∗s ), where x∗s is the optimal assigment of node s. So instead
         of optimizing over discrete assignments, we now optimize over probability distributions μ.
            It seems like we have an easy problem to solve, since the objective in Equation 22.145 is linear
         in μ, and the constraint set M(G) is convex. The trouble is, M(G) in general has a number of
         facets that is exponential in the number of nodes.
            A standard strategy in combinatorial optimization is to relax the constraints. In this case,
         instead of requiring probability vector μ to live in the marginal polytope M(G), we allow it to
         800                                                         Chapter 22. More variational inference


         live inside a convex outer bound L(G). Having deﬁned this relaxed constraint set, we have

               max θ T φ(x) = max θ T μ ≤ max θ T τ                                                   (22.146)
            x∈X m              μ∈M(G)           τ ∈L(G)

         If the solution is integral, it is exact; if it is fractional, it is an approximation. This is called
         a (ﬁrst order) linear programming relaxtion. The reason it is called ﬁrst-order is that the
         constraints that are enforced are those that correspond to consistency on a tree, which is a
         graph of treewidth 1. It is possible to enforce higher-order consistency, using graphs with larger
         treewidth (see (Wainwright and Jordan 2008b, sec 8.5) for details).
            How should we actually perform the optimization? We can use a generic linear programming
         package, but this is often very slow. Fortunately, in the case of graphical models, it is possible to
         devise specialised distributed message passing algorithms for solving this optimization problem,
         as we explain below.

22.6.2   Max-product belief propagation
         The MAP objective in Equation 22.145, maxμ∈M(G) θ T μ, is almost identical to the inference
         objective in Equation 22.23, maxμ∈M(G) θ T μ + H (μ), apart from the entropy term. One
         heuristic way to proceed would be to consider the zero temperature limit of the probability
         distribution μ, where the probability distribution has all its mass centered on its mode (see
         Section 4.2.2). In such a setting, the entropy term becomes zero. We can then modify the
         message passing methods used to solve the inference problem so that they solve the MAP
         estimation problem instead. In particular, in the zero temperature limit, the sum operator
         becomes the max operator, which results in a method called max-product belief propagation.
            In more detail, let
            A(θ)  max θ T μ + H (μ)                                                                  (22.147)
                     μ∈M(G)

         Now consider an inverse temperature β going to inﬁnity. We have
                     A(βθ)                1       (              )
               lim            =     lim     max (βθ)T μ + H (μ)                                       (22.148)
            β→+∞       β           β→+∞  β μ∈M(G)
                                                              %
                                                       1
                              =     max θ μ + lim
                                            T
                                                         H (μ)                                        (22.149)
                                   μ∈M(G)         β→+∞ β

                              =     max θ T μ                                                         (22.150)
                                   μ∈M(G)

         It is the concavity of the objective function that allows us to interchange the lim and max
         operators (see (Wainwright and Jordan 2008b, p274) for details).
            Now consider the Bethe approximation, which has the form maxτ ∈L(G) θ T τ + HBethe (τ ).
         We showed that loopy BP ﬁnds a local optimum of this objective. In the zero temperature limit,
         this objective is equivalent to the LP relaxation of the MAP problem. Unfortunately, max-product
         loopy BP does not solve this LP relaxation unless the graph is a tree (Wainwright and Jordan
         2008b, p211). The reason is that Bethe energy functional is not concave (except on trees), so we
         are not licensed to swap the limit and max operators in the above zero-temperature derivation.
         However, if we use tree-reweighted BP, or TRBP/ TRW, we have a concave objective. In this case,
           22.6. MAP state estimation                                                                                 801


           one can show (Kolmogorov and Wainwright 2005) that the max-product version of TRBP does
           solve the above LP relaxation.
              A certain scheduling of this algorithm, known as sequential TRBP, TRBP-S, or TRW-S, can
           be shown to always converge (Kolmogorov 2006), and furthermore, it typically does so faster
           than the standard parallel updates. The idea is to pick an arbitrary node ordering X1 , . . . , XN .
           We then consider a set of trees which is a subsequence of this ordering. At each iteration, we
           perform max-product BP from X1 towards XN and back along one of these trees. It can be
           shown that this monotonically minimizes a lower bound on the energy, and thus is guaranteed
           to converge to the global optimum of the LP relaxation.

22.6.3     Graphcuts
           In this section, we show how to ﬁnd MAP state estimates, or equivalently, minimum energy
           conﬁgurations, by using the max ﬂow/min cut algorithm for graphs.8 This class of methods is
           known as graphcuts and is very widely used, especially in computer vision applications.
             We will start by considering the case of MRFs with binary nodes and a restricted class of
           potentials; in this case, graphcuts will ﬁnd the exact global optimum. We then consider the
           case of multiple states per node, which are assumed to have some underlying ordering; we can
           approximately solve this case by solving a series of binary subproblems, as we will see.

22.6.3.1   Graphcuts for the generalized Ising model
           Let us start by considering a binary MRF where the edge energies have the following form:
                               
                                  0    if xu = xv
              Euv (xu , xv ) =                                                                    (22.151)
                                  λst if xu = xv
           where λst ≥ 0 is the edge cost. This encourages neighboring nodes to have the same value
           (since we are trying to minimize energy). Since we are free to add any constant we like to the
           overall energy without affecting the MAP state estimate, let us rescale the local energy terms
           such that either Eu (1) = 0 or Eu (0) = 0.
              Now let us construct a graph which has the same set of nodes as the MRF, plus two distin-
           guished nodes: the source s and the sinkt. If Eu (1) = 0, we add the edge xu → t with cost
           Eu (0). (This ensures that if u is not in partition Xt , meaning u is assigned to state 0, we will
           pay a cost of Eu (0) in the cut.) Similarly, If Eu (0) = 0, we add the edge xu → s with cost
           Eu (1). Finally, for every pair of variables that are connected in the MRF, we add edges xu → xv
           and xv → xu , both with cost λu,v ≥ 0. Figure 22.14 illustrates this construction for an MRF
           with 4 nodes, and with the following non-zero energy values:

              E1 (0)    =    7, E2 (1) = 2, E3 (1) = 1, E4 (1) = 6                                               (22.152)
               λ1,2     =    6, λ2,3 = 6, λ3,4 = 2, λ1,4 = 1                                                     (22.153)

           Having constructed the graph, we compute a minimal s − t cut. This is a partition of the nodes
           into two sets, Xs , which are nodes connected to s, and Xt , which are nodes connected to t. We

           8. There are a variety of ways to implement this algorithm, see e.g., (Sedgewick and Wayne 2011). The best take
           O(EV log V ) or O(V 3 ) time, where E is the number of edges and V is the number of nodes.
           802                                                                                  Chapter 22. More variational inference



                                                                           t
                                                                   7

                                                                               6
                                                              z1                           z2


                                                              1                             6

                                                                                   2
                                                              z4                           z3
                                                                           2

                                                                       6               1
                                                                           s


           Figure 22.14 Illustration of graphcuts applied to an MRF with 4 nodes. Dashed lines are ones which
           contribute to the cost of the cut (for bidirected edges, we only count one of the costs). Here the min cut
           has cost 6. Source: Figure 13.5 from (Koller and Friedman 2009). Used with kind permission of Daphne
           Koller.


           pick the partition which minimizes the sum of the cost of the edges between nodes on different
           sides of the partition:
                                   
              cost(Xs , Xt ) =            cost(xu , sv )                                         (22.154)
                                   xu ∈Xs ,xv ∈Xt

           In Figure 22.14, we see that the min-cut has cost 6.
              Minimizing the cost in this graph is equivalent to minimizing the energy in the MRF. Hence
           nodes that are assigned to s have an optimal state of 0, and the nodes that are assigned to t
           have an optimal state of 1. In Figure 22.14, we see that the optimal MAP estimate is (1, 1, 1, 0).

22.6.3.2   Graphcuts for binary MRFs with submodular potentials
           We now discuss how to extend the graphcuts construction to binary MRFs with more general
           kinds of potential functions. In particular, suppose each pairwise energy satisﬁes the following
           condition:

               Euv (1, 1) + Euv (0, 0) ≤ Euv (1, 0) + Euv (0, 1)                                                               (22.155)

           In other words, the sum of the diagonal energies is less than the sum of the off-diagonal energies.
           In this case, we say the energies are submodular (Kolmogorov and Zabin 2004).9 An example
           of a submodular energy is an Ising model where λuv > 0. This is also known as an attractive
           MRF or associative MRF, since the model “wants” neighboring states to be the same.

           9. Submodularity is the discrete analog of convexity. Intuitively, it corresponds to the “law of diminishing returns”, that
           is, the extra value of adding one more element to a set is reduced if the set is already large. More formally, we say that
           f : 2S → R is submodular if for any A ⊂ B ⊂ S and x ∈ S, we have f (A ∪ {x}) − f (A) ≥ f (B ∪ {x}) − f (B).
           If −f is submodular, then f is supermodular.
           22.6. MAP state estimation                                                                             803


             To apply graphcuts to a binary MRF with submodular potentials, we construct the pairwise
           edge weights as follows:
               
              Eu,v (0, 1) = Eu,v (1, 0) + Eu,v (0, 1) − Eu,v (0, 0) − Eu,v (1, 1)                             (22.156)

           This is guaranteed to be non-negative by virtue of the submodularity assumption. In addition,
           we construct new local edge weights as follows: ﬁrst we initialize E  (u) = E(u), and then for
           each edge pair (u, v), we update these values as follows:
              Eu (1)   =       Eu (1) + (Eu,v (1, 0) − Eu,v (0, 0))                                         (22.157)
              Ev (1)   =       Eu (1)   + (Eu,v (1, 1) − Eu,v (1, 0))                                       (22.158)

              We now construct a graph in a similar way to before. Speciﬁcally, if Eu (1) > Eu (0), we
           add the edge u → s with cost Eu (1) − Eu (0), otherwise we add the edge u → t with cost
                                                                    
           Eu (0) − Eu (1). Finally for every MRF edge for which Eu,v (0, 1) > 0, we add a graphcuts edge
                                  
           xu − xv with cost Eu,v (0, 1). (We don’t need to add the edge in both directions.)
              One can show (Exercise 22.1) that the min cut in this graph is the same as the minimum
           energy conﬁguration. Thus we can use max ﬂow/min cut to ﬁnd the globally optimal MAP
           estimate (Greig et al. 1989).

22.6.3.3   Graphcuts for nonbinary metric MRFs
           We now discuss how to use graphcuts for approximate MAP estimation in MRFs where each
           node can have multiple states (Boykov et al. 2001). However, we require that the pairwise energies
           form a metric. We call such a model a metric MRF. For example, suppose the states have a
           natural ordering, as commonly arises if they are a discretization of an underlying continuous
           space. In this case, we can deﬁne a metric of the form E(xs , xt ) = min(δ, ||xs − xt ||) or a
           semi-metric of the form E(xs , xt ) = min(δ, (xs − xt )2 ), for some constant δ > 0. This energy
           encourages neighbors to have similar labels, but never “punishes” them by more than δ. This δ
           term prevents over-smoothing, which we illustrate in Figure 19.20.
              One version of graphcuts is the alpha expansion. At each step, it picks one of the available
           labels or states and calls it α; then it solves a binary subproblem where each variable can choose
           to remain in its current state, or to become state α (see Figure 22.15(d) for an illustration). More
           precisely, we deﬁne a new MRF on binary nodes, and we deﬁne the energies of this new model,
           relative to the current assignment x, as follows:
                                                                         
                                  Eu (0) = Eu (xu ), Eu (1) = Eu (α), Eu,v (0, 0) = Eu,v (xu , xv )         (22.159)
                                                                               
              Eu,v (0, 1)   =   Eu,v (xu , α), Eu,v (1, 0)   =   Eu,v (α, xv ), Eu,v (1, 1)   = Eu,v (α, α)   (22.160)

           To optimize E  using graph cuts (and thus ﬁgure out the optimal alpha expansion move),
           we require that the energies be submodular. Plugging in the deﬁnition we get the following
           constraint:

              Eu,v (xu , xv ) + Eu,v (α, α) ≤ Eu,v (xu , α) + Eu,v (α, xv )                                   (22.161)

           For any distance function, Eu,v (α, α) = 0, and the remaining inequality follows from the
           triangle inequality. Thus we can apply the alpha expansion move to any metric MRF.
         804                                                            Chapter 22. More variational inference




               (a) initial labeling    (b) standard move           (c) α-β-swap          (d) α-expansion


         Figure 22.15 (a) An image with 3 labels. (b) A standard local move (e.g., by iterative conditional modes)
         just ﬂips the label of one pixel. (c) An α − β swap allows all nodes that are currently labeled as α to
         be relabeled as β if this decreases the energy. (d) An α expansion allows all nodes that are not currently
         labeled as α to be relabeled as α if this decreases the energy. Source: Figure 2 of (Boykov et al. 2001).
         Used with kind permission of Ramin Zabih.



            At each step of alpha expansion, we ﬁnd the optimal move from amongst an exponentially
         large set; thus we reach a strong local optimum, of much lower energy than the local optima
         found by standard greedy label ﬂipping methods such as iterative conditional modes. In fact,
         one can show that, once the algorithm has converged, the energy of the resulting solution is at
         most 2c times the optimal energy, where
                           maxα=β Euv (α, β)
            c = max                                                                                        (22.162)
                 (u,v)∈E   minα=β Euv (α, β)
         See Exercise 22.3 for the proof. In the case of the Potts model, c = 1, so we have a 2-
         approximation.
            Another version of graphcuts is the alpha-beta swap. At each step, two labels are chosen,
         call them α and β. All the nodes currently labeled α can change to β (and vice versa) if this
         reduces the energy (see Figure 22.15(c) for an illustration). The resulting binary subproblem can
         be solved exactly, even if the energies are only semi-metric (that is, the triangle inequality need
         not hold; see Exercise 22.2). Although the α − β swap version can be applied to a broader class
         of models than the α-expansion version, it is theoretically not as powerful. Indeed, in various
         low-level vision problems, (Szeliski et al. 2008) show empirically that the expansion version is
         usually better than the swap version (see Section 22.6.4).

22.6.4   Experimental comparison of graphcuts and BP
         In Section 19.6.2.7, we described lattice-structured CRFs for various low-level vision problems.
         (Szeliski et al. 2008) performed an extensive comparison of different approximate optimization
         techniques for this class of problems. Some of the results, for the problem of stereo depth
         estimation, are shown in Figure 22.16. We see that the graphcut and tree-reweighted max-
         product BP (TRW) give the best results, with regular max-product BP being much worse. In terms
         of speed, graphcuts is the fastest, with TRW a close second. Other algorithms, such as ICM,
         simulated annealing or a standard domain-speciﬁc heuristic known as normalize correlation, are
22.6. MAP state estimation                                                                                             805




                  × 106                                                       × 105
             2                                                          4.2
                                        Max-Product BP
            1.9                         a-Expansion                     4.1
                                        a-b Swap
            1.8                         TRW
                                                                         4
                                                                                                    Max-Product BP
            1.7                                                                                     a-Expansion
   Energy




                                                               Energy
                                                                        3.9                         a-b Swap
            1.6                                                                                     TRW
                                                                        3.8
            1.5

            1.4                                                         3.7

            1.3                                                         3.6
              100         101           102              103              100               101                      102
                          Running Time (s)                                            Running Time (s)


Figure 22.16 Energy minimization on a CRF for stereo depth estimation. Top row: two input images along
with the ground truth depth values. Bottom row: energy vs time for 4 different optimization algorithms.
Bottom left: results are for the Teddy image (shown in top row). Bottom right: results are for the Tsukuba
image (shown in Figure 22.17(a)). Source: Figure 13.B.1 of (Koller and Friedman 2009). Used with kind
permission of Daphne Koller.



even worse, as shown qualitatively in Figure 22.17.
   Since TRW is optimizing the dual of the relaxed LP problem, we can use its value at conver-
gence to evaluate the optimal energy. It turns out that for many of the images in the stereo
benchmark dataset, the ground truth has higher energy (lower probability) than the globally op-
timal estimate (Meltzer et al. 2005). This indicates that we are optimizing the wrong model. This
is not surprising, since the pairwise CRF ignores known long-range constraints. Unfortunately,
if we add these constraints to the model, the graph either becomes too dense (making BP slow),
and/or the potentials become non-submodular (making graphcuts inapplicable).
   One way around this is to generate a diverse set of local modes, using repeated applications
of graph cuts, as described in (Yadollahpour et al. 2011). We can then apply a more sophisticated
model, which uses global features, to rerank the solutions.
         806                                                             Chapter 22. More variational inference




                               (a) Left image: 384x288, 15 labels      (b) Ground truth




                                      (c) Swap algorithm            (d) Expansion algorithm




                                  (e) Normalized correlation        (f) Simulated annealing


         Figure 22.17 An example of stereo depth estimation using an MRF. (a) Left image, of size 384 × 288
         pixels, from the University of Tsukuba. (The corresponding right image is similar, but not shown.) (b)
         Ground truth depth map, quantized to 15 levels. (c-f): MAP estimates using different methods: (c) α − β
         swap, (d) α expansion, (e) normalized cross correlation, (f) simulated annealing. Source: Figure 10 of
         (Boykov et al. 2001). Used with kind permission of Ramin Zabih.



22.6.5   Dual decomposition
         We are interested in computing
                                      
           p∗ = maxm        θi (xi ) +   θf (xf )                                                       (22.163)
                  x∈X
                         i∈V            f ∈F

         where F represents a set of factors. We will assume that we can tractably optimize each local
         factor, but the combination of all of these factors makes the problem intractable. One way to
         proceed is to optimize each term independently, but then to introduce constraints that force all
         the local estimates of the variables’ values to agree with each other. We explain this in more
         detail below, following the presentation of (Sontag et al. 2011).
           22.6. MAP state estimation                                                                                                                     807


                                                                                                            θf (xf1 , xf2 )
                                        θf (x1, x2)                                                   xf1                 xf2




                                                                                                      =




                                                                                                                          =
                                  x1                    x2
                                                                                                xg1 = x1                  x2 = xh2
                       θg (x1 , x3 )                      θh(x2, x4)                θg (xg1 , xg3 )                                  θh(xh2 , xh4 )

                                                                                                xg3 = x3                      x4 = xh4
                                  x3                    x4




                                                                                                      =




                                                                                                                          =
                                            θk (x3, x4)                                               xk3                 xk4
                                                                                                            θk (xk3 , xk4 )



                                               (a)                                                               (b)

           Figure 22.18 (a) A pairwise MRF with 4 different edge factors. (b) We have 4 separate variables, plus a
           copy of each variable for each factor it participates in. Source: Figure 1.2-1.3 of (Sontag et al. 2011). Used
           with kind permission of David Sontag.



22.6.5.1   Basic idea
           Let us duplicate the variables xi , once for each factor, and then force them to be equal.
           Speciﬁcally, let xff = {xfi }i∈f be the set of variables used by factor f . This construction is
           illustrated in Figure 22.18. We can reformulate the objective as follows:
                                         
               p∗ = max        θi (xi ) +   θf (xff )   s.t. xfi = xi ∀f, i ∈ f                    (22.164)
                     x,xf
                            i∈V                  f ∈F

           Let us now introduce Lagrange multipliers, or dual variables, δf i (k), to enforce these constraints.
           The Lagrangian becomes
                                              
              L(δ, x, xf ) =        θi (xi ) +    θf (xff )                                             (22.165)
                                        i∈V                  f ∈F
                                                                      !                             #
                                        +                     δf i (x̂i ) I(xi = x̂i ) − I(xfi = x̂i )                                                (22.166)
                                             f ∈F i∈f x̂i

           This is equivalent to our original problem in the following sense: for any value of δ, we have

              p∗ = max L(δ, x, xf )                  s.t. xfi = xi ∀f, i ∈ f                                                                          (22.167)
                     x,xf

           since if the constraints hold, the last term is zero. We can get an upper bound by dropping the
           consistency constraints, and just optimizing the following upper bound:

              L(δ)      max L(δ, x, xf )                                                   (22.168)
                         x,xf
                                 ⎛                       ⎞         ⎛                       ⎞
                                                                            
                       =     max ⎝θi (xi ) +   δf i (xi )⎠ +   max ⎝θf (xf ) −   δf i (xi )⎠(22.169)
                                       xi                                                   xf
                              i                              f :i∈f                f                                             i∈f

           See Figure 22.19 for an illustration.
           808                                                                                          Chapter 22. More variational inference


                                                              θf (x1, x2) − δf 1 (x1 )− δf 2 (x2 )
                                                                         x1             x2


                                                                  δf 1 (x1 )               δf 2 (x2 )
                                                     x1             +          x1     x2        +           x2
                                     θg (x1 , x3 )                δg1 (x1 )                δh2 (x2 )
                                      − δg3 (x3 )                                                                θh(x2, x4)
                                     − δg1 (x1 )                                                                 − δh2 (x2 )
                                                     x3           δg3 (x3 )                δk4 (x4 )             − δh4 (x4 )
                                                                    +          x3     x4        +           x4
                                                              δk3 (x3 )                    δh4 (x4 )


                                                                           x3              x4
                                                              θk (x3, x4) − δk3 (x3 )−δk4 (x4 )




           Figure 22.19 Illustration of dual decomposition.                         Source: Figure 1.2 of (Sontag et al. 2011).     Used with
           kind permission of David Sontag.



             This objective is tractable to optimize, since each xf term is decoupled. Furthermore, we see
           that L(δ) ≥ p∗ , since by relaxing the consistency constraints, we are optimizing over a larger
           space. Furthermore, we have the property that
              min L(δ) = p∗                                                                                                           (22.170)
                 δ

           so the upper bound is tight at the optimal value of δ, which enforces the original constraints.
             Minimizing this upper bound is known as dual decomposition or Lagrangian relaxation
           (Komodakis et al. 2011; Sontag et al. 2011; Rush and Collins 2012). Furthemore, it can be shown
           that L(δ) is the dual to the same LP relaxation we saw before. We will discuss several possible
           optimization algorithms below.
             The main advantage of dual decomposition from a practical point of view is that it allows
           one to mix and match different kinds of optimization algorithms in a convenient way. For
           example, we can combine a grid structured graph with local submodular factors to perform
           image segmentation, together with a tree structured model to perform pose estimation (see
           Exercise 22.4). Analogous methods can be used in natural language processing, where we often
           have a mix of local and global constraints (see e.g., (Koo et al. 2010; Rush and Collins 2012)).

22.6.5.2   Theoretical guarantees
           What can we say about the quality of the solutions obtained in this way? To understand this, let
           us ﬁrst introduce some more notation:
                δ                    
               θi (xi )  θi (xi ) +     δf i (xi )                                                (22.171)
                                         f :i∈f
               δ                          
              θf (xf )      θf (xf ) −              δf i (xi )                                                                        (22.172)
                                           i∈f
           22.6. MAP state estimation                                                                            809


           This represents a reparameterization of the original problem, in the sense that
                                          δ            δ
                  θi (xi ) +    θf (xf ) =    θi (xi ) +    θf (xf )                                       (22.173)
                  i                   f                i                    f

           and hence
                                         δ                     δ
                 L(δ) =             max θi (xi ) +         max θf (xf )                                    (22.174)
                                     xi                     xf
                            i                          f

             Now suppose there is a set of dual variables δ ∗ and an assignment x∗ such that the maxi-
           mizing assignments to the singleton terms agrees with the assignments to the factor terms, i.e.,
                                              δ∗                                δ∗
           so that x∗i ∈ argmaxxi θi (xi ) and x∗f ∈ argmaxxf θf (xf ). In this case, we have
                         δ∗             δ∗                        
              L(δ ∗ ) =     θi (x∗i ) +   θf (x∗f ) =    θi (x∗i ) +   θf (x∗f )                           (22.175)
                                i                  f                    i            f

           Now since
                            
                 θi (x∗i ) +   θf (x∗f ) ≤ p∗ ≤ L(δ ∗ )                                                    (22.176)
                  i                   f

           we conclude that L(δ ∗ ) = p∗ , so x∗ is the MAP assignment.
              So if we can ﬁnd a solution where all the subproblems agree, we can be assured that it is the
           global optimum. This happens surprisingly often in practical problems.

22.6.5.3   Subgradient descent
                                                                                                             δ
           L(δ) is a convex and continuous objective, but it is non-differentiable at points δ where θi (xi )
               δ
           or θf (xf ) have multiple optima. One approach is to use subgradient descent. This updates all
           the elements of δ at the same time, as follows:

                    i (xi ) = δf i (xi ) − αt gf i (xi )
                 δft+1         t               t
                                                                                                           (22.177)

           where gt the subgradient of L(δ) at δ t . If the step sizes αt are set appropriately (see Sec-
           tion 8.5.2.1), this method is guaranteed to converge to a global optimum of the dual. (See
           (Komodakis et al. 2011) for details.)
              One can show that the gradient is given by the following sparse vector. First let xsi ∈
                           δt                                     δt
           argmaxxi θi (xi ) and xff ∈ argmaxxf θf (xf ). Next let gf i (xi ) = 0 for all elements. Finally,
           if xfi = xsi (so factor f disagrees with the local term on how to set variable i), we set gf i (xsi ) =
                                                                                         δt                δt
           +1 and gf i (xfi ) = −1. This has the effect of decreasing θi (xsi ) and increasing θi (xfi ),
           bringing them closer to agreement. Similarly, the subgradient update will decrease the value of
            δt                                                         δt
           θf (xfi , xf \i ) and increasing the value of θf (xsi , xf \i ).
             To compute the gradient, we need to be able to solve subproblems of the following form:
                                              ⎡                          ⎤
                           δ t                            
              argmax θf (xf ) = argmax ⎣θf (xf ) −            δft i (xi )⎦                       (22.178)
                      xf                      xf
                                                                       i∈f
           810                                                          Chapter 22. More variational inference


           (In (Komodakis et al. 2011), these subproblems are called slaves, whereas L(δ) is called the
           master.) Obviously if the scope of factor f is small, this is simple. For example, if each factor is
           pairwise, and each variable has K states, the cost is just K 2 . However, there are some kinds of
           global factors that also support exact and efficient maximization, including the following:

           • Graphical models with low tree width.

           • Factors that correspond to bipartite graph matchings (see e.g., (Duchi et al. 2007)). This
             is useful for data association problems, where we must match up a sensor reading with
             an unknown source. We can ﬁnd the maximal matching using the so-called Hungarian
             algorithm in O(|f |3 ) time (see e.g., (Padadimitriou and Steiglitz 1982)).

           • Supermodular functions. We discuss this case in more detail in Section 22.6.3.2.
           • Cardinality constraints. For example, we might have a factor over a large set of binary
             variables that enforces that a certain number of bits are turned on; this canbe useful in
             problems such as image segmentation. In particular, suppose θf (xf ) = 0 if i∈f xi = L
             and θf (xf ) = −∞ otherwise. We can ﬁnd the maximizing assignment in O(|f | log |f |)
             time as follows: ﬁrst deﬁne ei = δf i (1) − δf i (0); now sort the ei ; ﬁnally set xi = 1 for the
             ﬁrst L values, and xi = 0 for the rest (Tarlow et al. 2010).
           • Factors which are constant for all but a small set S of distinguished values of xf . Then we
             can optimize over the factor in O(|S|) time (Rother et al. 2009).

22.6.5.4   Coordinate descent
           An alternative to updating the entire δ vector at once (albeit sparsely) is to update it using block
           coordinate descent. By choosing the size of the blocks, we can trade off convergence speed with
           ease of the local optimization problem.
              One approach, which optimizes δf i (xi ) for all i ∈ f and all xi at the same time (for a
           ﬁxed factor f ), is known as max product linear programming (Globerson and Jaakkola 2008).
           Algorithmically, this is similar to belief propagation on a factor graph. In particular, we deﬁne
           δf →i as messages sent from factor f to variable i, and we deﬁne δi→f as messages sent from
           variable i to factor f . These messages can be computed as follows (see (Globerson and Jaakkola
           2008) for the derivation):10
                                          
              δi→f (xi ) = θi (xi ) +         δg→i (xi )                                                (22.179)
                                               g=f
                                                            ⎡                     ⎤
                                                  1                   
                 δf →i (xi )   =   −δi→f (xi ) +      max ⎣θf (xf ) +   δj→f (xj )⎦                      (22.180)
                                                 |f | xf \i
                                                                     j∈f

           We then set the dual variables δf i (xi ) to be the messages δf →i (xi ).
              For example, consider a 2 × 2 grid MRF, with the following pairwise factors: θf (x1 , x2 ),
           θg (x1 , x3 ), θh (x2 , x4 ), and θk (x3 , x4 ). The outgoing message from factor f to variable 2 is a

           10. Note that we denote their δi−f (xi ) by δi→f (xi ).
           22.6. MAP state estimation                                                                       811


           function of all messages coming into f , and f ’s local factor:
                                          1
              δf →2 (x2 ) = −δ2→f (x2 ) + max [θf (x1 , x2 ) + δ1→f (x1 ) + δ2→f (x2 )]             (22.181)
                                          2 x1
           Similarly, the outgoing message from variable 2 to factor f is a function of all the messages
           sent into variable 2 from other connected factors (in this example, just factor h) and the local
           potential:
              δ2→f (x2 ) = θ2 (2 ) + δh2 (x2 )                                                         (22.182)
            The key computational bottleneck is computing the max marginals of each factor, where we
           max out all the variables from xf except for xi , i.e., we need to be able to compute the following
           max marginals efficiently:
                                                             
             max h(xf \i , xi ), h(xf \i , xi )  θf (xf ) +      δjf (xj )                            (22.183)
              xf \i
                                                            j∈f

           The difference from Equation 22.178 is that we are maxing over all but one of the variables. We
           can solve this efficiently for low treewidth graphical models using message passing; we can also
           solve this efficiently for factors corresponding to bipartite matchings (Duchi et al. 2007) or to
           cardinality constraints (Tarlow et al. 2010). However, there are cases where maximizing over all
           the variables in a factor’s scope is computationally easier than maximizing over all-but-one (see
           (Sontag et al. 2011, Sec 1.5.4) for an example); in such cases, we may prefer to use a subgradient
           method.
              Coordinate descent is a simple algorithm that is often much faster at minimizing the dual than
           gradient descent, especially in the early iterations. It also reduces the objective monotonically,
           and does not need any step size parameters. Unfortunately, it is not guaranteed to converge to
           the global optimum, since L(δ) is convex but not strictly convex (which implies there may be
           more than one globally optimizing value). One way to ensure convergence is to replace the max
           function in the deﬁnition of L(δ) with the soft-max function, which makes the objective strictly
           convex (see e.g., (Hazan and Shashua 2010) for details).

22.6.5.5   Recovering the MAP assignment
           So far, we have been focussing on ﬁnding the optimal value of δ ∗ . But what we really want is
           the optimal value of x∗ . In general, computing x∗ from δ ∗ is NP-hard, even if the LP relaxation
           is tight and the MAP assignment is unique (Sontag et al. 2011, Theorem 1.4). (The troublesome
           cases arise when there are fractional assignments with the same optimal value as the MAP
           estimate.)
                                             δ∗
              However, suppose that each θi has a unique maximum, x∗i ; in this case, we say that δ ∗ is
           locally decodable to x∗ . One can show than in this case, the LP relaxation is unique and its
           solution is indeed x∗ . If many, but not all, of the nodes are uniquely decodable, we can “clamp”
           the uniquely decodable ones to their MAP value, and then use exact inference algorithms to
           ﬁgure out the optimal assignment to the remaining variables. Using this method, (Meltzer et al.
           2005) was able to optimally solve various stereo vision CRF estimation problems, and (Yanover
           et al. 2007) was able to optimally solve various protein side-chain structure predicition problems.
              Another approach is to use the upper bound provided by the dual in a branch and bound
           search procedure (Geoffrion 1974).
812                                                               Chapter 22. More variational inference


Exercises
Exercise 22.1 Graphcuts for MAP estimation in binary submodular MRFs
(Source: Ex. 13.14 of (Koller and Friedman 2009).). Show that using the graph construction described in
Section 22.6.3.2, the cost of the cut is equal to the energy of the corresponding assignment, up to an
irrelevant constant. (Warning: this exercise involves a lot of algebraic book-keeping.)
Exercise 22.2 Graphcuts for alpha-beta swap
(Source: Ex. 13.15 of (Koller and Friedman 2009).). Show how the optimal alpha-beta swap can be found by
running min-cut on an appropriately constructed graph. More precisely,
a. Deﬁne a set of binary variables t1 , . . . , tn such that ti = 0 means xi = α, ti = 1 if xi = β, and
   xi = xi is unchanged f xi = α and xi = β.
b. Deﬁne an energy function over the new variables such that E  (t) = E(x) + const.
c. Show that E  is submodular if E is a semimetric.
Exercise 22.3 Constant factor optimality for alpha-expansion
(Source: Daphne Koller.). Let X be a pairwise metric Markov random ﬁeld over a graph G = (V, E).
Suppose that the variables are nonbinary and that the node potentials are nonnegative. Let A denote the
set of labels for each X ∈ X . Though it is not possible to (tractably) ﬁnd the globally optimal assignment
x in general, the α-expansion algorithm provides a method for ﬁnding assignments x̂ that are locally
optimal with respect to a large set of transformations, i.e., the possible α-expansion moves.
Despite the fact that α-expansion only produces a locally optimal MAP assignment, it is possible to prove
that the energy of this assignment is within a known factor of the energy of the globally optimal solution
x . In fact, this is a special case of a more general principle that applies to a wide variety of algorithms,
including max-product belief propagation and more general move-making algorithms: If one can prove
that the solutions obtained by the algorithm are ‘strong local minima’, i.e., local minima with respect to
a large set of potential moves, then it is possible to derive bounds on the (global) suboptimality of these
solutions, and the quality of the bounds will depend on the nature of the moves considered. (There is a
precise deﬁnition of ‘large set of moves’.)
Consider the following approach to proving the suboptimality bound for α-expansion.

a. Let x̂ be a local minimum with respect to expansion moves. For each α ∈ A, let V α = {s ∈ V | xs =
   α}, i.e., the set of nodes labelled α in the global minimum. Let x be an assignment that is equal to
   x on V α and equal to x̂ elsewhere; this is an α-expansion of x̂. Verify that E(x ) ≤ E(x̂) ≤ E(x ).
                                                                                                          
                                                                                          max    εst (α,β)
b. Building on the previous part, show that E(x̂) ≤ 2cE(x ), where c = max(s,t)∈E minαα==ββ εst  (α,β)
   and E denotes the energy of an assignment.
   Hint. Think about where x agrees with x̂ and where it agrees with x .

Exercise 22.4 Dual decomposition for pose segmentation
(Source: Daphne Koller.). Two important problems in computer vision are that of parsing articulated objects
(e.g., the human body), called pose estimation, and segmenting the foreground and the background, called
segmentation. Intuitively, these two problems are linked, in that solving either one would be easier if the
solution to the other were available. We consider solving these problems simultaneously using a joint
model over human poses and foreground/background labels and then using dual decomposition for MAP
inference in this model.
We construct a two-level model, where the high level handles pose estimation and the low level handles
pixel-level background segmentation. Let G = (V, E) be an undirected grid over the pixels. Each node
i ∈ V represents a pixel. Suppose we have one binary variable xi for each pixel, where xi = 1 means that
pixel i is in the foreground. Denote the full set of these variables by x = (xi ).
22.6. MAP state estimation                                                                              813


In addition, suppose we have an undirected tree structure T = (V  , E  ) on the parts. For each body
part, we have a discrete set of candidate poses that the part can be in, where each pose is characterized
by parameters specifying its position and orientation. (These candidates are generated by a procedure
external to the algorithm described here.) Deﬁne yjk to be a binary variable indicating whether body part
j ∈ V  is in conﬁguration k. Then the full set of part variables is given by y = (yjk ), with j ∈ V 
and k = 1, . . . , K, where J is the total number of body parts and K is the number of candidate poses
for each part. Note that in order to describe a valid conﬁguration, y must satisfy the constraint that
K
   k=1 yjk = 1 for each j.
Suppose we have the following energy function on pixels:

   E1 (x) =         1[xi = 1] · θi +                1[xi = xj ] · θij .
              i∈V                        (i,j)∈E


Assume that the θij arises from a metric (e.g., based on differences in pixel intensities), so this can be
viewed as the energy for a pairwise metric MRF with respect to G.
We then have the following energy function for parts:

   E2 (y) =           θp (yp ) +               θpq (yp , yq ).
              p∈V                 (p,q)∈E 


Since each part candidate yjk is assumed to come with a position and orientation, we can compute a
                                                                                      i
binary mask in the image plane. The mask assigns a value to each pixel, denoted by {wjk }i∈V , where
  i
wjk = 1 if pixel i lies on the skeleton and decreases as we move away. We can use this to deﬁne an
energy function relating the parts and the pixels:
                              K
                                                         i
   E3 (x, y) =                     1[xi = 0, yjk = 1] · wjk .
                 i∈V j∈V  k=1


In other words, this energy term only penalizes the case where a part candidate is active but the pixel
underneath is labeled as background.
Formulate the minimization of E1 + E2 + E3 as an integer program and show how you can use dual
decomposition to solve the dual of this integer program. Your solution should describe the decomposition
into slaves, the method for solving each one, and the update rules for the overall algorithm. Brieﬂy justify
your design choices, particularly your choice of inference algorithms for the slaves.
23        Monte Carlo inference



  23.1    Introduction
          So far, we discussed various deterministic algorithms for posterior inference. These meth-
          ods enjoy many of the beneﬁts of the Bayesian approach, while still being about as fast as
          optimization-based point-estimation methods. The trouble with these methods is that they can
          be rather complicated to derive, and they are somewhat limited in their domain of applicabil-
          ity (e.g., they usually assume conjugate priors and exponential family likelihoods, although see
          (Wand et al. 2011) for some recent extensions of mean ﬁeld to more complex distributions). Fur-
          thermore, although they are fast, their accuracy is often limited by the form of the approximation
          which we choose.
             In this chapter, we discuss an alternative class of algorithms based on the idea of Monte Carlo
          approximation, which we ﬁrst introduced in Section 2.7. The idea is very simple: generate some
          (unweighted) samples from the posterior, xs ∼ p(x|D), and then use these to compute any
          quantity of interest, such as a posterior marginal, p(x1 |D), or the posterior of the difference of
          two quantities, p(x1 − x2 |D), or the posterior predictive, p(y|D), etc. All of these quantities
                                                  S
          can be approximated by E [f |D] ≈ S1 s=1 f (xs ) for some suitable function f .
             By generating enough samples, we can achieve any desired level of accuracy we like. The main
          issue is: how do we efficiently generate samples from a probability distribution, particularly in
          high dimensions? In this chapter, we discuss non-iterative methods for generating independent
          samples. In the next chapter, we discuss an iterative method known as Markov Chain Monte
          Carlo, or MCMC for short, which produces dependent samples but which works well in high
          dimensions. Note that sampling is a large topic. The reader should consult other books, such as
          (Liu 2001; Robert and Casella 2004), for more information.

  23.2    Sampling from standard distributions
          We brieﬂy discuss some ways to sample from 1 or 2 dimensional distributions of standard form.
          These methods are often used as subroutines by more complex methods.

 23.2.1   Using the cdf
          The simplest method for sampling from a univariate distribution is based on the inverse prob-
          ability transform. Let F be a cdf of some distribution we want to sample from, and let F −1
816                                                              Chapter 23. Monte Carlo inference




                                    1                           F



                                    u



                                    0
                                     0            x


              Figure 23.1 Sampling using an inverse CDF. Figure generated by sampleCdf.



be its inverse. Then we have the following result.

Theorem 23.2.1. If U ∼ U (0, 1) is a uniform rv, then F −1 (U ) ∼ F .

Proof.
      Pr(F −1 (U ) ≤ x)    = Pr(U ≤ F (x)) (applying F to both sides)                           (23.1)
                           = F (x) (because Pr(U ≤ y) = y                                      (23.2)

where the ﬁrst line follows since F is a monotonic function, and the second line follows since
U is uniform on the unit interval.

    Hence we can sample from any univariate distribution, for which we can evaluate its inverse
cdf, as follows: generate a random number u ∼ U (0, 1) using a pseudo random number
generator (see e.g., (Press et al. 1988) for details). Let u represent the height up the y axis. Then
“slide along” the x axis until you intersect the F curve, and then “drop down” and return the
corresponding x value. This corresponds to computing x = F −1 (u). See Figure 23.1 for an
illustration.
    For example, consider the exponential distribution
      Expon(x|λ)  λe−λx I(x ≥ 0)                                                              (23.3)

The cdf is
      F (x) = 1 − e−λx I(x ≥ 0)                                                                (23.4)

whose inverse is the quantile function
                     ln(1 − p)
      F −1 (p) = −                                                                             (23.5)
                         λ
By the above theorem, if U ∼ Unif(0, 1), we know that F −1 (U ) ∼ Expon(λ). Furthermore,
since 1 − U ∼ Unif(0, 1) as well, we can sample from the exponential distribution by ﬁrst
sampling from the uniform and then transforming the results using − ln(u)/λ.
         23.3. Rejection sampling                                                                       817


23.2.2   Sampling from a Gaussian (Box-Muller method)
         We now describe a method to sample from a Gaussian. The idea is we sample uniformly from
         a unit radius circle, and then use the change of variables formula to derive samples from a
         spherical 2d Gaussian. This can be thought of as two samples from a 1d Gaussian.
            In more detail, sample z1 , z2 ∈ (−1, 1) uniformly, and then discard pairs that do not satisfy
         z12 + z22 ≤ 1. The result will be points uniformly distributed inside the unit circle, so p(z) =
         1
         π I(z inside circle). Now deﬁne
                                    1
                          −2 ln r2   2

            xi = zi                                                                                   (23.6)
                            r2
         for i = 1 : 2, where r2 = z12 + z22 . Using the multivariate change of variables formula, we have
                                                                                         
                                        ∂(z1 , z2 )      1       1         1          1
             p(x1 , x2 ) = p(z1 , z2 )|             | = √ exp(− x21 ) √ exp(− x22 )                   (23.7)
                                        ∂(x1 , x2 )      2π      2         2π         2
         Hence x1 and x2 are two independent samples from a univariate Gaussian. This is known as
         the Box-Muller method.
           To sample from a multivariate Gaussian, we ﬁrst compute the Cholesky decomposition of its
         covariance matrix, Σ = LLT , where L is lower triangular. Next we sample x ∼ N (0, I) using
         the Box-Muller method. Finally we set y = Lx + μ. This is valid since
            cov [y] = Lcov [x] LT = L I LT = Σ                                                        (23.8)

 23.3    Rejection sampling
         When the inverse cdf method cannot be used, one simple alternative is to use rejection sam-
         pling, which we now explain.

23.3.1   Basic idea
         In rejection sampling, we create a proposal distribution q(x) which satisifes M q(x) ≥ p̃(x),
         for some constant M , where p̃(x) is an unnormalized version of p(x) (i.e., p(x) = p̃(x)/Zp
         for some possibly unknown constant Zp ). The function M q(x) provides an upper envelope for
         p̃. We then sample x ∼ q(x), which corresponds to picking a random x location, and then
         we sample u ∼ U (0, 1), which corresponds to picking a random height (y location) under the
         envelope. If u > Mp̃(x)
                             q(x) , we reject the sample, otherwise we accept it. See Figure 23.2(a). where
         the acceptance region is shown shaded, and the rejection region is the white region between
         the shaded zone and the upper envelope.
            We now prove that this procedure is correct. Let

            S = {(x, u) : u ≤ p̃(x)/M q(x)}, S0 = {(x, u) : x ≤ x0 , u ≤ p̃(x)/M q(x)}                (23.9)
         818                                                                    Chapter 23. Monte Carlo inference

                                                                              1.4
                                                                                                            target p(x)
                                                                                                            comparison function Mq(x)
                                                                              1.2
                                                     (i)
                                                 Mq(x )
               000000000000000000000000000000
               111111111111111111111111111111
               111111111111111111111111111111
               000000000000000000000000000000
               000000000000000000000000000000
               111111111111111111111111111111
                                                                               1
               000000000000000000000000000000
               111111111111111111111111111111
               000000000000000000000000000000
               111111111111111111111111111111
               000000000000000000000000000000
               111111111111111111111111111111
               000000000000000000000000000000
               111111111111111111111111111111
               111111111111111111111111111111
               000000000000000000000000000000                                 0.8
                                         p(x(i) )
               111111111111111111111111111111
               000000000000000000000000000000
               000000000000000000000000000000
               111111111111111111111111111111
               000000000000000000000000000000
               111111111111111111111111111111
               111111111111111111111111111111
               000000000000000000000000000000
               000000000000000000000000000000
               111111111111111111111111111111                                 0.6
               000000000000000000000000000000
               111111111111111111111111111111
               000000000000000000000000000000
               111111111111111111111111111111
                                          uMq(x(i))
               000000000000000000000000000000
               111111111111111111111111111111
               111111111111111111111111111111
               000000000000000000000000000000
               000000000000000000000000000000
               111111111111111111111111111111
               000000000000000000000000000000
               111111111111111111111111111111                                 0.4
               111111111111111111111111111111
               000000000000000000000000000000
               000000000000000000000000000000
               111111111111111111111111111111
               000000000000000000000000000000
               111111111111111111111111111111
               111111111111111111111111111111
               000000000000000000000000000000
                           Accept region
               111111111111111111111111111111
               000000000000000000000000000000
               000000000000000000000000000000
               111111111111111111111111111111
                                                  Reject region               0.2
               000000000000000000000000000000
               111111111111111111111111111111
               000000000000000000000000000000
               111111111111111111111111111111
                                           (i)
                                          x ~ q(x)                      x      0
                                                                                    0   2     4         6               8               10


                                         (a)                                                      (b)

         Figure 23.2 (a) Schematic illustration of rejection sampling. Source: Figure 2 of (Andrieu et al. 2003).
         Used with kind permission of Nando de Freitas. (b) Rejection sampling from a Ga(α = 5.7, λ = 2)
         distribution (solid blue) using a proposal of the form M Ga(k, λ − 1) (dotted red), where k = 5.7 = 5.
         The curves touch at α − k = 0.7. Figure generated by rejectionSamplingDemo.



         Then the cdf of the accepted points is given by
                                                    P (x ≤ x0 , x accepted)
               P (x ≤ x0 |x accepted)          =                                                                              (23.10)
                                                        P (x accepted)
                                                                                 x0
                                                        I((x, u) ∈ S0 )q(x)dudx        p̃(x)dx
                                               =                              = −∞
                                                                                    ∞                                          (23.11)
                                                         I((x, u) ∈ S)q(x)dudx     −∞
                                                                                       p̃(x)dx

         which is the cdf of p(x), as desired.
           How efficient is this method? Since we generate with probability q(x) and accept with
         probability Mp̃(x)
                        q(x) , the probability of acceptance is

                                  p̃(x)          1
               p(accept) =              q(x)dx =              p̃(x)dx                                                          (23.12)
                                 M q(x)          M
         Hence we want to choose M as small as possible while still satisfying M q(x) ≥ p̃(x).

23.3.2   Example
         For example, suppose we want to sample from a Gamma distribution:1
                                 1 α−1 α
               Ga(x|α, λ) =          x λ exp(−λx)                                                                              (23.13)
                                Γ(α)
                                         iid
         One can show that if Xi ∼ Expon(λ), and Y = X1 + · · · + Xk , then Y ∼ Ga(k, λ). For
         non-integer shape parameters, we cannot use this trick. However, we can use rejection sampling

         1. This section is based on notes by Ioana A. Cosma, available at http://users.aims.ac.za/~ioana/cp2.pdf.
         23.3. Rejection sampling                                                                                                                                     819

                                                                   f(x) half−gaussian                                     samples from f(x) (by ARS)
                                               1
                                                                                                    1000
                                              0.9
                                                                                                    900
                                              0.8
                                                                                                    800
                                              0.7
                                                                                                    700
                                              0.6
                                                                                                    600
                                              0.5
                                                                                                    500
                                              0.4
                                                                                                    400
                                              0.3                                                   300

                                              0.2                                                   200

                                              0.1                                                   100

                                               0                                                      0
                                                    −8   −6   −4   −2      0       2    4   6   8          −8   −6   −4      −2       0       2        4   6   8



                          (a)                                           (b)                                                       (c)

         Figure 23.3 (a) Idea behind adaptive rejection sampling. We place piecewise linear upper (and lower)
         bounds on the log-concave density. Based on Figure 1 of (Gilks and Wild 1992). Figure generated by
         arsEnvelope. (b-c) Using ARS to sample from a half-Gaussian. Figure generated by arsDemo, written by
         Daniel Eaton.


         using a Ga(k, λ − 1) distribution as a proposal, where k = α. The ratio has the form
            p(x)          Ga(x|α, λ)            xα−1 λα exp(−λx)/Γ(α)
                    =                   = k−1                                                                                                                      (23.14)
            q(x)         Ga(x|k, λ − 1)   x    (λ − 1)k exp(−(λ − 1)x)/Γ(k)
                                 α
                           Γ(k)λ
                    =                 xα−k exp(−x)                                                                                                                 (23.15)
                         Γ(α)(λ − 1)k
         This ratio attains its maximum when x = α − k. Hence
                    Ga(α − k|α, λ)
            M=                                                                                                                                                     (23.16)
                   Ga(α − k|k, λ − 1)
         See Figure 23.2(b) for a plot. (Exercise 23.2 asks you to devise a better proposal distribution
         based on the Cauchy distribution.)

23.3.3   Application to Bayesian statistics
         Suppose we want to draw (unweighted) samples from the posterior, p(θ|D) = p(D|θ)p(θ)/p(D).
         We can use rejection sampling with p̃(θ) = p(D|θ)p(θ) as the target distribution, q(θ) = p(θ)
         as our proposal, and M = p(D|θ̂), where θ̂ = arg max p(D|θ) is the MLE; this was ﬁrst
         suggested in (Smith and Gelfand 1992). We accept points with probability
             p̃(θ)   p(D|θ)
                   =                                                                                                                                               (23.17)
            M q(θ)   p(D|θ̂)
         Thus samples from the prior that have high likelihood are more likely to be retained in the
         posterior. Of course, if there is a big mismatch between prior and posterior (which will be the
         case if the prior is vague and the likelihood is informative), this procedure is very inefficient. We
         discuss better algorithms later.

23.3.4   Adaptive rejection sampling
         We now describe a method that can automatically come up with a tight upper envelope q(x)
         to any log concave density p(x). The idea is to upper bound the log density with a piecewise
         820                                                            Chapter 23. Monte Carlo inference


         linear function, as illustrated in Figure 23.3(a). We choose the initial locations for the pieces
         based on a ﬁxed grid over the support of the distribution. We then evaluate the gradient of the
         log density at these locations, and make the lines be tangent at these points.
            Since the log of the envelope is piecewise linear, the envelope itself is piecewise exponential:

            q(x) = Mi λi exp(−λi (x − xi−1 )), xi−1 < x ≤ xi                                         (23.18)

         where xi are the grid points. It is relatively straightforward to sample from this distribution. If
         the sample x is rejected, we create a new grid point at x, and thereby reﬁne the envelope. As
         the number of grid points is increased, the tightness of the envelope improves, and the rejection
         rate goes down. This is known as adaptive rejection sampling (ARS) (Gilks and Wild 1992).
         Figure 23.3(b-c) gives an example of the method in action. As with standard rejection sampling,
         it can be applied to unnormalized distributions.

23.3.5   Rejection sampling in high dimensions
         It is clear that we want to make our proposal q(x) as close as possible to the target distribution
         p(x), while still being an upper bound. But this is quite hard to achieve, especially in high
         dimensions. To see this, consider sampling from p(x) = N (0, σp2 I) using as a proposal
         q(x) = N (0, σq2 I). Obviously we must have σq2 ≥ σp2 in order to be an upper bound. In D
         dimensions, the optimum value is given by M = (σq /σp )D . The acceptance rate is 1/M (since
         both p and q are normalized), which decreases exponentially fast with dimension. For example,
         if σq exceeds σp by just 1%, then in 1000 dimensions the acceptance ratio will be about 1/20,000.
         This is a fundamental weakness of rejection sampling.
            In Chapter 24, we will describe MCMC sampling, which is a more efficient way to sample
         from high dimensional distributions. Sometimes this uses (adaptive) rejection sampling as a
         subroutine, which is known as adaptive rejection Metropolis sampling (Gilks et al. 1995).

 23.4    Importance sampling
         We now describe a Monte Carlo method known as importance sampling for approximating
         integrals of the form

            I = E [f ] =    f (x)p(x)dx                                                              (23.19)


23.4.1   Basic idea
         The idea is to draw samples x in regions which have high probability, p(x), but also where
         |f (x)| is large. The result can be super efficient, meaning it needs less samples than if we
         were to sample from the exact distribution p(x). The reason is that the samples are focussed
         on the important parts of space. For example, suppose we want to estimate the probability of
         a rare event. Deﬁne f (x) = I(x ∈ E), for some set E. Then it is better to sample from a
         proposal of the form q(x) ∝ f (x)p(x) than to sample from p(x) itself.
            Importance sampling samples from any proposal, q(x). It then uses these samples to estimate
         23.4. Importance sampling                                                                       821


         the integral as follows:

                                                     1
                                                        S
                                       p(x)
            E [f ] =           f (x)        q(x)dx ≈       ws f (xs ) = Iˆ                            (23.20)
                                       q(x)          S s=1
                                s
                             )
         where ws  p(x q(xs ) are the importance weights. Note that, unlike rejection sampling, we use all
         the samples.
            How shouldwe choose the proposal? A natural criterion is to minimize the variance of the
         estimate Iˆ = s ws f (xs ). Now
                                                       
             varq(x) [f (x)w(x)] = Eq(x) f 2 (x)w2 (x) − I 2                                        (23.21)
         Since the last term is independent of q, we can ignore it. By Jensen’s inequality, we have the
         following lower bound:
                                                                                2
                                
             Eq(x) f 2 (x)w2 (x) ≥ (Eq(x) [|f (x)w(x)|])2 =     |f (x)|p(x)dx                    (23.22)

         The lower bound is obtained when we use the optimal importance distribution:
                                 |f (x)|p(x)
            q ∗ (x) =                                                                                (23.23)
                               |f (x )|p(x )dx
             When we don’t have a particular target function f (x) in mind, we often just try to make
         q(x) as close as possible to p(x). In general, this is difficult, especially in high dimensions, but
         it is possible to adapt the proposal distribution to improve the approximation. This is known as
         adaptive importance sampling (Oh and Berger 1992).

23.4.2   Handling unnormalized distributions
         It is frequently the case that we can evaluate the unnormalized target distribution, p̃(x), but not
         its normalization constant, Zp . We may also want to use an unnormalized proposal, q̃(x), with
         possibly unknown normlization constant Zq . We can do this as follows. First we evaluate

                                                           Zq 1 
                                                                 S
                       Zq                   p̃(x)
            E [f ] =                f (x)         q(x)dx ≈          w̃s f (xs )                       (23.24)
                       Zp                   q̃(x)          Zp S s=1
                                s
                             )
         where w̃s  p̃(x
                       q̃(xs ) is the unnormalized importance weight. We can use the same set of samples
         to evaluate the ratio Zp /Zq as follows:

                                                                   1
                                                                      S
            Zp   1                                  p̃(x)
               =                 p̃(x)dx =                q(x)dx ≈       w̃s                          (23.25)
            Zq   Zq                                 q̃(x)          S s=1

         Hence
                       
                   1
                           w̃s f (xs ) 
                                                S
            Iˆ =   S
                       1
                           
                           s
                                      =     ws f (xs )                                                (23.26)
                       S     s w̃ s     s=1
         822                                                           Chapter 23. Monte Carlo inference


         where
                      w̃s
            ws                                                                                   (23.27)
                      s w̃s

         are the normalized importance weights. The resulting estimate is a ratio of two estimates, and
         hence is biased. However, as S → ∞, we have that Iˆ → I, under weak assumptions (see e.g.,
         (Robert and Casella 2004) for details).

23.4.3   Importance sampling for a DGM: likelihood weighting
         We now describe a way to use importance sampling to generate samples from a distribution
         which can be represented as a directed graphical model (Chapter 10).
            If we have no evidence, we can sample from the unconditional joint distribution of a DGM
         p(x) as follows: ﬁrst sample the root nodes, then sample their children, then sample their
         children, etc. This is known as ancestral sampling. It works because, in a DAG, we can always
         topologically order the nodes so that parents preceed children. (Note that there is no equivalent
         easy method for sampling from an unconditional undirected graphical model.)
            Now suppose we have some evidence, so some nodes are “clamped” to observed values, and
         we want to sample from the posterior p(x|D). If all the variables are discrete, we can use the
         following simple procedure: perform ancestral sampling, but as soon as we sample a value that
         is inconsistent with an observed value, reject the whole sample and start again. This is known
         as logic sampling (Henrion 1988).
            Needless to say, logic sampling is very inefficient, and it cannot be applied when we have
         real-valued evidence. However, it can be modiﬁed as follows. Sample unobserved variables as
         before, conditional on their parents. But don’t sample observed variables; instead we just use
         their observed values. This is equivalent to using a proposal of the form
                                       
             q(x) =      p(xt |xpa(t) )   δx∗t (xt )                                               (23.28)
                     t∈E              t∈E

         where E is the set of observed nodes, and x∗t is the observed value for node t. We should
         therefore give the overall sample an importance weight as follows:
                      p(x)    p(xt |xpa(t) )  p(xt |xpa(t) )   
            w(x) =         =                                   =   p(xt |xpa(t) )                  (23.29)
                      q(x)     p(xt |xpa(t) )         1
                                t∈E           t∈E                 t∈E

         This technique is known as likelihood weighting (Fung and Chang 1989; Shachter and Peot
         1989).

23.4.4   Sampling importance resampling (SIR)
         We can draw unweighted samples from p(x) by ﬁrst using importance sampling (with proposal
         q) to generate a distribution of the form
                     
             p(x) ≈      ws δxs (x)                                                         (23.30)
                      s
       23.5. Particle ﬁltering                                                                      823


       where ws are the normalized importance weights. We then sample with replacement from
       Equation 23.30, where the probability that we pick xs is ws . Let this procedure induce a
       distribution denoted by p̂. To see that this is valid, note that
                                                    
                                                         I(xs ≤ x0 )p̃(xs )/q(xs )
           p̂(x ≤ x0 ) =         I(xs ≤ x0 )ws = s                 s     s
                                                                                            (23.31)
                             s                                s p̃(x )/q(x )
                            
                               I(x ≤ x0 ) p̃(x)
                                            q(x) q(x)dx
                       →            p̃(x)                                                 (23.32)
                                      q(x) q(x)dx
                            
                               I(x ≤ x0 )p̃(x)dx
                       =                           = I(x ≤ x0 )p(x)dx = p(x ≤ x0 )        (23.33)
                                     p̃(x)dx
       This is known as sampling importance resampling (SIR) (Rubin 1998). The result is an un-
       weighted approximation of the form
                         
                 1 
                   S
          p(x) ≈     δxs (x)                                                                    (23.34)
                S s=1

       Note that we typically take S   S.
          This algorithm can be used to perform Bayesian inference in low-dimensional settings (Smith
       and Gelfand 1992). That is, suppose we want to draw (unweighted) samples from the posterior,
       p(θ|D) = p(D|θ)p(θ)/p(D). We can use importance sampling with p̃(θ) = p(D|θ)p(θ) as
       the unnormalized posterior, and q(θ) = p(θ) as our proposal. The normalized weights have the
       form
                    p̃(θ s )/q(θ s )           p(D|θ s )
          ws =                             =                                                   (23.35)
                    s p̃(θ s  )/q(θ s  )    s p(D|θ s )
                                                         


       We can then use SIR to sample from p(θ|D).
          Of course, if there is a big discrepancy between our proposal (the prior) and the target (the
       posterior), we will need a huge number of importance samples for this technique to work reliably,
       since otherwise the variance of the importance weights will be very large, implying that most
       samples carry no useful information. (This issue will come up again in Section 23.5, when we
       discuss particle ﬁltering.)

23.5   Particle ﬁltering
       Particle ﬁltering (PF) is a Monte Carlo, or simulation based, algorithm for recursive Bayesian
       inference. That is, it approximates the predict-update cycle described in Section 18.3.1. It is
       very widely used in many areas, including tracking, time-series forecasting, online parameter
       learning, etc. We explain the basic algorithm below. For a book-length treatment, see (Doucet
       et al. 2001); for a good tutorial, see (Arulampalam et al. 2002), or just read on.
         824                                                                       Chapter 23. Monte Carlo inference


23.5.1   Sequential importance sampling
         The basic idea is to appproximate the belief state (of the entire state trajectory) using a weighted
         set of particles:
                                
                                S
            p(z1:t |y1:t ) ≈           ŵts δzs1:t (z1:t )                                                   (23.36)
                                 s=1

         where ŵts is the normalized weight of sample s at time t. From this representation, we can
         easily compute the marginal distribution over the most recent state, p(zt |y1:t ), by simply
         ignoring the previous parts of the trajectory, z1:t−1 . (The fact that PF samples in the space of
         entire trajectories has various implications which we will discuss later.)
            We update this belief state using importance sampling. If the proposal has the form
         q(zs1:t |y1:t ), then the importance weights are given by
                    p(zs1:t |y1:t )
            wts ∝                                                                                             (23.37)
                    q(zs1:t |y1:t )
         which can be normalized as follows:
                    ws
            ŵts =  t s                                                                                    (23.38)
                    s w t

         We can rewrite the numerator recursively as follows:
                                       p(yt |z1:t , y1:t−1 )p(z1:t |y1:t−1 )
            p(z1:t |y1:t )     =                                                                             (23.39)
                                                   p(yt |y1:t−1 )
                                       p(yt |zt )p(zt |z1:t−1 , y1:t−1 )p(z1:t−1 |y1:t−1 )
                               =                                                                             (23.40)
                                                          p(yt |y1:t−1 )
                               ∝       p(yt |zt )p(zt |zt−1 )p(z1:t−1 |y1:t−1 )                               (23.41)
         where we have made the usual Markov assumptions. We will restrict attention to proposal
         densities of the following form:
            q(z1:t |y1:t ) = q(zt |z1:t−1 , y1:t )q(z1:t−1 |y1:t−1 )                                          (23.42)
         so that we can “grow” the trajectory by adding the new state zt to the end. In this case, the
         importance weights simplify to
                        p(yt |zst )p(zst |zst−1 )p(zs1:t−1 |y1:t−1 )
            wts   ∝                                                                                           (23.43)
                         q(zst |zs1:t−1 , y1:t )q(zs1:t−1 |y1:t−1 )
                         s       p(yt |zst )p(zst |zst−1 )
                  =     wt−1                                                                                  (23.44)
                                  q(zst |zs1:t−1 , y1:t )
         If we further assume that q(zt |z1:t−1 , y1:t ) = q(zt |zt−1 , yt ), then we only need to keep the
         most recent part of the trajectory and observation sequence, rather than the whole history, in
         order to compute the new sample. In this case, the weight becomes
                             p(yt |zst )p(zst |zst−1 )
            wts ∝ wt−1
                   s
                                                                                                              (23.45)
                               q(zst |zst−1 , yt )
         23.5. Particle ﬁltering                                                                            825


         Hence we can approximate the posterior ﬁltered density using

                             
                             S
            p(zt |y1:t ) ≈         ŵts δzst (zt )                                                       (23.46)
                             s=1

         As S → ∞, one can show that this approaches the true posterior (Crisan et al. 1999).
            The basic algorithm is now very simple: for each old sample s, propose an extension using
         zst ∼ q(zt |zst−1 , yt ), and give this new particle weight wts using Equation 23.45. Unfortunately,
         this basic algorithm does not work very well, as we discuss below.

23.5.2   The degeneracy problem
         The basic sequential importance sampling algorithm fails after a few steps because most of
         the particles will have negligible weight. This is called the degeneracy problem, and occurs
         because we are sampling in a high-dimensional space (in fact, the space is growing in size over
         time), using a myopic proposal distribution.
            We can quantify the degree of degeneracy using the effective sample size, deﬁned by
                          S
            Seff                                                                                        (23.47)
                     1 + var [wt∗s ]
         where wt∗s = p(zst |y1:t )/q(zst |zst−1 , yt ) is the “true weight” of particle s. This quantity cannot
         be computed exactly, since we don’t know the true posterior, but we can approximate it using
                             1
            Ŝeff = S                                                                                   (23.48)
                             s 2
                       s=1 (wt )

         If the variance of the weights is large, then we are wasting our resources updating particles with
         low weight, which do not contribute much to our posterior estimate.
            There are two main solutions to the degeneracy problem: adding a resampling step, and using
         a good proposal distribution. We discuss both of these in turn.

23.5.3   The resampling step
         The main improvement to the basic SIS algorithm is to monitor the effective sampling size,
         and whenever it drops below a threshold, to eliminate particles with low weight, and then
         to create replicates of the surviving particles. (Hence PF is sometimes called survival of the
         ﬁttest (Kanazawa et al. 1995).) In particular, we generate a new set {zs∗
                                                                                t }s=1 by sampling with
                                                                                   S

         replacement S times from the weighted distribution

                             
                             S
            p(zt |y1:t ) ≈         ŵts δzst (zt )                                                       (23.49)
                             s=1

         where the probability of choosing particle j for replication is wtj . (This is sometimes called
         rejuvenation.) The result is an iid unweighted sample from the discrete density Equation 23.49,
         so we set the new weights to wts = 1/S. This scheme is illustrated in Figure 23.4.
826                                                                               Chapter 23. Monte Carlo inference




                                                                            3 ] W _\ W

                              SURSRVDO
                                                                            3 ] W _\ W



                             ZHLJKWLQJ                                      3 \ W _] W




                             UHVDPSOH                                       3 ] W _\ W




                                 Figure 23.4         Illustration of particle ﬁltering.



  There are a variety of algorithms for peforming the resampling step. The simplest is multi-
nomial resampling, which computes
    (K1 , . . . , KS ) ∼ Mu(S, (wt1 , . . . , wtS ))                                                        (23.50)

We then make Ks copies of zst . Various improvements exist, such as systematic resampling
residual resampling, and stratiﬁed sampling, which can reduce the variance of the weights.
All these methods take O(S) time. See (Doucet et al. 2001) for details.
   The overall particle ﬁltering algorithm is summarized in Algorithm 6. (Note that if an estimate
of the state is required, it should be computed before the resampling step, since this will result
in lower variance.)

 Algorithm 23.1: One step of a generic particle ﬁlter
1   for s = 1 : S do
2       Draw zst ∼ q(zt |zst−1 , yt ) ;
                                            p(yt |zst )p(zst |zst−1 )
3       Compute weight wts ∝ wt−1
                              s
                                              q(zst |zst−1 ,yt )        ;
                                       wts
4   Normalize weights: wts =       
                                         wts
                                                ;
                                       s

5   Compute Ŝeff =     S 1 s 2 ;
                         s=1 (wt )

6   if Ŝeff < Smin then
7        Resample S indices π ∼ wt ;
8        z:t = zπ
                t ;
9        wts = 1/S ;


   Although the resampling step helps with the degeneracy problem, it introduces problems of
its own. In particular, since the particles with high weight will be selected many times, there is
a loss of diversity amongst the population. This is known as sample impoverishment. In the
         23.5. Particle ﬁltering                                                                         827


         extreme case of no process noise (e.g., if we have static but unknown parameters as part of the
         state space), then all the particles will collapse to a single point within a few iterations.
            To mitigate this problem, several solutions have been proposed. (1) Only resample when
         necessary, not at every time step. (The original bootstrap ﬁlter (Gordon 1993) resampled at
         every step, but this is suboptimal.) (2) After replicating old particles, sample new values using
         an MCMC step which leaves the posterior distribution invariant (see e.g., the resample-move
         algorithm in (Gilks and Berzuini 2001)). (3) Create a kernel density estimate on top of the
         particles,

                             
                             S
            p(zt |y1:t ) ≈         wts κ(zt − zst )                                                   (23.51)
                             s=1

         where κ is some smoothing kernel. We then sample from this smoothed distribution. This is
         known as a regularized particle ﬁlter (Musso et al. 2001). (4) When performing inference on
         static parameters, add some artiﬁcial process noise. (If this is undesirable, other algorithms must
         be used for online parameter estimation, e.g., (Andrieu et al. 2005)).

23.5.4   The proposal distribution
         The simplest and most widely used proposal distribution is to sample from the prior:

            q(zt |zst−1 , yt ) = p(zt |zst−1 )                                                        (23.52)

         In this case, the weight update simpliﬁes to
            wts ∝ wt−1
                   s
                       p(yt |zst )                                                                    (23.53)

         This can be thought of a “generate and test” approach: we sample values from the dynamic
         model, and then evaluate how good they are after we see the data (see Figure 23.4). This
         is the approach used in the condensation algorithm (which stands for “conditional density
         propagation”) used for visual tracking (Isard and Blake 1998). However, if the likelihood is
         narrower than the dynamical prior (meaning the sensor is more informative than the motion
         model, which is often the case), this is a very inefficient approach, since most particles will be
         assigned very low weight.
            It is much better to actually look at the data yt when generating a proposal. In fact, the
         optimal proposal distribution has the following form:
                                                        p(yt |zt )p(zt |zst−1 )
            q(zt |zst−1 , yt ) = p(zt |zst−1 , yt ) =                                                 (23.54)
                                                           p(yt |zst−1 )
         If we use this proposal, the new weight is given by

            wts ∝ wt−1
                   s
                       p(yt |zst−1 ) = wt−1
                                        s
                                                      p(yt |zt )p(zt |zst−1 )dzt                   (23.55)

         This proposal is optimal since, for any given zst−1 , the new weight wts takes the same value
         regardless of the value drawn for zst . Hence, conditional on the old values z.t−1 , the variance of
         true weights var [wt∗s ], is zero.
         828                                                              Chapter 23. Monte Carlo inference


            In general, it is intractable to sample from p(zt |zst−1 , yt ) and to evaluate the integral needed
         to compute the predictive density p(yt |zst−1 ). However, there are two cases when the optimal
         proposal distribution can be used. The ﬁrst setting is when zt is discrete, so the integral becomes
         a sum. Of course, if the entire state space is discrete, we can use an HMM ﬁlter instead, but
         in some cases, some parts of the state are discrete, and some continuous. The second setting
         is when p(zt |zst−1 , yt ) is Gaussian. This occurs when the dynamics are nonlinear but the
         observations are linear. See Exercise 23.3 for the details.
            In cases where the model is not linear-Gaussian, we may still compute a Gaussian approxima-
         tion to p(zt |zst−1 , yt ) using the unscented transform (Section 18.5.2) and use this as a proposal.
         This is known as the unscented particle ﬁlter (van der Merwe et al. 2000). In more general
         settings, we can use other kinds of data-driven proposals, perhaps based on discriminative
         models. Unlike MCMC, we do not need to worry about the proposals being reversible.

23.5.5   Application: robot localization
         Consider a mobile robot wandering around an office environment. We will assume that it already
         has a map of the world, represented in the form of an occupancy grid, which just speciﬁes
         whether each grid cell is empty space or occupied by an something solid like a wall. The goal
         is for the robot to estimate its location. This can be solved optimally using an HMM ﬁlter, since
         we are assuming the state space is discrete. However, since the number of states, K, is often
         very large, the O(K 2 ) time complexity per update is prohibitive. We can use a particle ﬁlter as
         a sparse approximation to the belief state. This is known as Monte Carlo localization, and is
         described in detail in (Thrun et al. 2006).
            Figure 23.5 gives an example of the method in action. The robot uses a sonar range ﬁnder,
         so it can only sense distance to obstacles. It starts out with a uniform prior, reﬂecting the fact
         that the owner of the robot may have turned it on in an arbitrary location. (Figuring out where
         you are, starting from a uniform prior, is called global localization.) After the ﬁrst scan, which
         indicates two walls on either side, the belief state is shown in (b). The posterior is still fairly
         broad, since the robot could be in any location where the walls are fairly close by, such as a
         corridor or any of the narrow rooms. After moving to location 2, the robot is pretty sure it must
         be in the corridor, as shown in (c). After moving to location 3, the sensor is able to detect the
         end of the corridor. However, due to symmetry, it is not sure if it is in location I (the true
         location) or location II. (This is an example of perceptual aliasing, which refers to the fact that
         different things may look the same.) After moving to locations 4 and 5, it is ﬁnally able to ﬁgure
         out precisely where it is. The whole process is analogous to someone getting lost in an office
         building, and wandering the corridors until they see a sign they recognize.
            In Section 23.6.3, we discuss how to estimate location and the map at the same time.

23.5.6   Application: visual object tracking
         Our next example is concerned with tracking an object (in this case, a remote-controlled heli-
         copter) in a video sequence. The method uses a simple linear motion model for the centroid
         of the object, and a color histogram for the likelihood model, using Bhattacharya distance to
         compare histograms. The proposal distribution is obtained by sampling from the likelihood. See
         (Nummiaro et al. 2003) for further details.
23.5. Particle ﬁltering                                                                                      829


              (a) Path and reference poses                      (b) Belief at reference pose 1


                             Room A




                                 4                 3
                      5
                                     Start   1              2




                                                 Room C
                             Room B




              (c) Belief at reference pose 2                    (d) Belief at reference pose 3




                                                                                                 I
                                                                                      II




              (e) Belief at reference pose 4                    (f) Belief at reference pose 5




                                 I
                                                       II




Figure 23.5 Illustration of Monte Carlo localization.           Source: Figure 8.7 of (Thrun et al. 2006).   Used
with kind permission of Sebastian Thrun.



   Figure 23.6 shows some example frames. The system uses S = 250 particles, with an effective
sample size of Ŝeff = 134. (a) shows the belief state at frame 1. The system has had to resample
5 times to keep the effective sample size above the threshold of 150; (b) shows the belief state
at frame 251; the red lines show the estimated location of the center of the object over the last
250 frames. (c) shows that the system can handle visual clutter, as long as it does not have the
same color as the target object. (d) shows that the system is confused between the grey of the
helicopter and the grey of the building. The posterior is bimodal. The green ellipse, representing
the posterior mean and covariance, is in between the two modes. (e) shows that the probability
mass has shifted to the wrong mode: the system has lost track. (f) shows the particles spread
out over the gray building; recovery of the object is very unlikely from this state using this
830                                                                      Chapter 23. Monte Carlo inference




                                 (a)                                          (b)




                                 (c)                                          (d)




                                 (e)                                          (f)

Figure 23.6 Example of particle ﬁltering applied to visual object tracking, based on color histograms.
(a-c) succesful tracking: green ellipse is on top of the helicopter. (d-f): tracker gets distracted by gray clutter
in the background. See text for details. Figure generated by pfColorTrackerDemo, written by Sebastien
Paris.


proposal.
   We see that the method is able to keep track for a fairly long time, despite the presence
of clutter. However, eventually it loses track of the object. Note that since the algorithm is
stochastic, simply re-running the demo may ﬁx the problem. But in the real world, this is not
an option. The simplest way to improve performance is to use more particles. An alternative
is to perform tracking by detection, by running an object detector over the image every few
frames. See (Forsyth and Ponce 2002; Szeliski 2010; Prince 2012) for details.
         23.6. Rao-Blackwellised particle ﬁltering (RBPF)                                                   831


23.5.7   Application: time series forecasting
         In Section 18.2.4, we discussed how to use the Kalman ﬁlter to perform time series forecasting.
         This assumes that the model is a linear-Gaussian state-space model. There are many models
         which are either non-linear and/or non-Gaussian. For example, stochastic volatility models,
         which are widely used in ﬁnance, assume that the variance of the system and/or observation
         noise changes over time. Particle ﬁltering is widely used in such settings. See e.g., (Doucet et al.
         2001) and references therein for details.

 23.6    Rao-Blackwellised particle ﬁltering (RBPF)
         In some models, we can partition the hidden variables into two kinds, qt and zt , such that
         we can analytically integrate out zt provided we know the values of q1:t . This means we only
         have sample q1:t , and can represent p(zt |q1:t ) parametrically. Thus each particle s represents
         a value for qs1:t and a distribution of the form p(zt |y1:t , qs1:t ). These hybrid particles are are
         sometimes called distributional particles or collapsed particles (Koller and Friedman 2009,
         Sec 12.4).
           The advantage of this approach is that we reduce the dimensionality of the space in which
         we are sampling, which reduces the variance of our estimate. Hence this technique is known
         as Rao-Blackwellised particle ﬁltering or RBPF for short, named after Theorem 24.20. The
         method is best explained using a speciﬁc example.

23.6.1   RBPF for switching LG-SSMs
         A canonical example for which RBPF can be applied is the switching linear dynamical system
         (SLDS) model discussed in Section 18.6 (Chen and Liu 2000; Doucet et al. 2001). We can represent
         p(zt |y1:t , qs1:t ) using a mean and covariance matrix for each particle s, where qt ∈ {1, . . . , K}.
                                                        s
            If we propose from the prior, q(qt = k|qt−1    ), the weight update becomes
            wts ∝ wt−1
                   s
                       p(yt |qt = k, qs1:t−1 , y1:t−1 ) = wt−1
                                                           s
                                                               Lst,k                                     (23.56)
         where

            Lstk   =       p(yt |qt = k, zt ,         )p(zt |qt = k, y1:t−1 qs1:t−1 , )dzt
                                                , qs1:t−1
                                              y1:t−1                                                     (23.57)
                                                     
         The quantity Lstk is the predictive density for the new observation yt conditioned on qt = k and
         the history qs1:t−1 . In the case of SLDS models, this can be computed using the normalization
         constant of the Kalman ﬁlter, Equation 18.41.
            We give some pseudo-code in Algorithm 8. (The step marked “KFupdate” refers to the Kalman
         ﬁlter update equations in Section 18.3.1.) This is known as a mixture of Kalman ﬁlters.
            If K is small, we can compute the optimal proposal distribution, which is
            p(qt = k|y1:t , qs1:t−1 )   =   p̂st−1 (qt = k|yt )                                          (23.58)
                                            p̂st−1 (yt |qt = k)p̂st−1 (qt = k)
                                        =                                                                (23.59)
                                                          p̂st−1 (yt )
                                                               s
                                                Lstk p(qt = k|qt−1 )
                                        =          s p(q = k  |q s )                                   (23.60)
                                                  L
                                                k tk    t       t−1
         832                                                                   Chapter 23. Monte Carlo inference


          Algorithm 23.2: One step of RBPF for SLDS using prior as proposal
          1   for s = 1 : S do
         2        k ∼ p(qt |qt−1s
                                      );
                   s
         3        qt := k;
         4        (μst , Σst , Lstk ) = KFupdate(μst−1 , Σst−1 , yt , θ k );
         5        wts = wt−1 s
                                  Lkts ;
                                                 wts
         6    Normalize weights: wts =              s   ;
                                                 s wt

         7    Compute Ŝeff = S 1(ws )2 ;
                                    s=1   t

         8    if Ŝeff < Smin then
         9         Resample S indices π ∼ wt ;
                                            :    π
         10        q:t = qπ     :     π
                          t , μ t = μ t , Σ t = Σt , ;
         11        wts = 1/S ;



         where we use the following shorthand:
              p̂st−1 (·) = p(·|y1:t−1 , qs1:t−1 )                                                         (23.61)
              We then sample from p(qt |qs1:t−1 , y1:t ) and give the resulting particle weight
                                                                                  
              wts ∝ wt−1
                      s
                         p(yt |qs1:t−1 , y1:t−1 ) = wt−1
                                                     s                        s
                                                              Lstk p(qt = k|qt−1 )                       (23.62)
                                                                 k

         Since the weights of the particles in Equation 23.62 are independent of the new value that is
         actually sampled for qt , we can compute these weights ﬁrst, and use them to decide which
         particles to propagate. That is, we choose the ﬁttest particles at time t − 1 using information
         from time t. This is called look-ahead RBPF (de Freitas et al. 2004).
            In more detail, the idea is this. We pass each sample in the prior through all K models
         to get K posteriors, one per sample. The normalization constants of this process allow us to
         compute the optimal weights in Equation 23.62. We then resample S indices. Finally, for each
         old particle s that is chosen, we sample one new state qts = k, and use the corresponding
         posterior from the K possible alternative that we have already computed. The pseudo-code is
         shown in Algorithm 7. This method needs O(KS) storage, but has the advantage that each
         particle is chosen using the latest information, yt .
            A further improvement can be obtained by exploiting the fact that the state space is discrete.
         Hence we can use the resampling method of (Fearnhead 2004) which avoids duplicating particles.

23.6.2   Application: tracking a maneuvering target
         One application of SLDS is to track moving objects that have piecewise linear dynamics. For
         example, suppose we want to track an airplane or missile; qt can specify if the object is ﬂying
         normally or is taking evasive action. This is called maneuvering target tracking.
           Figure 23.7 gives an example of an object moving in 2d. The setup is essentially the same
         as in Section 18.2.1, except that we add a three-state discrete Markov chain which controls the
23.6. Rao-Blackwellised particle ﬁltering (RBPF)                                                  833


 Algorithm 23.3: One step of look-ahead RBPF for SLDS using optimal proposal
 1   for s = 1 : S do
2        for k = 1 : K do
3            (μstk , Σstk , Lkts ) = KFupdate(μst−1 , Σst−1 , yt , θ k );
                        
4
                  s
         wts = wt−1   [ k Lkts p(qt = k|qt−1s
                                               )];
                                        wts
5    Normalize weights: wts =              s   ;
                                        s wt
6    Resample S indices π ∼ wt ;
7    for s ∈ π do
                                                                                     s
                                                                      Lstk p(qt =k|qt−1  )
8        Compute optimal proposal p(k|qs1:t−1 , y1:t ) =          
                                                                         Lstk p(qt =k|qt−1
                                                                                       s   );
                                                                      k

9        Sample k ∼ p(k|qs1:t−1 , y1:t );
10       qts = k, μst = μstk , Σst = Σstk ;
11       wts = 1/S;


                        Method       misclassiﬁcation rate       MSE         Time (seconds)
                        PF           0.440                       21.051      6.086
                        RBPF         0.340                       18.168      10.986

          Table 23.1 Comparison of PF an RBPF on the maneuvering target problem in Figure 23.7.



input to the system. We deﬁne ut = 1 and set

B1 = (0, 0, 0, 0)T , B2 = (−1.225, −0.35, 1.225, 0.35)T , B3 = (1.225, 0.35, −1.225, −0.35)T

so the system will turn in different directions depending on the discrete state.
   Figure 23.7(a) shows the true state of the system from a sample run, starting at (0, 0): the
colored symbols denote the discrete state, and the location of the symbol denotes the (x, y)
location. The small dots represent noisy observations. Figure 23.7(b) shows the estimate of
the state computed using particle ﬁltering with 500 particles, where the proposal is to sample
from the prior. The colored symbols denote the MAP estimate of the state, and the location of
the symbol denotes the MMSE (minimum mean square error) estimate of the location, which is
given by the posterior mean. Figure 23.7(c) shows the estimate computing using RBPF with 500
particles, using the optimal proposal distribution. A more quantitative comparison is shown in
Table 23.1. We see that RBPF has slightly better performance, although it is also slightly slower.
   Figure 23.8 visualizes the belief state of the system. In (a) we show the distribution over the
discrete states. We see that the particle ﬁlter estimate of the belief state (second column) is not
as accurate as the RBPF estimate (third column) in the beginning, although after the ﬁrst few
observations performance is similar for both methods. In (b), we plot the posterior over the x
locations. For simplicity, we use the PF estimate, which is a set of weighted samples, but we
could also have used the RBPF estimate, which is a set of weighted Gaussians.
         834                                                                                             Chapter 23. Monte Carlo inference


                                         data                                                                        pf, mse 21.051
           50                                                                               50



            0                                                                                 0



         −50                                                                               −50



         −100                                                                             −100



         −150                                                                             −150



         −200                                                                             −200



         −250                                                                             −250
           −90   −80   −70   −60   −50      −40        −30    −20   −10    0                −80    −70   −60   −50       −40      −30   −20   −10   0

                                     (a)                                                                                (b)
                                                                               rbpf, mse 18.168
                                                  50



                                                   0



                                                −50



                                                −100



                                                −150



                                                −200



                                                −250
                                                  −80        −70    −60   −50       −40      −30   −20   −10    0

                                                                                   (c)

         Figure 23.7 (a) A maneuvering target. The colored symbols represent the hidden discrete state. (b)
         Particle ﬁlter estimate. (c) RBPF estimate. Figure generated by rbpfManeuverDemo, based on code by
         Nando de Freitas.


23.6.3   Application: Fast SLAM
         In Section 18.2.2, we introduced the problem of simultaneous localization and mapping or SLAM
         for mobile robotics. The main problem with the Kalman ﬁlter implementation is that it is cubic
         in the number of landmarks. However, by looking at the DGM in Figure 18.2, we see that,
         conditional on knowing the robot’s path, q1:t , where qt ∈ R2 , the landmark locations z ∈ R2L
         are independent. (We assume the landmarks don’t move, so we drop the t subscript). That is,
                             L
         p(z|q1:t , y1:t ) = l=1 p(zl |q1:t , y1:t ). Consequently we can use RBPF, where we sample the
         robot’s trajectory, q1:t , and we run L independent 2d Kalman ﬁlters inside each particle. This
         takes O(L) time per particle. Fortunately, the number of particles needed for good performance
         is quite small (this partly depends on the control / exploration policy), so the algorithm is
         essentially linear in the number of particles. This technique has the additional advantage that
23.6. Rao-Blackwellised particle ﬁltering (RBPF)                                                                                                                                       835

                       truth             pf, error rate 0.440         rbpf, error rate 0.340                                                           PF


              10                    10                           10

              20                    20                           20




                                                                                               p(x1,t|y1:t)
              30                    30                           30                                             1
                                                                                                              0.5
              40                    40                           40                                             0
                                                                                                          100
              50                    50                           50
                                                                                                                    80
              60                    60                           60
                                                                                                                         60
              70                    70                           70                                                                                                              0

                                                                                                                                  40                                       −20
              80                    80                           80
                                                                                                                                                                     −40
                                                                                                                                       20
              90                    90                           90                                                                                         −60
                                                                                                                              t
             100                   100                          100                                                                         0   −80               x1,t
                   1    2      3           1      2      3               1      2      3


                                               (a)                                                                                               (b)

Figure 23.8 Belief states corresponding to Figure 23.7. (a) Discrete state. The system starts in state
2 (red x in Figure 23.7), then moves to state 3 (black * in Figure 23.7), returns brieﬂy to state 2, then
switches to state 1 (blue circle in Figure 23.7), etc. (b) Horizontal location (PF estimate). Figure generated
by rbpfManeuverDemo, based on code by Nando de Freitas.



it is easy to use sampling to handle the data association ambiguity, and that it allows for other
representations of the map, such as occupancy grids. This idea was ﬁrst suggested in (Murphy
2000), and was subsequently extended and made practical in (Thrun et al. 2004), who christened
the technique FastSLAM. See rbpfSlamDemo for a simple demo in a discrete grid world.

Exercises
Exercise 23.1 Sampling from a Cauchy
Show how to use inverse probability transform to sample from a standard Cauchy, T (x|0, 1, 1).
Exercise 23.2 Rejection sampling from a Gamma using a Cauchy proposal
Show how to use a Cauchy proposal to perform rejection sampling from a Gamma distribution. Derive the
optimal constant M , and plot the density and its upper envelope.
Exercise 23.3 Optimal proposal for particle ﬁltering with linear-Gaussian measurement model
Consider a state-space model of the following form:
   zt    =     ft (zt−1 ) + N (0, Qt−1 )                                                                                                                                             (23.63)
   yt    =     Ht zt + N (0, Rt )                                                                                                                                                    (23.64)
Derive expressions for p(zt |zt−1 , yt ) and p(yt |zt−1 ), which are needed to compute the optimal (minimum
variance) proposal distribution. Hint: use Bayes rule for Gaussians.
24      Markov chain Monte Carlo (MCMC)
        inference



 24.1   Introduction
        In Chapter 23, we introduced some simple Monte Carlo methods, including rejection sampling
        and importance sampling. The trouble with these methods is that they do not work well in high
        dimensional spaces. The most popular method for sampling from high-dimensional distributions
        is Markov chain Monte Carlo or MCMC. In a survey by SIAM News1 , MCMC was placed in the
        top 10 most important algorithms of the 20th century.
            The basic idea behind MCMC is to construct a Markov chain (Section 17.2) on the state space
        X whose stationary distribution is the target density p∗ (x) of interest (this may be a prior or a
        posterior). That is, we perform a random walk on the state space, in such a way that the fraction
        of time we spend in each state x is proportional to p∗ (x). By drawing (correlated!) samples
        x0 , x1 , x2 , . . . , from the chain, we can perform Monte Carlo integration wrt p∗ . We give the
        details below.
            The MCMC algorithm has an interesting history. It was discovered by physicists working
        on the atomic bomb at Los Alamos during World War II, and was ﬁrst published in the open
        literature in (Metropolis et al. 1953) in a chemistry journal. An extension was published in
        the statistics literature in (Hastings 1970), but was largely unnoticed. A special case (Gibbs
        sampling, Section 24.2) was independently invented in 1984 in the context of Ising models and
        was published in (Geman and Geman 1984). But it was not until (Gelfand and Smith 1990) that
        the algorithm became well-known to the wider statistical community. Since then it has become
        wildly popular in Bayesian statistics, and is becoming increasingly popular in machine learning.
            It is worth brieﬂy comparing MCMC to variational inference (Chapter 21). The advantages
        of variational inference are (1) for small to medium problems, it is usually faster; (2) it is
        deterministic; (3) is it easy to determine when to stop; (4) it often provides a lower bound on
        the log likelihood. The advantages of sampling are: (1) it is often easier to implement; (2) it
        is applicable to a broader range of models, such as models whose size or structure changes
        depending on the values of certain variables (e.g., as happens in matching problems), or models
        without nice conjugate priors; (3) sampling can be faster than variational methods when applied
        to really huge models or datasets.2

        1. Source: http://www.siam.org/pdf/news/637.pdf.
        2. The reason is that sampling passes speciﬁc values of variables (or sets of variables), whereas in variational inference,
        we pass around distributions. Thus sampling passes sparse messages, whereas variational inference passes dense
        messages For comparisons of the two approaches, see e.g., (Yoshida and West 2010) and articles in (Bekkerman et al.
         838                                             Chapter 24. Markov chain Monte Carlo (MCMC) inference


 24.2    Gibbs sampling
         In this section, we present one of the most popular MCMC algorithms, known as Gibbs sam-
         pling.3 (In physics, this method is known as Glauber dynamics or the heat bath method.) This
         is the MCMC analog of coordinate descent.

24.2.1   Basic idea
         The idea behind Gibbs sampling is that we sample each variable in turn, conditioned on the
         values of all the other variables in the distribution. That is, given a joint sample xs of all the
         variables, we generate a new sample xs+1 by sampling each component in turn, based on the
         most recent values of the other variables. For example, if we have D = 3 variables, we use
         • xs+1
            1   ∼ p(x1 |xs2 , xs3 )

         • xs+1
            2   ∼ p(x2 |xs+1  s
                         1 , x3 )

         • xs+1
            3   ∼ p(x3 |xs+1  s+1
                         1 , x2 )

         This readily generalizes to D variables. If xi is a visible variable, we do not sample it, since its
         value is already known.
            The expression p(xi |x−i ) is called the full conditional for variable i. In general, xi may only
         depend on some of the other variables. If we represent p(x) as a graphical model, we can infer
         the dependencies by looking at i’s Markov blanket, which are its neighbors in the graph. Thus
         to sample xi , we only need to know the values of i’s neighbors. In this sense, Gibbs sampling
         is a distributed algorithm. However, it is not a parallel algorithm, since the samples must be
         generated sequentially.
            For reasons that we will explain in Section 24.4.1, it is necessary to discard some of the
         initial samples until the Markov chain has burned in, or entered its stationary distribution. We
         discuss how to estimate when burnin has occured in Section 24.4.1. In the examples below, we
         just discard the initial 25% of the samples, for simplicity.

24.2.2   Example: Gibbs sampling for the Ising model
         In Section 21.3.2, we applied mean ﬁeld to an Ising model. Here we apply Gibbs sampling.
            Gibbs sampling in pairwise MRF/CRF takes the form
                                
            p(xt |x−t , θ) ∝         ψst (xs , xt )                                               (24.1)
                                s∈nbr(t)

         In the case of an Ising model with edge potentials ψ(xs , xt ) = exp(Jxs xt ), where xt ∈

         2011)
         3. Josiah Willard Gibbs, 1839–1903, was an American physicist.
24.2. Gibbs sampling                                                                                                            839

                   sample 1, Gibbs                             sample 5, Gibbs          mean after 15 sweeps of Gibbs
                                             1                                   1                                      1



                                             0.5                                 0.5                                    0.5




                                             0                                   0                                      0




                                             −0.5                                −0.5                                   −0.5




                                             −1                                  −1                                     −1



                          (a)                                         (b)                             (c)

Figure 24.1 Example of image denoising. We use an Ising prior with Wij = J = 1 and a Gaussian
noise model with σ = 2. We use Gibbs sampling (Section 24.2) to perform approximate inference. (a)
Sample from the posterior after one sweep over the image. (b) Sample after 5 sweeps. (c) Posterior mean,
computed by averaging over 15 sweeps. Compare to Figure 21.3 which shows the results of using mean
ﬁeld inference. Figure generated by isingImageDenoiseDemo.



{−1, +1}, the full conditional becomes
                                                              
                                                                    ψst (xt = +1, xs )
                                                                    s∈nbr(t)
   p(xt = +1|x−t , θ)                =                                                                                       (24.2)
                                               s∈nbr(t) ψ(st = +1, xs ) +   s∈nbr(t) ψ(xt = −1, xs )
                                                               
                                                          exp[J s∈nbr(t) xs ]
                                     =                                                                                       (24.3)
                                             exp[J s∈nbr(t) xs ] + exp[−J s∈nbr(t) xs ]
                                      exp[Jηt ]
                                     =                   = sigm(2Jηt )                        (24.4)
                                exp[Jηt ] + exp[−Jηt ]
                                          
where J is the coupling strength, ηt  s∈nbr(t) xt and sigm(u) = 1/(1 + e−u ) is the sigmoid
function. It is easy to see that ηt = xt (at − dt ), where at is the number of neighbors that agree
with (have the same sign as) t, and dt is the number of neighbors who disagree. If this number
is equal, the “forces” on xt cancel out, so the full conditional is uniform.
   We can combine an Ising prior with a local evidence term ψt . For example, with a Gaussian
observation model, we have ψt (xt ) = N (yt |xt , σ 2 ). The full conditional becomes
                                                              exp[Jηt ]ψt (+1)
   p(xt = +1|x−t , y, θ)                 =                                                                                     (24.5)
                                                    exp[Jηt ]ψt (+1) + exp[−Jηt ]ψt (−1)
                                                        
                                                                      ψt (+1)
                                         =          sigm 2Jηt − log                                                            (24.6)
                                                                      ψt (−1)
Now the probability of xt entering each state is determined both by compatibility with its
neighbors (the Ising prior) and compatibility with the data (the local likelihood term).
  See Figure 24.1 for an example of this algorithm applied to a simple image denoising problem.
The results are similar to mean ﬁeld (Figure 21.3) except that the ﬁnal estimate (based on
averaging the samples) is somewhat “blurrier”, due to the fact that mean ﬁeld tends to be
over-conﬁdent.
         840                                         Chapter 24. Markov chain Monte Carlo (MCMC) inference


24.2.3   Example: Gibbs sampling for inferring the parameters of a GMM
         It is straightforward to derive a Gibbs sampling algorithm to “ﬁt” a mixture model, especially
         if we use conjugate priors. We will focus on the case of mixture of Gaussians, although the
         results are easily extended to other kinds of mixture models. (The derivation, which follows from
         the results of Section 4.6, is much easier than the corresponding variational Bayes algorithm in
         Section 21.6.1.)
            Suppose we use a semi-conjugate prior. Then the full joint distribution is given by
                                                                    
                                                                    K
            p(x, z, μ, Σ, π)   =     p(x|z, μ, Σ)p(z|π)p(π)               p(μk )p(Σk )               (24.7)
                                                                    k=1
                                       N 
                                        K
                                                                          I(zi =k)
                               =                  (πk N (xi |μk , Σk ))              ×               (24.8)
                                       i=1 k=1

                                                    
                                                    K
                                     Dir(π|α)             N (μk |m0 , V0 )IW(Σk |S0 , ν0 )           (24.9)
                                                    k=1

         We use the same prior for each mixture component. The full conditionals are as follows. For
         the discrete indicators, we have
            p(zi = k|xi , μ, Σ, π)     ∝      πk N (xi |μk , Σk )                                   (24.10)
         For the mixing weights, we have (using results from Section 3.4)
                                        
                                        N
            p(π|z)   =    Dir({αk +           I(zi = k)}K
                                                        k=1 )                                       (24.11)
                                        i=1

         For the means, we have (using results from Section 4.6.1)
            p(μk |Σk , z, x)   =     N (μk |mk , Vk )                                               (24.12)
                      Vk−1     =     V0−1 + Nk Σ−1k                                                 (24.13)
                         mk    =     Vk (Σ−1
                                           k N k x k +      V0−1 m0 )                               (24.14)
                                     
                                     N
                         Nk             I(zi = k)                                                  (24.15)
                                     i=1
                                     N
                                              I(zi = k)xi
                         xk            i=1
                                                                                                    (24.16)
                                               Nk
         For the covariances, we have (using results from Section 4.6.2)
            p(Σk |μk , z, x)   =     IW(Σk |Sk , νk )                                               (24.17)
                                            
                                            N
                         Sk    =     S0 +         I(zi = k)(xi − μk )(xi − μk )T                    (24.18)
                                            i=1
                         νk    =     ν 0 + Nk                                                       (24.19)
            See gaussMissingFitGibbs for some Matlab code. (This code can also sample missing
         values for x, if necessary.)
           24.2. Gibbs sampling                                                                            841


24.2.3.1   Label switching
           Although it is simple to implement, Gibbs sampling for mixture models has a fundamental
           weakness. The problem is that the parameters of the model θ, and the indicator functions z, are
           unidentiﬁable, since we can arbitrarily permute the hidden labels without affecting the likelihood
           (see Section 11.3.1). Consequently, we cannot just take a Monte Carlo average of the samples to
           compute posterior means, since what one sample considers the parameters for cluster 1 may be
           what another sample considers the parameters for cluster 2. Indeed, if we could average over
           all modes, we would ﬁnd E [μk |D] is the same for all k (assuming a symmetric prior). This is
           called the label switching problem.
              This problem does not arise in EM or VBEM, which just “lock on” to a single mode. However,
           it arises in any method that visits multiple modes. In 1d problems, one can try to prevent this
           problem by introducing constraints on the parameters to ensure identiﬁability, e.g., μ1 < μ2 <
           μ3 (Richardson and Green 1997). However, this does not always work, since the likelihood might
           overwhelm the prior and cause label switching anyway. Furthermore, this technique does not
           scale to higher dimensions. Another approach is to post-process the samples by searching for a
           global label permutation to apply to each sample that minimizes some loss function (Stephens
           2000); however, this can be slow.
              Perhaps the best solution is simply to “not ask” questions that cannot be uniquely identiﬁed.
           For example, instead of asking for the probability that data point i belongs to cluster k, ask
           for the probability that data points i and j belong to the same cluster. The latter question is
           invariant to the labeling. Furthermore, it only refers to observable quantities (are i and j grouped
           together or not), rather than referring to unobservable quantities, such as latent clusters. This
           approach has the further advantage that it extends to inﬁnite mixture models, discussed in
           Section 25.2, where K is unbounded; in such models, the notion of a hidden cluster is not well
           deﬁned, but the notion of a partitioning of the data is well deﬁned

24.2.4     Collapsed Gibbs sampling *
           In some cases, we can analytically integrate out some of the unknown quantities, and just
           sample the rest. This is called a collapsed Gibbs sampler, and it tends to be much more
           efficient, since it is sampling in a lower dimensional space.
              More precisely, suppose we sample z and integrate out θ. Thus the θ parameters do not
           participate in the Markov chain; consequently we can draw conditionally independent samples
           θ s ∼ p(θ|zs , D), which will have much lower variance than samples drawn from the joint state
           space (Liu et al. 1994). This process is called Rao-Blackwellisation, named after the following
           theorem:
           Theorem 24.2.1 (Rao-Blackwell). Let z and θ be dependent random variables, and f (z, θ) be
           some scalar function. Then
              varz,θ [f (z, θ)] ≥ varz [Eθ [f (z, θ)|z]]                                                (24.20)
              This theorem guarantees that the variance of the estimate created by analytically integrating
           out θ will always be lower (or rather, will never be higher) than the variance of a direct MC
           estimate. In collapsed Gibbs, we sample z with θ integrated out; the above Rao-Blackwell
           theorem still applies in this case (Liu et al. 1994).
           842                                             Chapter 24. Markov chain Monte Carlo (MCMC) inference


                                               α
                                                                                      α
                                               π


                                        z1     zi     zN              z1        zi        zN

                                        x1     xi     xN             x1        xi         xN

                                               θK


                                               β
                                                                                      β

                                             (a)                                (b)

                          Figure 24.2 (a) A mixture model. (b) After integrating out the parameters.



              We will encounter Rao-Blackwellisation again in Section 23.6. Although it can reduce statistical
           variance, it is only worth doing if the integrating out can be done quickly, otherwise we will not
           be able to produce as many samples per second as the naive method. We give an example of
           this below.

24.2.4.1   Example: collapsed Gibbs for ﬁtting a GMM
           Consider a GMM with a fully conjugate prior. In this case we can analytically integrate out the
           model parameters μk , Σk and π, and just sample the indicators z. Once we integrate out π,
           all the zi nodes become inter-dependent. Similarly, once we integrate out θ k , all the xi nodes
           become inter-dependent, as shown in Figure 24.2(b). Nevertheless, we can easily compute the
           full conditionals as follows:

              p(zi = k|z−i , x, α, β)                            β)p(x|zi = k, z−i , 
                                             ∝ p(zi = k|z−i , α,                    α, β)                (24.21)
                                             ∝ p(zi = k|z−i , α)p(xi |x−i , zi = k, z−i , β)
                                                         =
                                                      zi 
                                               p(x−i |    k, z−i , β)                                    (24.22)
                                             ∝      p(zi = k|z−i , α)p(xi |x−i , zi = k, z−i , β)         (24.23)
           where β = (m0 , V0 , S0 , ν0 ) are the hyper-parameters for the class-conditional densities. The
           ﬁrst term can be obtained by integrating out π. Suppose we use a symmetric prior of the form
           π ∼ Dir(α), where αk = α/K. From Equation 5.26 we have

                                          Γ(α)  Γ(Nk + α/K)
                                                 K
              p(z1 , . . . , zN |α) =                                                                     (24.24)
                                        Γ(N + α)   Γ(α/K)
                                                     k=1
24.2. Gibbs sampling                                                                              843


Hence
                                                         1
                                p(z1:N |α)            Γ(N +α)         Γ(Nk + α/K)
    p(zi = k|z−i , α)    =                 =             1       ×                             (24.25)
                                p(z−i |α)            Γ(N +α−1)
                                                                     Γ(Nk,−i + α/K)
                                Γ(N + α − 1) Γ(Nk,−i + 1 + α/K)   Nk,−i + α/K
                         =                                      =                              (24.26)
                                  Γ(N + α)     Γ(Nk,−i + α/K)      N +α−1
                 
where Nk,−i  n=i I(zn = k) = Nk − 1, and where we exploited the fact that Γ(x + 1) =
xΓ(x).
  To obtain the second term in Equation 24.23, which is the posterior predictive distribution for
xi given all the other data and all the assignments, we use the fact that
    p(xi |x−i , z−i , zi = k, β) = p(xi |D−i,k )                                               (24.27)
where D−i,k = {xj : zj = k, j = i} is all the data assigned to cluster k except for xi . If we
use a conjugate prior for θ k , we can compute p(xi |D−i,k ) in closed form. Furthermore, we can
efficiently update these predictive likelihoods by caching the sufficient statistics for each cluster.
To compute the above expression, we remove xi ’s statistics from its current cluster (namely zi ),
and then evaluate xi under each cluster’s posterior predictive. Once we have picked a new
cluster, we add xi ’s statistics to this new cluster.
   Some pseudo-code for one step of the algorithm is shown in Algorithm 1, based on (Sud-
derth 2006, p94). (We update the nodes in random order to improve the mixing time, as
suggested in (Roberts and Sahu 1997).) We can initialize the sample by sequentially sampling
from p(zi |z1:i−1 , x1:i ). (See fmGibbs for some Matlab code, by Yee-Whye Teh.) In the case of
GMMs, both the naive sampler and collapsed sampler take O(N KD) time per step.

 Algorithm 24.1: Collapsed Gibbs sampler for a mixture model
1   for each i = 1 : N in random order do
2       Remove xi ’s sufficient statistics from old cluster zi ;
3       for each k = 1 : K do
4           Compute pk (xi )  p(xi |{xj : zj = k, j = i}) ;
5       Compute p(zi = k|z−i , D) ∝ (Nk,−i + α/K)pk (xi );
6       Sample zi ∼ p(zi |·) ;
7       Add xi ’s sufficient statistics to new cluster zi


  A comparison of this method with the standard Gibbs sampler is shown in Figure 24.3. The
vertical axis is the data log probability at each iteration, computed using
                      
                      N
    log p(D|z, θ) =         log [πzi p(xi |θ zi )]                                             (24.28)
                      i=1

To compute this quantity using the collapsed sampler, we have to sample θ = (π, θ 1:K ) given
the data and the current assignment z.
  In Figure 24.3 we see that the collapsed sampler does indeed generally work better than the
vanilla sampler. Occasionally, however, both methods can get stuck in poor local modes. (Note
         844                                                                                                           Chapter 24. Markov chain Monte Carlo (MCMC) inference

                                                        −350                                                                                                      −350




                                                        −400                                                                                                      −400




                                      log p(x | π, θ)




                                                                                                                                                log p(x | π, θ)
                                                        −450                                                                                                      −450




                                                        −500                                                                                                      −500




                                                        −550                                                                                                      −550

                                                                                                 Standard Gibbs Sampler                                                                                       Standard Gibbs Sampler
                                                                                                 Rao−Blackwellized Sampler                                                                                    Rao−Blackwellized Sampler
                                                        −600 0               1                        2                       3
                                                                                                                                                                  −600 0         1                                 2                      3
                                                           10               10                      10                      10                                       10         10                               10                      10
                                                                                     Iteration                                                                                                    Iteration

                                                                                     (a)                                                                                                          (b)

         Figure 24.3 Comparison of collapsed (red) and vanilla (blue) Gibbs sampling for a mixture of K = 4 two-
         dimensional Gaussians applied to N = 300 data points (shown in Figure 25.7). We plot log probability of
         the data vs iteration. (a) 20 different random initializations. (b) logprob averaged over 100 different random
         initializations. Solid line is the median, thick dashed in the 0.25 and 0.75 quantiles, and thin dashed are
         the 0.05 and 0.95 quintiles. Source: Figure 2.20 of (Sudderth 2006). Used with kind permission of Erik
         Sudderth.

                            80                                                                                                                                                                    80
                                                                                                                  10


                            70                                                                                                                                                                    70


                                                                                                                   5
                            60                                                                                                                                                                    60
               Math Score




                                                                                                                                                                                     Math Score
                                                                                                          Slope




                            50                                                                                                                                                                    50
                                                                                                                   0

                            40                                                                                                                                                                    40


                            30                                                                                    −5                                                                              30


                            20                                                                                                                                                                    20
                                 −2                       −1       0    1        2                                      5    10   15       20                     25       30                           −2         −1       0        1        2
                                                                  SES                                                             Sample Size                                                                              SES



                                                                 (a)                                                              (b)                                                                                   (c)

         Figure 24.4 (a) Least squares regression lines for math scores vs socio-economic status for 100 schools.
         Population mean (pooled estimate) is in bold. (b) Plot of ŵ2j (the slope) vs Nj (sample size) for the 100
         schools. The extreme slopes tend to correspond to schools with smaller sample sizes. (c) Predictions from
         the hierarchical model. Population mean is in bold. Based on Figure 11.1 of (Hoff 2009). Figure generated
         by multilevelLinregDemo, written by Emtiyaz Khan.



         that the error bars in Figure 24.3(b) are averaged over starting values, whereas the theorem refers
         to MC samples in a single run.)

24.2.5   Gibbs sampling for hierarchical GLMs
         Often we have data from multiple related sources. If some sources are more reliable and/or
         data-rich than others, it makes sense to model all the data simultaneously, so as to enable the
         borrowing of statistical strength. One of the most natural way to solve such problems is to use
         hierarchical Bayesian modeling, also called multi-level modeling. In Section 9.6, we discussed
         a way to perform approximate inference in such models using variational methods. Here we
         discuss how to use Gibbs sampling.
            To explain the method, consider the following example. Suppose we have data on students
24.2. Gibbs sampling                                                                             845


                                            μw           Σw


                                             wj


                                             yij                  σ2




                                                   xij
                                                         Nj
                                                              J



                          Figure 24.5   Multi-level model for linear regression.



in different schools. Such data is naturally modeled in a two-level hierarchy: we let yij be the
response variable we want to predict for student i in school j. This prediction can be based on
school and student speciﬁc covariates, xij . Since the quality of schools varies, we want to use
a separate parameter for each school. So our model becomes
   yij = xTij wj + ij                                                                        (24.29)
We will illustrate this model below, using a dataset from (Hoff 2009, p197), where xij is the
socio-economic status (SES) of student i in school y, and yij is their math score.
   We could ﬁt each wj separately, but this can give poor results if the sample size of a given
school is small. This is illustrated in Figure 24.4(a), which plots the least squares regression
line estimated separately for each of the J = 100 schools. We see that most of the slopes are
positive, but there are a few “errant” cases where the slope is negative. It turns out that the lines
with extreme slopes tend to be in schools with small sample size, as shown in Figure 24.4(b).
Thus we may not necessarily trust these ﬁts.
   We can get better results if we construct a hierarchical Bayesian model, in which the wj are
assumed to come from a common prior: wj ∼ N (μw , Σw ). This is illustrated in Figure 24.5. In
this model, the schools with small sample size borrow statistical strength from the schools with
larger sample size, because the wj ’s are correlated via the latent common parents (μw , Σw ). (It
is crucial that these hyper-parameters be inferrred from data; if they were ﬁxed constants, the
wj would be conditionally independent, and there would be no information sharing between
them.)
   To complete the model speciﬁcation, we must specify priors for the shared parameters. Fol-
lowing (Hoff 2009, p198), we will use the following semi-conjugate forms, for convenience:
   μw       ∼   N (μ0 , V0 )                                                                  (24.30)
   Σw       ∼   IW(η0 , S−1
                         0 )                                                                   (24.31)
        2
    σ       ∼   IG(ν0 /2, ν0 σ02 /2)                                                          (24.32)
  Given this, it is simple to show that the full conditionals needed for Gibbs sampling have the
         846                                                Chapter 24. Markov chain Monte Carlo (MCMC) inference


         following forms. For the group-speciﬁc weights:

            p(wj |Dj , θ)      =       N (wj |μj , Σj )                                                    (24.33)
                     Σ−1
                      j        =           −1
                                       Σ + XTj Xj /σ 2                                                     (24.34)
                       μj      =       Σj (Σ−1 μ + XTj yj /σ 2 )                                           (24.35)

         For the overall mean:

            p(μw |w1:J , Σw )          =     N (μ|μN , ΣN )                                                (24.36)
                            Σ−1
                             N         =     V0−1    + JΣ   −1
                                                                                                           (24.37)
                                                                    −1
                            μN =             ΣN (V0−1 μ0
                                                      + JΣ w)                                              (24.38)
                       1
                           
         where w =     J     j wj . For the overall covariance:

            p(Σw |μw , w1:J )          =     IW((S0 + Sμ )−1 , η0 + J)                                     (24.39)
                                             
                             Sμ        =       (wj − μw )(wj − μw )T                                       (24.40)
                                                j

         For the noise variance:

            p(σ 2 |D, w1:J )       =       IG([ν0 + N ]/2, [ν0 σ02 + SSR(w1:J )]/2)                        (24.41)
                                           J 
                                            Nj
                 SSR(w1:J )        =                 (yij − wjT xij )2                                     (24.42)
                                           j=1 i=1

           Applying Gibbs sampling to our hierarchical model, we get the results shown in Figure 24.4(c).
         The light gray lines plot the mean of the posterior predictive distribution for each school:
            E [yj |xij ] = xTij ŵj                                                                        (24.43)

         where

                                       1  (s)
                                          S
            ŵj = E [wj |D] ≈               w                                                              (24.44)
                                       S s=1 j

         The dark gray line in the middle plots the prediction using the overall mean parameters, xTij μ̂w .
         We see that the method has regularized the ﬁts quite nicely, without enforcing too much
         uniformity. (The amount of shrinkage is controlled by Σw , which in turns depends on the
         hyper-parameters; in this example, we used vague values.)

24.2.6   BUGS and JAGS
         One reason Gibbs sampling is so popular is that it is possible to design general purpose software
         that will work for almost any model. This software just needs a model speciﬁcation, usually
         in the form a directed graphical model (speciﬁed in a ﬁle, or created with a graphical user
         interface), and a library of methods for sampling from different kinds of full conditionals. (This
         can often be done using adaptive rejection sampling, described in Section 23.3.4.) An example
         24.2. Gibbs sampling                                                                           847


         of such a package is BUGS (Lunn et al. 2000), which stands for “Bayesian updating using Gibbs
         Sampling”. BUGS is very widely used in biostatistics and social science. Another more recent,
         but very similar, package is JAGS (Plummer 2003), which stands for “Just Another Gibbs Sampler”.
         This uses a similar model speciﬁcation language to BUGS.
            For example, we can describe the model in Figure 24.5 as follows:

         model {
           for (i in 1:N) {
              for (j in 1:J) {
                 y[i,j] ~ dnorm(y.hat[i,j], tau.y)
                 y.hat[i,j] <- inprod(W[j, ], X[i, j, ])
              }
         }
         tau.y <- pow(sigma.y, -2)
         sigma.y ~ dunif(0,100)

         for (j in 1:J) {
           W[j,] ~ dmnorm(mu, SigmaInv)
         }
         SigmaInv ~ dwish(S0[,], eta0)
         mu ~ dmnorm(mu0, V0inv)
         }

            We can then just pass this model to BUGS or JAGS, which will generate samples for us. See
         the webpages for details.
            Although this approach is appealing, unfortunately it can be much slower than using hand-
         written code, especially for complex models. There has been some work on automatically
         deriving model-speciﬁc optimized inference code (Fischer and Schumann 2003), but fast code
         still typically requires human expertise.

24.2.7   The Imputation Posterior (IP) algorithm
         The Imputation Posterior or IP algorithm (Tanner and Wong 1987) is a special case of Gibbs
         sampling in which we group the variables into two classes: hidden variables z and parameters
         θ. This should sound familiar: it is basically an MCMC version of EM, where the E step gets
         replaced by the I step, and the M step gets replaced the P step. This is an example of a more
         general strategy called data augmentation, whereby we introduce auxiliary variables in order
         to simplify the posterior computations (here the computation of p(θ|D)). See (Tanner 1996; van
         Dyk and Meng 2001) for more information.

24.2.8   Blocking Gibbs sampling
         Gibbs sampling can be quite slow, since it only updates one variable at a time (so-called single
         site updating). If the variables are highly correlated, it will take a long time to move away
         from the current state. This is illustrated in Figure 24.6, where we illustrate sampling from a 2d
         Gaussian (see Exercise 24.1 for the details). If the variables are highly correlated, the algorithm
         848                                         Chapter 24. Markov chain Monte Carlo (MCMC) inference

                                         


                                         
                                                             


                                         


                                         


                                         


                                                                    



                                         
                                                                     



         Figure 24.6 Illustration of potentially slow sampling when using Gibbs sampling for a skewed 2D Gaus-
         sian. Based on Figure 11.11 of (Bishop 2006b). Figure generated by gibbsGaussDemo.



         will move very slowly through the state space. In particular, the size of the moves is controlled
         by the variance of the conditional distributions. If this is  in the x1 direction, and the support
         of the distribution is L along this dimension, then we need O((L/)2 ) steps to obtain an
         independent sample.
           In some cases we can efficiently sample groups of variables at a time. This is called blocking
         Gibbs sampling or blocked Gibbs sampling (Jensen et al. 1995; Wilkinson and Yeung 2002),
         and can make much bigger moves through the state space.

 24.3    Metropolis Hastings algorithm
         Although Gibbs sampling is simple, it is somewhat restricted in the set of models to which it
         can be applied. For example, it is not much help in computing p(w|D) for a logistic regression
         model, since the corresponding graphical model has no useful Markov structure. In addition,
         Gibbs sampling can be quite slow, as we mentioned above.
            Fortunately, there is a more general algorithm that can be used, known as the Metropolis
         Hastings or MH algorithm, which we describe below.

24.3.1   Basic idea
         The basic idea in MH is that at each step, we propose to move from the current state x to a
         new state x with probability q(x |x), where q is called the proposal distribution (also called
         the kernel). The user is free to use any kind of proposal they want, subject to some conditions
         which we explain below. This makes MH quite a ﬂexible method. A commonly used proposal is
         a symmetric Gaussian distribution centered on the current state, q(x |x) = N (x |x, Σ); this is
         called a random walk Metropolis algorithm. We discuss how to choose Σ in Section 24.3.3. If
         we use a proposal of the form q(x |x) = q(x ), where the new state is independent of the old
         state, we get a method known as the independence sampler, which is similar to importance
         sampling (Section 23.4).
            Having proposed a move to x , we then decide whether to accept this proposal or not
         according to some formula, which ensures that the fraction of time spent in each state is
         proportional to p∗ (x). If the proposal is accepted, the new state is x , otherwise the new state
         24.3. Metropolis Hastings algorithm                                                            849


         is the same as the current state, x (i.e., we repeat the sample).
            If the proposal is symmetric, so q(x |x) = q(x|x ), the acceptance probability is given by the
         following formula:
                         p∗ (x )
            r = min(1,            )                                                                  (24.45)
                         p∗ (x)
                                                                                          ∗   
         We see that if x is more probable than x, we deﬁnitely move there (since pp∗(x     )
                                                                                           (x) > 1), but if
         x is less probable, we may still move there anyway, depending on the relative probabilities. So
         instead of greedily moving to only more probable states, we occasionally allow “downhill” moves
         to less probable states. In Section 24.3.6, we prove that this procedure ensures that the fraction
         of time we spend in each state x is proportional to p∗ (x).
            If the proposal is asymmetric, so q(x |x) = q(x|x ), we need the Hastings correction, given
         by the following:
            r   =    min(1, α)                                                                       (24.46)
                     p∗ (x )q(x|x )   p∗ (x )/q(x |x)
            α   =                     =                                                              (24.47)
                     p∗ (x)q(x |x)     p∗ (x)/q(x|x )
         This correction is needed to compensate for the fact that the proposal distribution itself (rather
         than just the target distribution) might favor certain states.
           An important reason why MH is a useful algorithm is that, when evaluating α, we only need to
         know the target density up to a normalization constant. In particular, suppose p∗ (x) = Z1 p̃(x),
         where p̃(x) is an unnormalized distribution and Z is the normalization constant. Then
                 (p̃(x )/Z) q(x|x )
            α=                                                                                       (24.48)
                 (p̃(x)/Z) q(x |x)
         so the Z’s cancel. Hence we can sample from p∗ even if Z is unknown. In particular, all we
         have to do is evaluate p̃ pointwise, where p̃(x) = p∗ (x)Z.
           The overall algorithm is summarized in Algorithm 2.

24.3.2   Gibbs sampling is a special case of MH
         It turns out that Gibbs sampling, which we discussed in Section 24.2, is a special case of MH. In
         particular, it is equivalent to using MH with a sequence of proposals of the form
            q(x |x) = p(xi |x−i )I(x−i = x−i )                                                    (24.49)
         That is, we move to a new state where xi is sampled from its full conditional, but x−i is left
         unchanged.
            We now prove that the acceptance rate of each such proposal is 1, so the overall algorithm
         also has an acceptance rate of 100%. We have
                     p(x )q(x|x )    p(xi |x−i )p(x−i )p(xi |x−i )
            α   =                   =                                                                (24.50)
                     p(x)q(x |x)      p(xi |x−i )p(x−i )p(xi |x−i )
                        
                     p(xi |x−i )p(x−i )p(xi |x−i )
                =                                    =1                                              (24.51)
                     p(xi |x−i )p(x−i )p(xi |x−i )
         850                                       Chapter 24. Markov chain Monte Carlo (MCMC) inference


          Algorithm 24.2: Metropolis Hastings algorithm
         1   Initialize x0 ;
         2   for s = 0, 1, 2, . . . do
         3        Deﬁne x = xs ;
         4        Sample x ∼ q(x |x);
         5        Compute acceptance probability

                        p̃(x )q(x|x )
                   α=
                         p̃(x)q(x |x)

                Compute r = min(1, α);
         6      Sample u ∼ U (0, 1) ;
         7      Set new sample to
                           
                             x if u < r
                   xs+1 =
                             xs if u ≥ r




         where we exploited the fact that x−i = x−i , and that q(x |x) = p(xi |x−i ).
           The fact that the acceptance rate is 100% does not necessarily mean that Gibbs will converge
         rapidly, since it only updates one coordinate at a time (see Section 24.2.8). Fortunately, there are
         many other kinds of proposals we can use, as we discuss below.

24.3.3   Proposal distributions
         For a given target distribution p∗ , a proposal distribution q is valid or admissible if it gives
         a non-zero probability of moving to the states that have non-zero probability in the target.
         Formally, we can write this as
             supp(p∗ ) ⊆ ∪x supp(q(·|x))                                                              (24.52)
         For example, a Gaussian random walk proposal has non-zero probability density on the entire
         state space, and hence is a valid proposal for any continuous state space.
            Of course, in practice, it is important that the proposal spread its probability mass in just the
         right way. Figure 24.7 shows an example where we use MH to sample from a mixture of two
         1D Gaussians using a random walk proposal, q(x |x) = N (x |x, v). This is a somewhat tricky
         target distribution, since it consists of two well separated modes. It is very important to set the
         variance of the proposal v correctly: If the variance is too low, the chain will only explore one
         of the modes, as shown in Figure 24.7(a), but if the variance is too large, most of the moves
         will be rejected, and the chain will be very sticky, i.e., it will stay in the same state for a long
         time. This is evident from the long stretches of repeated values in Figure 24.7(b). If we set
         the proposal’s variance just right, we get the trace in Figure 24.7(c), where the samples clearly
         explore the support of the target distribution. We discuss how to tune the proposal below.
            One big advantage of Gibbs sampling is that one does not need to choose the proposal
24.3. Metropolis Hastings algorithm                                                                                                                                                               851


                                   MH with N(0,1.0002) proposal                                                                                   MH with N(0,500.0002) proposal




    0.2                                                                                                           0.06

                                                                                                                  0.04
    0.1
                                                                                                                  0.02

     0                                                                                                              0
     0                                                                                                              0

          200                                                                                                            200

                400                                                                                                             400
                                                                                               100                                                                                          100
                      600                                                     50                                                      600                                              50
                                                                 0                                                                                                              0
                            800                                                                                                             800
                                                      −50                                                                                                              −50
                 Iterations       1000   −100               Samples                                                              Iterations       1000    −100               Samples


                                                (a)                                                                                                              (b)
                                                                                                              2
                                                                                         MH with N(0,8.000 ) proposal




                                                        0.03

                                                        0.02

                                                        0.01

                                                            0
                                                            0

                                                                200

                                                                      400
                                                                                                                                                         100
                                                                            600                                                             50
                                                                                                                            0
                                                                                  800
                                                                                                              −50
                                                                       Iterations       1000     −100                    Samples


                                                                                                        (c)

Figure 24.7 An example of the Metropolis Hastings algorithm for sampling from a mixture of two 1D
Gaussians (μ = (−20, 20), π = (0.3, 0.7), σ = (100, 100)), using a Gaussian proposal with variances of
v ∈ {1, 500, 8}. (a) When v = 1, the chain gets trapped near the starting state and fails to sample from
the mode at μ = −20. (b) When v = 500, the chain is very “sticky”, so its effective sample size is low (as
reﬂected by the rough histogram approximation at the end). (c) Using a variance of v = 8 is just right and
leads to a good approximation of the true distribution (shown in red). Figure generated by mcmcGmmDemo.
Based on code by Christophe Andrieu and Nando de Freitas.



distribution, and furthermore, the acceptance rate is 100%. Of course, a 100% acceptance can
trivially be achieved by using a proposal with variance 0 (assuming we start at a mode), but this
is obviously not exploring the posterior. So having a high acceptance is not the ultimate goal.
We can increase the amount of exploration by increasing the variance of the Gaussian kernel.
Often one experiments with different parameters until the acceptance rate is between 25% and
40%, which theory suggests is optimal, at least for Gaussian target distributions. These short
initial runs, used to tune the proposal, are called pilot runs.
           852                                                                Chapter 24. Markov chain Monte Carlo (MCMC) inference

                          0.2                                                               w0 intercept                                     w1 slope
                                                                      1500                                                 1500
                         0.18

                         0.16

                         0.14

                         0.12                                         1000                                                 1000




                    w1
                          0.1

                         0.08

                         0.06
                                                                      500                                                  500
                         0.04

                         0.02

                           0
                          −120   −100   −80     −60   −40   −20   0
                                                 w0                     0                                                    0
                                                                       −120    −100   −80      −60         −40   −20   0          0   0.05     0.1      0.15   0.2



                                              (a)                                           (b)                                              (c)

           Figure 24.8 (a) Joint posterior of the parameters for 1d logistic regression when applied to some SAT data.
           (b) Marginal for the offset w0 . (c) Marginal for the slope w1 . We see that the marginals do not capture the
           fact that the parameters are highly correlated. Figure generated by logregSatMhDemo.



24.3.3.1   Gaussian proposals
           If we have a continuous state space, the Hessian H at a local mode ŵ can be used to deﬁne
           the covariance of a Gaussian proposal distribution. This approach has the advantage that the
           Hessian models the local curvature and length scales of each dimension; this approach therefore
           avoids some of the slow mixing behavior of Gibbs sampling shown in Figure 24.6.
              There are two obvious approaches: (1) an independence proposal, q(w |w) = N (w |ŵ, H−1 )
           or (2), a random walk proposal, q(w |w) = N (w |w, s2 H−1 ), where s2 is a scale factor chosen
           to facilitate rapid mixing. (Roberts and Rosenthal 2001) prove that, if the posterior is Gaussian,
           the asymptotically optimal value is to use s2 = 2.382 /D, where D is the dimensionality of w;
           this results in an acceptance rate of 0.234.
              For example, consider MH for binary logistic regression. From Equation 8.7, we have that
           the Hessian of the log-likelihood is Hl = XT DX, where D = diag(μi (1 − μi )) and μi =
           sigm(ŵT xi ). If we assume a Gaussian prior, p(w) = N (0, V0 ), we have H = V0−1 + Hl , so
           the asymptotically optimal Gaussian proposal has the form
                               
                                   2.382  −1            −1
               q(w |w) = N w,              V0 + XT DX                                                 (24.53)
                                      D
           See (Gamerman 1997; Rossi et al. 2006; Fruhwirth-Schnatter and Fruhwirth 2010) for further
           details. The approach is illustrated in Figure 24.8, where we sample parameters from a 1d
           logistic regression model ﬁt to some SAT data. We initialize the chain at the mode, computed
           using IRLS, and then use the above random walk Metropolis sampler.
              If you cannot afford to compute the mode or its Hessian XDX, an alternative approach,
           suggested in (Scott 2009), is to approximate the above proposal as follows:
                                                       −1
                                              6
               q(w |w) = N w, V0−1 + 2 XT X
                    
                                                                                                  (24.54)
                                              π
           24.3. Metropolis Hastings algorithm                                                             853


24.3.3.2   Mixture proposals
           If one doesn’t know what kind of proposal to use, one can try a mixture proposal, which is a
           convex combination of base proposals:

                           
                           K
              q(x |x) =         wk qk (x |x)                                                          (24.55)
                           k=1

           where wk are the mixing weights. As long as each qk is individually valid, the overall proposal
           will also be valid.

24.3.3.3   Data-driven MCMC
           The most efficient proposals depend not just on the previous hidden state, but also the visible
           data, i.e., they have the form q(x |x, D). This is called data-driven MCMC (see e.g., (Tu and
           Zhu 2002)). To create such proposals, one can sample (x, D) pairs from the forwards model
           and then train a discriminative classiﬁer to predict p(x|f (D)), where f (D) are some features
           extracted from the visible data.
              Typically x is a high-dimensional vector (e.g., position and orientation of all the limbs of a
           person in a visual object detector), so it is hard to predict the entire state vector, p(x|f (D)).
           Instead we might train a discriminative detector to predict parts of the state-space, p(xk |fk (D)),
           such as the location of just the face of a person. We can then use a proposal of the form
                                             
               q(x |x, D) = π0 q0 (x |x) +    πk qk (xk |fk (D))                                     (24.56)
                                                 k

           where q0 is a standard data-independent proposal (e.g., random walk), and qk updates the k’th
           component of the state space. For added efficiency, the discriminative proposals should suggest
           joint changes to multiple variables, but this is often hard to do.
              The overall procedure is a form of generate and test: the discriminative proposals q(x |x)
                                                                                                   
                                                                                                     |D)
           generate new hypotheses, which are then “tested” by computing the posterior ratio p(xp(x|D) , to
           see if the new hypothesis is better or worse. By adding an annealing step, one can modify
           the algorithm to ﬁnd posterior modes; this is called simulated annealing, and is described in
           Section 24.6.1. One advantage of using the mode-seeking version of the algorithm is that we do
           not need to ensure the proposal distribution is reversible.

 24.3.4    Adaptive MCMC
           One can change the parameters of the proposal as the algorithm is running to increase efficiency.
           This is called adaptive MCMC. This allows one to start with a broad covariance (say), allowing
           large moves through the space until a mode is found, followed by a narrowing of the covariance
           to ensure careful exploration of the region around the mode.
              However, one must be careful not to violate the Markov property; thus the parameters of the
           proposal should not depend on the entire history of the chain. It turns out that a sufficient
           condition to ensure this is that the adaption is “faded out” gradually over time. See e.g., (Andrieu
           and Thoms 2008) for details.
         854                                      Chapter 24. Markov chain Monte Carlo (MCMC) inference


24.3.5   Initialization and mode hopping
         It is necessary to start MCMC in an initial state that has non-zero probability. If the model has
         deterministic constraints, ﬁnding such a legal conﬁguration may be a hard problem in itself. It
         is therefore common to initialize MCMC methods at a local mode, found using an optimizer.
            In some domains (especially with discrete state spaces), it is a more effective use of computa-
         tion time to perform multiple restarts of an optimizer, and to average over these modes, rather
         than exploring similar points around a local mode. However, in continuous state spaces, the
         mode contains negligible volume (Section 5.2.1.3), so it is necessary to locally explore around
         each mode, in order to visit enough posterior probability mass.

24.3.6   Why MH works *
         To prove that the MH procedure generates samples from p∗ , we have to use a bit of Markov
         chain theory, so be sure to read Section 17.2.3 ﬁrst.
           The MH algorithm deﬁnes a Markov chain with the following transition matrix:
                       
                          q(x |x)r(x 
                                     |x)                        if x = x
            p(x |x) =                                                                     (24.57)
                          q(x|x) + x =x q(x |x)(1 − r(x |x)) otherwise
         This follows from a case analysis: if you move to x from x, you must have proposed it (with
         probability q(x |x)) and it must have been accepted (with probability r(x |x)); otherwise you
         stay in state x, either because that is what you proposed (with probability q(x|x)), or because
         you proposed something else (with probability q(x |x)) but it was rejected (with probability
         1 − r(x |x)).
            Let us analyse this Markov chain. Recall from Section 17.2.3.4 that a chain satisﬁes detailed
         balance if
              p(x |x)p∗ (x) = p(x|x )p∗ (x )                                                     (24.58)
         We also showed that if a chain satisﬁes detailed balance, then p∗ is its stationary distribution.
         Our goal is to show that the MH algorithm deﬁnes a transition function that satisﬁes detailed
         balance and hence that p∗ is its stationary distribution. (If Equation 24.58 holds, we say that p∗
         is an invariant distribution wrt the Markov transition kernel q.)
         Theorem 24.3.1. If the transition matrix deﬁned by the MH algorithm (given by Equation 24.57) is
         ergodic and irreducible, then p∗ is its unique limiting distribution.
         Proof. Consider two states x and x . Either
              p∗ (x)q(x |x) < p∗ (x )q(x|x )                                                     (24.59)
         or
              p∗ (x)q(x |x) > p∗ (x )q(x|x )                                                     (24.60)
         We will ignore ties (which occur with probability zero for continuous distributions). Without loss
         of generality, assume that p∗ (x)q(x |x) > p∗ (x )q(x|x ). Hence
                           p∗ (x )q(x|x )
              α(x |x) =                    <1                                                      (24.61)
                           p∗ (x)q(x |x)
         24.3. Metropolis Hastings algorithm                                                            855


         Hence we have r(x |x) = α(x |x) and r(x|x ) = 1.
           Now to move from x to x we must ﬁrst propose x and then accept it. Hence
                                                     p∗ (x )q(x|x )   p∗ (x )
            p(x |x) = q(x |x)r(x |x) = q(x |x)                    =          q(x|x )            (24.62)
                                                     p∗ (x)q(x |x)     p∗ (x)
         Hence
            p∗ (x)p(x |x) = p∗ (x )q(x|x )                                                        (24.63)
         The backwards probability is
            p(x|x ) = q(x|x )r(x|x ) = q(x|x )                                                   (24.64)
         since r(x|x ) = 1. Inserting this into Equation 24.63 we get
            p∗ (x)p(x |x) = p∗ (x )p(x|x )                                                        (24.65)
         so detailed balance holds wrt p∗ . Hence, from Theorem 17.2.3, p∗ is a stationary distribution.
         Furthermore, from Theorem 17.2.2, this distribution is unique, since the chain is ergodic and
         irreducible.

24.3.7   Reversible jump (trans-dimensional) MCMC *
         Suppose we have a set of models with different numbers of parameters, e.g., mixture models in
         which the number of mixture components is unknown. Let the model be denoted by m, and
         let its unknowns (e.g., parameters) be denoted by xm ∈ Xm (e.g., Xm = Rnm , where nm is
         the dimensionality of model m). Sampling in spaces of differing dimensionality is called trans-
         dimensional MCMC (Green 2003). We could sample the model indicator m ∈ {1, . . . , M } and
                                                              M
         sample all the parameters from the product space m=1 Xm , but this is very inefficient. It is
         more parsimonious to sample in the union space X = ∪M       m=1 {m} × Xm , where we only worry
         about parameters for the currently active model.
            The difficulty with this approach arises when we move between models of different dimen-
         sionality. The trouble is that when we compute the MH acceptance ratio, we are comparing
         densities deﬁned in different dimensionality spaces, which is meaningless. It is like trying to
         compare a sphere with a circle. The solution, proposed by (Green 1998) and known as reversible
         jump MCMC or RJMCMC, is to augment the low dimensional space with extra random variables
         so that the two spaces have a common measure.
            Unfortunately, we do not have space to go into details here. Suffice it to say that the method
         can be made to work in theory, although it is a bit tricky in practice. If, however, the continuous
         parameters can be integrated out (resulting in a method called collapsed RJMCMC), much of the
         difficulty goes away, since we are just left with a discrete state space, where there is no need
         to worry about change of measure. For example, (Denison et al. 2002) includes many examples
         of applications of collapsed RJMCMC applied to Bayesian inference fro adaptive basis-function
         models. They sample basis functions from a ﬁxed set of candidates (e.g., centered on the data
         points), and integrate out the other parameters analytically. This provides a Bayesian alternative
         to using RVMs or SVMs.
         856                                                                 Chapter 24. Markov chain Monte Carlo (MCMC) inference

                                             Initial Condition X = 10                                           Initial Condition X = 17
                                                               0                                                                  0




                      p(0)(x)                                                            p(0)(x)


                                     0   5                10            15      20                      0   5                10            15   20

                         (1)                                                                (1)
                      p (x)                                                              p (x)


                                     0   5                10            15      20                      0   5                10            15   20

                         (2)                                                                (2)
                      p (x)                                                              p (x)


                                     0   5                10            15      20                      0   5                10            15   20

                         (3)                                                                (3)
                      p (x)                                                              p (x)


                                     0   5                10            15      20                      0   5                10            15   20

                      (10)                                                               (10)
                     p         (x)                                                      p         (x)


                                     0   5                10            15      20                      0   5                10            15   20


                    p(100)(x)                                                          p(100)(x)


                                     0   5                10            15      20                      0   5                10            15   20


                    p(200)(x)                                                          p(200)(x)


                                     0   5                10            15      20                      0   5                10            15   20


                    p(400)(x)                                                          p(400)(x)


                                     0   5                10            15      20                      0   5                10            15   20


                                                    (a)                                                                (b)

         Figure 24.9 Illustration of convergence to the uniform distribution over {0, 1, . . . , 20} using a symmetric
         random walk starting from (left) state 10, and (right) state 17. Based on Figures 29.14 and 29.15 of (MacKay
         2003). Figure generated by randomWalk0to20Demo.



 24.4    Speed and accuracy of MCMC
         In this section, we discuss a number of important theoretical and practical issues to do with
         MCMC.

24.4.1   The burn-in phase
         We start MCMC from an arbitrary initial state. As we explained in Section 17.2.3, only when the
         chain has “forgotten” where it started from will the samples be coming from the chain’s stationary
         distribution. Samples collected before the chain has reached its stationary distribution do not
         come from p∗ , and are usually thrown away. The initial period, whose samples will be ignored,
         is called the burn-in phase.
            For example, consider a uniform distribution on the integers {0, 1, . . . , 20}. Suppose we
         sample from this using a symmetric random walk. In Figure 24.9, we show two runs of the
         algorithm. On the left, we start in state 10; on the right, we start in state 17. Even in this small
         problem it takes over 100 steps until the chain has “forgotten” where it started from.
            It is difficult to diagnose when the chain has burned in, an issue we discuss in more detail
         below. (This is one of the fundamental weaknesses of MCMC.) As an interesting example of what
         can happen if you start collecting samples too early, consider the Potts model. Figure 24.10(a),
         shows a sample after 500 iterations of Gibbs sampling. This suggests that the model likes
         24.4. Speed and accuracy of MCMC                                                                       857




                                     (a)                                             (b)

         Figure 24.10 Illustration of problems caused by poor mixing. (a) One sample from a 5-state Potts model
         on a 128 × 128 grid with 8 nearest neighbor connectivity and J = 2/3 (as in (Geman and Geman 1984)),
         after 200 iterations. (b) One sample from the same model after 10,000 iterations. Used with kind permission
         of Erik Sudderth.


         medium-sized regions where the label is the same, implying the model would make a good
         prior for image segmentation. Indeed, this was suggested in the original Gibbs sampling paper
         (Geman and Geman 1984).
            However, it turns out that if you run the chain long enough, you get isolated speckles, as
         in Figure 24.10(b). The results depend on the coupling strength, but in general, it is very hard
         to ﬁnd a setting which produces nice medium-sized blobs: most parameters result in a few
         super-clusters, or lots of small fragments. In fact, there is a rapid phase transition between these
         two regimes. This led to a paper called “The Ising/Potts model is not well suited to segmentation
         tasks” (Morris et al. 1996). It is possible to create priors more suited to image segmentation
         (e.g., (Sudderth and Jordan 2008)), but the main point here is that sampling before reaching
         convergence can lead to erroneous conclusions.

24.4.2   Mixing rates of Markov chains *
         The amount of time it takes for a Markov chain to converge to the stationary distribution, and
         forget its initial state, is called the mixing time. More formally, we say that the mixing time
         from state x0 is the minimal time such that, for any constant  > 0, we have that
            τ (x0 )  min{t : ||δx0 (x)T t − p∗ ||1 ≤ }                                                   (24.66)
         where δx0 (x) is a distribution with all its mass in state x0 , T is the transition matrix of the
         chain (which depends on the target p∗ and the proposal q), and δx0 (x)T t is the distribution
         after t steps. The mixing time of the chain is deﬁned as
            τ  max τ (x0 )                                                                                (24.67)
                    x0

           The mixing time is determined by the eigengap γ = λ1 − λ2 , which is the difference of the
         858                                      Chapter 24. Markov chain Monte Carlo (MCMC) inference



                                                                                          x5
                    x1                           x2                                                x6
                                                                           x4


                                                                                   x7
                                   x3
         Figure 24.11 A Markov chain with low conductance. The dotted arcs represent transitions with very low
         probability. Source: Figure 12.6 of (Koller and Friedman 2009). Used with kind permission of Daphne
         Koller.


         ﬁrst and second eigenvalues of the transition matrix. In particular, one can show that
                     1    n
            τ ≤ O( log )                                                                               (24.68)
                     γ    
         where n is the number of states. Since computing the transition matrix can be hard to do,
         especially for high dimensional and/or continuous state spaces, it is useful to ﬁnd other ways to
         estimate the mixing time.
            An alternative approach is to examine the geometry of the state space. For example, consider
         the chain in Figure 24.11. We see that the state space consists of two “islands”, each of which
         is connected via a narrow “bottleneck”. (If they were completely disconnected, the chain would
         not be ergodic, and there would no longer be a unique stationary distribution.) We deﬁne the
         conductance φ of a chain as the minimum probability, over all subsets of states, of transitioning
         from that set to its complement:
                                                      
                                   x∈S,x ∈S c T (x → x )
             φ        min                                ,                                         (24.69)
                  S:0≤p∗ (S)≤0.5          p∗ (S)
         One can show that
                    1      n
           τ ≤ O( 2 log )                                                                              (24.70)
                   φ       
         Hence chains with low conductance have high mixing time. For example, distributions with
         well-separated modes usually have high mixing time. Simple MCMC methods often do not work
         well in such cases, and more advanced algorithms, such as parallel tempering, are necessary
         (see e.g., (Liu 2001)).

24.4.3   Practical convergence diagnostics
         Computing the mixing time of a chain is in general quite difficult, since the transition matrix
         is usually very hard to compute. In practice various heuristics have been proposed to diagnose
           24.4. Speed and accuracy of MCMC                                                             859


           convergence — see (Geyer 1992; Cowles and Carlin 1996; Brooks and Roberts 1998) for a review.
           Strictly speaking, these methods do not diagnose convergence, but rather non-convergence. That
           is, the method may claim the chain has converged when in fact it has not. This is a ﬂaw common
           to all convergence diagnostics, since diagnosing convergence is computationally intractable in
           general (Bhatnagar et al. 2010).
               One of the simplest approaches to assessing when the method has converged is to run
           multiple chains from very different overdispersed starting points, and to plot the samples of
           some variables of interest. This is called a trace plot. If the chain has mixed, it should have
           “forgotten” where it started from, so the trace plots should converge to the same distribution,
           and thus overlap with each other.
               Figure 24.12 gives an example. We show the traceplot for x which was sampled from a
           mixture of two 1D Gaussians using four different methods: MH with a symmetric Gaussian
           proposal of variance σ 2 ∈ {1, 8, 500}, and Gibbs sampling. We see that σ 2 = 1 has not mixed,
           which is also evident from Figure 24.7(a), which shows that a single chain never leaves the area
           where it started. The results for the other methods indicate that the chains rapidly converge to
           the stationary distribution, no matter where they started. (The sticky nature of the σ 2 = 500
           proposal is very evident. This reduces the computational efficiency, as we discuss below, but
           not the statistical validity.)

24.4.3.1   Estimated potential scale reduction (EPSR)
           We can assess convergence more quantitatively as follows. The basic idea is to compare the
           variance of a quantity within each chain to its variance across chains. More precisely, suppose
           we collect S samples (after burn-in) from each of C chains of D variables, xisc , i = 1 : D,
           s = 1 : S, c = 1 : C. Let ysc be a scalar quantity of interest derived from x1:D,s,c (e.g.,
           ysc = xisc for some chosen i). Deﬁne the within-sequence mean and overall mean as
                       1                 1 
                          S                  C
              y ·c          ysc , y ··       y                                                      (24.71)
                       S s=1              C c=1 ·c
           Deﬁne the between-sequence and within-sequence variance as
                                                                                
                     S                        1        1 
                          C                        C           S
                                       2                                       2
             B             (y − y ·· ) , W                     (ysc − y ·c )                       (24.72)
                   C − 1 c=1 ·c                C c=1 S − 1 s=1
           We can now construct two estimates of the variance of y. The ﬁrst estimate is W : this should
           underestimate var [y] if the chains have not ranged over the full posterior. The second estimate
           is
                    S−1         1
               V̂ =       W+ B                                                                       (24.73)
                      S         S
           This is an estimate of var [y] that is unbiased under stationarity, but is an overestimate if the
           starting points were overdispersed (Gelman and Rubin 1992). From this, we can deﬁne the
           following convergence diagnostic statistic, known as the estimated potential scale reduction
           or EPSR:
                    8
                       V̂
               R̂                                                                                   (24.74)
                      W
         860                                                      Chapter 24. Markov chain Monte Carlo (MCMC) inference

                                         2                                                               2
                            MH N(0,1.000 ), Rhat = 1.493                                    MH N(0,8.000 ), Rhat = 1.039
          50                                                                 60



          40                                                                 40



          30                                                                 20



          20                                                                  0



          10                                                                −20



           0                                                                −40



         −10                                                                −60
               0     200         400           600          800     1000          0   200        400          600          800   1000

                                        (a)                                                            (b)
                                          2                                                     gibbs, Rhat = 1.007
                           MH N(0,500.000 ), Rhat = 1.005
          50                                                                 60

          40
                                                                             40
          30

          20
                                                                             20
          10

           0                                                                  0

         −10
                                                                            −20
         −20

         −30
                                                                            −40
         −40

         −50                                                                −60
               0     200         400          600           800    1000           0   200        400           600         800   1000

                                       (c)                                                             (d)

         Figure 24.12 Traceplots for MCMC samplers. Each color represents the samples from a different starting
         point. (a-c) MH with proposal N (x |x, σ 2 ) for σ 2 ∈ {1, 8, 500}, corresponding to Figure 24.7. (d) Gibbs
         sampling. Figure generated by mcmcGmmDemo.



         This quantity, which was ﬁrst proposed in (Gelman and Rubin 1992), measures the degree to
         which the posterior variance would decrease if we were to continue sampling in the S →
         ∞ limit. If R̂ ≈ 1 for any given quantity, then that estimate is reliable (or at least is not
         unreliable). The R̂ values for the four samplers in Figure 24.12 are 1.493, 1.039, 1.005 and 1.007.
         So this diagnostic has correctly identiﬁed that the sampler using the ﬁrst (σ 2 = 1) proposal is
         untrustworthy.

24.4.4   Accuracy of MCMC
         The samples produced by MCMC are auto-correlated, and this reduces their information content
         relative to independent or “perfect” samples. We can quantify this as follows.4 Suppose we want

         4. This Section is based on (Hoff 2009, Sec 6.6).
24.4. Speed and accuracy of MCMC                                                                                                        861

                                            2                                                                  2
                          MH N(0,1.000 )                                                     MH N(0,8.000 )
   1                                                                  1

 0.9                                                                0.9

 0.8                                                                0.8

 0.7                                                                0.7

 0.6                                                                0.6

 0.5                                                                0.5

 0.4                                                                0.4

 0.3                                                                0.3

 0.2                                                                0.2

 0.1                                                                0.1

   0                                                                  0
       0   5   10   15      20         25       30   35   40   45         0    5   10   15     20         25       30    35    40      45

                                 (a)                                                                (b)
                                            2                                                        gibbs
                         MH N(0,500.000 )
 1.2                                                                 1.2


  1                                                                   1


 0.8                                                                 0.8


 0.6                                                                 0.6


 0.4                                                                 0.4


 0.2                                                                 0.2


  0                                                                   0


−0.2                                                                −0.2
       0   5   10   15      20         25       30   35   40   45          0   5   10   15      20           25     30    35    40      45

                              (c)                                                                   (d)

Figure 24.13 Autocorrelation functions corresponding to Figure 24.12. Figure generated by mcmcGmmDemo.



to estimate the mean of f (X), for some function f , where X ∼ p(). Denote the true mean by
       f ∗  E [f (X)]                                                                                                               (24.75)

A Monte Carlo estimate is given by

          1
             S
       f=       fs                                                                                                                   (24.76)
          S s=1
         862                                      Chapter 24. Markov chain Monte Carlo (MCMC) inference


         where fs  f (xs ) and xs ∼ p(x). An MCMC estimate of the variance of this estimate         is given
         by
                                                
            VarM CM C [f ] = E (f − f ∗ )2                                                             (24.77)
                                   ⎡3                    42 ⎤
                                        1 S
                             = E⎣             (fs − f ∗ ) ⎦                                            (24.78)
                                       S s=1
                                        S               
                                  1                          1 
                                                    ∗ 2
                             =     2
                                     E       (fs − f ) + 2        E [(fs − f ∗ )(ft − f ∗ )]           (24.79)
                                 S                           S
                                         s=1                      s=t
                                                  1 
                             =    VarM C (f ) +       E [(fs − f ∗ )(ft − f ∗ )]                       (24.80)
                                                  S2
                                                     s=t

         where the ﬁrst term is the Monte Carlo estimate of the variance if the samples weren’t correlated,
         and the second term depends on the correlation of the samples. We can measure this as follows.
         Deﬁne the sample-based auto-correlation at lag t of a set of samples f1 , . . . , fS as follows:
                   1
                      S−t
                  S−t     s=1 (fs − f )(fs+t − f )
            ρt          1
                            S                                                                         (24.81)
                                             2
                       S−1     s=1 (fs − f )

         This is called the autocorrelation function (ACF). This is plotted in Figure 24.13 for our four
         samplers for the Gaussian mixture model. We see that the ACF of the Gibbs sampler (bottom
         right) dies off to 0 much more rapidly than the MH samplers, indicating that each Gibbs sample
         is “worth” more than each MH sample.
            A simple method to reduce the autocorrelation is to use thinning, in which we keep every
         n’th sample. This does not increase the efficiency of the underlying sampler, but it does save
         space, since it avoids storing highly correlated samples.
            We can estimate the information content of a set of samples by computing the effective
         sample size (ESS) Seff , deﬁned by

                      VarM C (f )
            Seff                                                                                      (24.82)
                     VarM CM C (f )
         From Figure 24.12, it is clear that the effective sample size of the Gibbs sampler is higher than
         that of the other samplers (in this example).

24.4.5   How many chains?
         A natural question to ask is: how many chains should we run? We could either run one long
         chain to ensure convergence, and then collect samples spaced far apart, or we could run many
         short chains, but that wastes the burnin time. In practice it is common to run a medium
         number of chains (say 3) of medium length (say 100,000 steps), and to take samples from each
         after discarding the ﬁrst half of the samples. If we initialize at a local mode, we may be able to
         use all the samples, and not wait for burn-in.
         24.5. Auxiliary variable MCMC *                                                                        863


              Model        Goal   Method                       Reference
              Probit       MAP    Gradient                     Section 9.4.1
              Probit       MAP    EM                           Section 11.4.6
              Probit       Post   EP                           (Nickisch and Rasmussen 2008)
              Probit       Post   Gibbs+                       Exercise 24.6
              Probit       Post   Gibbs with ARS               (Dellaportas and Smith 1993)
              Probit       Post   MH using IRLS proposal       (Gamerman 1997)
              Logit        MAP    Gradient                     Section 8.3.4
              Logit        Post   Gibbs+ with Student          (Fruhwirth-Schnatter and Fruhwirth 2010)
              Logit        Post   Gibbs+ with KS               (Holmes and Held 2006)

         Table 24.1 Summary of some possible algorithms for estimation and inference for binary classiﬁcation
         problems using Gaussian priors. Abbreviations: Aux. = auxiliary variable sampling, ARS = adaptive rejection
         sampling, EP = expectation propagation, Gibbs+ = Gibbs sampling with auxiliary variables, IRLS = iterative
         reweighted least squares, KS = Kolmogorov Smirnov, MAP = maximum a posteriori, MH = Metropolis
         Hastings, Post = posterior.



 24.5    Auxiliary variable MCMC *
         Sometimes we can dramatically improve the efficiency of sampling by introducing dummy
                                                                                       If the original
         auxiliary variables, in order to reduce correlation between the original variables.
         variables are denoted by x, and the auxiliary variables by z, we require that z p(x, z) = p(x),
         and that p(x, z) is easier to sample from than just p(x). If we meet these two conditions,
         we can sample in the enlarged model, and then throw away the sampled z values, thereby
         recovering samples from p(x). We give some examples below.

24.5.1   Auxiliary variable sampling for logistic regression
         In Section 9.4.2, we discussed the latent variable interpretation of probit regression. Recall that
         this had the form
                 zi         w T xi + i                                                                    (24.83)
                 i    ∼     N (0, 1)                                                                        (24.84)
            yi = 1 =         I(zi ≥ 0)                                                                       (24.85)
         We exploited this representation in Section 11.4.6, where we used EM to ﬁnd an ML estimate. It
         is straightforward to convert this into an auxiliary variable Gibbs sampler (Exercise 24.6), since
         p(w|D) is Gaussian and p(zi |xi , yi , w) is truncated Gaussian, both of which are easy to sample
         from.
            Now let us discuss how to derive an auxiliary variable Gibbs sampler for logistic regression.
         Let i follow a logistic distribution, with pdf
                                 e−
            pLogistic () =                                                                                 (24.86)
                              (1 + e− )2
         with mean E [] = 0 and variance var [] = π 2 /3. The cdf has the form F () = sigm(), which
         864                                       Chapter 24. Markov chain Monte Carlo (MCMC) inference


         is the logistic function. Since yi = 1 iff wT xi +  > 0, we have, by symmetry, that
                                       ∞                   w T xi
            p(yi = 1|xi , w)     =             f ()d =            f ()d = F (wT xi ) = sigm(wT xi ) (24.87)
                                      −wT xi               −∞

         as required.
            We can derive an auxiliary variable Gibbs sampler by sampling from p(z|w, D) and p(w|z, D).
         Unfortunately, sampling directly from p(w|z, D) is not possible. One approach is to deﬁne
         i ∼ N (0, λi ), where λi = (2ψi )2 and ψi ∼ KS, the Kolmogorov Smirnov distribution, and then
         to sample w, z, λ and ψ (Holmes and Held 2006).
            A simpler approach is to approximate the logistic distribution by the Student distribution
         (Albert and Chib 1993). Speciﬁcally, we will make the approximation i ∼ T (0, 1, ν), where
         ν ≈ 8. We can now use the scale mixture of Gaussians representation of the Student to simplify
         inference. In particular, we write

                   λi    ∼     Ga(ν/2, ν/2)                                                             (24.88)
                    i   ∼     N (0, λ−1
                                      i )                                                               (24.89)
                    zi        w xi + i
                                 T
                                                                                                        (24.90)
            yi = 1|zi    =     I(zi ≥ 0)                                                                 (24.91)

         All of the full conditionals now have a simple form; see Exercise 24.7 for the details.
            Note that if we set ν = 1, then zi ∼ N (wT xi , 1), which is equivalent to probit regression (see
         Section 9.4). Rather than choosing between probit or logit regression, we can simply estimate
         the ν parameter. There is no convenient conjugate prior, but we can consider a ﬁnite range of
         possible values and evaluate the posterior as follows:

                             
                             N
                                       1         ν/2−1 −νλi /2
            p(ν|λ) ∝ p(ν)                      λ
                                            ν/2 i
                                                      e                                                 (24.92)
                             i=1
                                 Γ(ν/2)(ν/2)

            Furthermore, if we deﬁne V0 = v0 I, we can sample v0 as well. For example, suppose we use
                                                                                                 D
         a IG(δ1 , δ2 ) prior for v0 . The posterior is given by p(v0 |w) = IG(δ1 + 21 D, δ2 + 12 j=1 wj2 ).
         This can be interleaved with the other Gibbs sampling steps, and provides an appealing Bayesian
         alternative to cross validation for setting the strength of the regularizer.
            See Table 24.1 for a summary of various algorithms for ﬁtting probit and logit models. Many
         of these methods can also be extended to the multinomial logistic regression case. For details,
         see (Scott 2009; Fruhwirth-Schnatter and Fruhwirth 2010).

24.5.2   Slice sampling
         Consider sampling from a univariate, but multimodal, distribution p̃(x). We can sometimes
         improve the ability to make large moves by adding an auxiliary variable u. We deﬁne the joint
         distribution as follows:
                        
                           1/Zp if 0 ≤ u ≤ p̃(x)
             p̂(x, u) =                                                                        (24.93)
                           0      otherwise
24.5. Auxiliary variable MCMC *                                                                                                                                 865

                                                                                                             180

                                                                                                             160

                                                                                                             140

                                                                                                             120
                                  f(x(i) )
                                                                                                             100

                                                                                                              80
                                                      (i+1)                    (i+1)
                                                u                          x                                  60

                                                                                                              40

                                                                                                              20

                                                (i)                                                           0
                                            x                                                            x    −5   −4   −3     −2   −1     0   1   2   3    4


                                                                           (a)                                                       (b)


Figure 24.14 (a) Illustration of the principle behind slice sampling. Given a previous sample xi , we
sample ui+1 uniformly on [0, f (xi )], where f is the target density. We then sample xi+1 along the slice
where f (x) ≥ ui+1 . Source: Figure 15 of (Andrieu et al. 2003) . Used with kind permission of Nando de
Freitas. (b) Slice sampling in action. Figure generated by sliceSamplingDemo1d.
                                      −11
                                  x 10

                              4


                              3
          Posterior density




                              2


                              1


                              0
                              6

                                     5

                                             4                                                    −2.5
                                                                                             −2
                                                        3                      −1.5
                                         Slope                −1
                                                                                 Intercept


                                                                       (a)                                               (b)

Figure 24.15 Binomial regression for 1d data. (a) Grid approximation to posterior. (b) Slice sampling
approximation. Figure generated by sliceSamplingDemo2d.

                                     
where Zp =                                   p̃(x)dx. The marginal distribution over x is given by
                                                                   p̃(x)
                                                                           1       p̃(x)
      p̂(x, u)du =                                                            du =       = p(x)                                                            (24.94)
                                                               0           Zp       Zp
so we can sample from p(x) by sampling from p̂(x, u) and then ignoring u. The full conditionals
have the form
   p(u|x) = U[0,p̃(x)] (u)                                                                                                                                 (24.95)
   p(x|u) = UA (x)                                                                                                                                         (24.96)
where A = {x : p̃(x) ≥ u} is the set of points on or above the chosen height u. This
corresponds to a slice through the distribution, hence the term slice sampling (Neal 2003a).
See Figure 24.14(a).
  In practice, it can be difficult to identify the set A. So we can use the following approach:
construct an interval xmin ≤ x ≤ xmax around the current point xs of some width. We then
         866                                         Chapter 24. Markov chain Monte Carlo (MCMC) inference


         test to see if each end point lies within the slice. If it does, we keep extending in that direction
         until it lies outside the slice. This is called stepping out. A candidate value x is then chosen
         uniformly from this region. If it lies within the slice, it is kept, so xs+1 = x . Otherwise we
         shrink the region such that x forms one end and such that the region still contains xs . Then
         another sample is drawn. We continue in this way until a sample is accepted.
             To apply the method to multivariate distributions, we can sample one extra auxiliary variable
         for each dimension. The advantage of slice sampling over Gibbs is that it does not need
         a speciﬁcation of the full-conditionals, just the unnormalized joint. The advantage of slice
         sampling over MH is that it does not need a user-speciﬁed proposal distribution (although it
         does require a speciﬁcation of the width of the stepping out interval).
             Figure 24.14(b) illustrates the algorithm in action on a synthetic 1d problem. Figure 24.15
         illustrates its behavior on a slightly harder problem, namely binomial logistic regression. The
         model has the form
            yi ∼ Bin(ni , logit(β1 + β2 xi ))                                                                 (24.97)

         We use a vague Gaussian prior for the βj ’s. Figure 24.15(a) shows a grid-based approximation
         to the posterior, and Figure 24.15(b) shows a sample-based approximation. In this example, the
         grid is faster to compute, but for any problem with more than 2 dimensions, the grid approach
         is infeasible.

24.5.3   Swendsen Wang
         Consider an Ising model of the following form:
                    1 
           p(x) =         fe (xe )                                                                            (24.98)
                    Z e

          J xe −J
         where      = (xi , xj ) for edge e = (i, j), xi ∈ {+1, −1}, and the edge factor fe is deﬁned by
            e     e
                        , where J is the edge strength. Gibbs sampling in such models can be slow when
           e−J eJ
         J is large in absolute value, because neighboring states can be highly correlated. The Swendsen
         Wang algorithm (Swendsen and Wang 1987) is a auxiliary variable MCMC sampler which mixes
         much faster, at least for the case of attractive or ferromagnetic models, with J > 0.
            Suppose we introduce auxiliary binary variables, one per edge. 5 These are called bond
         variables, and will be denoted by z. We then deﬁne an extended model p(x, z) of the form
                        1 
            p(x, z) =        ge (xe , ze )                                                                    (24.99)
                        Z e
                                                                                        −J
                                                                                         e      e−J
         where ze ∈ {0, 1}, and we deﬁne the new factor as follows: ge (xe , ze = 0) =     −J          ,
                                                                                         e      e−J
                                 J
                                 e −e −J
                                                0                        1
         and ge (xe , ze = 1) =                       . It is clear that ze =0 ge (xe , ze ) = fe (xe ),
                                    0       eJ − e−J

         5. Our presentation of the method is based on some notes by David Mackay, available from http://www.inference
         .phy.cam.ac.uk/mackay/itila/swendsen.pdf.
24.5. Auxiliary variable MCMC *                                                                867




Figure 24.16 Illustration of the Swendsen Wang algorithm on a 2d grid. Used with kind permission of
Kevin Tang.


                 
and hence that z p(x, z) = p(x). So if we can sample from this extended model, we can just
throw away the z samples and get valid x samples from the original distribution.
   Fortunately, it is easy to apply Gibbs sampling to this extended model. The full conditional
p(z|x) factorizes over the edges, since the bond variables are conditionally independent given
the node variables. Furthermore, the full conditional p(ze |xe ) is simple to compute: if the
nodes on either end of the edge are in the same state (xi = xj ), we set the bond ze to 1 with
probability p = 1 − e−2J , otherwise we set it to 0. In Figure 24.16 (top right), the bonds that
could be turned on (because their corresponding nodes are in the same state) are represented
by dotted edges. In Figure 24.16 (bottom right), the bonds that are randomly turned on are
represented by solid edges.
   To sample p(x|z), we proceed as follows. Find the connected components deﬁned by the
graph induced by the bonds that are turned on. (Note that a connected component may consist
of a singleton node.) Pick one of these components uniformly at random. All the nodes in each
such component must have the same state, since the off-diagonal terms in the ge (xe , ze = 1)
factor are 0. Pick a state ±1 uniformly at random, and force all the variables in this component
to adopt this new state. This is illustrated in Figure 24.16 (bottom left), where the green square
         868                                      Chapter 24. Markov chain Monte Carlo (MCMC) inference


         denotes the selected connected component, and we choose to force all nodes within in to enter
         the white state.
            The validity of this algorithm is left as an exercise, as is the extension to handle local evidence
         and non-stationary potentials.
            It should be intuitively clear that Swendsen Wang makes much larger moves through the state
         space than Gibbs sampling. In fact, SW mixes much faster than Gibbs sampling on 2d lattice
         Ising models for a variety of values of the coupling parameter, provided J > 0. More precisely,
         let the edge strength be parameterized by J/T , where T > 0 is a computational temperature.
         For large T , the nodes are roughly independent, so both methods work equally well. However,
         as T approaches a critical temperature Tc , the typical states of the system have very long
         correlation lengths, and Gibbs sampling takes a very long time to generate independent samples.
         As the temperature continues to drop, the typical states are either all on or all off. The frequency
         with which Gibbs sampling moves between these two modes is exponentiall small. By contrast,
         SW mixes rapidly at all temperatures.
            Unfortunately, if any of the edge weights are negative, J < 0, the system is frustrated, and
         there are exponentially many modes, even at low temperature. SW does not work very well in
         this setting, since it tries to force many neighboring variables to have the same state. In fact,
         computation in this regime is provably hard for any algorithm (Jerrum and Sinclair 1993, 1996).

24.5.4   Hybrid/Hamiltonian MCMC *
         In this section, we brieﬂy mention a way to perform MCMC sampling for continuous state
         spaces, for which we can compute the gradient of the (unnormalized) log-posterior. This is the
         case in neural network models, for example.
            The basic idea is to think of the parameters as a particle in space, and to create auxiliary
         variables which represent the “momentum” of this particle. We then update this parameter/
         momentum pair according to certain rules (see e.g., (Duane et al. 1987; Neal 1993; MacKay 2003;
         Neal 2010) for details). The resulting method is called hybrid MCMC or Hamiltonian MCMC.
         The two main parameters that the user must specify are how many leapfrog steps to take
         when updating the position/ momentum, and how big to make these steps. Performance can
         be quite sensitive to these parameters (although see (Hoffman and Gelman 2011) for a recent
         way to set them automatically). This method can be combined with stochastic gradient descent
         (Section 8.5.2) in order to handle large datasets, as explained in (Ahn et al. 2012).
            Recently, a more powerful extension of this method has been developed, that exploits second-
         order gradient information. See (Girolami et al. 2010) for details.

 24.6    Annealing methods
         Many distributions are multimodal and hence hard to sample from. However, by analogy to the
         way metals are heated up and then cooled down in order to make the molecules align, we can
         imagine using a computational temperature parameter to smooth out a distribution, gradually
         cooling it to recover the original “bumpy” distribution. We ﬁrst explain this idea in more detail
         in the context of an algorithm for MAP estimation. We then discuss extensions to the sampling
         case.
         24.6. Annealing methods                                                                                                                    869

                                            temp 1.000                                                         temp 0.200

                                                                                         5
                                                                                      x 10

                     10                                                          10

                      8                                                           8

                      6                                                           6

                      4                                                           4

                      2                                                           2

                      0                                                           0
                     60                                                          60
                                                                            50                                                              50
                          40                                           40                    40                                        40
                                                                  30                                                              30
                                   20                        20                                       20                     20
                                                        10                                                              10
                               y        0     0                                                   y        0     0
                                                             x                                                               x


                                                  (a)                                                             (b)

         Figure 24.17 An energy surface at different temperatures. Note the different vertical scales. (a) T = 1.
         (b) T = 0.5. Figure generated by saDemoPeaks.



24.6.1   Simulated annealing
         Simulated annealing (Kirkpatrick et al. 1983) is a stochastic algorithm that attempts to ﬁnd
         the global optimum of a black-box function f (x). It is closely related to the Metropolis-
         Hastings algorithm for generating samples from a probability distribution, which we discussed
         in Section 24.3. SA can be used for both discrete and continuous optimization.
            The method is inspired by statistical physics. The key quantity is the Boltzmann distribution,
         which speciﬁes that the probability of being in any particular state x is given by
            p(x) ∝ exp(−f (x)/T )                                                                                                                (24.100)
         where f (x) is the “energy” of the system and T is the computational temperature. As the
         temperature approaches 0 (so the system is cooled), the system spends more and more time in
         its minimum energy (most probable) state.
            Figure 24.17 gives an example of a 2d function at different temperatures. At high temperatures,
         T  1, the surface is approximately ﬂat, and hence it is easy to move around (i.e., to avoid
         local optima). As the temperature cools, the largest peaks become larger, and the smallest peaks
         disappear. By cooling slowly enough, it is possible to “track” the largest peak, and thus ﬁnd the
         global optimum. This is an example of a continuation method.
            We can generate an algorithm from this as follows. At each step, sample a new state according
         to some proposal distribution x ∼ q(·|xk ). For real-valued parameters, this is often simply a
         random walk proposal, x = xk + k , where k ∼ N (0, Σ). For discrete optimization, other
         kinds of local moves must be deﬁned.
            Having proposed a new state, we compute
            α = exp ((f (x) − f (x ))/T )                                                                                                       (24.101)
         We then accept the new state (i.e., set xk+1 = x ) with probability min(1, α), otherwise we stay
         in the current state (i.e., set xk+1 = xk ). This means that if the new state has lower energy (is
         more probable), we will deﬁnitely accept it, but it it has higher energy (is less probable), we might
         still accept, depending on the current temperature. Thus the algorithm allows “down-hill” moves
         in probability space (up-hill in energy space), but less frequently as the temperature drops.
870                                                                                     Chapter 24. Markov chain Monte Carlo (MCMC) inference

                                               temperature vs iteration                                                                    energy vs iteration
             1                                                                                      −4.5

            0.9
                                                                                                     −5
            0.8
                                                                                                    −5.5
            0.7
                                                                                                     −6
            0.6

            0.5                                                                                     −6.5

            0.4
                                                                                                     −7
            0.3
                                                                                                    −7.5
            0.2
                                                                                                     −8
            0.1

             0                                                                                      −8.5
                  0            200         400           600          800        1000        1200          0             200               400            600         800        1000


                                                        (a)                                                                                       (b)

Figure 24.18 A run of simulated annealing on the energy surface in Figure 24.17. (a) Temperature vs
iteration. (b) Energy vs iteration. Figure generated by saDemoPeaks.

                                                    iter 550, temp 0.064                                                                 iter 1000, temp 0.007




                  60                                                                                150

                  50

                  40                                                                                100

                  30

                  20                                                                                 50

                  10

                      0                                                                               0

                          30                                                                                   30
                               28                                                              40                   28                                                           40
                                     26                                                 39                               26                                                 39
                                                                                  38                                                                                  38
                                          24                                37                                                 24                                37
                                               22                    36                                                             22                     36
                                                               35                                                                                   35
                                      y                                     x                                             y                                      x


                                                          (a)                                                                                    (b)

Figure 24.19 Histogram of samples from the annealed “posterior” at 2 different time points produced by
simulated annealing on the energy surface shown in Figure 24.17. Note that at cold temperatures, most of
the samples are concentrated near the peak at (38,25). Figure generated by saDemoPeaks.



   The rate at which the temperature changes over time is called the cooling schedule. It
has been shown (Kirkpatrick et al. 1983) that if one cools sufficiently slowly, the algorithm will
provably ﬁnd the global optimum. However, it is not clear what “sufficient slowly” means.
In practice it is common to use an exponential cooling schedule of the following form:
Tk = T0 C k , where T0 is the initial temperature (often T0 ∼ 1) and C is the cooling rate (often
C ∼ 0.8). See Figure 24.18(a) for a plot of this cooling schedule. Cooling too quickly means one
can get stuck in a local maximum, but cooling too slowly just wastes time. The best cooling
schedule is difficult to determine; this is one of the main drawbacks of simulated annealing.
   Figure 24.18(b) shows an example of simulated annealing applied to the function in Figure 24.17
using a random walk proposal. We see that the method stochastically reduces the energy
over time. Figures 24.19 illustrate (a histogram of) samples drawn from the cooled probability
distribution over time. We see that most of the samples are concentrated near the global
maximum. When the algorithm has converged, we just return the largest value found.
         24.6. Annealing methods                                                                                      871


24.6.2   Annealed importance sampling
         We now describe a method known as annealed importance sampling (Neal 2001) that com-
         bines ideas from simulated annealing and importance sampling in order to draw independent
         samples from difficult (e.g., multimodal) distributions.
            Suppose we want to sample from p0 (x) ∝ f0 (x), but we cannot do so easily; for example,
         this might represent a multimodal posterior. Suppose however that there is an easier distribution
         which we can sample from, call it pn (x) ∝ fn (x); for example, this might be the prior. We
         can now construct a sequence of intermediate distributions than move slowly from pn to p0 as
         follows:
            fj (x) = f0 (x)βj fn (x)1−βj                                                                        (24.102)

         where 1 = β0 > β1 > · · · > βn = 0, where βj is an inverse temperature. (Contrast this to the
         scheme used by simulated annealing which has the form fj (x) = f0 (x)βj ; this makes it hard
         to sample from pn .) Furthermore, suppose we have a series of Markov chains Tj (x, x ) (from x
         to x ) which leave each pj invariant. Given this, we can sample x from p0 by ﬁrst sampling a
         sequence z = (zn−1 , . . . , z0 ) as follows: sample zn−1 ∼ pn ; sample zn−2 ∼ Tn−1 (zn−1 , ·); ...;
         sample z0 ∼ T1 (z1 , ·). Finally we set x = z0 and give it weight
                  fn−1 (zn−1 ) fn−2 (zn−2 )     f1 (z1 ) f0 (z0 )
            w=                              ···                                                                 (24.103)
                   fn (zn−1 ) fn−1 (zn−2 )      f2 (z1 ) f1 (z0 )
            This can be shown to be correct by viewing the algorithm as a form of importance sampling
         in an extended state space z = (z0 , . . . , zn−1 ). Consider the following distribution on this state
         space:
            p(z) ∝ f (z) = f0 (z0 )T̃1 (z0 , z1 )T̃2 (z1 , z2 ) · · · T̃n−1 (zn−2 , zn−1 )                      (24.104)

         where T̃j is the reversal of Tj :

             T̃j (z, z ) = Tj (z , z)pj (z )/pj (z) = Tj (z , z)fj (z )/fj (z)                   (24.105)
                             
         It is clear that       z1 ,...,zn−1 f (z) = f0 (z0 ), so we can safely just use the z0 part of these
         sequences to recover the original ditribution.
            Now consider the proposal distribution deﬁned by the algorithm:

            q(z) ∝ g(z) = fn (zn−1 )Tn−1 (zn−1 , zn−2 ) · · · T2 (z2 , z1 )T1 (z1 , z0 )                        (24.106)
                                                                  f (z0 ,...,zn−1 )
         One can show that the importance weights w =             g(z0 ,...,zn−1 )    are given by Equation 24.103.

24.6.3   Parallel tempering
         Another way to combine MCMC and annealing is to run multiple chains in parallel at different
         temperatures, and allow one chain to sample from another chain at a neighboring temperature.
         In this way, the high temperature chain can make long distance moves through the state space,
         and have this inﬂuence lower temperature chains. This is known as parallel tempering. See
         e.g., (Earl and Deem 2005) for details.
         872                                    Chapter 24. Markov chain Monte Carlo (MCMC) inference


 24.7    Approximating the marginal likelihood
         The marginal likelihood p(D|M ) is a key quantity for Bayesian model selection, and is given by

            p(D|M ) =      p(D|θ, M )p(θ|M )dθ                                                     (24.107)

         Unfortunately, this integral is often intractable to compute, for example if we have non conjugate
         priors, and/or we have hidden variables. In this section, we brieﬂy discuss some ways to
         approximate this expression using Monte Carlo. See (Gelman and Meng 1998) for a more
         extensive review.

24.7.1   The candidate method
         There is a simple method for approximating the marginal likelihood known as the Candidate
         method (Chib 1995). This exploits the following identity:
                        p(D|θ, M )p(θ|M )
            p(D|M ) =                                                                              (24.108)
                           p(θ|D, M )
         This holds for any value of θ. Once we have picked some value, we can evaluate p(D|θ, M )
         and p(θ|M ) quite easily. If we have some estimate of the posterior near θ, we can then evaluate
         the denominator as well. This posterior is often approximated using MCMC.
           The ﬂaw with this method is that it relies on the assumption that p(θ|D, M ) has marginalized
         over all the modes of the posterior, which in practice is rarely possible. Consequently the method
         can give very inaccurate results in practice (Neal 1998).

24.7.2   Harmonic mean estimate
         Newton and Raftery (1994) proposed a simple method for approximating p(D) using the output
         of MCMC, as follows:

                        1
                           S
                                 1
            1/p(D) ≈                                                                               (24.109)
                        S s=1 p(D|θ s )

         where θ s ∼ p(θ|D). This expression is the harmonic mean of the likelihood of the data under
         each sample. The theoretical correctness of this expression follows from the following identity:
                 1                          1 p(D|θ)p(θ)        1                           1
                      p(θ|D)dθ =                         dθ =               p(θ|D)dθ =              (24.110)
               p(D|θ)                     p(D|θ) p(D)         p(D)                        p(D)
         Unfortunately, in practice this method works very poorly. Indeed, Radford Neal called this “the
         worst Monte Carlo method ever”.6 . The reason it is so bad is that it depends only on samples
         drawn from the posterior. But the posterior is often very insensitive to the prior, whereas the
         marginal likelihood is not. We only mention this method in order to warn against its use. We
         present a better method below.

         6. Source: radfordneal.wordpress.com/2008/08/17/the-harmonic-mean-of-the-likelihood-worst-mon
         te-carlo-method-ever.
         24.7. Approximating the marginal likelihood                                                             873


24.7.3   Annealed importance sampling
         We can use annealed importance           (Section 24.6.2) to evaluate a ratio
                                             sampling                                    of partition
         functions. Notice that Z0 = f0 (x)dx = f (z)dz, and Zn = fn (x)dx = g(z)dz. Hence
                                 f (z)                   
                                                                1
                                                                   S
            Z0        f (z)dz      g(z) g(z)dz        f (z)
                =            =               = Eq           ≈       ws                       (24.111)
            Zn        g(z)dz          g(z)dz          g(z)      S s=1

         If fn is a prior and f0 is the posterior, we can estimate Zn = p(D) using the above equation,
         provided the prior has a known normalization constant Z0 . This is generally considered the
         method of choice for evaluating difficult partition functions.

         Exercises
         Exercise 24.1 Gibbs sampling from a 2D Gaussian
         Suppose x ∼ N (μ, Σ), where μ = (1, 1) and Σ = (1, −0.5; −0.5, 1). Derive the full condition-
         als p(x1 |x2 ) and p(x2 |x1 ). Implement the algorithm and plot the 1d marginals p(x1 ) and p(x2 ) as
         histograms. Superimpose a plot of the exact marginals.
         Exercise 24.2 Gibbs sampling for a 1D Gaussian mixture model
         Consider applying Gibbs sampling to a univariate mixture of Gaussians, as in Section 24.2.3. Derive the
         expressions for the full conditionals. Hint: if we know zn = j (say), then μj gets “connected” to xn , but
         all other values of μi , for all i = j, are irrelevant. (This is an example of context-speciﬁc independence,
         where the structure of the graph simpliﬁes once we have assigned values to some of the nodes.) Hence,
         given all the zn values, the posteriors of the μ’s should be independent, so the conditional of μj should
         be independent of μ−j . (Similarly for σj .)

         Exercise 24.3 Gibbs sampling from the Potts model
         Modify the code in gibbsDemoIsing to draw samples from a Potts prior at different temperatures, as in
         Figure 19.8.
         Exercise 24.4 Full conditionals for hierarchical model of Gaussian means
         Let us reconsider the Gaussian-Gaussian model in Section 5.6.2 for modelling multiple related mean
         parameters θj . In this exercise we derive a Gibbs sampler instead of using EB. Suppose, following (Hoff
         2009, p134)), that we use the following conjugate priors on the hyper-parameters:

             μ      ∼   N (μ0 , γ02 )                                                                         (24.112)
                2
            τ       ∼   IG(η0 /2, η0 τ02 /2)                                                                  (24.113)
            σ2      ∼   IG(ν0 /2, ν0 σ02 /2)                                                                  (24.114)
874                                              Chapter 24. Markov chain Monte Carlo (MCMC) inference


We can set η = (μ0 , γ0 , η0 , τ0 , ν0 , σ0 ) to uninformative values. Given this model speciﬁcation, show that
the full conditionals for μ, τ , σ and the θj are as follows:

                                           Dθ/τ 2 + μ0 /γ02
          p(μ|θ1:D , τ 2 )     =   N (μ|                    , [D/τ 2 + 1/γ02 ]−1 )                      (24.115)
                                            D/τ 2 + 1/γ02
                                        Nj xj /σ 2 + 1/τ 2
   p(θj |μ, τ 2 , Dj , σ 2 )   =   N (θj |                  , [Nj /σ 2 + 1/τ 2 ]−1 )                    (24.116)
                                          Nj /σ 2 + 1/τ 2
                                                            
                                       2 η0 + D
                                                    η0 τ02 + j (θj − μ)2
          p(τ 2 |θ1:D , μ)     =   IG(τ |         ,                        )                            (24.117)
                                            2                  2
                                                     D                    D   Nj
                                           1               1
         p(σ 2 |θ 1:D , D)     =   IG(σ 2 | [ν0 +     Nj ], [ν0 σ02 +         (xij − θj )2 ])           (24.118)
                                           2      j=1
                                                           2          j=1 i=1


Exercise 24.5 Gibbs sampling for robust linear regression with a Student t likelihood
Modify the EM algorithm in Exercise 11.12 to perform Gibbs sampling for p(w, σ 2 , z|D, ν).
Exercise 24.6 Gibbs sampling for probit regression
Modify the EM algorithm in Section 11.4.6 to perform Gibbs sampling for p(w, z|D). Hint: we can
sample from a truncated Gaussian, N (z|μ, σ)I(a ≤ z ≤ b) in two steps: ﬁrst sample u ∼ U (Φ((a −
μ)/σ), Φ((b − μ)/σ)), then set z = μ + σΦ−1 (u) (Robert 1995).
Exercise 24.7 Gibbs sampling for logistic regression with the Student approximation
Derive the full conditionals for the joint model deﬁned by Equations 24.88 to 24.91.
25        Clustering



  25.1    Introduction
          Clustering is the process of grouping similar objects together. There are two kinds of inputs we
          might use. In similarity-based clustering, the input to the algorithm is an N ×N dissimilarity
          matrix or distance matrix D. In feature-based clustering, the input to the algorithm is an
          N × D feature matrix or design matrix X. Similarity-based clustering has the advantage that it
          allows for easy inclusion of domain-speciﬁc similarity or kernel functions (Section 14.2). Feature-
          based clustering has the advantage that it is applicable to “raw”, potentially noisy data. We will
          see examples of both below.
             In addition to the two types of input, there are two possible types of output: ﬂat cluster-
          ing, also called partitional clustering, where we partition the objects into disjoint sets; and
          hierarchical clustering, where we create a nested tree of partitions. We will discuss both of
          these below. Not surprisingly, ﬂat clusterings are usually faster to create (O(N D) for ﬂat vs
          O(N 2 log N ) for hierarchical), but hierarchical clusterings are often more useful. Furthermore,
          most hierarchical clustering algorithms are deterministic and do not require the speciﬁcation of
          K, the number of clusters, whereas most ﬂat clustering algorithms are sensitive to the initial
          conditions and require some model selection method for K. (We will discuss how to choose K
          in more detail below.)
             The ﬁnal distinction we will make in this chapter is whether the method is based on a
          probabilistic model or not. One might wonder why we even bother discussing non-probabilistic
          methods for clustering. The reason is two-fold: ﬁrst, they are widely used, so readers should
          know about them; second, they often contain good ideas, which can be used to speed up
          inference in a probabilistic models.

 25.1.1   Measuring (dis)similarity
          A dissimilarity matrix D is a matrix where di,i = 0 and di,j ≥ 0 is a measure of “distance”
          between objects i and j. Subjectively judged dissimilarities are seldom distances in the strict
          sense, since the triangle inequality, di,j ≤ di,k + dj,k , often does not hold. Some algorithms
          require D to be a true distance matrix, but many do not. If we have a similarity matrix S, we
          can convert it to a dissimilarity matrix by applying any monotonically decreasing function, e.g.,
          D = max(S) − S.
            The most common way to deﬁne dissimilarity between objects is in terms of the dissimilarity
         876                                                                          Chapter 25. Clustering


         of their attributes:
                             
                             D
            Δ(xi , xi ) =         Δj (xij , xi j )                                                    (25.1)
                             j=1

         Some common attribute dissimilarity functions are as follows:

         • Squared (Euclidean) distance:

                Δj (xij , xi j ) = (xij − xi j )2                                                     (25.2)

            Of course, this only makes sense if attribute j is real-valued.

         • Squared distance strongly emphasizes large differences (because differences are squared). A
           more robust alternative is to use an 1 distance:

                Δj (xij , xi j ) = |xij − xi j |                                                      (25.3)

            This is also called city block distance, since, in 2D, the distance can be computed by
            counting how many rows and columns we have to move horizontally and vertically to get
            from xi to xi .
         • If xi is a vector (e.g., a time-series of real-valued data), it is common to use the correlation
           coefficient (see Section 2.5.1). If the data is standardized, then corr [xi , xi ] = j xij xi j ,
                                          2
           and hence        j (xij − xi j ) = 2(1 − corr [xi , xi ]). So clustering based on correlation
                                                                 

           (similarity) is equivalent to clustering based on squared distance (dissimilarity).
         • For ordinal variables, such as {low, medium, high}, it is standard to encode the values as
           real-valued numbers, say 1/3, 2/3, 3/3 if there are 3 possible values. One can then apply
           any dissimilarity function for quantitative variables, such as squared distance.
         • For categorical variables, such as {red, green, blue}, we usually assign a distance of 1 if the
           features are different, and a distance of 0 otherwise. Summing up over all the categorical
           features gives

                                
                                D
                Δ(xi , xi ) =         I(xij = xi j )                                                  (25.4)
                                j=1


            This is called the hamming distance.

25.1.2   Evaluating the output of clustering methods *
            The validation of clustering structures is the most difficult and frustrating part of cluster
            analysis. Without a strong effort in this direction, cluster analysis will remain a black art
            accessible only to those true believers who have experience and great courage. — Jain
            and Dubes (Jain and Dubes 1988)
           25.1. Introduction                                                                                   877



                                               $$$       $%%        $$
                                               $$%        %%&        &&&



            Figure 25.1 Three clusters with labeled objects inside. Based on Figure 16.4 of (Manning et al. 2008).


           Clustering is an unupervised learning technique, so it is hard to evaluate the quality of the output
           of any given method. If we use probabilistic models, we can always evaluate the likelihood of
           a test set, but this has two drawbacks: ﬁrst, it does not directly assess any clustering that is
           discovered by the model; and second, it does not apply to non-probabilistic methods. So now
           we discuss some performance measures not based on likelihood.
              Intuitively, the goal of clustering is to assign points that are similar to the same cluster,
           and to ensure that points that are dissimilar are in different clusters. There are several ways
           of measuring these quantities e.g., see (Jain and Dubes 1988; Kaufman and Rousseeuw 1990).
           However, these internal criteria may be of limited use. An alternative is to rely on some external
           form of data with which to validate the method. For example, suppose we have labels for each
           object, as in Figure 25.1. (Equivalently, we can have a reference clustering; given a clustering, we
           can induce a set of labels and vice versa.) Then we can compare the clustering with the labels
           using various metrics which we describe below. We will use some of these metrics later, when
           we compare clustering methods.

25.1.2.1   Purity
                                                                                              C
           Let Nij be the number of objects in cluster i that belong to class j, and let Ni = j=1 Nij be
           the total number of objects in cluster i. Deﬁne pij = Nij /Ni ; this is the empirical distribution
           over class labels for cluster i. We deﬁne the purity of a cluster as pi  maxj pij , and the
           overall purity of a clustering as
                         Ni
              purity           pi                                                                      (25.5)
                          i
                             N

           For example, in Figure 25.1, we have that the purity is
               6 5   6 4   5 3   5+4+3
                   +     +     =       = 0.71                                                                 (25.6)
              17 6 17 6 17 5       17
              The purity ranges between 0 (bad) and 1 (good). However, we can trivially achieve a purity of
           1 by putting each object into its own cluster, so this measure does not penalize for the number
           of clusters.

25.1.2.2   Rand index
           Let U = {u1 , . . . , uR } and V = {v1 , . . . , VC } be two different partitions of the N data points,
           i.e., two different (ﬂat) clusterings. For example, U might be the estimated clustering and V
           is reference clustering derived from the class labels. Now deﬁne a 2 × 2 contingency table,
           878                                                                        Chapter 25. Clustering


           containing the following numbers: T P is the number of pairs that are in the same cluster in
           both U and V (true positives); T N is the number of pairs that are in the different clusters in
           both U and V (true negatives); F N is the number of pairs that are in the different clusters in
           U but the same cluster in V (false negatives); and F P is the number of pairs that are in the
           same cluster in U but different clusters in V (false positives). A common summary statistic is
           the Rand index:
                         TP + TN
              R                                                                                        (25.7)
                    TP + FP + FN + TN
           This can be interpreted as the fraction of clustering decisions that are correct. Clearly 0 ≤ R ≤
           1.
              For example, consider Figure 25.1, The three clusters contain 6, 6 and 5 points, so the number
           of “positives” (i.e., pairs of objects put in the same cluster, regardless of label) is
                                              
                                  6       6       5
               TP + FP =             +        +       = 40                                              (25.8)
                                  2       2       2
           Of these, the number of true positives is given by
                                          
                        5      5       3       2
              TP =         +      +       +        = 20                                                 (25.9)
                        2      2      2        2
                                                                                            
                                                                      3                        2
           where the last two terms come from cluster 3: there are       pairs labeled C and       pairs
                                                                      2                        2
           labeled A. So F P = 40 − 20 = 20. Similarly, one can show F N = 24 and T N = 72. So the
           Rand index is (20 + 72)/(20 + 20 + 24 + 72) = 0.68.
              The Rand index only achieves its lower bound of 0 if T P = T N = 0, which is a rare event.
           One can deﬁne an adjusted Rand index (Hubert and Arabie 1985) as follows:
                       index − expected index
              AR                                                                                      (25.10)
                      max index − expected index
           Here the model of randomness is based on using the generalized hyper-geometric distribution,
           i.e., the two partitions are picked at random subject to having the original number of classes
           and objects in each, and then the expected value of T P + T N is computed. This model can
           be used to compute the statistical signiﬁcance of the Rand index.
              The Rand index weights false positives and false negatives equally. Various other summary
           statistics for binary decision problems, such as the F-score (Section 5.7.2.2), can also be used.
           One can compute their frequentist sampling distribution, and hence their statistical signiﬁcance,
           using methods such as bootstrap.

25.1.2.3   Mutual information
           Another way to measure cluster quality is to compute the mutual information between U and
                                                                        |u ∩v |
           V (Vaithyanathan and Dom 1999). To do this, let pU V (i, j) = iN j be the probability that
           a randomly chosen object belongs to cluster ui in U and vj in V . Also, let pU (i) = |ui |/N
           be the be the probability that a randomly chosen object belongs to cluster ui in U ; deﬁne
         25.2. Dirichlet process mixture models                                                       879


         pV (j) = |vj |/N similarly. Then we have
                         R 
                          C
                                                      pU V (i, j)
            I(U, V ) =             pU V (i, j) log                                                  (25.11)
                         i=1 j=1
                                                     pU (i)pV (j)

         This lies between 0 and min{H (U ) , H (V )}. Unfortunately, the maximum value can be
         achieved by using lots of small clusters, which have low entropy. To compensate for this,
         we can use the normalized mutual information,
                                 I(U, V )
            N M I(U, V )                                                                  (25.12)
                           (H (U ) + H (V ))/2
         This lies between 0 and 1. A version of this that is adjusted for chance (under a particular
         random data model) is described in (Vinh et al. 2009). Another variant, called variation of
         information, is described in (Meila 2005).

 25.2    Dirichlet process mixture models
         The simplest approach to (ﬂat) clustering is to use a ﬁnite mixture model, as we discussed in
         Section 11.2.3. This is sometimes called model-based clustering, since we deﬁne a probabilistic
         model of the data, and optimize a well-deﬁned objective (the likelihood or posterior), as opposed
         to just using some heuristic algorithm.
            The principle problem with ﬁnite mixture models is how to choose the number of components
         K. We discussed several techniques in Section 11.5. However, in many cases, there is no well-
         deﬁned number of clusters. Even in the simple 2d height-weight data (Figure 1.8), it is not clear
         if the “correct” value of K should be 2, 3, or 4. It would be much better if we did not have to
         choose K at all.
            In this section, we discuss inﬁnite mixture models, in which we do not impose any a priori
         bound on K. To do this, we will use a non-parametric prior based on the Dirichlet process
         (DP). This allows the number of clusters to grow as the amount of data increases. It will also
         prove useful later when we discuss hiearchical clustering.
            The topic of non-parametric Bayes is currently very active, and we do not have space to
         go into details (see (Hjort et al. 2010) for a recent book on the topic). Instead we just give a
         brief review of the DP and its application to mixture modeling, based on the presentation in
         (Sudderth 2006, sec 2.2).

25.2.1   From ﬁnite to inﬁnite mixture models
         Consider a ﬁnite mixture model, as shown in Figure 25.2(a). The usual representation is as
         follows:
            p(xi |zi = k, θ) = p(xi |θ k )                                                          (25.13)
               p(zi = k|π) = πk                                                                     (25.14)
                     p(π|α) = Dir(π|(α/K)1K )                                                       (25.15)
         The form of p(θ k |λ) is chosen to be conjugate to p(xi |θ k ). We can write p(xi |θ k ) as xi ∼
         F (θ zi ), where F is the observation distribution. Similarly, we can write θ k ∼ H(λ), where H
         is the prior.
880                                                                               Chapter 25. Clustering




                               (a)                                          (b)

Figure 25.2 Two different representations of a ﬁnite mixture model. Left: traditional representation.
Right: representation where parameters are samples from G, a discrete measure. The picture on the right
illustrates the case where K = 4, and we sample 4 Gaussian means θk from a Gaussian prior H(.|λ). The
height of the spikes reﬂects the mixing weights πk . This weighted sum of delta functions is G. We then
generate two parameters, θ1 and θ2 , from G, one per data point. Finally, we generate two data points,
x1 and x2 , from N (θ1 , σ 2 ) and N (θ2 , σ 2 ). Source: Figure 2.9 of (Sudderth 2006) . Used with kind
permission of Erik Sudderth.


  An equivalent representation for this model is shown in Figure 25.2(b). Here θ i is the
parameter used to generate observation xi ; these parameters are sampled from distribution G,
which has the form
            
            K
   G(θ) =         πk δθk (θ)                                                                      (25.16)
            k=1

where π ∼ Dir( K  α
                    1), and θ k ∼ H. Thus we see that G is a ﬁnite mixture of delta functions,
centered on the cluster parameters θ k . The probability that θ i is equal to θ k is exactly πk , the
prior probability for that cluster.
   If we sample from this model, we will always (with probability one) get exactly K clusters,
with data points scattered around the cluster centers. We would like a more ﬂexible model,
that can generate a variable number of clusters. Furthermore, the more data we generate, the
more likely we should be to see a new cluster. The way to do this is to replace the discrete
distribution G with a random probability measure. Below we will show that the Dirichlet
process, denoted G ∼ DP(α, H), is one way to do this.
   Before we go into the details, we show some samples from this non-parametric model in
Figure 25.3. We see that it has the desired properties of generating a variable number of clusters,
with more clusters as the amount of data increases. The resulting samples look much more like
real data than samples from a ﬁnite mixture model.
   Of course, working with an “inﬁnite” model sounds scary. Fortunately, as we show below,
even though this model is potentially inﬁnite, we can perform inference using an amount of
computation that is not only tractable, but is often much less than that required to ﬁt a set
25.2. Dirichlet process mixture models                                                           881




                              (a)                                  (b)




                              (c)                                  (d)




                              (e)                                  (f)

Figure 25.3 Some samples from a Dirichlet process mixture model of 2D Gaussians, with concentration
parameter α = 1. From left to right, we show N = 50, N = 500 and N = 1000 samples. Each row is a
different run. We also show the model parameters as ellipses, which are sampled from a vague NIW base
distribution. Based on Figure 2.25 of (Sudderth 2006). Figure generated by dpmSampleDemo, written by
Yee-Whye Teh.



of ﬁnite mixture models for different K. The intuitive reason is that we can get evidence that
certain values of K are appropriate (have high posterior support) long before we have been able
to estimate the parameters, so we can focus our computational efforts on models of appropriate
complexity. Thus going to the inﬁnite limit can sometimes be faster. This is especially true
when we have multiple model selection problems to solve.
         882                                                                                    Chapter 25. Clustering




                          (a)                                    (b)                                    (c)

         Figure 25.4 (a) A base measure H on a 2d space Θ. (b) One possible partition into K = 3 regions,
         where the shading of cell Tk is proportional to E [G(Tk )] = H(Tk ). (c) A reﬁned partition into K = 5
         regions. Source: Figure 2.21 of (Sudderth 2006). Used with kind permission of Erik Sudderth.


25.2.2   The Dirichlet process
         Recall from Chapter 15 that a Gaussian process is a distribution over functions of the form
         f : X → R. It is deﬁned implicitly by the requirement that p(f (x1 ), . . . , f (xN )) be jointly
         Gaussian, for any set of points xi ∈ X . The parameters of this Gaussian can be computed using
         a mean function μ() and covariance (kernel) function K(). We write f ∼ GP(μ(), K()). Fur-
         thermore, the GP is consistently deﬁned, so that p(f (x1 )) can be derived from p(f (x1 ), f (x2 )),
         etc.
            A Dirichlet process is a distribution over probability measures G : Θ → R+ , where we
         require G(θ) ≥ 0 and Θ G(θ)dθ = 1. The DP is deﬁned implicitly by the requirement that
         (G(T1 ), . . . , G(TK )) has a joint Dirichlet distribution
            Dir(αH(T1 ), . . . , αH(TK ))                                                                            (25.17)
         for any ﬁnite partition (T1 , . . . , TK ) of Θ. If this is the case, we write G ∼ DP(α, H), where
         α is called the concentration parameter and H is called the base measure.1
            An example of a DP is shown in Figure 25.4, where the base measure is a 2d Gaussian. The
         distribution over all the cells, p(G(T1 ), . . . , G(TK )), is Dirichlet, so the marginals in each cell
         are beta distributed:
                               
             Beta(αH(Ti ), α       H(Tj ))                                                                (25.18)
                                 j=i

         The DP is consistently deﬁned in the sense that if T1 and T2 form a partition of T̃1 , then
         G(T1 ) + G(T2 ) and G(T˜1 ) both follow the same beta distribution.
           Recall that if π ∼ Dir(α), and z|π ∼ Cat(π), then we can integrate out π to get the
         predictive distribution for the Dirichlet-multinoulli model:
            z ∼ Cat(α1 /α0 , . . . , αK /α0 )                                                                       (25.19)

         1. Unlike a GP, knowing something about G(Tk ) does not tell us anything about G(Tk ), beyond the sum-to-one
         constraint; we say that the DP is a neutral process. Other stochastic processes can be deﬁned that do not have this
         property, but they are not so computationally convenient.
           25.2. Dirichlet process mixture models                                                                                                883


                          β1                      1−β1                      0.5
                                                                                           α=2
                                                                                                              0.4
                                                                                                                              α=2



                         π1          β2            1−β2
                                                                            0.4

                                                                            0.3
                                                                                                              0.3

                                                                                                              0.2


                                     π2
                                                                            0.2
                                                                                                              0.1

                                             β3               1−β3
                                                                            0.1

                                                                             0                                   0

                                             π3
                                                                                  0   10         20   30             0   10         20   30


                                                         β4 1−β4            0.4
                                                                                           α=5
                                                                                                              0.2
                                                                                                                              α=5



                                                         π4    β5
                                                                            0.3                              0.15

                                                                            0.2                               0.1

                                                               π5           0.1                              0.05

                                                                             0                                   0
                                                                                  0   10         20   30             0   10         20   30


                                            (a)                                                            (b)

           Figure 25.5 Illustration of the stick breaking construction. (a) We have a unit length stick, which we
           break at a random point β1 ; the length of the piece we keep is called π1 ; we then recursively break off
           pieces of the remaining stick, to generate π2 , π3 , . . .. Source: Figure 2.22 of (Sudderth 2006). Used with
           kind permission of Erik Sudderth. (b) Samples of πk from this process for α = 2 (top row) and α = 5
           (bottom row). Figure generated by stickBreakingDemo, written by Yee-Whye Teh.


                       
           where α0 = k αk . In other words, p(z = k|α) = αk /α0 . Also, the updated posterior for π
           given one observation is given by
              π|z ∼ Dir(α1 + I(z = 1), . . . , αK + I(z = K))                                                                                 (25.20)
           The DP generalizes this to arbitrary partitions. If G ∼ DP(α, H), then p(θ ∈ Ti ) = H(Ti ) and
           the posterior is
            p(G(T1 ), . . . , G(TK )|θ, α, H) = Dir(αH(T1 ) + I(θ ∈ T1 ), . . . , αH(TK ) + I(θ ∈ TK ))(25.21)
           This holds for any set of partitions. Hence if we observe multiple samples θ i ∼ G, the new
           posterior is given by

                                                                1                     
                                                                                      N
              G|θ 1 , . . . , θ N , α, H ∼ DP α + N,                       αH +              δθ i                                             (25.22)
                                                               α+N                    i=1

           Thus we see that the DP effectively deﬁnes a conjugate prior for arbitrary measurable spaces.
           The concentration parameter α is like the effective sample size of the base measure H.

25.2.2.1   Stick breaking construction of the DP
           Our discussion so far has been very abstract. We now give a constructive deﬁnition for the DP,
           known as the stick-breaking construction.
             Let π = {πk }∞ k=1 be an inﬁnite sequence of mixture weights derived from the following
           process:
              βk    ∼    Beta(1, α)                                                                                                           (25.23)
                               
                               k−1                            
                                                              k−1
              πk    =    βk          (1 − βl ) = βk (1 −            πl )                                                                      (25.24)
                               l=1                            l=1
           884                                                                         Chapter 25. Clustering


           This is often denoted by

              π ∼ GEM(α)                                                                                (25.25)

           where GEM stands for Griffiths, Engen and McCloskey (this term is due to (Ewens 1990)). Some
           samples from this process are shown in Figure 25.5. One can show that this process process
           will terminate with probability 1, although the number of elements it generates increases with
           α. Furthermore, the size of the πk components decreases on average.
             Now deﬁne
                       ∞
                       
              G(θ) =         πk δθk (θ)                                                                 (25.26)
                       k=1

           where π ∼ GEM(α) and θ k ∼ H. Then one can show that G ∼ DP(α, H).
              As a consequence of this construction, we see that samples from a DP are discrete with
           probability one. In other words, if you keep sampling it, you will get more and more repetitions
           of previously generated values. So if we sample θ i ∼ G, we will see repeated values; let us
           number the unique values θ 1 , θ 2 , etc. Data sampled from θ i will therefore cluster around the
           θ k . This is evident in Figure 25.3, where most data comes from the Gaussians with large πk
           values, represented by ellipses with thick borders. This is our ﬁrst indication that the DP might
           be useful for clustering.

25.2.2.2   The Chinese restaurant process (CRP)
           Working with inﬁnite dimensional sticks is problematic. However, we can exploit the clustering
           property to draw samples form a GP, as we now show.
              The key result is this: If θ i ∼ G are N observations from G ∼ DP(α, H), taking on K
           distinct values θ k , then the predictive distribution of the next observation is given by

                                              1                    
                                                                   K
              p(θ N +1 = θ|θ 1:N , α, H) =            αH(θ) +            Nk δθk (θ)                     (25.27)
                                             α+N
                                                                   k=1

           where Nk is the number of previous observations equal to θ k . This is called the Polya urn or
           Blackwell-MacQueen sampling scheme. This provides a constructive way to sample from a DP.
              It is much more convenient to work with discrete variables zi which specify which value of
           θ k to use. That is, we deﬁne θ i = θ zi . Based on the above expression, we have

                                           1                       
                                                                   K
              p(zN +1 = z|z1:N , α) =             αI(z = k ∗ ) +         Nk I(z = k)                    (25.28)
                                          α+N
                                                                   k=1

           where k ∗ represents a new cluster index that has not yet been used. This is called the Chinese
           restaurant process or CRP, based on the seemingly inﬁnite supply of tables at certain Chinese
           restaurants. The analogy is as follows: The tables are like clusters, and the customers are like
           observations. When a person enters the restaurant, he may choose to join an existing table with
           probability proportional to the number of people already sitting at this table (the Nk ); otherwise,
           with a probability that diminishes as more people enter the room (due to the 1/(α + N ) term),
         25.2. Dirichlet process mixture models                                                         885




                                   (a)                                           (b)

         Figure 25.6 Two views of a DP mixture model. Left: inﬁnite number of clusters parameters, θ k , and
         π ∼ GEM(α). Right: G is drawn from a DP. Compare to Figure 25.2. Source: Figure 2.24 of (Sudderth
         2006). Used with kind permission of Erik Sudderth.



         he may choose to sit at a new table k ∗ . The result is a distribution over partitions of the
         integers, which is like a distribution of customers to tables.
            The fact that currently occupied tables are more likely to get new customers is sometimes
         called the rich get richer phenomenon. Indeed, one can derive an expression for the distri-
         bution of cluster sizes induced by this prior process; it is basically a power law. The number
         of occupied tables K almost surely approaches α log(N ) as N → ∞, showing that the model
         complexity will indeed grow logarithmically with dataset size. More ﬂexible priors over cluster
         sizes can also be deﬁned, such as the two-parameter Pitman-Yor process.

25.2.3   Applying Dirichlet processes to mixture modeling
         The DP is not particularly useful as a model for data directly, since data vectors rarely repeat
         exactly. However, it is useful as a prior for the parameters of a stochastic data generating
         mechanism, such as a mixture model. To create such a model, we follow exactly the same setup
         as Section 11.2, but we deﬁne G ∼ DP(α, H). Equivalently, we can write the model as follows:
             π    ∼   GEM(α)                                                                         (25.29)
             zi   ∼   π                                                                              (25.30)
            θk    ∼   H(λ)                                                                           (25.31)
            xi    ∼   F (θ zi )                                                                      (25.32)

         This is illustrated in Figure 25.6. We see that G is now a random draw of an unbounded number
         of parameters θ k from the base distribution H, each with weight πk . Each data point xi is
         generated by sampling its own “private” parameter θ i from G. As we get more and more data,
         it becomes increasingly likely that θ i will be equal to one of the θ k ’s we have seen before, and
         thus xi will be generated close to an existing datapoint.
         886                                                                                    Chapter 25. Clustering


25.2.4   Fitting a DP mixture model
         The simplest way to ﬁt a DPMM is to modify the collapsed Gibbs sampler of Section 24.2.4.
         From Equation 24.23 we have

            p(zi = k|z−i , x, α, λ)    ∝   p(zi = k|z−i , α)p(xi |x−i , zi = k, z−i , λ)                       (25.33)

         By exchangeability, we can assume that zi is the last customer to enter the restaurant. Hence
         the ﬁrst term is given by

                                 1                                  
                                                                    K
            p(zi |z−i , α) =                αI(zi = k ∗ ) +               Nk,−i I(zi = k)                      (25.34)
                               α+N −1
                                                                    k=1

         where K is the number of clusters used by z−i , and k ∗ is a new cluster. Another way to write
         this is as follows:
                                 3
                                      Nk,−i
                                     α+N −1    if k has been seen before
             p(zi = k|z−i , α) =         α                                                       (25.35)
                                     α+N −1    if k is a new cluster

         Interestingly, this is equivalent to Equation 24.26, which has the form p(zi = k|z−i , α) =
         Nk,−i +α/K
           α+N −1 , in the K → ∞ limit (Rasmussen 2000; Neal 2000).
            To compute the second term, p(xi |x−i , zi = k, z−i , λ), let us partition the data x−i into
         clusters based on z−i . Let x−i,c = {xj : zj = c, j = i} be the data assigned to cluster c. If
         zi = k, then xi is conditionally independent of all the data points except those assigned to
         cluster k. Hence we have
                                                                           p(xi , x−i,k |λ)
            p(xi |x−i , z−i , zi = k, λ)   =   p(xi |x−i,k , λ) =                                              (25.36)
                                                                            p(x−i,k |λ)
         where
                                                 ⎡                           ⎤
                                                         
            p(xi , x−i,k |λ)   =      p(xi |θ k ) ⎣                p(xj |θ k )⎦ H(θ k |λ)dθ k                  (25.37)
                                                      j=i:zj =k

         is the marginal likelihood of all the data assigned to cluster k, including i, and p(x−i,k |λ) is an
         analogous expression excluding i. Thus we see that the term p(xi |x−i , z−i , zi = k, λ) is the
         posterior preditive distribution for cluster k evaluated at xi .
            If zi = k ∗ , corresponding to a new cluster, we have

            p(xi |x−i , z−i , zi = k ∗ , λ) = p(xi |λ) =           p(xi |θ)H(θ|λ)dθ                            (25.38)

         which is just the prior predictive distribution for a new cluster evaluated at xi .
            See Algorithm 1 for the pseudocode. (This is called “Algorithm 3” in (Neal 2000).) This is very
         similar to collapsed Gibbs for ﬁnite mixtures except that we have to consider the case zi = k ∗ .
            An example of this procedure in action is shown in Figure 25.7. The sample clusterings, and
         the induced posterior over K, seems reasonable. The method tends to rapidly discover a good
         clustering. By contrast, Gibbs sampling (and EM) for a ﬁnite mixture model often gets stuck in
       25.3. Affinity propagation                                                                      887


        Algorithm 25.1: Collapsed Gibbs sampler for DP mixtures
        1   for each i = 1 : N in random order do
       2        Remove xi ’s sufficient statistics from old cluster zi ;
       3        for each k = 1 : K do
       4            Compute pk (xi ) = p(xi |x−i (k));
       5            Set Nk,−i = dim(x−i (k)) ;
                                                      Nk,−i
       6            Compute p(zi = k|z−i , D) = α+N       −1 ;
       7        Compute p∗ (xi ) = p(xi |λ);
       8        Compute p(zi = ∗|z−i , D) = α+N      α
                                                       −1 ;
       9        Normalize p(zi |·);
       10       Sample zi ∼ p(zi |·) ;
       11       Add xi ’s sufficient statistics to new cluster zi ;
       12       If any cluster is empty, remove it and decrease K;



       poor local optima (not shown). This is because the DPMM is able to create extra redundant
       clusters early on, and to use them to escape local optima. Figure 25.8 shows that most of the
       time, the DPMM converges more rapidly than a ﬁnite mixture model.
          A variety of other ﬁtting methods have been proposed. (Daume 2007a) shows how one can use
       A star search and beam search to quickly ﬁnd an approximate MAP estimate. (Mansinghka et al.
       2007) discusses how to ﬁt a DPMM online using particle ﬁltering, which is a like a stochastic
       version of beam search. This can be more efficient than Gibbs sampling, particularly for large
       datasets. (Kurihara et al. 2006) develops a variational approximation that is even faster (see also
       (Zobay 2009)). Extensions to the case of non-conjugate priors are discussed in (Neal 2000).
          Another important issue is how to set the hyper-parameters. For the DP, the value of α
       does not have much impact on predictive accuracy, but it does affect the number of clusters.
       One approach is to put a Ga(a, b) prior for α, and then to from its posterior, p(α|K, N, a, b),
       using auxiliary variable methods (Escobar and West 1995). Alternatively, one can use empirical
       Bayes (McAuliffe et al. 2006). Similarly, for the base distribution, we can either sample the
       hyper-parameters λ (Rasmussen 2000) or use empirical Bayes (McAuliffe et al. 2006).

25.3   Affinity propagation
       Mixture models, whether ﬁnite or inﬁnite, require access to the raw N × D data matrix, and
       need to specify a generative model of the data. An alternative approach takes as input an N ×N
       similarity matrix, and then tries to identify examplars, which will act as cluster centers. The
       K-medoids or K-centers algorithm (Section 14.4.2) is one approach, but it can suffer from local
       minima. Here we describe an alternative approach called affinity propagation (Frey and Dueck
       2007) that works substantially better in practice.
         The idea is that each data point must choose another data point as its exemplar or centroid;
       some data points will choose themselves as centroids, and this will automatically determine the
       number of clusters. More precisely, let ci ∈ {1, . . . , N } represent the centroid for datapoint i.
888                                                                                               Chapter 25. Clustering


                               iter# 50                                                    iter# 100



     4                                                                  4


     2                                                                  2


     0                                                                  0


  −2                                                               −2


  −4                                                               −4


  −6                                                               −6


          −6    −4       −2                  0        2       4             −6   −4   −2               0   2   4

                                (a)                                                         (b)
                             iter# 200                            0.7


                                                                  0.6
 4


                                                                  0.5
 2


                                                                  0.4
 0


                                                                  0.3
−2


                                                                  0.2
−4


                                                                  0.1
−6


                                                                   0
         −6    −4       −2               0        2       4                  1    2    3               4   5   6

                              (c)                                                           (d)

Figure 25.7 100 data points in 2d are clustered using a DP mixture ﬁt with collapsed Gibbs sampling.
We show samples from the posterior after 50,100, 200 samples. We also show the posterior over K, based
on 200 samples, discarding the ﬁrst 50 as burnin. Figure generated by dpmGauss2dDemo, written by Yee
Whye Teh.


The goal is to maximize the following function
               
               N                         
                                         N
     S(c) =          s(i, ci ) +                 δk (c)                                                            (25.39)
               i=1                       k=1

The ﬁrst term measures the similarity of each point to its centroid. The second term is a penalty
term that is −∞ if some data point i has chosen k as its exemplar (i.e., ci = k), but k has not
chosen itself as an exemplar (i.e., we do not have ck = k). More formally,
             
                −∞ if ck = k but ∃i : ci = k
   δk (c) =                                                                                (25.40)
                0      otherwise
     The objective function can be represented as a factor graph. We can either use N nodes,
25.3. Affinity propagation                                                                                                                                                           889

                             −350                                                                                    −350




                             −400                                                                                    −400




           log p(x | π, θ)




                                                                                                   log p(x | π, θ)
                             −450                                                                                    −450




                             −500                                                                                    −500




                             −550                                                                                    −550

                                                                  Dirichlet Process Mixture                                                          Dirichlet Process Mixture
                                                                  Finite Mixture                                                                     Finite Mixture
                             −600 0             1                     2                       3
                                                                                                                     −600 0          1                  2                        3
                                10             10                 10                      10                            10          10               10                      10
                                                      Iteration                                                                          Iteration

                                                     (a)                                                                                 (b)

Figure 25.8 Comparison of collapsed Gibbs samplers for a DP mixture (dark blue) and a ﬁnite mixture
(light red) with K = 4 applied to N = 300 data points (shown in Figure 25.7). Left: logprob vs iteration
for 20 different starting values. Right: median (thick line) and quantiles (dashed lines) over 100 different
starting values. Source: Figure 2.27 of (Sudderth 2006). Used with kind permission of Erik Sudderth.


                         A
                                           1                      2                            3
                                                                                                                        …                       k      …                     N




                                      c1                   c2                        c3            …                           ci        …                            cN

                               s(1, )               s(2, )                s(3, )                                      s(i, )                                s(N, )



Figure 25.9 Factor graphs for affinity propagation. Circles are variables, squares are factors. Each ci node
has N possible states. From Figure S2 of (Frey and Dueck 2007). Used with kind permission of Brendan
Frey.



each with N possible values, as shown in Figure 25.9, or we can use N 2 binary nodes (see
(Givoni and Frey 2009) for the details). We will assume the former representation.
   We can ﬁnd a strong local maximum of the objective by using max-product loopy belief
propagation (Section 22.2). Referring to the model in Figure 25.9, each variable nodes ci sends
a message to each factor node δk . It turns out that this vector of N numbers can be reduced
to a scalar message, denote ri→k , known as the responsibility. This is a measure of how much
i thinks k would make a good exemplar, compared to all the other exemplars i has looked at.
In addition, each factor node δk sends a message to each variable node ci . Again this can be
reduced to a scalar message, ai←k , known as the availability. This is a measure of how strongly
k believes it should an exemplar for i, based on all the other data points k has looked at.
   As usual with loopy BP, the method might oscillate, and convergence is not guaranteed.
       890                                                                                                                                                                                                                         Chapter 25. Clustering

                                                                                                                                                                                                                            

                                                                                                                                                                                                                 




                                                                                                     



                                                                                                                   
                                               




                                                                                                                       




                                                                                                                                                                                                




                                                                                                                                                                                                                                                                  
                          




                                                                                                     




                                                                                                                                                                              




                                                                                                                                                                                                                                                    
                  




                                                                                              




                                                                                                                                                                      
                                          




                                                                                                                  




                                                                                                                                                                                           




                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                       




                                                       




                                                                                                                                




                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                 




                                                               




                                                                                                                                        




                                                                                                                                                                                                                




                                                                                                                                                                                                                                                                                  
                           




                                                                                                       




                                                                                                                                                                               




                                                                                                                                                                                                                                                     
                                  




                                                                                                             




                                                                                                                                                                                      
                                                                                                                                                                                                                                                                           




                                                                   




                                                                                                                                         




                                                                                                                                                                                                                 




                                                                                                                                                                                                                                                                                   
                                                                                                      
                                                                                                             




                                                                                                                                                                                      
                                                                                                                                                                                                                                                                           




                                                                                                      
                                                                                                                                                                                                                                                                            




             




                                                                                        




                                                                                                                                                                 
                                                                                        
                                                                                                                                                                                                                




                                                                   




                                                                                                                                         




                                                                                                                                                                                                                 




                                                                                                                                                                                                                                                                                   
                                                                                         
                                                                                                        
                                                                                                                                                                                 
                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                     




                                                                                         




                                                                                                                                                                  




                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                      




                                                       




                                                                                                                                 




                                                                                                                                                                                                         




                                                                                                                                                                                                                                                                          
                                                                                                                                                                                                                                                                      




                                                                                                                           




                                                                                                                                                                                                    




                                                                                                                                                                                                                                                                      
             




                                                                                         




                                                                                                                                                                 
                  




                                                                                             




                                                                                                                                                                      




                                                                                                                                                                                                                                            
                                                                                                                                                                                                                                                                   




                  




                                                                                             




                                                                                                                                                                      




                                                                                                                                                                                                                                            
                                                                                                                                                                                                                                                                     




                                                                                                         
                                                                                                                                




                                                                                                     
                                                                                                                                                                                                                                                                                       




                                                           




                                                                                                                                    




                                                                                                                                                                                                            




                                                                                                                                                                                                                                                                              
                          




                                                                                                     




                                                                                                                                                                              




                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                         




                                                                   




                                                                                                                                         




                                                                                                                                                                                                                 
                                                                                                                                               




                                                                                                                                                                                                                     
                                                                                                                               
                                                                                                                                                                                                                                                                        




                                                                        




                                                                                                                                                                                                                                                                                          
                                                                                                         




                                                                                                                                    
                                                                        




                                                                                                                                              




                                                                                                                                                                                                                     




                                                                                                                                                                                                                                                                                          
                                                                                                                                                                                                                                               




                                                          




                                                                                                                                   




                                                                                                                                                                                                           




                                                                                                                                                                                                                                                                             
                                                                                                                            




                                                                                                                                   
                                                                                                                                                                                                                                                                               




                                                   




                                                                                                                               




                                                                                                                                                                                                        
                                                                                                                                                                  
                                                                                                                                                                                                                     
                                                                                                                                                                                                                                            
                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                           




                                                                                                      




                                                                                                                                                                               




                                                                                                                                                                                                                                                     
                      




                                                                                                 




                                                                                                                                                                          




                                                                                                                                                                                                                                                
                           




                                                                                                                       
                                                                                                                                                                        




                                              




                                                                                                                                                                                                




                                                                                                                                                                                                                                                                  
                                        




                                                                                                                   




                                                                                                                                                                                            




                                                                                                                                                                                                                                                             
                                   




                                                                                                              




                                                                                                                                                                                       
                                       




                                                                                                                  




                                                                                                                                                                                           
                                                                                                       
                                                                                                                                                                                
                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                        




                                               




                                                                                                                                                                                                 




                                                                                                                                                                                                                                                                   
                                           
                                                                                                                  
                                                                                                                                                                                           
                                                                                                                                                                                                                                                                
                                                                                                                                                                                                                                                                 
                                                                                                                                   
                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                            
                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                    




                                                   




                                                                                                                               




                                                                                                                                                                                                        
                                                                                                                                                                                                                                                   
                                                                                                      




                                                               




                                                                                                                                     




                                                                                                                                                                                                             
                                                               




                                                                                                                                        




                                                                                                                                                                                                                




                                                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                                          
                                                                                                                                                                                                                                                   




                                                   




                                                                                                                               




                                                                                                                                                                                                        




                                                                                                                                                                                                                                                                          
                                                                                                                                        




                                                                                                                                                                                                                




                                                                                                                                                                                                                                                                                  
                                                                                                                               




                                                                                                                                                                                                        




                                                                                                                                                                                                                                                                          
                              




                                                                                                         
                                                                                                                                                                                                                                                                           




                               




                                                                                                          




                                                                                                                                                                                  




                                                                                                                                                                                                                                                        
                                                                                                              
                                                                                                                                                                                          
                                                                                                                                                                                                                 
                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                                                      




                                           




                                                                                                                   




                                                                                                                                                                                            




                                                                                                                                                                                                                                                              
                                                                                                                   
                                                                                                                   




                                                                                                                                                                                            




                                                                                                                                                                                                                                                              
                                      




                                                                                                                   




                                                                                                                                                                                          
                                                                                                                   
                                           




                                                                                                                   




                                                                                                                                                                                            




                                                                                                                                                                                                                                                               
                                           




                                                                                                                  




                                                                                                                                                                                          




                                                                                                                                                                                                                                                                 
                                             




                                                                                                                     




                                                                                                                                                                                              
                                                                                                                                                                                                    




                                            




                                                                                                                                                                                             




                                                                                                                                                                                                                                                               
                                                                                                                     
                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                       
                                                                                                                  




                                                    




                                                                                                                             




                                                                                                                                                                                                      




                                                                                                                                                                                                                                                                        
                                                   




                                                                                                                            




                                                                                                                                                                                                     




                                                                                                                                                                                                                                                                       
                                                   




                                                                                                                            




                                                                                                                                                                                                     




                                                                                                                                                                                                                                                                       
                                                                                                               




                                                                                                                                                                                       
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                        




                                      
                                                                                                                               
                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                         




                                                                                                         




                                                                                                                                                                                  




                                                                                                                                                                                                                                                        
                               




                                                                                                         




                                                                                                                                                                                  




                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                         




                                




                                                                                                           




                                                                                                                                                                                    
                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                       




                                                                                                                       
                                                                                                                                                                                                                                                           




                                               




                                                                                                                       




                                                                                                                                                                                                




                                                                                                                                                                                                                                                                     
                                      




                                                                                                               




                                                                                                                                                                                        
                                           




                                                                                                                   




                                                                                                                                                                                            




                                                                                                                                                                                                                                                                 
                                                                                                                                                                                                                            
                                                                                                                                                                                                                                                                                

                                                                                                                                                                                                                            

                                                                                                                                                                                                                

                                               




                                                                                                                       
                          




                                                                                                     




                                                                                                                                                                              
                                          




                                                                                                                  




                                                                                                                                                                                           
                                          
                                                                                                                    
                                                                                                                                                                                             




                                                                                                                                                                                                
                                                                                                                                                                                                                                                




                                                               




                                                                                                                                                                                                                                                             
                                                           
                                                                                                                                   
                                                                                                                                                                                                                                                                            
                              




                                                                                                         




                                                                                                                                                                                  
                                                                                                                                    




                                                                   
             




                                                                                         




                                                                                                                                                                 
                                                                                                                                                                               




                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                        
             




                                                                                         




                                                                                                                                                                 
                                                                                                                                                                                                                                                                                   
                                                                                                                                                                              
                  




                                                        




                                                                                                                                 




                                                                                                                                                                                                         
                  




                                                                                             




                                                                                                                                                                      




                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                            
                                                   


                                                           
                          




                                                                                                     




                                                                                                                                                                              
                                                       



                                                                        




                                                                                                                                                 




                                                                                                                                                                                                                        




                                                                                                                                                                                                                                                                                          
                                                                                                                                                                              
                                                                                                                                                                                                                                          
                                                       
                                                                                                                                                                                                                                                  
                           




                                                                                                      
                      




                                                                                                 




                                                                                                                                                                          
                                              




                                                                                                                       




                                                                                                                                                                                                
                                       




                                                                                                                  




                                                                                                                                                                                           




                                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                             
                                                                                                                                                                                         
                                                                                                                                                                                          
                                                           
                                                                                                                                  
                                                                                                                                                                                                          
                                                                                                                                                                                                                
                                                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                                                                     
                                                                                                                                                                           
                                                                                                                                                                            
                                                               




                                                                                                                                        




                                                                                                                                                                                                                
                                                       




                                                                                                                                
                                                       




                                                                                                                                




                                                                                                                                                                                                        
                                                               




                                                                                                                                        
                                                       




                                                                                                                                




                                                                                                                                                                                                        




                                                                                                                                                                                                                                                                           
                                                                                                                                   
                               




                                                                                                          




                                                                                                                                                                                  
                                                                                                                                        
                                       




                                                                                                                                                                                                                                                        
                                           




                                                                                                                   
                                           




                                                                                                                   
                                           
                                            




                                                                                                                                                                                                
                                                                                                                                                                                                                                                           
                                                    




                                                                                                                            
                                                   
                                                   




                                                                                                                                                                                                     




                                                                                                                                                                                                                                                                         
                               
                               




                                                                                                          




                                                                                                                                                                                  




                                                                                                                                                                                                                                                        
                                            
                                                                                                                                                                                                                                                        

                                                                                                                                                                                                                            
                                                                                                                                                                                                                                                                                



                                                                                                      ,-,$4$+.* /                                                   $4$+.* /



       Figure 25.10 Example of affinity propagation. Each point is colored coded by how much it wants to be
       an exemplar (red is the most, green is the least). This can be computed by summing up all the incoming
       availability messages and the self-similarity term. The darkness of the i → k arrow reﬂects how much
       point i wants to belong to exemplar k. From Figure 1 of (Frey and Dueck 2007). Used with kind permission
       of Brendan Frey.



       However, by using damping, the method is very reliable in practice. If the graph is densely
       connected, message passing takes O(N 2 ) time, but with sparse similarity matrices, it only takes
       O(E) time, where E is the number of edges or non-zero entries in S.
          The number of clusters can be controlled by scaling the diagonal terms S(i, i), which reﬂect
       how much each data point wants to be an exemplar. Figure 25.10 gives a simple example of some
       2d data, where the negative Euclidean distance was used to measured similarity. The S(i, i)
       values were set to be the median of all the pairwise similarities. The result is 3 clusters. Many
       other results are reported in (Frey and Dueck 2007), who show that the method signiﬁcantly
       outperforms K-medoids.

25.4   Spectral clustering
       An alternative view of clustering is in terms of graph cuts. The idea is we create a weighted
       undirected graph W from the similarity matrix S, typically by using the nearest neighbors of
       each point; this ensures the graph is sparse, which speeds computation. If we want to ﬁnd a
       partition into K clusters, say A1 , . . . , AK , one natural criterion is to minimize

                                                                                  1
                                                                                        K
             cut(A1 , . . . , AK )                                                  W (Ak , Ak )                                                                                                                                                                                  (25.41)
                                                                                  2
                                                                                        k=1
         25.4. Spectral clustering                                                                                      891

                                                                           
         where Ak = V \ Ak is the complement of Ak , and W (A, B)  i∈A,j∈B wij . For K = 2 this
         problem is easy to solve. Unfortunately the optimal solution often just partitions off a single
         data point from the rest. To ensure the sets are reasonably large, we can deﬁne the normalized
         cut to be

                                       1  cut(Ak , Ak )
                                         K
            Ncut(A1 , . . . , AK )                                                                                  (25.42)
                                       2     vol(Ak )
                                        k=1
                                               N
         where vol(A)  i∈A di , and di = j=1 wij is the weighted degree of node i. This splits
         the graph into K clusters such that nodes within each cluster are similar to each other, but are
         different to nodes in other clusters.
            We can formulate the Ncut problem in terms of searching for binary vectors ci ∈ {0, 1}N ,
         where cik = 1 if point i belongs to cluster k, that minimize the objective. Unfortunately this
         is NP-hard (Wagner and Wagner 1993). Affinity propagation is one way to solve the problem.
         Another is to relax the constraints that ci be binary, and allow them to be real-valued. The
         result turns into an eigenvector problem known as spectral clustering (see e.g., (Shi and Malik
         2000)). In general, the technique of performing eigenalysis of graphs is called spectral graph
         theory (Chung 1997).
            Going into the details would take us too far aﬁeld, but below we give a very brief summary,
         based on (von Luxburg 2007), since we will encounter some of these ideas later on.

25.4.1   Graph Laplacian
         Let W be a symmetric weight matrix for a graph, where wij = wji ≥ 0. Let D = diag(di ) be a
         diaogonal matrix containing the weighted degree of each node. We deﬁne the graph Laplacian
         as follows:

            LD−W                                                                                                    (25.43)

           This matrix has various important properties. Because each row sums to zero, we have
         that 1 is an eigenvector with eigenvalue 0. Furthermore, the matrix is symmetric and positive
         semi-deﬁnite. To see this, note that
                                                        
            f T Lf = f T Df − f T Wf =          di fi2 −   fi fj wij                           (25.44)
                                                        i             i,j
                            ⎛                                                        ⎞
                          1⎝                                                              1
                    =                di fi2 − 2             fi fj wij +         dj fj2 ⎠ =         wij (fi − fj )2   (25.45)
                          2     i                 i,j                       j
                                                                                             2 i,j

         Hence f T Lf ≥ 0 for all f ∈ RN . Consequently we see that L has N non-negative, real-valued
         eigenvalues, 0 ≤ λ1 ≤ λ2 ≤ . . . ≤ λN .
            To get some intuition as to why L might be useful for graph-based clustering, we note the
         following result.

         Theorem 25.4.1. The set of eigenvectors of L with eigenvalue 0 is spanned by the indicator vectors
         1A1 , . . . , 1AK , where Ak are the K connected components of the graph.
         892                                                                       Chapter 25. Clustering


         Proof.Let us start with the case K = 1. If f is an eigenvector with eigenvalue 0, then
         0 = ij wij (fi − fj )2 . If two nodes are connected, so wij > 0, we must have that fi = fj .
         Hence f is constant for all vertices which are connected by a path in the graph. Now suppose
         K > 1. In this case, L will be block diagonal. A similar argument to the above shows that we
         will have K indicator functions, which “select out” the connected components.
            This suggests the following algorithm. Compute the ﬁrst K eigenvectors uk of L. Let
         U = [u1 , . . . , uK ] be an N × K matrix with the eigenvectors in its columns. Let yi ∈ RK be
         the i’th row of U. Since these yi will be piecewise constant, we can apply K-means clustering
         to them to recover the connected components. Now assign point i to cluster k iff row i of Y
         was assigned to cluster k.
            In reality, we do not expect a graph derived from a real similarity matrix to have isolated
         connected components — that would be too easy. But it is reasonable to suppose the graph is
         a small “perturbation” from such an ideal. In this case, one can use results from perturbation
         theory to show that the eigenvectors of the perturbed Laplacian will be close to these ideal
         indicator functions (Ng et al. 2001).
            Note that this approach is related to kernel PCA (Section 14.4.4). In particular, KPCA uses the
         largest eigenvectors of W; these are equivalent to the smallest eigenvectors of I − W. This is
         similar to the above method, which computes the smallest eigenvectors of L = D − W. See
         (Bengio et al. 2004) for details. In practice, spectral clustering gives much better results than
         KPCA.

25.4.2   Normalized graph Laplacian
         In practice, it is important to normalize the graph Laplacian, to account for the fact that some
         nodes are more highly connected than others. There are two comon ways to do this. One
         method, used in e.g., (Shi and Malik 2000; Meila 2001), creates a stochastic matrix where each
         row sums to one:
            Lrw  D−1 L = I − D−1 W                                                                 (25.46)
         The eigenvalues and eigenvectors of L and Lrw are closely related to each other (see (von
         Luxburg 2007) for details). Furthemore, one can show that for Lrw , the eigenspace of 0 is
         again spanned by the indicator vectors 1Ak . This suggests the following algorithm: ﬁnd the
         smallest K eigenvectors of Lrw , create U, cluster the rows of U using K-means, then infer the
         partitioning of the original points (Shi and Malik 2000). (Note that the eigenvectors/ values of
         Lrw are equivalent to the generalized eigenvectors/ values of L, which solve Lu = λDU.)
           Another method, used in e.g., (Ng et al. 2001), creates a symmetric matrix
                         1      1            1        1
            Lsym  D− 2 LD− 2 = I − D− 2 WD− 2                                                      (25.47)
                                                          1
         This time the eigenspace of 0 is spanned by D 1Ak . This suggest the following algorithm: ﬁnd
                                                          2


                    "Keigenvectors of Lsym , create U, normalize each row to unit norm by creating
         the smallest
         tij = uij / ( k u2ik ), cluster the rows of T using K-means, then infer the partitioning of the
         original points (Ng et al. 2001).
            There is an interesting connection between Ncuts and random walks on a graph (Meila
         2001). First note that P = D−1 W = I − Lrw is a stochastic matrix, where pij = wij /di
         25.5. Hierarchical clustering                                                                             893


                                                                                  spectral clustering
                                 k−means clustering                    5
                      5
                                                                       4
                      4

                      3
                                                                       3

                      2                                                2

                      1                                                1

                                                                       0




                                                                   y
                      0




                  y
                      −1                                               −1

                      −2                                               −2

                      −3                                               −3
                      −4
                                                                       −4
                      −5
                       −6   −4    −2     0      2     4   6            −5
                                         x                              −6   −4    −2      0      2     4   6
                                                                                          x


                                         (a)                                             (b)

         Figure 25.11 Clustering data consisting of 2 spirals. (a) K-means. (b) Spectral clustering. Figure generated
         by spectralClusteringDemo, written by Wei-Lwun Lu.



         can be interpreted as the probability of going from i to j. If the graph is connected and
         non-bipartite, it possesses a unique stationary distribution π = (π 1 , . . . , π N ), where πi =
         di /vol(V ). Furthermore, one can show that

            Ncut(A, A) = p(A|A) + p(A|A)                                                                        (25.48)

         This means that we are looking for a cut such that a random walk rarely makes transitions from
         A to A or vice versa.

25.4.3   Example
         Figure 25.11 illustrates the method in action. In Figure 25.11(a), we see that K-means does a poor
         job of clustering, since it implicitly assumes each cluster corresponds to a spherical Gaussian.
         Next we try spectral clustering. We deﬁne a similarity matrix using the Gaussian kernel. We
         compute the ﬁrst two eigenvectors of the Laplacian. From this we can infer the clustering in
         Figure 25.11(b).
            Since the method is based on ﬁnding the smallest K eigenvectors of a sparse matrix, it takes
         O(N 3 ) time. However, a variety of methods can be used to scale it up for large datasets (see
         e.g., (Yan et al. 2009)).

 25.5    Hierarchical clustering
         Mixture models, whether ﬁnite or inﬁnite, produce a “ﬂat” clustering. Often we want to learn a
         hierarchical clustering, where clusters can be nested inside each other.
            There are two main approaches to hierarchical clustering: bottom-up or agglomerative clus-
         tering, and top-down or divisive clustering. Both methods take as input a dissimilarity matrix
         between the objects. In the bottom-up approach, the most similar groups are merged at each
894                                                                                                                  Chapter 25. Clustering

         5
                                                            2.5
        4.5               2
         4

        3.5
                                                             2
         3

        2.5                             5
         2        1   3                                     1.5
        1.5                             4
         1

        0.5
                                                             1
         0                                                              4         5                   1                3               2
              0   1   2       3         4   5   6   7   8


                                    (a)                                                         (b)

Figure 25.12 (a) An example of single link clustering using city block distance. Pairs (1,3) and (4,5) are
both distance 1 apart, so get merged ﬁrst. (b) The resulting dendrogram. Based on Figure 7.5 of (Alpaydin
2004). Figure generated by agglomDemo.

                                                                                            Hierarchical Clustering of Profiles



                                                                   0                                                                    1
                                                                                       0                     −0.5
                                                                                                              −1                        0
                                                                  −1
                                                                                      −1                     −1.5                      −1
                                                                  −2                                          −2                       −2
                                                                  −3                  −2                     −2.5                      −3
                                                                    0       10   20     0        10       20     0         10     20     0   10   20
                                                                   2                                                                    4
                                                                                       2                         0                      2
                                                                   0
                                                                                       0                       −2                       0
                                                                  −2                  −2                       −4                      −2
                                                                    0       10   20     0        10       20     0         10     20     0   10   20

                                                                   2                   4                                             2.5
                                                                                                                2                      2
                                                                   0                   2                        1                    1.5
                                                                  −2                   0                        0                      1
                                                                  −4                  −2                       −1                    0.5
                                                                    0       10   20     0        10       20     0         10     20    0    10   20

                                                                    2                                                                   2
                                                                                       2                         0
                                                                  1.5                                                                   1
                                                                    1                  1                       −1
                                                                                                                                        0
                                                                  0.5                  0                       −2                      −1
                                                                    0       10   20     0        10       20     0         10     20     0   10   20




                                  (a)                                                                     (b)

Figure 25.13 Hierarchical clustering applied to the yeast gene expression data. (a) The rows are permuted
according to a hierarchical clustering scheme (average link agglomerative clustering), in order to bring
similar rows close together. (b) 16 clusters induced by cutting the average linkage tree at a certain height.
Figure generated by hclustYeastDemo.



step. In the top-down approach, groups are split using various different criteria. We give the
details below.
   Note that agglomerative and divisive clustering are both just heuristics, which do not optimize
any well-deﬁned objective function. Thus it is hard to assess the quality of the clustering they
produce in any formal sense. Furthermore, they will always produce a clustering of the input
data, even if the data has no structure at all (e.g., it is random noise). Later in this section we
will discuss a probabilistic version of hierarchical clustering that solves both these problems.
         25.5. Hierarchical clustering                                                                              895


          Algorithm 25.2: Agglomerative clustering
          1   initialize clusters as singletons: for i ← 1 to n do Ci ← {i};
         2    initialize set of clusters available for merging: S ← {1, . . . , n};
         3    repeat
         4         Pick 2 most similar clusters to merge: (j, k) ← arg minj,k∈S dj,k ;
         5         Create new cluster C ← Cj ∪ Ck ;
         6         Mark j and k as unavailable: S ← S \ {j, k};
         7         if C = {1, . . . , n} then
         8             Mark  as available, S ← S ∪ {};
         9       foreach i ∈ S do
         10          Update dissimilarity matrix d(i, );
         11   until no more clusters are available for merging;




                             (a)                                (b)                                (c)

                   Figure 25.14    Illustration of (a) Single linkage. (b) Complete linkage. (c) Average linkage.



25.5.1   Agglomerative clustering
         Agglomerative clustering starts with N groups, each initially containing one object, and then at
         each step it merges the two most similar groups until there is a single group, containing all the
         data. See Algorithm 11 for the pseudocode. Since picking the two most similar clusters to merge
         takes O(N 2 ) time, and there are O(N ) steps in the algorithm, the total running time is O(N 3 ).
         However, by using a priority queue, this can be reduced to O(N 2 log N ) (see e.g., (Manning
         et al. 2008, ch. 17) for details). For large N , a common heuristic is to ﬁrst run K-means, which
         takes O(KN D) time, and then apply hierarchical clustering to the estimated cluster centers.
            The merging process can be represented by a binary tree, called a dendrogram, as shown
         in Figure 25.12(b). The initial groups (objects) are at the leaves (at the bottom of the ﬁgure),
         and every time two groups are merged, we join them in the tree. The height of the branches
         represents the dissimilarity between the groups that are being joined. The root of the tree (which
         is at the top) represents a group containing all the data. If we cut the tree at any given height,
         we induce a clustering of a given size. For example, if we cut the tree in Figure 25.12(b) at
         height 2, we get the clustering {{{4, 5}, {1, 3}}, {2}}. We discuss the issue of how to choose
         the height/ number of clusters below.
            A more complex example is shown in Figure 25.13(a), where we show some gene expression
         data. If we cut the tree in Figure 25.13(a) at a certain height, we get the 16 clusters shown in
         Figure 25.13(b).
            There are actually three variants of agglomerative clustering, depending on how we deﬁne
         the dissimilarity between groups of objects. These can give quite different results, as shown in
896                                                                                Chapter 25. Clustering



                                                   single link


                        0.3



                       0.25



                        0.2



                       0.15



                        0.1



                       0.05




                                                     (a)
                                                 complete link
                         2

                        1.8

                        1.6

                        1.4

                        1.2

                         1

                        0.8

                        0.6

                        0.4

                        0.2




                                                    (b)
                                                  average link

                        1.8


                        1.6

                        1.4

                        1.2


                          1

                        0.8


                        0.6

                        0.4


                        0.2




                                                     (c)

Figure 25.15 Hierarchical clustering of yeast gene expression data. (a) Single linkage. (b) Complete linkage.
(c) Average linkage. Figure generated by hclustYeastDemo.
           25.5. Hierarchical clustering                                                                897


           Figure 25.15. We give the details below.

25.5.1.1   Single link
           In single link clustering, also called nearest neighbor clustering, the distance between two
           groups G and H is deﬁned as the distance between the two closest members of each group:
              dSL (G, H) =      min       di,i                                                      (25.49)
                             i∈G,i ∈H

           See Figure 25.14(a).
              The tree built using single link clustering is a minimum spanning tree of the data, which
           is a tree that connects all the objects in a way that minimizes the sum of the edge weights
           (distances). To see this, note that when we merge two clusters, we connect together the two
           closest members of the clusters; this adds an edge between the corresponding nodes, and this
           is guaranteed to be the “lightest weight” edge joining these two clusters. And once two clusters
           have been merged, they will never be considered again, so we cannot create cycles. As a
           consequence of this, we can actually implement single link clustering in O(N 2 ) time, whereas
           the other variants take O(N 3 ) time.

25.5.1.2   Complete link
           In complete link clustering, also called furthest neighbor clustering, the distance between
           two groups is deﬁned as the distance between the two most distant pairs:
              dCL (G, H) =      max di,i                                                            (25.50)
                              i∈G,i ∈H

           See Figure 25.14(b).
              Single linkage only requires that a single pair of objects be close for the two groups to
           be considered close together, regardless of the similarity of the other members of the group.
           Thus clusters can be formed that violate the compactness property, which says that all the
           observations within a group should be similar to each other. In particular if we deﬁne the
           diameter of a group as the largest dissimilarity of its members, dG = maxi∈G,i ∈G di,i , then
           we can see that single linkage can produce clusters with large diameters. Complete linkage
           represents the opposite extreme: two groups are considered close only if all of the observations
           in their union are relatively similar. This will tend to produce clusterings with small diameter,
           i.e., compact clusters.

25.5.1.3   Average link
           In practice, the preferred method is average link clustering, which measures the average
           distance between all pairs:
                                1 
               davg (G, H) =                di,i                                            (25.51)
                             n G nH     
                                      i∈G i ∈H

           where nG and nH are the number of elements in groups G and H. See Figure 25.14(c).
              Average link clustering represents a compromise between single and complete link clustering.
           It tends to produce relatively compact clusters that are relatively far apart. However, since it
         898                                                                         Chapter 25. Clustering


         involves averaging of the di,i ’s, any change to the measurement scale can change the result. In
         contrast, single linkage and complete linkage are invariant to monotonic transformations of di,i ,
         since they leave the relative ordering the same.

25.5.2   Divisive clustering
         Divisive clustering starts with all the data in a single cluster, and then recursively divides each
         cluster into two daughter clusters, in a top-down fashion. Since there are 2N −1 − 1 ways to split
         a group of N items into 2 groups, it is hard to compute the optimal split, so various heuristics
         are used. One approach is pick the cluster with the largest diameter, and split it in two using the
         K-means or K-medoids algorithm with K = 2. This is called the bisecting K-means algorithm
         (Steinbach et al. 2000). We can repeat this until we have any desired number of clusters. This
         can be used as an alternative to regular K-means, but it also induces a hierarchical clustering.
            Another method is to build a minimum spanning tree from the dissimilarity graph, and then
         to make new clusters by breaking the link corresponding to the largest dissimilarity. (This
         actually gives the same results as single link agglomerative clustering.)
            Yet another method, called dissimilarity analysis (Macnaughton-Smith et al. 1964), is as
         follows. We start with a single cluster containing all the data, G = {1, . . . , N }. We then
         measure the average dissimilarity of i ∈ G to all the other i ∈ G:
                     1 
             dG
              i =           di,i                                                                     (25.52)
                    nG 
                       i ∈G

         We remove the most dissimilar object and put it in its own cluster H:

            i∗ = arg max dG             ∗         ∗
                          i , G = G \ {i }, H = {i }                                                  (25.53)
                      i∈G

         We now continue to move objects from G to H until some stopping criterion is met. Speciﬁcally,
         we pick a point i∗ to move that maximizes the average dissimilarity to each i ∈ G but minimizes
         the average dissimilarity to each i ∈ H:
                    1 
            dHi =            di,i , i∗ = arg max dG
                                                   i − di
                                                        H
                                                                                                   (25.54)
                   nH                        i∈G
                       i ∈H

         We continue to do this until dG   i − di is negative. The ﬁnal result is that we have split G into
                                                 H

         two daughter clusters, G and H. We can then recursively call the algorithm on G and/or H, or
         on any other node in the tree. For example, we might choose to split the node G whose average
         dissimilarity is highest, or whose maximum dissimilarity (i.e., diameter) is highest. We continue
         the process until the average dissimilarity within each cluster is below some threshold, and/or
         all clusters are singletons.
            Divisive clustering is less popular than agglomerative clustering, but it has two advantages.
         First, it can be faster, since if we only split for a constant number of levels, it takes just O(N )
         time. Second, the splitting decisions are made in the context of seeing all the data, whereas
         bottom-up methods make myopic merge decisions.
           25.5. Hierarchical clustering                                                                   899


25.5.3     Choosing the number of clusters
           It is difficult to choose the “right” number of clusters, since a hierarchical clustering algorithm
           will always create a hierarchy, even if the data is completely random. But, as with choosing K
           for K-means, there is the hope that there will be a visible “gap” in the lengths of the links in the
           dendrogram (represent the dissimilarity between merged groups) between natural clusters and
           unnatural clusters. Of course, on real data, this gap might be hard to detect. In Section 25.5.4,
           we will present a Bayesian approach to hierarchical clustering that nicely solves this problem.

25.5.4     Bayesian hierarchical clustering
           There are several ways to make probabilistic models which produce results similar to hierarchical
           clustering, e.g., (Williams 2000; Neal 2003b; Castro et al. 2004; Lau and Green 2006). Here we
           present one particular approach called Bayesian hierarchical clustering (Heller and Ghahra-
           mani 2005). Algorithmically it is very similar to standard bottom-up agglomerative clustering,
           and takes comparable time, whereas several of the other techniques referenced above are much
           slower. However, it uses Bayesian hypothesis tests to decide which clusters to merge (if any),
           rather than computing the similarity between groups of points in some ad-hoc way. These
           hypothesis tests are closely related to the calculations required to do inference in a Dirichlet
           process mixture model, as we will see. Furthermore, the input to the model is a data matrix,
           not a dissimilarity matrix.

25.5.4.1   The algorithm
           Let D = {x1 , . . . , xN } represent all the data, and let Di be the set of datapoints at the leaves
           of the substree Ti . At each step, we compare two trees Ti and Tj to see if they should be
           merged into a new tree. Deﬁne Dij as their merged data, and let Mij = 1 if they should be
           merged, and Mij = 0 otherwise.
              The probability of a merge is given by
                                 p(Dij |Mij = 1)p(Mij = 1)
                      rij                                                                              (25.55)
                                         p(Dij |Tij )
              p(Dij |Tij )   =   p(Dij |Mij = 1)p(Mij = 1) + p(Dij |Mij = 0)p(Mij = 0)                  (25.56)
           Here p(Mij = 1) is the prior probability of a merge, which can be computed using a bottom-up
           algorithm described below. We now turn to the likelihood terms. If Mij = 1, the data in Dij is
           assumed to come from the same model, and hence
                                    ⎡                 ⎤
                                       
              p(Dij |Mij = 1) = ⎣           p(xn |θ)⎦ p(θ|λ)dθ                                     (25.57)
                                       xn ∈Dij

           If Mij = 0, the data in Dij is assumed to have been generated by each tree independently, so
              p(Dij |Mij = 0) = p(Di |Ti )p(Dj |Tj )                                                    (25.58)
           These two terms will have already been computed by the bottom-up process. Consequently
           we have all the quantities we need to decide which trees to merge. See Algorithm 9 for the
           pseudocode, assuming p(Mij ) is uniform. When ﬁnished, we can cut the tree at points where
           rij < 0.5.
           900                                                                          Chapter 25. Clustering


            Algorithm 25.3: Bayesian hierarchical clustering
           1   Initialize Di = {xi }, i = 1 : N ;
           2   Compute p(Di |Ti ), i = 1 : N ;
           3   repeat
           4        for each pair of clusters i, j do
           5            Compute p(Dij |Tij )
           6      Find the pair Di and Dj with highest merge probability rij ;
           7      Merge Dk := Di ∪ Dj ;
           8      Delete Di , Dj ;
           9   until all clusters merged;



25.5.4.2   The connection with Dirichlet process mixture models
           In this section, we will establish the connection between BHC and DPMMs. This will in turn
           give us an algorithm to compute the prior probabilities p(Mij = 1).
              Note that the marginal likelihood of a DPMM, summing over all 2N − 1 partitions, is given by
                            
              p(Dk ) =          p(v)p(Dv )                                                          (25.59)
                              v∈V
                                mv
                                     mv       v
                              α         l=1 Γ(nl )
                 p(v)    =           Γ(nk +α)
                                                                                                         (25.60)
                                       Γ(α)
                              
                              mv
               p(Dv )    =          p(Dlv )                                                              (25.61)
                              l=1

           where V is the set of all possible partitions of Dk , p(v) is the probability of partition v, mv is
           the number of clusters in partition v, nvl is the number of points in cluster l of partition v, Dlv
           are the points in cluster l of partition v, and nk are the number of points in Dk .
              One can show (Heller and Ghahramani 2005) that p(Dk |Tk ) computed by the BHC algorithm
           is similar to p(Dk ) given above, except for the fact that it only sums over partitions which are
           consistent with tree Tk . (The number of tree-consistent partitions is exponential in the number
           of data points for balanced binary trees, but this is obviously a subset of all possible partitions.)
           In this way, we can use the BHC algorithm to compute a lower bound on the marginal likelihood
           of the data from a DPMM. Furthermore, we can interpret the algorithm as greedily searching
           through the exponentially large space of tree-consistent partitions to ﬁnd the best ones of a
           given size at each step.
              We are now in a position to compute πk = p(Mk = 1), for each node k with children i and
           j. This is equal to the probability of cluster Dk coming from the DPMM, relative to all other
           partitions of Dk consistent with the current tree. This can be computed as follows: initialize
           di = α and πi = 1 for each leaf i; then as we build the tree, for each internal node k, compute
                                                   k)
           dk = αΓ(nk ) + di dj , and πk = αΓ(n  dk , where i and j are k’s left and right children.
           25.6. Clustering datapoints and features                                                           901


               Data Set        Single Linkage     Complete Linkage      Average Linkage      BHC
               Synthetic       0.599 ± 0.033      0.634 ± 0.024         0.668 ± 0.040        0.828 ± 0.025
               Newsgroups      0.275 ± 0.001      0.315 ± 0.008         0.282 ± 0.002        0.465 ± 0.016
               Spambase        0.598 ± 0.017      0.699 ± 0.017         0.668 ± 0.019        0.728 ± 0.029
               Digits          0.224 ± 0.004      0.299 ± 0.006         0.342 ± 0.005        0.393 ± 0.015
               Fglass          0.478 ± 0.009      0.476 ± 0.009         0.491 ± 0.009        0.467 ± 0.011

           Table 25.1 Purity scores for various hierarchical clustering schemes applied to various data sets. The
           synthetic data has N = 200, D = 2, C = 4 and real features. Newsgroups is extracted from the 20
           newsgroups dataset (D = 500, N = 800, C = 4, binary features). Spambase has N = 100, C = 2, D =
           57 , binary features. Digits is the CEDAR Buffalo digits (N = 200, C = 10, D = 64, binarized features).
           Fglass is forensic glass dataset (N = 214, C = 6, D = 9, real features). Source: Table 1 of (Heller and
           Ghahramani 2005). Used with kind permission of Katherine Heller.



25.5.4.3   Learning the hyper-parameters
           The model has two free-parameters: α and λ, where λ are the hyper-parameters for the prior
           on the parameters θ. In (Heller and Ghahramani 2005), they show how one can back-propagate
                                      k |Tk )
           gradients of the form ∂p(D∂λ       through the tree, and thus perform an empirical Bayes estimate
           of the hyper-parameters.

25.5.4.4   Experimental results
           (Heller and Ghahramani 2005) compared BHC with traditional agglomerative clustering algo-
           rithms on various data sets in terms of purity scores. The results are shown in Table 25.1. We
           see that BHC did much better than the other methods on all datasets except the forensic glass
           one.
              Figure 25.16 visualizes the tree structure estimated by BHC and agglomerative hierarchical
           clustering (AHC) on the newsgroup data (using a beta-Bernoulli model). The BHC tree is clearly
           superior (look at the colors at the leaves, which represent class labels). Figure 25.17 is a zoom-in
           on the top few nodes of these two trees. BHC splits off clusters concerning sports from clusters
           concerning cars and space. AHC keeps sports and cars merged together. Although sports and
           cars both fall under the same “rec” newsgroup heading (as opposed to space, that comes under
           the “sci” newsgroup heading), the BHC clustering still seems more reasonable, and this is borne
           out by the quantitative purity scores.
              BHC has also been applied to gene expression data, with good results (Savage et al. 2009).

  25.6     Clustering datapoints and features
           So far, we have been concentrating on clustering datapoints. But each datapoint is often
           described by multiple features, and we might be interested in clustering them as well. Below we
           describe some methods for doing this.
902                                                                                 Chapter 25. Clustering




                        4 Newsgroups Average Linkage Clustering




                                                     (a)

                    4 Newsgroups Bayesian Hierarchical Clustering




                                                     (b)

Figure 25.16 Hierarchical clustering applied to 800 documents from 4 newsgroups (red is rec.autos, blue
is rec.sport.baseball, green is rec.sport.hockey, and magenta is sci.space). Top: average linkage hierarchical
clustering. Bottom: Bayesian hierarchical clustering. Each of the leaves is labeled with a color, according
to which newsgroup that document came from. We see that the Bayesian method results in a clustering
that is more consistent with these labels (which were not used during model ﬁtting). Source: Figure 7 of
(Heller and Ghahramani 2005). Used with kind permission of Katherine Heller.
         25.6. Clustering datapoints and features                                                                                    903


                                                                                       All Data
                                            All Data                             1                     799
                               354                            446
                                                                              Quebec                  Car
                                                                              Jet                     Baseball
                            Game                              Car             Boston                  Engine
                            Team                              Space                               2              797
                            Play                              NASA
                                                                                           Pitcher                 Car
                      205            149                284           162                  Boston                  Player
                                                                                           Ball                    Space
                                                                                                             1              796
                    Baseball       NHL                 Car            Space
                     Pitch         Hockey              Dealer         NASA                               Vehicle            Team
                                                                                                         Dealer             Game
                      Hit          Round               Drive          Orbit                              Driver             Hockey


                                               (a)                                                    (b)

         Figure 25.17 Zoom-in on the top nodes in the trees of Figure 25.16. (a) Bayesian method. (b) Average
         linkage. We show the 3 most probable words per cluster. The number of documents at each cluster is also
         given. Source: Figure 5 of (Heller and Ghahramani 2005). Used with kind permission of Katherine Heller.


25.6.1   Biclustering
         Clustering the rows and columns is known as biclustering or coclustering. This is widely used
         in bioinformatics, where the rows often represent genes and the columns represent conditions.
         It can also be used for collaborative ﬁltering, where the rows represent users and the columns
         represent movies.
            A variety of ad hoc methods for biclustering have been proposed; see (Madeira and Oliveira
         2004) for a review. Here we present a simple probabilistic generative model, based on (Kemp
         et al. 2006) (see also (Sheng et al. 2003) for a related approach). The idea is to associate each
         row and each column with a latent indicator, ri ∈ {1, . . . , K r }, cj ∈ {1, . . . , K c }. We then
         assume the data are iid across samples and across features within each block:
                            
             p(x|r, c, θ) =        p(xij |ri , cj , θ) = p(xij |θ ri ,cj )                             (25.62)
                               i     j

         where θ a,b are the parameters for row cluster a and column cluster b. Rather than using a ﬁnite
         number of clusters for the rows and columns, we can use a Dirchlet process, as in the inﬁnite
         relational model which we discuss in Section 27.6.1. We can ﬁt this model using e.g., (collapsed)
         Gibbs sampling.
             The behavior of this model is illustrated in Figure 25.18. The data has the form X(i, j) = 1
         iff animal i has feature j, where i = 1 : 50 and j = 1 : 85. The animals represent whales, bears,
         horses, etc. The features represent properties of the habitat (jungle, tree, coastal), or anatomical
         properties (has teeth, quadrapedal), or behavioral properties (swims, eats meat), etc. The model,
         using a Bernoulli likelihood, was ﬁt to the data. It discovered 12 animal clusters and 33 feature
         clusters. For example, it discovered a bicluster that represents the fact that mammals tend to
         have aquatic features.

25.6.2   Multi-view clustering
         The problem with biclustering is that each object (row) can only belong to one cluster. Intuitively,
         an object can have multiple roles, and can be assigned to different clusters depending on which
904                                                                                                  Chapter 25. Clustering

   O1   killer whale, blue whale, humpback, seal, walrus, dolphin          F1 2 3 4 5 6
   O2   antelope, horse, giraffe, zebra, deer
   O3   monkey, gorilla, chimp                                        O1
   O4   hippo, elephant, rhino                                        O2
   O5   grizzly bear, polar bear
                                                                      O3
                                                                      O4
   F1   ﬂippers, strain teeth, swims, arctic, coastal, ocean, water   O5
   F2   hooves, long neck, horns
   F3   hands, bipedal, jungle, tree
   F4   bulbous body shape, slow, inactive
   F5   meat teeth, eats meat, hunter, ﬁerce
   F6   walks, quadrapedal, ground


Figure 25.18 Illustration of biclustering . We show 5 of the 12 animal clusters, and 6 of the 33 feature
clusters. The original data matrix is shown, partitioned according to the discovered clusters. From Figure
3 of (Kemp et al. 2006). Used with kind permission of Charles Kemp.

                                                                                                α             γ




                                                                                  β
                                                                                          cj           θ jk

                                                                                                          k=1:∞


                                                                            riv
                                                                                               xij
                                                                              v=1:∞                               j=1:D


                                                                                          i=1:N



                           (a)                                                            (b)

Figure 25.19 (a) Illustration of multi-view clustering. Here we have 3 views (column partitions). In the
ﬁrst view, we have 2 clusters (row partitions). In the second view, we have 3 clusters. In the third view,
we have 2 clusters. The number of views and partitions are inferred from data. Rows within each colored
block are assumed to generated iid; however, each column can have a different distributional form, which
is useful for modeling discrete and continuous data. From Figure 1 of (Guan et al. 2010). Used with kind
permission of Jennifer Dy. (b) Corresponding DGM.



subset of features you use. For example, in the animal dataset, we may want to group the
animals on the basis of anatomical features (e.g., mammals are warm blooded, reptiles are not),
or on the basis of behavioral features (e.g., predators vs prey).
   We now present a model that can capture this phenomenon. This model was indepen-
dently proposed in (Shafto et al. 2006; Mansinghka et al. 2011), who call it crosscat (for cross-
categorization), and in (Guan et al. 2010; Cui et al. 2010), who call it (non-parametric) multi-clust.
(See also (Rodriguez and Ghosh 2011) for a very similar model.) The idea is that we partition the
columns (features) into V groups or views, so cj ∈ {1, . . . , V }, where j ∈ {1, . . . , D} indexes
25.6. Clustering datapoints and features                                                                       905


features. We will use a Dirichlet process prior for p(c), which allows V to grow automatically.
Then for each partition of the columns (i.e., each view), call it v, we partition the rows, again
using a DP, as illustrated in Figure 25.19(a). Let riv ∈ {1, . . . , K(v)} be the cluster to which
the i’th row belongs in view v. Finally, having partitioned the rows and columns, we generate
the data: we assume all the rows and columns within a block are iid. We can deﬁne the model
more precisely as follows:

      p(c, r, D) = p(c)p(r|c)p(D|r, c)                                                                      (25.63)
            p(c) = DP(c|α)                                                                                  (25.64)
                          V (c)
                           
          p(r|c)     =            DP(rv |β)                                                                 (25.65)
                           v=1
                                         ⎡                                                 ⎤
                          V (c)              K(rv )
                                                     
   p(D|r, c, θ)      =                   ⎣                       p(xij |θ jk )p(θ jk )dθ jk ⎦               (25.66)
                           v=1 j:cj =v       k=1      i:riv =k

See Figure 25.19(b) for the DGM.2
  If the data is binary, and we use a Beta(γ, γ) prior for θ jk , the likelihood reduces to
                          V (c)          K(rv )
                                         Beta(nj,k,v + γ, nj,k,v + γ)
   p(D|r, c, γ)      =                                                                                      (25.67)
                           v=1 j:cj =v k=1
                                                    Beta(γ, γ)
                  
where nj,k,v = i:ri,v =k I(xij = 1) counts the number of features which are on in the j’th
column for view v and for row cluster k. Similarly, nj,k,v counts how many features are off.
The model is easily extended to other kinds of data, by replacing the beta-Bernoulli with, say,
the Gaussian-Gamma-Gaussian model, as discussed in (Guan et al. 2010; Mansinghka et al. 2011).
   Approximate MAP estimation can be done using stochastic search (Shafto et al. 2006), and
approximate inference can be done using variational Bayes (Guan et al. 2010) or Gibbs sampling
(Mansinghka et al. 2011). The hyper-parameter γ for the likelihood can usually be set in a non-
informative way, but results are more sensitive to the other two parameters, since α controls
the number of column partitions, and β controls the number of row partitions. Hence a more
robust technique is to infer the hyper-parameters using MH. This also speeds up convergence
(Mansinghka et al. 2011).
   Figure 25.20 illustrates the model applied to some binary data containing 22 animals and 106
features. The ﬁgures shows the (approximate) MAP partition. The ﬁrst partition of the columns
contains taxonomic features, such as “has bones”, “is warm-blooded”, “lays eggs”, etc. This
divides the animals into birds, reptiles/ amphibians, mammals, and invertebrates. The second
partition of the columns contains features that are treated as noise, with no apparent structure
(except for the single row labeled “frog”). The third partition of the columns contains ecological
features like “dangerous”, “carnivorous”, “lives in water”, etc. This divides the animals into prey,
land predators, sea predators and air predators. Thus each animal (row) can belong to a different

2. The dependence between r and c is not shown, since it is not a dependence between the values of riv and cj , but
between the cardinality of v and cj . In other words, the number of row partitions we need to specify (the number of
views, indexed by v) depends on the number of column partitions (clusters) that we have.
906                                                                                   Chapter 25. Clustering


                  A                               B                               C
     Leopard                                                                                                Leopard
        Sheep                                                                                               Alligator
          Seal                                                                                              Python
      Dolphin                                                                                               Seal
     Monkey                                                                                                 Dolphin
            Bat                                                                                             Frog
     Alligator                                                                                              Jellyfish
       Iguana                                                                                               Octopus
          Frog                                                                                              Penguin
      Python                                                                                                Finch
         Finch                                                                                              Seagull
      Ostrich                                                                                               Owl
      Seagull                                                                                               Eagle
           Owl                                                                                              Dragonfly
     Penguin                                                                                                Bat
         Eagle                                                                                              Grasshopper
Grasshopper                                                                                                 Ant
            Ant                                                                                             Bee
           Bee                                                                                              Sheep
     Jellyfish                                     Frog                                                     Monkey
    Octopus                                                                                                 Iguana
   Dragonfly                                                                                                Ostrich




                                                                                                        flies
                               is brown




                                                                        is tall




                                                                                                    is long
                                                                        roars
                                  is furry




                                                                is smooth
                   is warm−blooded




                             has teeth
                                has feet




                                                                     is slimy
                                is green
                              squawks




                                                                     is large
                                                                  eats nuts




                                                                                           lives in water
                                                               is a rodent




                                                                    has fins
                                is smart




                                                                                                  eats fish
                             eats mice




                                                                                              is ferocious
                          has flippers




                                                                 is a feline
                         eats rodents




                    travels in groups




                                                       has webbed feet




                                                                                            is a predator
                             has paws




                                                                    is a fish
                             lays eggs




                              has a tail




                                                                has horns
                            has bones




                                                                                           is dangerous
                                                        is an amphibian
                        has a tongue




                                                              has hooves
                             is a lizard




                                                            lives in trees
                        is a mammal




                       has antennae




                          has a snout




                                                                                            eats animals

                                                                                  lives in hot climates
                                                            lives in lakes




                                                                                              eats leaves
                                                                                          is a carnivore




                                                                                           lives in grass
                           has a beak




                                                  lives in cold climates
                    has a large brain




                  makes loud noises
                   has a spinal cord




Figure 25.20 MAP estimate produced by the crosscat system when applied to a binary data matrix of
animals (rows) by features (columns). See text for details. Source: Figure 7 of (Shafto et al. 2006) . Used
with kind permission of Vikash Mansingkha.



cluster depending on what set of features are considered. Uncertainty about the partitions can
be handled by sampling.
   It is interesting to compare this model to a standard inﬁnite mixture model. While the
standard model can represent any density on ﬁxed-sized vectors as N → ∞, it cannot cope
with D → ∞, since it has no way to handle irrelevant, noisy or redundant features. By contrast,
the crosscat/multi-clust system is robust to irrelevant features: it can just partition them off,
and cluster the rows only using the relevant features. Note, however, that it does not need a
separate “background” model, since everything is modelled using the same mechanism. This is
useful, since one’s person’s noise is another person’s signal. (Indeed, this symmetry may explain
why multi-clust outperformed the sparse mixture model approach of (Law et al. 2004) in the
experiments reported in (Guan et al. 2010).)
26      Graphical model structure learning



 26.1   Introduction
        We have seen how graphical models can be used to express conditional independence assump-
        tions between variables. In this chapter, we discuss how to learn the structure of the graphical
        model itself. That is, we want to compute p(G|D), where G is the graph structure, represented
        as an V × V adjacency matrix.
           As we discussed in Section 1.3.3, there are two main applications of structure learning: knowl-
        edge discovery and density estimation. The former just requires a graph topology, whereas the
        latter requires a fully speciﬁed model.
           The main obstacle in structure learning is that the number of possible graphs is exponential in
        the number of nodes: a simple upper bound is O(2V (V −1)/2 ). Thus the full posterior p(G|D)
        is prohibitively large: even if we could afford to compute it, we could not even store it. So we
        will seek appropriate summaries of the posterior. These summary statistics depend on our task.
           If our goal is knowledge discovery, we may want to compute posterior edge marginals,
        p(Gst = 1|D); we can then plot the corresponding graph, where the thickness of each edge
        represents our conﬁdence in its presence. By setting a threshold, we can generate a sparse
        graph, which can be useful for visualization purposes (see Figure 1.11).
           If our goal is density estimation, we may want to compute the MAP graph, Ĝ ∈ argmaxG p(G|D).
        In most cases, ﬁnding the globally optimal graph will take exponential time, so we will use dis-
        crete optimization methods such as heuristic search. However, in the case of trees, we can
        ﬁnd the globally optimal graph structure quite efficiently using exact methods, as we discuss in
        Section 26.3.
           If density estimation is our only goal, it is worth considering whether it would be more
        appropriate to learn a latent variable model, which can capture correlation between the visible
        variables via a set of latent common causes (see Chapters 12 and 27). Such models are often
        easier to learn and, perhaps more importantly, they can be applied (for prediction purposes)
        much more efficiently, since they do not require performing inference in a learned graph with
        potentially high treewidth. The downside with such models is that the latent factors are often
        unidentiﬁable, and hence hard to interpret. Of course, we can combine graphical model structure
        learning and latent variable learning, as we will show later in this chapter.
           In some cases, we don’t just want to model the observed correlation between variables;
        instead, we want to model the causal structure behind the data, so we can predict the effects
        of manipulating variables. This is a much more challenging task, which we brieﬂy discuss in
         908                                                                        Chapter 26. Graphical model structure learning



                                   bible       case   course      evidence         children                          mission         launch

                                 christian             fact      israel       government            earth      gun            nasa                 lunar

                                               god      human       jews     war        president              law    orbit          shuttle       moon

                    jesus   computer       religion      world                                        rights          solar                space

                            science                                                           state

                                  university




         Figure 26.1 Part of a relevance network constructed from the 20-news data shown in Figure 1.2. We
         show edges whose mutual information is greater than or equal to 20% of the maximum pairwise MI. For
         clarity, the graph has been cropped, so we only show a subset of the nodes and edges. Figure generated
         by relevanceNetworkNewsgroupDemo.



         Section 26.6.

 26.2    Structure learning for knowledge discovery
         Since computing the MAP graph or the exact posterior edge marginals is in general computa-
         tionally intractable (Chickering 1996), in this section we discuss some “quick and dirty” methods
         for learning graph structures which can be used to visualize one’s data. The resulting models do
         not constitute consistent joint probability distributions, so they cannot be used for prediction,
         and they cannot even be formally evaluated in terms of goodness of ﬁt. Nevertheless, these
         methods are a useful ad hoc tool to have in one’s data visualization toolbox, in view of their
         speed and simplicity.

26.2.1   Relevance networks
         A relevance network is a way of visualizing the pairwise mutual information between multiple
         random variables: we simply choose a threshold and draw an edge from node i to node j if
         I (Xi ; Xj ) is above this threshold. In the Gaussian case, I (Xi ; Xj ) = − 12 log(1 − ρ2ij ), where
         ρij is the correlation coefficient (see Exercise 2.13), so we are essentially visualizing Σ; this is
         known as the covariance graph (Section 19.4.4.1).
            This method is quite popular in systems biology (Margolin et al. 2006), where it is used to
         visualize the interaction between genes. The trouble with biological examples is that they are
         hard for non-biologists to understand. So let us instead illustrate the idea using natural language
         text. Figure 26.1 gives an example, where we visualize the MI between words in the newsgroup
         dataset from Figure 1.2. The results seem intuitively reasonable.
            However, relevance networks suffer from a major problem: the graphs are usually very dense,
         since most variables are dependent on most other variables, even after thresholding the MIs.
         For example, suppose X1 directly inﬂuences X2 which directly inﬂuences X3 (e.g., these form
         components of a signalling cascade, X1 − X2 − X3 ). Then X1 has non-zero MI with X3 (and
         vice versa), so there will be a 1 − 3 edge in the relevance network. Indeed, most pairs will be
         26.2. Structure learning for knowledge discovery                                                                                                                                                                                                                                                                 909

                                                                                                                                                                                                                         children        case      course   fact     question




                                    earth            bible                  christian                                                                                                                                           food                                                          baseball




                                   mission           god                  disk             mac                                    car                                                                                    aids                   doctor                                            fans




                                   nasa                                          jesus          pc    dos         drive     bmw                   israel           government                                                   health                                           games                hockey        hit




                          launch                                   memory                scsi             jews              engine       dealer            state            war            computer        president                        medicine                              season          puck        nhl




                              shuttle                   religion   data                        card                       honda      power                   oil       world         insurance        science                       studies                                                team




                          software           solar                                graphics              driver                                    gun                                research    university      water          human       cancer                         win                           league




                        lunar                                 system             display          video           windows                                  law                                                                           disease                                 won        players




                       moon                                                 server                        files                                                    rights            problem                                                evidence




                                   space                           program                              format                                                                                                                      patients       msg      help




                mars            orbit                    technology                      ftp          image                                                                       number                                                             vitamin       email




                                            satellite                                version                                                                                                                           phone




         Figure 26.2 A dependency network constructed from the 20-news data. We show all edges with regres-
         sion weight above 0.5 in the Markov blankets estimated by 1 penalized logistic regression. Undirected
         edges represent cases where a directed edge was found in both directions. From Figure 4.9 of (Schmidt
         2010). Used with kind permission of Mark Schmidt.



         connected.
            A better approach is to use graphical models, which represent conditional independence,
         rather than dependence. In the above example, X1 is conditionally independent of X3 given
         X2 , so there will not be a 1 − 3 edge. Consequently graphical models are usually much sparser
         than relevance networks, and hence are a more useful way of visualizing interactions between
         multiple variables.

26.2.2   Dependency networks
         A simple and efficient way to learn a graphical model structure is to independently ﬁt D sparse
         full-conditional distributions p(xt |x−t ); this is called a dependency network (Heckerman et al.
         2000). The chosen variables constitute the inputs to the node, i.e., its Markov blanket. We
         can then visualize the resulting sparse graph. The advantage over relevance networks is that
         redundant variables will not be selected as inputs.
            We can use any kind of sparse regression or classiﬁcation method to ﬁt each CPD. (Heckerman
         et al. 2000) uses classiﬁcation/ regression trees, (Meinshausen and Buhlmann 2006) use 1 -
         regularized linear regression, (Wainwright et al. 2006) use 1 -regularized logistic regression (see
         depnetFit for some code), (Dobra 2009) uses Bayesian variable selection, etc. (Meinshausen
       910                                                  Chapter 26. Graphical model structure learning


       and Buhlmann 2006) discuss theoretical conditions under which 1 -regularized linear regression
       can recover the true graph structure, assuming the data was generated from a sparse Gaussian
       graphical model.
          Figure 26.2 shows a dependency network that was learned from the 20-newsgroup data using
       1 regularized logistic regression, where the penalty parameter λ was chosen by BIC. Many
       of the words present in these estimated Markov blankets represent fairly natural associations
       (aids:disease, baseball:fans, bible:god, bmw:car, cancer:patients, etc.). However, some of the esti-
       mated statistical dependencies seem less intuitive, such as baseball:windows and bmw:christian.
       We can gain more insight if we look not only at the sparsity pattern, but also the values of the
       regression weights. For example, here are the incoming weights for the ﬁrst 5 words:

       • aids: children (0.53), disease (0.84), fact (0.47), health (0.77), president (0.50), research (0.53)

       • baseball: christian (-0.98), drive (-0.49), games (0.81), god (-0.46), government (-0.69), hit (0.62),
         memory (-1.29), players (1.16), season (0.31), software (-0.68), windows (-1.45)

       • bible: car (-0.72), card (-0.88), christian (0.49), fact (0.21), god (1.01), jesus (0.68), orbit (0.83),
         program (-0.56), religion (0.24), version (0.49)
       • bmw: car (0.60), christian (-11.54), engine (0.69), god (-0.74), government (-1.01), help (-0.50),
         windows (-1.43)

       • cancer: disease (0.62), medicine (0.58), patients (0.90), research (0.49), studies (0.70)
       Words in italic red have negative weights, which represents a dissociative relationship. For
       example, the model reﬂects that baseball:windows is an unlikely combination. It turns out that
       most of the weights are negative (1173 negative, 286 positive, 8541 zero) in this model.
          In addition to visualizing the data, a dependency network can be used for inference. However,
       the only algorithm we can use is Gibbs sampling, where we repeatedly sample the nodes with
       missing values from their full conditionals. Unfortunately, a product of full conditionals does
       not, in general, constitute a representation of any valid joint distribution (Heckerman et al.
       2000), so the output of the Gibbs sampler may not be meaningful. Nevertheless, the method can
       sometimes give reasonable results if there is not much missing data, and it is a useful method
       for data imputation (Gelman and Raghunathan 2001). In addition, the method can be used as
       an initialization technique for more complex structure learning methods that we discuss below.

26.3   Learning tree structures
       For the rest of this chapter, we focus on learning fully speciﬁed joint probability models, which
       can be used for density estimation, prediction and knowledge discovery.
          Since the problem of structure learning for general graphs is NP-hard (Chickering 1996), we
       start by considering the special case of trees. Trees are special because we can learn their
       structure efficiently, as we disuscs below, and because, once we have learned the tree, we can
       use them for efficient exact inference, as discussed in Section 20.2.
         26.3. Learning tree structures                                                                  911



                               1             2               1          2           1         2


                               4             3               4          3           4         3
                                   (a)                           (b)                    (c)

                             Figure 26.3 An undirected tree and two equivalent directed trees.


26.3.1   Directed or undirected tree?
         Before continuing, we need to discuss the issue of whether we should use directed or undirected
         trees. A directed tree, with a single root node r, deﬁnes a joint distribution as follows:
                        
             p(x|T ) =      p(xt |xpa(t) )                                                          (26.1)
                         t∈V

         where we deﬁne pa(r) = ∅. For example, in Figure 26.3(b-c), we have
            p(x1 , x2 , x3 , x4 |T )     = p(x1 )p(x2 |x1 )p(x3 |x2 )p(x4 |x2 )                       (26.2)
                                         = p(x2 )p(x1 |x2 )p(x3 |x2 )p(x4 |x2 )                       (26.3)
         We see that the choice of root does not matter: both of these models are equivalent.
           To make the model more symmetric, it is preferable to use an undirected tree. This can be
         represented as follows:
                                  p(xs , xt )
            p(x|T ) =      p(xt )                                                              (26.4)
                                        p(xs )p(xt )
                         t∈V           (s,t)∈E

         where p(xs , xt ) is an edge marginal and p(xt ) is a node marginal. For example, in Figure 26.3(a)
         we have
                                                                   p(x1 , x2 )p(x2 , x3 )p(x2 , x4 )
            p(x1 , x2 , x3 , x4 |T ) = p(x1 )p(x2 )p(x3 )p(x4 )                                       (26.5)
                                                                p(x1 )p(x2 )p(x2 )p(x3 )p(x2 )p(x4 )
         To see the equivalence with the directed representation, let us cancel terms to get
                                                      p(x2 , x3 ) p(x2 , x4 )
            p(x1 , x2 , x3 , x4 |T )     =   p(x1 , x2 )                                              (26.6)
                                                         p(x2 )     p(x2 )
                                         =   p(x1 )p(x2 |x1 )p(x3 |x2 )p(x4 |x2 )                     (26.7)
                                         =   p(x2 )p(x1 |x2 )p(x3 |x2 )p(x4 |x2 )                     (26.8)
         where p(xt |xs ) = p(xs , xt )/p(xs ).
            Thus a tree can be represented as either an undirected or directed graph: the number of
         parameters is the same, and hence the complexity of learning is the same. And of course,
         inference is the same in both representations, too. The undirected representation, which is
         symmetric, is useful for structure learning, but the directed representation is more convenient
         for parameter learning.
         912                                                    Chapter 26. Graphical model structure learning


26.3.2   Chow-Liu algorithm for ﬁnding the ML tree structure
         Using Equation 26.4, we can write the log-likelihood for a tree as follows:
                                
            log p(D|θ, T ) =            Ntk log p(xt = k|θ)
                                   t     k
                                                             p(xs = j, xt = k|θ)
                                 +               Nstjk log                                              (26.9)
                                       s,t j,k
                                                             p(xs = j|θ)p(xt = k|θ)

         where Nstjk is the number of times node s is in state j and node t is in state k, and Ntk is
         the number of times node t is in state k. We can rewrite these counts in terms of the empirical
         distribution: Nstjk = N pemp (xs = j, xt = k) and Ntk = N pemp (xt = k). Setting θ to the
         MLEs, this becomes
             log p(D|θ, T )     
                             =           pemp (xt = k) log pemp (xt = k)                         (26.10)
                   N
                                t∈V k
                                      
                                +             I(xs , xt |θ̂ st )                                  (26.11)
                                       (s,t)∈E(T )

         where I(xs , xt |θ̂ st ) ≥ 0 is the mutual information between xs and xt given the empirical
         distribution:
                                                                   pemp (xs = j, xt = k)
             I(xs , xt |θ̂ st ) =      pemp (xs = j, xt = k) log                              (26.12)
                                  j
                                                                 p emp (xs = j)pemp (xt = k)
                                  k

         Since the ﬁrst term in Equation 26.11 is independent of the topology T , we can ignore it when
         learning structure. Thus the tree topology that maximizes the likelihood can be found by
         computing the maximum weight spanning tree, where the edge weights are the pairwise mutual
         informations, I(ys , yt |θ̂ st ). This is called the Chow-Liu algorithm (Chow and Liu 1968).
            There are several algorithms for ﬁnding a max spanning tree (MST). The two best known are
         Prim’s algorithm and Kruskal’s algorithm. Both can be implemented to run in O(E log V ) time,
         where E = V 2 is the number of edges and V is the number of nodes. See e.g., (Sedgewick and
         Wayne 2011, 4.3) for details. Thus the overall running time is O(N V 2 + V 2 log V ), where the
         ﬁrst term is the cost of computing the sufficient statistics.
            Figure 26.4 gives an example of the method in action, applied to the binary 20 newsgroups
         data shown in Figure 1.2. The tree has been arbitrarily rooted at the node representing “email”.
         The connections that are learned seem intuitively reasonable.

26.3.3   Finding the MAP forest
         Since all trees have the same number of parameters, we can safely used the maximum likelihood
         score as a model selection criterion without worrying about overﬁtting. However, sometimes we
         may want to ﬁt a forest rather than a single tree, since inference in a forest is much faster than
         in a tree (we can run belief propagation in each tree in the forest in parallel). The MLE criterion
         will never choose to omit an edge. However, if we use the marginal likelihood or a penalized
         likelihood (such as BIC), the optimal solution may be a forest. Below we give the details for the
         marginal likelihood case.
26.3. Learning tree structures                                                                                                                                                                                                                                       913

                                                                                  email



                                                                           ftp        phone



                                                                          files       number



                                                 disk                    format                                       windows



                           drive      memory            system           image               card       dos       driver        pc      program          version                                                          win



                   car         scsi       data          problem          display          graphics        video          software            space                                                                        team      won



   bmw   dealer   engine   honda      mac                help            server                     launch        moon          nasa         orbit     shuttle           technology            fans      games   hockey          league   players    puck   season



                   oil                                                                                    lunar          mars        earth       satellite       solar           mission                          nhl                     baseball



                                                                                                                                     god                                                                                                    hit



                                                                                                              bible        christian         jesus      religion



                                                                                                                                                         jews



                                                                                                                                              government           israel



                                                                                                      children         power           president        rights           state         war



                                                                                           health                                            human       law        university             world



                                                                 aids      food           insurance           medicine                        fact       gun         research                  science



                                                                  msg       water            patients          studies        case       course         evidence            question            computer



                                                                        cancer       disease          doctor          vitamin




Figure 26.4 The MLE tree on the 20-newsgroup data. From Figure 4.11 of (Schmidt 2010). Used with kind
permission of Mark Schmidt. (A topologically equivalent tree can be produced using chowliuTreeDemo.)



  In Section 26.4.2.2, we explain how to compute the marginal likelihood of any DAG using a
Dirichlet prior for the CPTs. The resulting expression can be written as follows:

                                                                 
                                                                  N                                                                                                                  
   log p(D|T ) =                            log                                  p(xit |xi,pa(t) |θ t )p(θ t )dθ t =                                                                               score(Nt,pa(t) )                                         (26.13)
                                   t∈V                            i=1                                                                                                                      t

where Nt,pa(t) are the counts (sufficient statistics) for node t and its parents, and score is
deﬁned in Equation 26.28.
   Now suppose we only allow DAGs with at most one parent. Following (Heckerman et al. 1995,
p227), let us associate a weight with each s → t edge, ws,t  score(t|s) − score(t|0), where
score(t|0) is the score when t has no parents. Note that the weights might be negative (unlike
the MLE case, where edge weights are aways non-negative because they correspond to mutual
information). Then we can rewrite the objective as follows:
                                                     
    log p(D|T ) =      score(t|pa(t)) =    wpa(t),t +      score(t|0)                   (26.14)
                                      t                                                                       t                                                t

The last term is the same for all trees T , so we can ignore it. Thus ﬁnding the most probable
tree amounts to ﬁnding a maximal branching in the corresponding weighted directed graph.
This can be found using the algorithm in (Gabow et al. 1984).
         914                                                 Chapter 26. Graphical model structure learning


            If the scoring function is prior and likelihood equivalent (these terms are explained in Sec-
         tion 26.4.2.3), we have

               score(s|t) + score(t|0) = score(t|s) + score(s|0)                                          (26.15)

         and hence the weight matrix is symmetric. In this case, the maximal branching is the same
         as the maximal weight forest. We can apply a slightly modiﬁed version of the MST algorithm
         to ﬁnd this (Edwards et al. 2010). To see this, let G = (V, E) be a graph with both positive
         and negative edge weights. Now let G be a graph obtained by omitting all the negative edges
         from G. This cannot reduce the total weight, so we can ﬁnd the maximum weight forest of G
         by ﬁnding the MST for each connected component of G . We can do this by running Kruskal’s
         algorithm directly on G : there is no need to ﬁnd the connected components explicitly.

26.3.4   Mixtures of trees
         A single tree is rather limited in its expressive power. Later in this chapter we discuss ways to
         learn more general graphs. However, the resulting graphs can be expensive to do inference in.
         An interesting alternative is to learn a mixture of trees (Meila and Jordan 2000), where each
         mixture component may have a different tree topology. This is like an unsupervised version of
         the TAN classiﬁer discussed in Section 10.2.1. We can ﬁt a mixture of trees by using EM: in the
         E step, we compute the responsibilities of each cluster for each data point, and in the M step,
         we use a weighted version of the Chow-Liu algorithm. See (Meila and Jordan 2000) for details.
            In fact, it is possible to create an “inﬁnite mixture of trees”, by integrating out over all possible
         trees. Remarkably, this can be done in V 3 time using the matrix tree theorem. This allows us to
         perform exact Bayesian inference of posterior edge marginals etc. However, it is not tractable to
         use this inﬁnite mixture for inference of hidden nodes. See (Meila and Jaakkola 2006) for details.

 26.4    Learning DAG structures
         In this section, we discuss how to compute (functions of) p(G|D), where G is constrained to be
         a DAG. This is often called Bayesian network structure learning. In this section, we assume
         there is no missing data, and that there are no hidden variables. This is called the complete
         data assumption. For simplicity, we will focus on the case where all the variables are categorical
         and all the CPDs are tables, although the results generalize to real-valued data and other kinds
         of CPDs, such as linear-Gaussian CPDs.
            Our presentation is based in part on (Heckerman et al. 1995), although we will follow the
         notation of Section 10.4.2. In particular, let xit ∈ {1, . . . , Kt } be the value of node t in case i,
         where Kt is the number of states for node t. Let θtck  p(xt = k|xpa(t) = c), for k = 1 : Kt ,
         and c = 1 : Ct , where Ct is the number of parent combinations (possible conditioning cases).
         For notational simplicity, we will often assume Kt = K, so all nodes have the same number of
         states. We will also let dt = dim(pa(t)) be the degree or fan-in of node t, so that Ct = K dt .

26.4.1   Markov equivalence
         In this section, we discuss some fundamental limits to our ability to learn DAG structures from
         data.
26.4. Learning DAG structures                                                                915



                          G1                      G2                      G3
                     X1        X3            X1        X3            X1        X3



                               X2                      X2                      X2
                X5                      X5                      X5


                          X4                      X4                      X4



              Figure 26.5 Three DAGs. G1 and G3 are Markov equivalent, G2 is not.



  Consider the following 3 DGMs: X → Y → Z, X ← Y ← Z and X ← Y → Z. These all
represent the same set of CI statements, namely
   X ⊥ Z|Y, X ⊥ Z                                                                        (26.16)

We say these graphs are Markov equivalent, since they encode the same set of CI assumptions.
That is, they all belong to the same Markov equivalence class. However, the v-structure
X → Y ← Z encodes X ⊥ Z and X ⊥ Z|Y , which represents the opposite set of CI
assumptions.
  One can prove the following theorem.

Theorem 26.4.1 (Verma and Pearl (Verma and Pearl 1990)). Two structures are Markov equivalent
iff they have the same undirected skeleton and the same set of v-structures.

   For example, referring to Figure 26.5, we see that G1 ≡ G2 , since reversing the 2 → 4 arc
creates a new v-structure. However, G1 ≡ G3 , since reversing the 1 → 5 arc does not create a
new v-structure.
   We can represent a Markov equivalence class using a single partially directed acyclic graph
(PDAG), also called an essential graph or pattern, in which some edges are directed and some
undirected. The undirected edges represent reversible edges; any combination is possible so
long as no new v-structures are created. The directed edges are called compelled edges, since
changing their orientation would change the v-structures and hence change the equivalence
class. For example, the PDAG X − Y − Z represents {X → Y → Z, X ← Y ← Z, X ← Y →
Z} which encodes X ⊥ Z and X ⊥ Z|Y . See Figure 26.6.
   The signiﬁcance of the above theorem is that, when we learn the DAG structure from data,
we will not be able to uniquely identify all of the edge directions, even given an inﬁnite amount
of data. We say that we can learn DAG structure “up to Markov equivalence”. This also cautions
us not to read too much into the meaning of particular edge orientations, since we can often
change them without changing the model in any observable way.
           916                                                                  Chapter 26. Graphical model structure learning



                                                      X      X      X           X          X       X


                                                      Y      Y      Y      ≡    Y          Y   ≡   Y


                                                      Z      Z      Z           Z          Z       Z




                                     Figure 26.6 PDAG representation of Markov equivalent DAGs.


 26.4.2    Exact structural inference
           In this section, we discuss how to compute the exact posterior over graphs, p(G|D), ignoring
           for now the issue of computational tractability.

26.4.2.1   Deriving the likelihood
           Assuming there is no missing data, and that all CPDs are tabular, the likelihood can be written
           as follows:
                                          N 
                                           V
                 p(D|G, θ)       =                  Cat(xit |xi,pa(t) , θ t )                                           (26.17)
                                          i=1 t=1
                                          N 
                                           V 
                                              Ct
                                 =                        Cat(xit |θ tc )I(xi,pa(t) =c)                                 (26.18)
                                          i=1 t=1 c=1
                                          N 
                                             Ct 
                                            V   Kt
                                                                  I(xi,t =k,xi,pa(t) =c)
                                 =                               θtck                                                   (26.19)
                                          i=1 t=1 c=1 k=1
                                          V 
                                           Ct 
                                               Kt
                                                           Ntck
                                 =                        θtck                                                         (26.20)
                                          t=1 c=1 k=1

           where Ntck is the number of times node t is in state k and its parents are in state c. (Technically
           these counts depend on the graph structure G, but we drop this from the notation.)

26.4.2.2   Deriving the marginal likelihood
           Of course, choosing the graph with the maximum likelihood will always pick a fully connected
           graph (subject to the acyclicity constraint), since this maximizes the number of parameters. To
           avoid such overﬁtting, we will choose the graph with the maximum marginal likelihood, p(D|G);
           the magic of the Bayesian Occam’s razor will then penalize overly complex graphs.
             To compute the marginal likelihood, we need to specify priors on the parameters. We will
           make two standard assumptions. First, we assume global prior parameter independence,
           which means
                          
                          V
                 p(θ) =         p(θ t )                                                                                 (26.21)
                          t=1
           26.4. Learning DAG structures                                                                  917


           Second, we assume local prior parameter independence, which means

                          
                          Ct
              p(θ t ) =         p(θ tc )                                                               (26.22)
                          c=1

           for each t. It turns out that these assumtions imply that the prior for each row of each CPT
           must be a Dirichlet (Geiger and Heckerman 1997), that is,
              p(θ tc ) = Dir(θ tc |αtc )                                                               (26.23)
           Given these assumptions, and using the results of Section 5.3.2.2, we can write down the
           marginal likelihood of any DAG as follows:
                                       ⎡                          ⎤
                             V  Ct       
              p(D|G) =                 ⎣           Cat(xit |θ tc )⎦ Dir(θ tc )dθ tc           (26.24)
                                  t=1 c=1       i:xi,pa(t) =c

                                  V  Ct
                                          B(Ntc + αtc )
                           =                                                                           (26.25)
                                  t=1 c=1
                                            B(αtc )
                                  V 
                                   Ct
                                            Γ(Ntc )       Kt
                                                              Γ(Ntck + αtckG
                                                                             )
                           =                                         G
                                                                                                       (26.26)
                                  t=1 c=1
                                          Γ(N tc + α tc )        Γ(α ijk )
                                                          k=1
                                  
                                  V
                           =            score(Nt,pa(t) )                                               (26.27)
                                  t=1
                                         
           where Ntc = k Ntck , αtc = k αtck , Nt,pa(t) is the vector of counts (sufficient statistics) for
           node t and its parents, and score() is a local scoring function deﬁned by

                                        Ct
                                            B(Ntc + αtc )
              score(Nt,pa(t) )                                                                        (26.28)
                                        c=1
                                              B(αtc )

           We say that the marginal likelihood decomposes or factorizes according to the graph structure.

26.4.2.3   Setting the prior
           How should we set the hyper-parameters αtck ? It is tempting to use a Jeffreys prior of the form
           αtck = 12 (Equation 5.62). However, it turns out that this violates a property called likelihood
           equivalence, which is sometimes considered desirable. This property says that if G1 and G2 are
           Markov equivalent (Section 26.4.1), they should have the same marginal likelihood, since they are
           essentially equivalent models. Geiger and Heckerman (1997) proved that, for complete graphs,
           the only prior that satisﬁes likelihood equivalence and parameter independence is the Dirichlet
           prior, where the pseudo counts have the form
              αtck = α p0 (xt = k, xpa(t) = c)                                                         (26.29)
           where α > 0 is called the equivalent sample size, and p0 is some prior joint probability dis-
           tribution. This is called the BDe prior, which stands for Bayesian Dirichlet likelihood equivalent.
           918                                              Chapter 26. Graphical model structure learning


              To derive the hyper-parameters for other graph structures, Geiger and Heckerman (1997)
           invoked an additional assumption called parameter modularity, which says that if node Xt
           has the same parents in G1 and G2 , then p(θ t |G1 ) = p(θ t |G2 ). With this assumption, we
           can always derive αt for a node t in any other graph by marginalizing the pseudo counts in
           Equation 26.29.
              Typically the prior distribution p0 is assumed to be uniform over all possible joint conﬁgura-
           tions. In this case, we have
                          α
               αtck =                                                                                 (26.30)
                       Kt C t
           since p0 (xt = k, xpa(t) = c) = Kt1Ct . Thus if we sum the pseudo counts over all Ct × Kt
           entries in the CPT, we get a total equivalent sample size of α. This is called the BDeu prior,
           where the “u” stands for uniform. This is the most widely used prior for learning Bayes net
           structures. For advice on setting the global tuning parameter α, see (Silander et al. 2007).

26.4.2.4   Simple worked example
           We now give a very simple worked example from (Neapolitan 2003, p.438). Suppose we have
           just 2 binary nodes, and the following 8 data cases:
                                                       X1 X2
                                                       1      1
                                                       1      2
                                                       1      1
                                                       2      2
                                                       1      1
                                                       2      1
                                                       1      1
                                                       2      2
              Suppose we are interested in two possible graphs: G1 is X1 → X2 and G2 is the disconnected
           graph. The empirical counts for node 1 in G1 are N1 = (5, 3) and for node 2 are
                                                         X 2 = 1 X2 = 2
                                             X1 = 1 4             1
                                             X1 = 2 1             2
              The BDeu prior for G1 is α1 = (α/2, α/2), α2|x1 =1 = (α/4, α/4) and α2|x1 =2 =
           (α/4, α/4). For G2 , the prior for θ 1 is the same, and for θ 2 it is α2|x1 =1 = (α/2, α/2)
           and α2|x1 =2 = (α/2, α/2). If we set α = 4, and use the BDeu prior, we ﬁnd p(D|G1 ) =
           7.2150 × 10−6 and p(D|G2 ) = 6.7465 × 10−6 . Hence the posterior probabilites, under a
           uniform graph prior, are p(G1 |D) = 0.51678 and p(G2 |D) = 0.48322.

26.4.2.5   Example: analysis of the college plans dataset
           We now consider a more interesting example from (Heckerman et al. 1997). Consider the data
           set collected in 1968 by Sewell and Shah which measured 5 variables that might inﬂuence the
           decision of high school students about whether to attend college. Speciﬁcally, the variables are
           as follows:
           26.4. Learning DAG structures                                                                  919




           Figure 26.7 The two most probable DAGs learned from the Sewell-Shah data. Source: (Heckerman et al.
           1997) . Used with kind permission of David Heckerman



           •   Sex Male or female
           •   SES Socio economic status: low, lower middle, upper middle or high.
           •   IQ Intelligence quotient: discretized into low, lower middle, upper middle or high.
           •   PE Parental encouragment: low or high
           •   CP College plans: yes or no.

              These variables were measured for 10,318 Wisconsin high school seniors. There are 2 × 4 ×
           4 × 2× = 128 possible joint conﬁgurations.
              Heckerman et al. computed the exact posterior over all 29,281 possible 5 node DAGs, except
           for ones in which SEX and/or SES have parents, and/or CP have children. (The prior probability
           of these graphs was set to 0, based on domain knowledge.) They used the BDeu score with
           α = 5, although they said that the results were robust to any α in the range 3 to 40. The top
           two graphs are shown in Figure 26.7. We see that the most probable one has approximately all
           of the probability mass, so the posterior is extremely peaked.
              It is tempting to interpret this graph in terms of causality (see Section 26.6). In particular,
           it seems that socio-economic status, IQ and parental encouragment all causally inﬂuence the
           decision about whether to go to college, which makes sense. Also, sex inﬂuences college plans
           only indirectly through parental encouragement, which also makes sense. However, the direct
           link from socio economic status to IQ seems surprising; this may be due to a hidden common
           cause. In Section 26.5.1.4 we will re-examine this dataset allowing for the presence of hidden
           variables.

26.4.2.6   The K2 algorithm
           Suppose we know a total ordering of the nodes. Then we can compute the distribution over
           parents for each node independently, without the risk of introducing any directed cycles: we
           920                                                           Chapter 26. Graphical model structure learning


           simply enumerate over all possible subsets of ancestors and compute their marginal likelihoods.1
           If we just return the best set of parents for each node, we get the the K2 algorithm (Cooper
           and Herskovits 1992).

26.4.2.7   Handling non-tabular CPDs
           If all CPDs are linear Gaussian, we can replace the Dirichlet-multinomial model with the normal-
           gamma model, and thus derive a different exact expression for the marginal likelihood. See
           (Geiger and Heckerman 1994) for the details. In fact, we can easily combine discrete nodes
           and Gaussian nodes, as long as the discrete nodes always have discrete parents; this is called a
           conditional Gaussian DAG. Again, we can compute the marginal likelihood in closed form. See
           (Bottcher and Dethlefsen 2003) for the details.
              In the general case (i.e., everything except Gaussians and CPTs), we need to approximate the
           marginal likelihood. The simplest approach is to use the BIC approximation, which has the form
                                      Kt C t
                    log p(Dt |θ̂ t ) −        log N                                                  (26.31)
                 t
                                        2

 26.4.3    Scaling up to larger graphs
           The main challenge in computing the posterior over DAGs is that there are so many possible
           graphs. More precisely, (Robinson 1973) showed that the number of DAGs on D nodes satisﬁes
           the following recurrence:
                       D          
                                i+1 D
              f (D) =      (−1)          2i(D−i) f (D − i)                                    (26.32)
                       i=1
                                      i

           for D > 2. The base case is f (1) = 1. Solving this recurrence yields the following sequence:
           1, 3, 25, 543, 29281, 3781503, etc.2 In view of the enormous size of the hypothesis space, we are
           generally forced to use approximate methods, some of which we review below.

26.4.3.1   Approximating the mode of the posterior
           We can use dynamic programming to ﬁnd the globally optimal MAP DAG (up to Markov equiv-
           alence) (Koivisto and Sood 2004; Silander and Myllmaki 2006). Unfortunately this method takes
           V 2V time and space, making it intractable beyond about 16 nodes. Indeed, the general problem
           of ﬁnding the globally optimal MAP DAG is provably NP-complete (Chickering 1996),
              Consequently, we must settle for ﬁnding a locally optimal MAP DAG. The most common
           method is greedy hill climbing: at each step, the algorithm proposes small changes to the
           current graph, such as adding, deleting or reversing a single edge; it then moves to the neigh-
           boring graph which most increases the posterior. The method stops when it reaches a lo-
           cal maximum. It is important that the method only proposes local changes to the graph,

           1. We can make this method more efficient by using 1 -regularization to select the parents (Schmidt et al. 2007). In this
           case, we need to approximate the marginal likelhood as we discuss below.
           2. A longer list of values can be found at http://www.research.att.com/~njas/sequences/A003024. Interest-
           ingly, the number of DAGs is equal to the number of (0,1) matrices all of whose eigenvalues are positive real numbers
           (McKay et al. 2004).
           26.4. Learning DAG structures                                                                                                                                                                                                                                      921

                                       evidence       case       course     question



                      msg                    fact                                                                                                                                                                                                     drive



                                                    god                                                                                                                                    nasa                                                             scsi



                          gun                        christian                                                                                                                            shuttle                                                          disk



                government                   religion         jesus             car                              disease                         mission          space



                law                           jews                     engine                                              patients                    orbit                       games                                                       program



                 rights              power           bible         honda                computer         bmw               medicine     earth                     solar          season                launch      technology                            dos



                                                            dealer                                         science                              moon           system            team                             satellite                        files



                                                        problem                       studies                                          mars      lunar                                      players                                                        version



                                             human                                                                                                                                   hockey          hit                                       windows



                                                     israel                                   university                                                          nhl            puck            baseball    won          email            memory            ftp



                 president                              war                           state       research                                                              league            fans              win     phone             format        video              mac



                          children                   world       oil                            cancer                                                                                                          number        image     data        driver         software



                                                    water              health                                                                                                                                                                                        pc



                                                    food      aids        insurance                                          doctor                                                                                                                 card



                                                                                                                              help                                                                                                        server    graphics



                                                                                                                             vitamin                                                                                                     display




           Figure 26.8 A locally optimal DAG learned from the 20-newsgroup data. From Figure 4.10 of (Schmidt
           2010). Used with kind permission of Mark Schmidt.



           since this enables the change in marginal likelihood (and hence the posterior) to be computed
           in constant time (assuming we cache the sufficient statistics). This is because all but one
           or two of the terms in Equation 26.25 will cancel out when computing the log Bayes factor
           δ(G → G ) = log p(G |D) − log p(G|D).
              We can initialize the search from the best tree, which can be found using exact methods
           discussed in Section 26.3. For speed, we can restrict the search so it only adds edges which are
           part of the Markov blankets estimated from a dependency network (Schmidt 2010). Figure 26.8
           gives an example of a DAG learned in this way from the 20-newsgroup data.
              We can use techniques such as multiple random restarts to increase the chance of ﬁnding a
           good local maximum. We can also use more sophisticated local search methods, such as genetic
           algorithms or simulated annealing, for structure learning.

26.4.3.2   Approximating other functions of the posterior
           If our goal is knowledge discovery, the MAP DAG can be misleading, for reasons we discussed in
           Section 5.2.1. A better approach is to compute the probability that each edge is present, p(Gst =
           1|D), of the probability there is a path from s to t. We can do this exactly using dynamic
           programming (Koivisto 2006; Parviainen and Koivisto 2011). Unfortunately these methods take
           V 2V time in the general case, making them intractable for graphs with more than about 16
           922                                              Chapter 26. Graphical model structure learning


           nodes.
              An approximate method is to sample DAGs from the posterior, and then to compute the
           fraction of times there is an s → t edge or path for each (s, t) pair. The standard way to draw
           samples is to use the Metropolis Hastings algorithm (Section 24.3), where we use the same local
           proposal as we did in greedy search (Madigan and Raftery 1994).
              A faster-mixing method is to use a collapsed MH sampler, as suggested in (Friedman and
           Koller 2003). This exploits the fact that, if a total ordering of the nodes is known, we can
           select the parents for each node independently, without worrying about cycles, as discussed in
           Section 26.4.2.6. By summing over all possible choice of parents, we can marginalize out this
           part of the problem, and just sample total orders. (Ellis and Wong 2008) also use order-space
           (collapsed) MCMC, but this time with a parallel tempering MCMC algorithm.

  26.5     Learning DAG structure with latent variables
           Sometimes the complete data assumption does not hold, either because we have missing data,
           and/ or because we have hidden variables. In this case, the marginal likelihood is given by
                                                         
              p(D|G) =         p(D, h|θ, G)p(θ|G)dθ =            p(D, h|θ, G)p(θ|G)dθ                (26.33)
                             h                               h
           where h represents the hidden or missing data.
              In general this is intractable to compute. For example, consider a mixture model, where
           we don’t observe the cluster label. In this case, there are K N possible completions of the
           data (assuming we have K clusters); we can evaluate the inner integral for each one of these
           assignments to h, but we cannot afford to evaluate all of the integrals. (Of course, most of these
           integrals will correspond to hypotheses with little posterior support, such as assigning single
           data points to isolated clusters, but we don’t know ahead of time the relative weight of these
           assignments.)
              In this section, we discuss some ways for learning DAG structure when we have latent variables
           and/or missing data.

26.5.1     Approximating the marginal likelihood when we have missing data
           The simplest approach is to use standard structure learning methods for fully visible DAGs,
           but to approximate the marginal likelihood. In Section 24.7, we discussed some Monte Carlo
           methods for approximating the marginal likelihood. However, these are usually too slow to use
           inside of a search over models. Below we mention some faster deterministic approximations.

26.5.1.1   BIC approximation
           A simple approximation is to use the BIC score, which is given by
                                         log N
              BIC(G)  log p(D|θ̂, G) −         dim(G)                                                (26.34)
                                            2
           where dim(G) is the number of degrees of freedom in the model and θ̂ is the MAP or ML
           estimate. However, the BIC score often severely underestimates the true marginal likelihood
           (Chickering and Heckerman 1997), resulting in it selecting overly simple models.
           26.5. Learning DAG structure with latent variables                                           923


26.5.1.2   Cheeseman-Stutz approximation
           We now present a better method known as the Cheeseman-Stutz approximation (CS) (Cheese-
           man and Stutz 1996). We ﬁrst compute a MAP estimate of the parameters θ̂ (e.g., using EM).
           Denote the expected sufficient statistics of the data by D = D(θ̂); in the case of discrete
           variables, we just “ﬁll in” the hidden variables with their expectation. We then use the exact
           marginal likelihood equation on this ﬁlled-in data:

              p(D|G) ≈ p(D|G) =           p(D|θ, G)p(θ|G)dθ                                          (26.35)

           However, comparing this to Equation 26.33, we can see that the value will be exponentially
           smaller, since it does not sum over all values of h. To correct for this, we ﬁrst write
              log p(D|G) = log p(D|G) + log p(D|G) − log p(D|G)                                      (26.36)

           and then we apply a BIC approximation to the last two terms:
                                                                          
                                                                N
              log p(D|G) − log p(D|G) ≈       log p(D|θ̂, G) −     dim(θ̂)                           (26.37)
                                                                2
                                                                            
                                                                  N
                                            − log p(D|θ̂, G) −       dim(θ̂)                         (26.38)
                                                                   2
                                            =   log p(D|θ̂, G) − log p(D|θ̂, G)                      (26.39)

           Putting it altogether we get
              log p(D|G) ≈ log p(D|G) + log p(D|θ̂, G) − log p(D|θ̂, G)                              (26.40)

           The ﬁrst term p(D|G) can be computed by plugging in the ﬁlled-in data into the exact marginal
           likelihood. The second term p(D|θ̂, G), which involves an exponential sum (thus matching the
           “dimensionality” of the left hand side) can be computed using an inference algorithm. The ﬁnal
           term p(D|θ̂, G) can be computed by plugging in the ﬁlled-in data into the regular likelihood.

26.5.1.3   Variational Bayes EM
           An even more accurate approach is to use the variational Bayes EM algorithm. Recall from
           Section 21.6 that the key idea is to make the following factorization assumption:
                                                 
              p(θ, z1:N |D) ≈ q(θ)q(z) = q(θ)       q(zi )                                    (26.41)
                                                  i

           where zi are the hidden variables in case i. In the E step, we update the q(zi ), and in the
           M step, we update q(θ). The corresponding variational free energy provides a lower bound on
           the log marginal likelihood. In (Beal and Ghahramani 2006), it is shown that this bound is a
           much better approximation to the true log marginal likelihood (as estimated by a slow annealed
           importance sampling procedure) than either BIC or CS. In fact, one can prove that the variational
           bound will always be more accurate than CS (which in turn is always more accurate than BIC).
           924                                                                Chapter 26. Graphical model structure learning


                                                                              p(H=0) = 0.63
                                                                        H     p(H=1) = 0.37
                                                                                                     H        p(SES=high|H)
                   PE       H     p(IQ=high|PE,H)
                                                       p(male) = 0.48                                0            0.088
                  low       0          0.098                            SEX                          1             0.51
                  low       1           0.22
                  high      0           0.21                                          SES
                  high      1           0.49
                                                                        PE
                                                        IQ                                    SES        IQ        PE     p(CP=yes|SES,IQ,PE)
                                                                                              low    low          low            0.011
                 SES     SEX      p(PE=high|SES,SEX)                                          low    low          high           0.170
                                                                                              low    high         low            0.124
                 low      male           0.32                           CP                    low    high         high            0.53
                 low     female         0.166                                                 high   low          low            0.093
                 high     male           0.86                                                 high   low          high            0.39
                 high    female          0.81                                                 high   high         low             0.24
                                                                                              high   high         high            0.84



           Figure 26.9 The most probable DAG with a single binary hidden variable learned from the Sewell-Shah
           data. MAP estimates of the CPT entries are shown for some of the nodes. Source: (Heckerman et al. 1997).
           Used with kind permission of David Heckerman.



26.5.1.4   Example: college plans revisited
           Let us revisit the college plans dataset from Section 26.4.2.5. Recall that if we ignore the
           possibility of hidden variables there was a direct link from socio economic status to IQ in the
           MAP DAG. Heckerman et al. decided to see what would happen if they introduced a hidden
           variable H, which they made a parent of both SES and IQ, representing a hidden common cause.
           They also considered a variant in which H points to SES, IQ and PE. For both such cases, they
           considered dropping none, one, or both of the SES-PE and PE-IQ edges. They varied the number
           of states for the hidden node from 2 to 6. Thus they computed the approximate posterior over
           8 × 5 = 40 different models, using the CS approximation.
              The most probable model which they found is shown in Figure 26.9. This is 2 · 1010 times
           more likely than the best model containing no hidden variable. It is also 5 · 109 times more
           likely than the second most probable model with a hidden variable. So again the posterior is
           very peaked.
              These results suggests that there is indeed a hidden common cause underlying both the
           socio-economic status of the parents and the IQ of the children. By examining the CPT entries,
           we see that both SES and IQ are more likely to be high when H takes on the value 1. They
           interpret this to mean that the hidden variable represents “parent quality” (possibly a genetic
           factor). Note, however, that the arc between H and SES can be reversed without changing the v-
           structures in the graph, and thus without affecting the likelihood; this underscores the difficulty
           in interpreting hidden variables.
              Interestingly, the hidden variable model has the same conditional independence assumptions
           amongst the visible variables as the most probable visible variable model. So it is not pos-
           sible to distinguish between these hypotheses by merely looking at the empirical conditional
           independencies in the data (which is the basis of the constraint-based approach to structure
           learning (Pearl and Verma 1991; Spirtes et al. 2000)). Instead, by adopting a Bayesian approach,
           which takes parsimony into account (and not just conditional independence), we can discover
         26.5. Learning DAG structure with latent variables                                                925


         the possible existence of hidden factors. This is the basis of much of scientiﬁc and everday
         human reasoning (see e.g. (Griffiths and Tenenbaum 2009) for a discussion).

26.5.2   Structural EM
         One way to perform structural inference in the presence of missing data is to use a standard
         search procedure (deterministic or stochastic), and to use the methods from Section 26.5.1 to
         estimate the marginal likelihood. However, this approach is very efficient, because the marginal
         likelihood does not decompose when we have missing data, and nor do its approximations.
         For example, if we use the CS approximation or the VBEM approximation, we have to perform
         inference in every neighboring model, just to evaluate the quality of a single move!
             (Friedman 1997b; Thiesson et al. 1998) presents a much more efficient approach called the
         structural EM algorithm. The basic idea is this: instead of ﬁtting each candidate neighboring
         graph and then ﬁlling in its data, ﬁll in the data once, and use this ﬁlled-in data to evaluate
         the score of all the neighbors. Although this might be a bad approximation to the marginal
         likelihood, it can be a good enough approximation of the difference in marginal likelihoods
         between different models, which is all we need in order to pick the best neighbor.
             More precisely, deﬁne D(G0 , θ̂ 0 ) to be the data ﬁlled in using model G0 with MAP parameters
         θ̂ 0 . Now deﬁne a modiﬁed BIC score as follows:
                                                   log N
            scoreBIC (G, D)  log p(D|θ̂, G) −           dim(G) + log p(G) + log p(θ̂|G)                (26.42)
                                                     2
         where we have included the log prior for the graph and parameters. One can show (Friedman
         1997b) that if we pick a graph G which increases the BIC score relative to G0 on the expected
         data, it will also increase the score on the actual data, i.e.,
         scoreBIC (G, D(G0 , θ̂ 0 )) − scoreBIC (G0 , D(G0 , θ̂ 0 ) ≤ scoreBIC (G, D) − scoreBIC (G0 , D)
                                                                                                        (26.43)

            To convert this into an algorithm, we proceed as follows. First we initialize with some graph
         G0 and some set of parameters θ 0 . Then we ﬁll-in the data using the current parameters — in
         practice, this means when we ask for the expected counts for any particular family, we perform
         inference using our current model. (If we know which counts we will need, we can precompute
         all of them, which is much faster.) We then evaluate the BIC score of all of our neighbors using
         the ﬁlled-in data, and we pick the best neighbor. We then reﬁt the model parameters, ﬁll-in the
         data again, and repeat. For increased speed, we may choose to only reﬁt the model every few
         steps, since small changes to the structure hopefully won’t invalidate the parameter estimates
         and the ﬁlled-in data too much.
            One interesting application is to learn a phylogenetic tree structure. Here the observed leaves
         are the DNA or protein sequences of currently alive species, and the goal is to infer the topology
         of the tree and the values of the missing internal nodes. There are many classical algorithms for
         this task (see e.g., (Durbin et al. 1998)), but one that uses SEM is discussed in (Friedman et al.
         2002).
            Another interesting application of this method is to learn sparse mixture models (Barash and
         Friedman 2002). The idea is that we have one hidden variable C specifying the cluster, and we
         have to choose whether to add edges C → Xt for each possible feature Xt . Thus some features
         will be dependent on the cluster id, and some will be independent. (See also (Law et al. 2004)
         926                                                                                                Chapter 26. Graphical model structure learning


                               !                                                "                                                                                                             "




                                 !                                 !           !                                                                                                            !




                                                                                                                                                                                  




                                           !                                                                                                                          




                                                                                                                                                                     




                                                                                                                                                                               




                                                                                                   "                                                       




                                                                                                                                                      




                                                                                                                                      




         Figure 26.10 Part of a hierarchical latent tree learned from the 20-newsgroup data. From Figure 2 of
         (Harmeling and Williams 2011). Used with kind permission of Stefan Harmeling.



         for a different way to perform this task, using regular EM and a set of bits, one per feature, that
         are free to change across data cases.)

26.5.3   Discovering hidden variables
         In Section 26.5.1.4, we introduced a hidden variable “by hand”, and then ﬁgured out the local
         topology by ﬁtting a series of different models and computing the one with the best marginal
         likelihood. How can we automate this process?
            Figure 11.1 provides one useful intuition: if there is a hidden variable in the “true model”,
         then its children are likely to be densely connected. This suggest the following heuristic (Elidan
         et al. 2000): perform structure learning in the visible domain, and then look for structural
         signatures, such as sets of densely connected nodes (near-cliques); introduce a hidden variable
         and connect it to all nodes in this near-clique; and then let structural EM sort out the details.
         Unfortunately, this technique does not work too well, since structure learning algorithms are
         biased against ﬁtting models with densely connected cliques.
            Another useful intuition comes from clustering. In a ﬂat mixture model, also called a latent
         class model, the discrete latent variable provides a compressed representation of its children.
         Thus we want to create hidden variables with high mutual information with their children.
            One way to do this is to create a tree-structured hierarchy of latent variables, each of which
         only has to explain a small set of children. (Zhang 2004) calls this a hierarchical latent class
         model. They propose a greedy local search algorithm to learn such structures, based on adding
         or deleting hidden nodes, adding or deleting edges, etc. (Note that learning the optimal latent
26.5. Learning DAG structure with latent variables                                                                                                                                                                                    927


                                                         h3                                                                                                                              h17




      president          government              power         h4                          war          h20       religion          h14                 earth          lunar          orbit        satellite              solar
                                                                          children


                                                                                                                                                                moon                           technology             mission
                                law        state         human          rights         world         israel      jews         h8       bible     god

                                                                                                                                                                     mars                                      h1
                                gun
                                                            h2                                                    christian         jesus
                                                                                                                                                                             space            launch        shuttle         nasa

                  health
                                           case          course         evidence          fact       question
                                                                                                                              program                                          h9
                    food        aids        h21
     insurance
                                                                                                                                    version                     h12                      ftp                    email
             msg            water          studies            h13             medicine
     car
                                                                                                                                 h25                         files                      format                        phone


    dealer        h15           cancer            disease            doctor           patients       vitamin
                                                                                                                             windows           h18       h11                                     image                    number

   bmw       engine         honda          oil
                                                                                                                          card      driver        h10            dos           h19                                  h26
                                                         h5



                                                                                                                  video          h16      disk       memory            h22      pc            software      display          server
                      h6            puck         season          team            h7            win



                                                                                                               graphics       h23       system       data       scsi     drive            computer                            h24
    games        baseball      league        players          fans       hockey          nhl     won


                                                                                                                                                                                    science        university             research
                   hit                                                                                            problem          help                mac




Figure 26.11 A partially latent tree learned from the 20-newsgroup data. Note that some words can
have multiple meanings, and get connected to different latent variables, representing different “topics”. For
example, the word “win” can refer to a sports context (represented by h5) or the Microsoft Windows context
(represented by h25). From Figure 12 of (Choi et al. 2011). Used with kind permission of Jin Choi.



tree is NP-hard (Roch 2006).)
   Recently (Harmeling and Williams 2011) proposed a faster greedy algorithm for learning such
models based on agglomerative hierarchical clustering. Rather than go into details, we just give
an example of what this system can learn. Figure 26.10 shows part of a latent forest learned
from the 20-newsgroup data. The algorithm imposes the constraint that each latent node has
exactly two children, for speed reasons. Nevertheless, we see interpretable clusters arising. For
example, Figure 26.10 shows separate clusters concerning medicine, sports and religion. This
provides an alternative to LDA and other topic models (Section 4.2.2), with the added advantage
that inference in latent trees is exact and takes time linear in the number of nodes.
   An alternative approach is proposed in (Choi et al. 2011), in which the observed data is not
constrained to be at the leaves. This method starts with the Chow-Liu tree on the observed
data, and then adds hidden variables to capture higher-order dependencies between internal
nodes. This results in much more compact models, as shown in Figure 26.11. This model also
has better predictive accuracy than other approaches, such as mixture models, or trees where
all the observed data is forced to be at the leaves. Interestingly, one can show that this method
can recover the exact latent tree structure, providing the data is generated from a tree. See
         928                                                         Chapter 26. Graphical model structure learning




         Figure 26.12 Google’s rephil model. Leaves represent presence or absence of words. Internal nodes
         represent clusters of co-occuring words, or “concepts”. All nodes are binary, and all CPDs are noisy-OR.
         The model contains 12 million word nodes, 1 million latent cluster nodes, and 350 million edges. Used
         with kind permission of Brian Milch.



         (Choi et al. 2011) for details. Note, however, that this approach, unlike (Zhang 2004; Harmeling
         and Williams 2011), requires that the cardinality of all the variables, hidden and observed, be
         the same. Furthermore, if the observed variables are Gaussian, the hidden variables must be
         Gaussian also.

26.5.4   Case study: Google’s Rephil
         In this section, we describe a huge DGM called Rephil, which was automatically learned from
         data.3 The model is widely used inside Google for various purposes, including their famous
         AdSense system.4
            The model structure is shown in Figure 26.12. The leaves are binary nodes, and represent
         the presence or absence of words or compounds (such as “New York City”) in a text document
         or query. The latent variables are also binary, and represent clusters of co-occuring words. All
         CPDs are noisy-OR, since some leaf nodes (representing words) can have many parents. This
         means each edge can be augmented with a hidden variable specifying if the link was activated
         or not; if the link is not active, then the parent cannot turn the child on. (A very similar model
         was proposed independently in (Singliar and Hauskrecht 2006).)
            Parameter learning is based on EM, where the hidden activation status of each edge needs
         to be inferred (Meek and Heckerman 1997). Structure learning is based on the old neuroscience

         3. The original system, called “Phil”, was developed by Georges Harik and Noam Shazeer,. It has been published as US
         Patent #8024372, “Method and apparatus for learning a probabilistic generative model for text”, ﬁled in 2004. Rephil is
         a more probabilistically sound version of the method, developed by Uri Lerner et al. The summary below is based on
         notes by Brian Milch (who also works at Google).
         4. AdSense is Google’s system for matching web pages with content-appropriate ads in an automatic way, by extracting
         semantic keywords from web pages. These keywords play a role analogous to the words that users type in when
         searching; this latter form of information is used by Google’s AdWords system. The details are secret, but (Levy 2011)
         gives an overview.
         26.5. Learning DAG structure with latent variables                                              929


         idea that “nodes that ﬁre together should wire together”. To implement this, we run inference
         and check for cluster-word and cluster-cluster pairs that frequently turn on together. We then
         add an edge from parent to child if the link can signiﬁcantly increase the probability of the
         child. Links that are not activated very often are pruned out. We initialize with one cluster per
         “document” (corresponding to a set of semantically related phrases). We then merge clusters A
         and B if A explains B’s top words and vice versa. We can also discard clusters that are used
         too rarely.
            The model was trained on about 100 billion text snippets or search queries; this takes several
         weeks, even on a parallel distributed computing architecture. The resulting model contains 12
         million word nodes and about 1 million latent cluster nodes. There are about 350 million links
         in the model, including many cluster-cluster dependencies. The longest path in the graph has
         length 555, so the model is quite deep.
            Exact inference in this model is obviously infeasible. However note that most leaves will be
         off, since most words do not occur in a given query; such leaves can be analytically removed, as
         shown in Exercise 10.7. We an also prune out unlikely hidden nodes by following the strongest
         links from the words that are on up to their parents to get a candidate set of concepts. We
         then perform iterative conditional modes to ﬁnd a good set of local maxima. At each step of
         ICM, each node sets its value to its most probable state given the values of its neighbors in its
         Markov blanket. This continues until it reaches a local maximum. We can repeat this process
         a few times from random starting conﬁgurations. At Google, this can be made to run in 15
         milliseconds!

26.5.5   Structural equation models *
         A structural equation model (Bollen 1989) is a special kind of directed mixed graph (Sec-
         tion 19.4.4.1), possibly cyclic, in which all CPDs are linear Gaussian, and in which all bidirected
         edges represent correlated Gaussian noise. Such models are also called path diagrams. SEMs
         are widely used, especially in economics and social science. It is common to interpret the edge
         directions in terms of causality, where directed cycles are interpreted is in terms of feedback
         loops (see e.g., (Pearl 2000, Ch.5)). However, the model is really just a way of specifying a joint
         Gaussian, as we show below. There is nothing inherently “causal” about it at all. (We discuss
         causality in Section 26.6.)
            We can deﬁne an SEM as a series of full conditionals as follows:
                          
             x i = μi +       wij xj + i                                                             (26.44)
                        j=i

         where   ∼ N (0, Ψ). We can rewrite the model in matrix form as follows:
            x = Wx + μ + ⇒ x = (I − W)−1 ( + μ)                                                       (26.45)
         Hence the joint distribution is given by p(x) = N (μ, Σ) where
            Σ = (I − W)−1 Ψ(I − W)−T                                                                  (26.46)
         We draw an arc Xi ← Xj if |wij | > 0. If W is lower triangular then the graph is acyclic. If,
         in addition, Ψ is diagonal, then the model is equivalent to a Gaussian DGM, as discussed in
         Section 10.2.5; such models are called recursive. If Ψ is not diagonal, then we draw a bidirected
930                                              Chapter 26. Graphical model structure learning



                                     Y1                   Y2


                                     Z1                   Z1


                                                    Z3


                                                    Y3

Figure 26.13 A cyclic directed mixed graphical model (non-recursive SEM). Note the Z1 → Z2 → Z3 →
Z1 feedback loop.


arc Xi ↔ Xj for each non-zero off-diagonal term. Such edges represent correlation, possibly
due to a hidden common cause.
   When using structural equation models, it is common to partition the variables into latent
variables, Zt , and observed or manifest variables Yt . For example, Figure 26.13 illustrates the
following model:
    ⎛ ⎞ ⎛ ⎞ ⎛                                          ⎞⎛ ⎞ ⎛ ⎞
      X1          Z1        0     0    w13 0 0 0            Z1       1
    ⎜X2 ⎟ ⎜Z2 ⎟ ⎜w21              0     0    0   0   0 ⎟ ⎜Z2 ⎟ ⎜2 ⎟
    ⎜ ⎟ ⎜ ⎟ ⎜                                          ⎟⎜ ⎟ ⎜ ⎟
    ⎜X3 ⎟ ⎜Z3 ⎟ ⎜ 0              w32    0    0 0 0⎟      ⎜ ⎟ ⎜ ⎟
    ⎜ ⎟=⎜ ⎟=⎜                                          ⎟ ⎜Z3 ⎟ + ⎜3 ⎟ ,                   (26.47)
    ⎜X4 ⎟ ⎜ Y1 ⎟ ⎜w41             0     0    0 0 0⎟ ⎜  ⎟       ⎟ ⎜ ⎟
    ⎜ ⎟ ⎜ ⎟ ⎜                                            ⎜ Y 1 ⎟ ⎜ 4 ⎟
    ⎝X5 ⎠ ⎝ Y2 ⎠ ⎝ 0             w52    0    0 0 0⎠ ⎝ Y2 ⎠ ⎝5 ⎠
      X6          Y3        0     0    w63 0 0 0            Y3       6
where
         ⎛                                      ⎞
       Ψ11        0      0      0      0     0
     ⎜ 0         Ψ22     0      0      0     0 ⎟
     ⎜                                          ⎟
     ⎜ 0          0     Ψ33     0      0     0 ⎟
   Ψ=⎜
     ⎜ 0
                                                ⎟                                          (26.48)
     ⎜            0      0     Ψ44    Ψ45    0 ⎟⎟
     ⎝ 0          0      0     Ψ54    Ψ55    0 ⎠
        0         0      0      0      0    Ψ66
The presence of a feedback loop Z1 → Z2 → Z3 is evident from the fact that W is not lower
triangular. Also the presence of confounding between Y1 and Y2 is evident in the off-diagonal
terms in Ψ.
   Often we assume there are multiple observations for each latent variable. To ensure identiﬁa-
bility, we can set the mean of the latent variables Zt to 0, and we can set the regression weights
of Zt → Yt to 1. This essentially deﬁnes the scale of each latent variable. (In addition to the
Z’s, there are the extra hidden variables implied by the presence of the bidirected edges.)
   The standard practice in the SEM community, as exempliﬁed by the popular commercial
software package called LISREL (available from http://www.ssicentral.com/lisrel/), is to
         26.6. Learning causal DAGs                                                                     931


         build the structure by hand, to estimate the parameters by maximum likelihood, and then to
         test if any of the regression weights are signiﬁcantly different from 0, using standard frequentist
         methods. However, one can also use Bayesian inference for the parameters (see e.g., (Dunson
         et al. 2005)). Structure learning in SEMs is rare, but since recursive SEMs are equivalent to
         Gaussian DAGs, many of the techniques we have been discussing in this section can be applied.
            SEMs are closely related to factor analysis (FA) models (Chapter 12). The basic difference is
         that in an FA model, the latent Gaussian has a low-rank covariance matrix, and the observed
         noise has a diagonal covariance (hence no bidirected edges). In an SEM, the covariance of the
         latent Gaussian has a sparse Cholesky decomposition (at least if W is acyclic), and the observed
         noise might have a full covariance matrix.
            Note that SEMs can be extended in many ways. For example, we can add covariates/ input
         variables (possibly noisily observed), we can make some of the observations be discrete (e.g., by
         using probit links), and so on.

 26.6    Learning causal DAGs
         Causal models are models which can predict the effects of interventions to, or manipulations
         of, a system. For example, an electronic circuit diagram implicitly provides a compact encoding
         of what will happen if one removes any given component, or cuts any wire. A causal medical
         model might predict that if I continue to smoke, I am likely to get lung cancer (and hence if
         I cease smoking, I am less likely to get lung cancer). Causal claims are inherently stronger,
         yet more useful, than purely associative claims, such as “people who smoke often have lung
         cancer”.
            Causal models are often represented by DAGs (Pearl 2000), although this is somewhat contro-
         versial (Dawid 2010). We explain this causal interpretation of DAGs below. We then show how
         to use a DAG to do causal reasoning. Finally, we brieﬂy discuss how to learn the structure of
         causal DAGs. A more detailed description of this topic can be found in (Pearl 2000) and (Koller
         and Friedman 2009, Ch.21).

26.6.1   Causal interpretation of DAGs
         In this section, we deﬁne a directed edge A → B in a DAG to mean that “A directly causes B”,
         so if we manipulate A, then B will change. This is known as the causal Markov assumption.
         (Of course, we have not deﬁned the word “causes”, and we cannot do that by appealing to a
         DAG, lest we end up with a cyclic deﬁnition; see (Dawid 2010) for further disussion of this point.)
            We will also assume that all relevant variables are included in the model, i.e., there are no
         unknown confounders, reﬂecting hidden common causes. This is called the causal sufficiency
         assumption. (If there are known to be confounders, they should be added to the model, although
         one can sometimes use mixed directed graphs (Section 26.5.5) as a way to avoid having to model
         confounders explicitly.)
            Assuming we are willing to make the causal Markov and causal sufficiency assumptions, we
         can use DAGs to answer causal questions. The key abstraction is that of a perfect intervention;
         this represents the act of setting a variable to some known value, say setting Xi to xi . A real
         world example of such a perfect intervention is a gene knockout experiment, in which a gene
         is “silenced”. We need some notational convention to distinguish this from observing that Xi
932                                               Chapter 26. Graphical model structure learning



                              G                                  Gdo(X=x)




                          X                                       X




                  Figure 26.14 Surgical intervention on X. Based on (Pe’er 2005).



happens to have value xi . We use Pearl’s do calculus notation (as in the verb “to do”) and write
do(Xi = xi ) to denote the event that we set Xi to xi . A causal model can be used to make
inferences of the form p(x|do(Xi = xi )), which is different from making inferences of the form
p(x|Xi = xi ).
   To understand the difference between conditioning on interventions and conditioning on
observations (i.e., the difference between doing and seeing), consider a 2 node DGM S → Y , in
which S = 1 if you smoke and S = 0 otherwise, and Y = 1 if you have yellow-stained ﬁngers,
and Y = 0 otherwise. If I observe you have yellow ﬁngers, I am licensed to infer that you are
probably a smoker (since nicotine causes yellow stains):

   p(S = 1|Y = 1) > p(S = 1)                                                               (26.49)

However, if I intervene and paint your ﬁngers yellow, I am no longer licensed to infer this, since
I have disrupted the normal causal mechanism. Thus
   p(S = 1|do(Y = 1)) = p(S = 1)                                                           (26.50)

   One way to model perfect interventions is to use graph surgery: represent the joint distri-
bution by a DGM, and then cut the arcs coming into any nodes that were set by intervention.
See Figure 26.14 for an example. This prevents any information ﬂow from the nodes that were
intervened on from being sent back up to their parents. Having perform this surgery, we can
then perform probabilistic inference in the resulting “mutilated” graph in the usual way to reason
about the effects of interventions. We state this formally as follows.

Theorem 26.6.1 (Manipulation theorem (Pearl 2000; Spirtes et al. 2000)). . To compute p(Xi |do(Xj ))
for sets of nodes i, j, we can perform surgical intervention on the Xj nodes and then use standard
probabilistic inference in the mutilated graph.

  We can generalize the notion of a perfect intervention by adding interventions as explicit
action nodes to the graph. The result is like an inﬂuence diagram, except there are no utility
nodes (Lauritzen 2000; Dawid 2002). This has been called the augmented DAG (Pearl 2000). We
         26.6. Learning causal DAGs                                                                         933




                                         y
                                                           x

             Figure 26.15 Illustration of Simpson’s paradox. Figure generated by simpsonsParadoxGraph.


         can then deﬁne the CPD p(Xi |do(Xi )) to be anything we want. We can also allow an action to
         affect multiple nodes. This is called a fat hand intervention, a reference to someone trying to
         change a single component of some system (e.g., an electronic circuit), but accidently touching
         multiple components and thereby causing various side effects (see (Eaton and Murphy 2007) for
         a way to model this using augmented DAGs).

26.6.2   Using causal DAGs to resolve Simpson’s paradox
         In this section, we assume we know the causal DAG. We can then do causal reasoning by
         applying d-separation to the mutilated graph. In this section, we give an example of this, and
         show how causal reasoning can help resolve a famous paradox, known as Simpon’s paradox.
           Simpson’s paradox says that any statistical relationship between two variables can be reversed
         by including additional factors in the analysis. For example, suppose some cause C (say, taking
         a drug) makes some effect E (say getting better) more likely
            P (E|C)     >   P (E|¬C)
         and yet, when we condition on the gender of the patient, we ﬁnd that taking the drug makes
         the effect less likely in both females (F ) and males (¬F ):
             P (E|C, F ) < P (E|¬C, F )
            P (E|C, ¬F ) < P (E|¬C, ¬F )
         This seems impossible, but by the rules of probability, this is perfectly possible, because the
         event space where we condition on (¬C, F ) or (¬C, ¬F ) can be completely different to the
         event space when we just condition on ¬C. The table of numbers below shows a concrete
         example (from (Pearl 2000, p175)):
                            Combined                       Male                             Female
                       E      ¬E       Total   Rate   E    ¬E     Total   Rate   E    ¬E     Total   Rate
                C      20      20       40     50%    18    12     30     60%    2     8      10     20%
               ¬C      16      24       40     40%     7    3      10     70%    9     21     30     30%
               Total   36      44       80            25    15     40            11   29      40
934                                                Chapter 26. Graphical model structure learning


  From this table of numbers, we see that
       p(E|C) = 20/40 = 0.5 >             p(E|¬C) = 16/40 = 0.4                                 (26.51)
      p(E|C, F ) = 2/10 = 0.2 <           p(E|¬C, F ) = 9/30 = 0.3                             (26.52)
   p(E|C, ¬F ) = 18/30 = 0.6 <            p(E|¬, ¬F ) = 7/10 = 0.7                             (26.53)
A visual representation of the paradox is given in in Figure 26.15. The line which goes up and
to the right shows that the effect (y-axis) increases as the cause (x-axis) increases. However, the
dots represent the data for females, and the crosses represent the data for males. Within each
subgroup, we see that the effect decreases as we increase the cause.
   It is clear that the effect is real, but it is still very counter-intuitive. The reason the paradox
arises is that we are interpreting the statements causally, but we are not using proper causal
reasoning when performing our calculations. The statement that the drug C causes recovery E
is
   P (E|do(C))      >   P (E|do(¬C))                                                           (26.54)
whereas the data merely tell us
   P (E|C)     >   P (E|¬C)                                                                    (26.55)
This is not a contradiction. Observing C is positive evidence for E, since more males than
females take the drug, and the male recovery rate is higher (regardless of the drug). Thus
Equation 26.55 does not imply Equation 26.54.
   Nevertheless, we are left with a practical question: should we use the drug or not? It seems
like if we don’t know the patient’s gender, we should use the drug, but as soon as we discover
if they are male or female, we should stop using it. Obviously this conclusion is ridiculous.
   To answer the question, we need to make our assumptions more explicit. Suppose reality can
be modeled by the causal DAG in Figure 26.16(a). To compute the causal effect of C on E, we
need to adjust for (i.e., condition on) the confounding variable F . This is necessary because
there is a backdoor path from C to E via F , so we need to check the C → E relationship for
each value of F separately, to make sure the relationship between C and E is not affected by
any value of F .
   Suppose that for each value of F , taking the drug is harmful, that is,
    p(E|do(C), F )      < p(E|do(¬C), F )                                                      (26.56)
   p(E|do(C), ¬F )      < p(E|do(¬C), ¬F )                                                     (26.57)
Then we can show that taking the drug is harmful overall:
   p(E|do(C)) < p(E|do(¬C))                                                                    (26.58)
The proof is as follows (Pearl 2000, p181). First, from our assumptions in Figure 26.16(a), we see
that drugs have no effect on gender
   p(F |do(C)) = p(F |do(¬C)) = p(F )                                                          (26.59)
Now using the law of total probability,
   p(E|do(C))      =    p(E|do(C), F )p(F |do(C)) + p(E|do(C), ¬F )p(¬F |do(C))                (26.60)
                   =    p(E|do(C), F )p(F ) + p(E|do(C), ¬F )p(¬F )                             (26.61)
         26.6. Learning causal DAGs                                                                             935



                       Treatment              Gender              Treatment        Blood Pressure
                         C                        F                C                        F




                                      E                                        E
                                   Recovery                                 Recovery

                                     (a)                                         (b)

         Figure 26.16 Two different models uses to illustrate Simpson’s paradox. (a) F is gender and is a confounder
         for C and E. (b) F is blood pressure and is caused by C.


         Similarly,
            p(E|do(¬C))        =    p(E|do(¬C), F )p(F ) + p(E|do(¬C), ¬F )p(¬F )                           (26.62)
         Since every term in Equation 26.61 is less than the corresponding term in Equation 26.62, we
         conclude that
            p(E|do(C)) < p(E|do(¬C))                                                                        (26.63)
         So if the model in Figure 26.16(a) is correct, we should not administer the drug, since it reduces
         the probability of the effect.
            Now consider a different version of this example. Suppose we keep the data the same but
         interpret F as something that is affected by C, such as blood pressure. See Figure 26.16(b). In
         this case, we can no longer assume
            p(F |do(C)) = p(F |do(¬C)) = p(F )                                                              (26.64)
         and the above proof breaks down. So p(E|do(C)) − p(E|do(¬C)) may be positive or negaitve.
            In the true model is Figure 26.16(b), then we should not condition on F when assessing the
         effect of C on E, since there is no backdoor path in this case, because of the v-structure at
         F . That is, conditioning on F might block one of the causal pathways. In other words, by
         comparing patients with the same post-treatment blood pressure (value of F ), we may mask the
         effect of one of the two pathways by which the drug operates to bring about recovery.
            Thus we see that different causal assumptions lead to different causal conclusions, and hence
         different courses of action. This raises the question on whether we can learn the causal model
         from data. We discuss this issue below.

26.6.3   Learning causal DAG structures
         In this section, we discuss some ways to learn causal DAG structures.
           936                                               Chapter 26. Graphical model structure learning


26.6.3.1   Learning from observational data
           In Section 26.4, we discussed various methods for learning DAG structures from observational
           data. It is natural to ask whether these methods can recover the “true” DAG structure that was
           used to generate the data. Clearly, even if we have inﬁnite data, an optimal method can only
           identify the DAG up to Markov equivalence (Section 26.4.1). That is, it can identify the PDAG
           (partially directed acylic graph), but not the complete DAG structure, because all DAGs which are
           Markov equivalent have the same likelihood.
              There are several algorithms (e.g., the greedy equivalence search method of (Chickering
           2002)) that are consistent estimators of PDAG structure, in the sense that they identify the
           true Markov equivalence class as the sample size goes to inﬁnity, assuming we observe all the
           variables. However, we also have to assume that the generating distribution p is faithful to
           the generating DAG G. This means that all the conditional indepence (CI) properties of p are
           exactly captured by the graphical structure, so I(p) = I(G); this means there cannot be any CI
           properties in p that are due to particular settings of the parameters (such as zeros in a regression
           matrix) that are not graphically explicit. For this reason, a faithful distribution is also called a
           stable distribution.
              Suppose the assumptions hold and we learn a PDAG. What can we do with it? Instead of
           recovering the full graph, we can focus on the causal analog of edge marginals, by computing
           the magnitude of the causal effect of one node on another (say A on B). If we know the DAG, we
           can do this using techniques described in (Pearl 2000). If the DAG is unknown, we can compute
           a lower bound on the effect as follows (Maathuis et al. 2009): learn an equivalence class (PDAG)
           from data; enumerate all the DAGs in the equivalence class; apply Pearl’s do-calculus to compute
           the magnitude of the causal effect of A on B in each DAG; ﬁnally, take the minimum of these
           effects as the lower bound. It is usually computationally infeasible to compute all DAGs in the
           equivalence class, but fortunately one only needs to be able to identify the local neighborhood
           of A and B, which can be esimated more efficiently, as described in (Maathuis et al. 2009). This
           technique is called IDA, which is short for “intervention-calculus when the DAG is absent”.
              In (Maathuis et al. 2010), this technique was applied to some yeast gene expression data. Gene
           knockout data was used to estimate the “ground truth” effect of each 234 single-gene deletions
           on the remaining 5,361 genes. Then the algorithm was applied to 63 unperturbed (wild-type)
           samples, and was used to rank order the likely targets of each of the 234 genes. The method
           had a precision of 66% when the recall was set to 10%; while low, this is substantially more than
           rival variable-selection methods, such as lasso and elastic net, which were only slightly above
           chance.

26.6.3.2   Learning from interventional data
           If we want to distinguish between DAGs within the equivalence class, we need to use interven-
           tional data, where certain variables have been set, and the consequences have been measured.
           An example of this is the dataset in Figure 26.17(a), where proteins in a signalling pathway
           were perturbed, and their phosphorylation status was measured using a technique called ﬂow
           cytometry (Sachs et al. 2005).
              It is straightforward to modify the standard Bayesian scoring criteria, such as the marginal
           likelihood or BIC score, to handle learning from mixed observational and experimental data: we
26.6. Learning causal DAGs                                                                                937




                                                      (a)

                                 Psitect    AKT inh                 U0126
                                                                             PMA
                                                      pkc
                               plcy


                                           pip3
                                                                  akt
                                                                              raff
                                 pip2
                                                                  pka
                                                                                       mek12
                              G06967


                                                                                     erk
                               Present
                              Missing
                              Int. edge      jnk            p38             B2cAMP


                                                      (b)

Figure 26.17 (a) A design matrix consisting of 5400 data points (rows) measuring the status (using ﬂow
cytometry) of 11 proteins (columns) under different experimental conditions. The data has been discretized
into 3 states: low (black), medium (grey) and high (white). Some proteins were explicitly controlled using
activating or inhibiting chemicals. (b) A directed graphical model representing dependencies between
various proteins (blue circles) and various experimental interventions (pink ovals), which was inferred from
this data. We plot all edges for which p(Gst = 1|D) > 0.5. Dotted edges are believed to exist in nature
but were not discovered by the algorithm (1 false negative). Solid edges are true positives. The light colored
edges represent the effects of intervention. Source: Figure 6d of (Eaton and Murphy 2007) . This ﬁgure can
be reproduced using the code at http://www.cs.ubc.ca/~murphyk/Software/BDAGL/index.html.
         938                                                Chapter 26. Graphical model structure learning


         just compute the sufficient statistics for a CPD’s parameter by skipping over the cases where that
         node was set by intervention (Cooper and Yoo 1999). For example, when using tabular CPDs, we
         modify the counts as follows:
                         
             Ntck                I(xi,t = k, xi,pa(t) = c)                                         (26.65)
                    i:xit not set

         The justiﬁcation for this is that in cases where node t is set by force, it is not sampled from its
         usual mechanism, so such cases should be ignored when inferring the parameter θ t . The mod-
         iﬁed scoring criterion can be combined with any of the standard structure learning algorithms.
         (He and Geng 2009) discusses some methods for choosing which interventions to perform, so
         as to reduce the posterior uncertainty as quickly as possible (a form of active learning).
            The preceeding method assumes the interventions are perfect. In reality, experimenters can
         rarely control the state of individual molecules. Instead, they inject various stimulant or inhibitor
         chemicals which are designed to target speciﬁc molecules, but which may have side effects. We
         can model this quite simply by adding the intervention nodes to the DAG, and then learning
         a larger augmented DAG structure, with the constraint that there are no edges between the
         intervention nodes, and no edges from the “regular” nodes back to the intervention nodes.
            Figure 26.17(b) shows the augmented DAG that was learned from the interventional ﬂow
         cytometry data depicted in Figure 26.17(a). In particular, we plot the median graph, which
         includes all edges for which p(Gij = 1|D) > 0.5. These were computed using the exact
         algorithm of (Koivisto 2006). It turns out that, in this example, the median model has exactly
         the same structure as the optimal MAP model, argmaxG p(G|D), which was computed using
         the algorithm of (Koivisto and Sood 2004; Silander and Myllmaki 2006).

 26.7    Learning undirected Gaussian graphical models
         Learning the structured of undirected graphical models is easier than learning DAG structure
         because we don’t need to worry about acyclicity. On the other hand, it is harder than learning
         DAG structure since the likelihood does not decompose (see Section 19.5). This precludes the
         kind of local search methods (both greedy search and MCMC sampling) we used to learn DAG
         structures, because the cost of evaluating each neighboring graph is too high, since we have to
         reﬁt each model from scratch (there is no way to incrementally update the score of a model).
            In this section, we discuss several solutions to this problem, in the context of Gaussian
         random ﬁelds or undirected Gaussian graphical models (GGM)s. We consider structure learning
         for discrete undirected models in Section 26.8.

26.7.1   MLE for a GGM
         Before discussing structure learning, we need to discuss parameter estimation. The task of
         computing the MLE for a (non-decomposable) GGM is called covariance selection (Dempster
         1972).
           From Equation 4.19, the log likelihood can be written as
            (Ω) = log det Ω − tr(SΩ)                                                                  (26.66)
         26.7. Learning undirected Gaussian graphical models                                           939

                                                              N
         where Ω = Σ−1 is the precision matrix, and S = N1 i=1 (xi − x)(xi − x)T is the empirical
         covariance matrix. (For notational simplicity, we assume we have already estimated μ̂ = x.)
         One can show that the gradient of this is given by
            ∇(Ω) = Ω−1 − S                                                                         (26.67)
         However, we have to enforce the constraints that Ωst = 0 if Gst = 0 (structural zeros), and
         that Ω is positive deﬁnite. The former constraint is easy to enforce, but the latter is somewhat
         challenging (albeit still a convex constraint). One approach is to add a penalty term to the
         objective if Ω leaves the positive deﬁnite cone; this is the approach used in ggmFitMinfunc
         (see also (Dahl et al. 2008)). Another approach is to use a coordinate descent method, described
         in (Hastie et al. 2009, p633), and implemented in ggmFitHtf. Yet another approach is to use
         iterative proportional ﬁtting, described in Section 19.5.7. However, IPF requires identifying the
         cliques of the graph, which is NP-hard in general.
            Interestingly, one can show that the MLE must satisfy the following property: Σst = Sst if
         Gst = 1 or s = t, i.e., the covariance of a pair that are connected by an edge must match the
         empirical covariance. In addition, we have Ωst = 0 if Gst = 0, by deﬁnition of a GGM, i.e.,
         the precision of a pair that are not connected must be 0. We say that Σ is a positive deﬁnite
         matrix completion of S, since it retains as many of the entries in S as possible, corresponding
         to the edges in the graph, subject to the required sparsity pattern on Σ−1 , corresponding to the
         absent edges; the remaining entries in Σ are ﬁlled in so as to maximize the likelihood.
            Let us consider a worked example from (Hastie et al. 2009, p652). We will use the following
         adjacency matrix, representing the cyclic structure, X1 − X2 − X3 − X4 − X1 , and the following
         empirical covariance matrix:
                   ⎛              ⎞         ⎛                   ⎞
                     0 1 0 1                  10 1       5    4
                   ⎜1 0 1 0⎟                ⎜ 1 10 2          6⎟
             G=⎜                  ⎟         ⎜
                   ⎝0 1 0 1⎠ , S = ⎝ 5 2 10 3 ⎠
                                                                ⎟                                   (26.68)
                     1 0 1 0                   4    6    3 10
         The MLE is given   by
                ⎛                                  ⎞       ⎛                       ⎞
                  10.00     1.00    1.31     4.00            0.12 −0.01  0    −0.05
                ⎜ 1.00      10.00   2.00     0.87 ⎟        ⎜
                                                   ⎟ , Ω = ⎜−0.01 0.11 −0.02   0 ⎟ ⎟ (26.69)
            Σ=⎜ ⎝ 1.31       2.00   10.00    3.00  ⎠       ⎝  0   −0.02 0.11 −0.03⎠
                   4.00     0.87     3.00    10.00          −0.05  0    −0.03 0.13
         (See ggmFitDemo for the code to reproduce these numbers.) The constrained elements in Ω,
         and the free elements in Σ, both of which correspond to absent edges, have been highlighted.

26.7.2   Graphical lasso
         We now discuss one way to learn a sparse GRF structure, which exploits the fact that there is a
         1:1 correspondence between zeros in the precision matrix and absent edges in the graph. This
         suggests that we can learn a sparse graph structure by using an objective that encourages zeros
         in the precision matrix. By analogy to lasso (see Section 13.3), one can deﬁne the following 1
         penalized NLL:
            J(Ω) = − log det Ω + tr(SΩ) + λ||Ω||1                                                   (26.70)
940                                                Chapter 26. Graphical model structure learning

                      lambda=36.00, nedges=8                    lambda=27.00, nedges=11




                               (a)                                        (b)
                      lambda=7.00, nedges=18                    lambda=0.00, nedges=55




                               (c)                                      (d)

Figure 26.18 Sparse GGMs learned using graphical lasso applied to the ﬂow cytometry data. (a) λ = 36.
(b) λ = 27. (c) λ = 7. (d) λ = 0. Figure generated by ggmLassoDemo.


                  
where ||Ω||1 = j,k |ωjk | is the 1-norm of the matrix. This is called the graphical lasso or
Glasso.
   Although the objective is convex, it is non-smooth (because of the non-differentiable 1
penalty) and is constrained (because Ω must be a positive deﬁnite matrix). Several algorithms
have been proposed for optimizing this objective (Yuan and Lin 2007; Banerjee et al. 2008; Duchi
et al. 2008), although arguably the simplest is the one in (Friedman et al. 2008), which uses a
coordinate descent algorithm similar to the shooting algorithm for lasso. See ggmLassoHtf for
an implementation. (See also (Mazumder and Hastie 2012) for a more recent version of this
algorithm.)
   As an example, let us apply the method to the ﬂow cytometry dataset from (Sachs et al. 2005).
A discretized version of the data is shown in Figure 26.17(a). Here we use the original continuous
data. However, we are ignoring the fact that the data was sampled under intervention. In
Figure 26.18, we illustrate the graph structures that are learned as we sweep λ from 0 to a large
value. These represent a range of plausible hypotheses about the connectivity of these proteins.
   It is worth comparing this with the DAG that was learned in Figure 26.17(b). The DAG has the
advantage that it can easily model the interventional nature of the data, but the disadvantage
that it cannot model the feedback loops that are known to exist in this biological pathway (see
the discussion in (Schmidt and Murphy 2009)). Note that the fact that we show many UGMs and
only one DAG is incidental: we could easily use BIC to pick the “best” UGM, and conversely, we
         26.7. Learning undirected Gaussian graphical models                                                                  941


         could easily display several DAG structures, sampled from the posterior.

26.7.3   Bayesian inference for GGM structure *
         Although the graphical lasso is reasonably fast, it only gives a point estimate of the structure.
         Furthermore, it is not model-selection consistent (Meinshausen 2005), meaning it cannot recover
         the true graph even as N → ∞. It would be preferable to integrate out the parameters, and
         perform posterior inference in the space of graphs, i.e., to compute p(G|D). We can then extract
         summaries of the posterior, such as posterior edge marginals, p(Gij = 1|D), just as we did for
         DAGs. In this section, we discuss how to do this.
            Note that the situation is analogous to Chapter 13, where we discussed variable selection. In
         Section 13.2, we discussed Bayesian variable selection, where we integrated out the regression
         weights and computed p(γ|D) and the marginal inclusion probabilities p(γj = 1|D). Then
         in Section 13.3, we discussed methods based on 1 regularization. Here we have the same
         dichotomy, but we are presenting them in the opposite order.
            If the graph is decomposable, and if we use conjugate priors, we can compute the marginal
         likelihood in closed form (Dawid and Lauritzen 1993). Furthermore, we can efficiently identify
         the decomposable neighbors of a graph (Thomas and Green 2009), i.e., the set of legal edge
         additions and removals. This means that we can perform relatively efficient stochastic local
         search to approximate the posterior (see e.g. (Giudici and Green 1999; Armstrong et al. 2008;
         Scott and Carvalho 2008)).
            However, the restriction to decomposable graphs is rather limiting if one’s goal is knowledge
         discovery, since the number of decomposable graphs is much less than the number of general
         undirected graphs.5
            A few authors have looked at Bayesian inference for GGM structure in the non-decomposable
         case (e.g., (Dellaportas et al. 2003; Wong et al. 2003; Jones et al. 2005)), but such methods cannot
         scale to large models because they use an expensive Monte Carlo approximation to the marginal
         likelihood (Atay-Kayis and Massam 2005). (Lenkoski and Dobra 2008) suggested using a Laplace
         approxmation. This requires computing the MAP estimate of the parameters for Ω under a G-
         Wishart prior (Roverato 2002). In (Lenkoski and Dobra 2008), they used the iterative proportional
         scaling algorithm (Speed and Kiiveri 1986; Hara and Takimura 2008) to ﬁnd the mode. However,
         this is very slow, since it requires knowing the maximal cliques of the graph, which is NP-hard
         in general.
            In (Moghaddam et al. 2009), a much faster method is proposed. In particular, they modify
         the gradient-based methods from Section 26.7.1 to ﬁnd the MAP estimate; these algorithms do
         not need to know the cliques of the graph. A further speedup is obtained by just using a
         diagonal Laplace approximation, which is more accurate than BIC, but has essentially the same
         cost. This, plus the lack of restriction to decomposable graphs, enables fairly fast stochastic
         search methods to be used to approximate p(G|D) and its mode. This approach signiﬁcantly
         outperfomed graphical lasso, both in terms of predictive accuracy and structural recovery, for a
         comparable computational cost.

         5. The number of decomposable graphs on V nodes, for V = 2, . . . , 8, is as follows ((Armstrong 2005, p158)): 2; 8; 61;
         822; 18,154; 61,7675; 30,888,596. If we divide these numbers by the number of undirected graphs, which is 2V (V −1)/2 ,
         we ﬁnd the ratios are: 1, 1, 0.95, 0.8, 0.55, 0.29, 0.12. So we see that decomposable graphs form a vanishing fraction of
         the total hypothesis space.
         942                                                       Chapter 26. Graphical model structure learning


26.7.4   Handling non-Gaussian data using copulas *
         The graphical lasso and variants is inhertently limited to data that is jointly Gaussian, which is
         a rather severe restriction. Fortunately the method can be generalized to handle non-Gaussian,
         but still continuous, data in a fairly simple fashion. The basic idea is to estimate a set of D
         univariate monotonic transformations fj , one per variable j, such that the resulting transformed
         data is jointly Gaussian. If this is possible, we say the data belongs to the nonparametric
         Normal distribution, or nonparanormal distribution (Liu et al. 2009). This is equivalent to the
         family of Gaussian copulas (Klaassen and Wellner 1997). Details on how to estimate the fj
         transformations from the empirical cdf’s of each variable can be found in (Liu et al. 2009). After
         transforming the data, we can compute the correlation matrix and then apply glasso in the usual
         way. One can show, under various assumptions, that this is a consistent estimator of the graph
         structure, representing the CI assumptions of the original distribution(Liu et al. 2009).

 26.8    Learning undirected discrete graphical models
         The problem of learning the structure for UGMs with discrete variables is harder than the
         Gaussian case, because computing the partition function Z(θ), which is needed for parameter
         estimation, has complexity comparable to computing the permanent of a matrix, which in
         general is intractable (Jerrum et al. 2004). By contrast, in the Gaussian case, computing Z only
         requires computing a matrix determinant, which is at most O(V 3 ).
            Since stochastic local search is not tractable for general discrete UGMs, below we mention
         some possible alternative approaches that have been tried.

26.8.1   Graphical lasso for MRFs/CRFs
         It is possible to extend the graphical lasso idea to the discrete MRF and CRF case. However, now
         there is a set of parameters associated with each edge in the graph, so we have to use the graph
         analog of group lasso (see Section 13.5.1). For example, consider a pairwise CRF with ternary
         nodes, and node and edge potentials given by
                            ⎛ T ⎞                        ⎛ T                         ⎞
                             vt1 x                         wt11 x wst12T
                                                                           x wst13
                                                                                T
                                                                                   x
                               T ⎠
              ψt (yt , x) = ⎝vt2 x , ψst (ys , yt , x) = ⎝wst21
                                                             T
                                                                x wst22T
                                                                           x wst23
                                                                                T
                                                                                   x⎠               (26.71)
                             vt3 x
                               T
                                                          wst31 x wst32 x wst33
                                                             T         T        T
                                                                                   x
         where we assume x begins with a constant 1 term, to account for the offset. (If x only contains
         1, the CRF reduces to an MRF.) Note that we may choose to set some of the vtk and wstjk
         weights to 0, to ensure identiﬁability, although this can also be taken care of by the prior, as
         shown in Exercise 8.5.
            To learn sparse structure, we can minimize the following objective:
                                                                                                
                       N                                 
                                                           V 
                                                             V
             J = −               log ψt (yit , xi , vt ) +       log ψst (yis , yit , xi , wst )
                       i=1     t                              s=1 t=s+1

                           
                           V       
                                   V                    
                                                        V
                     +λ1               ||wst ||p + λ2         ||vt ||22                                   (26.72)
                           s=1 t=s+1                    t=1
26.8. Learning undirected discrete graphical models                                                                                                                                                                                                                        943

                                                                                                                                                     case                              children                                    bible                        health




                                                                                                                                                    course                                                            christian                                insurance




                                                    computer                                                                                                           evidence




               disk                                email            display               card                                                                                fact           earth




       files                                                    graphics                                                                                  government                                 god




       dos      format                    help     data               image            video                                           gun           human      car        president                  israel                                jesus




                           drive                memory                                                             number   power                   law       engine   dealer                                  jews                                       baseball




      ftp       mac         scsi                                              problem                                                          rights                                                          war      religion                           games      fans




                      pc              program                                    phone           nasa                                       state               question                                                                                  hockey




                software                                                      research     shuttle                                                                                                                                               league         nhl




                                                                              launch     moon            science                    orbit                                                                                                                   players




                                                                                         space       university                world                                                                                                                  season




                                                   system                  driver                                                                                                                                                                   team




                            version                technology                                                                                                                                                                              win




                                           windows                                                                                                                                                                                         won




Figure 26.19 An MRF estimated from the 20-newsgroup data using group 1 regularization with λ = 256.
Isolated nodes are not plotted. From Figure 5.9 of (Schmidt 2010). Used with kind permission of Mark
Schmidt.


where ||wst ||p is the p-norm; common choices are p = 2 or p = ∞, as explained in Sec-
tion 13.5.1. This method of CRF structure learning was ﬁrst suggested in (Schmidt et al. 2008).
(The use of 1 regularization for learning the structure of binary MRFs was proposed in (Lee
et al. 2006).)
   Although this objective is convex, it can be costly to evaluate, since we need to perform
inference to compute its gradient, as explained in Section 19.6.3 (this is true also for MRFs). We
should therefore use an optimizer that does not make too many calls to the objective function
or its gradient, such as the projected quasi-Newton method in (Schmidt et al. 2009). In addition,
we can use approximate inference, such as convex belief propagation (Section 22.4.2), to compute
an approximate objective and gradient more quickly. Another approach is to apply the group
lasso penalty to the pseudo-likelihood discussed in Section 19.5.4. This is much faster, since
inference is no longer required (Hoeﬂing and Tibshirani 2009). Figure 26.19 shows the result of
applying this procedure to the 20-newsgroup data, where yit indicates the presence of word t
in document i, and xi = 1 (so the model is an MRF).
         944                                                           Chapter 26. Graphical model structure learning


                                                    3 & )               3& 7
                                                                       


                                                                &ORXG\

                               &   36 )   36 7                                    &   35 )   35 7
                               )             6SULQNOHU              5DLQ    )        
                               7                                            7        

                                                                  :HW
                                                                 *UDVV
                                                   65         3: )      3: 7
                                                   ))                  
                                                   7)                  
                                                   )7                  
                                                   77                



         Figure 26.20 Water sprinkler DGM with corresponding binary CPTs. T and F stand for true and false.



26.8.2   Thin junction trees
         So far, we have been concerned with learning “sparse” graphs, but these do not necessarily have
         low treewidth. For example, a D × D grid is sparse, but has treewidth O(D). This means that
         the models we learn may be intractable to use for inference purposes, which defeats one of the
         two main reasons to learn graph structure in the ﬁrst place (the other reason being “knowledge
         discovery”). There have been various attempts to learn graphical models with bounded treewidth
         (e.g., (Bach and Jordan 2001; Srebro 2001; Elidan and Gould 2008; Shahaf et al. 2009)), also known
         as thin junction trees, but the exact problem in general is hard.
            An alternative approach is to learn a model with low circuit complexity (Gogate et al.
         2010; Poon and Domingos 2011). Such models may have high treewidth, but they exploit context-
         speciﬁc independence and determinism to enable fast exact inference (see e.g., (Darwiche 2009)).

         Exercises
         Exercise 26.1 Causal reasoning in the sprinkler network
         Consider the causal network in Figure 26.20. Let T represent true and F represent false.

         a. Suppose I perform a perfect intervention and make the grass wet. What is the probability the sprinkler
            is on, p(S = T |do(W = T ))?
         b. Suppose I perform a perfect intervention and make the grass dry. What is the probability the sprinkler
            is on, p(S = T |do(W = F ))?
         c. Suppose I perform a perfect intervention and make the clouds “turn on” (e.g., by seeding them). What
            is the probability the sprinkler is on, p(S = T |do(C = T ))?
27      Latent variable models for discrete data



 27.1   Introduction
        In this chapter, we are concerned with latent variable models for discrete data, such as bit vectors,
        sequences of categorical variables, count vectors, graph structures, relational data, etc. These
        models can be used to analyze voting records, text and document collections, low-intensity
        images, movie ratings, etc. However, we will mostly focus on text analysis, and this will be
        reﬂected in our terminology.
           Since we will be dealing with so many different kinds of data, we need some precise notation
        to keep things clear. When modeling variable-length sequences of categorical variables (i.e.,
        symbols or tokens), such as words in a document, we will let yil ∈ {1, . . . , V } represent
        the identity of the l’th word in document i, where V is the number of possible words in
        the vocabulary. We assume l = 1 : Li , where Li is the (known) length of document i, and
        i = 1 : N , where N is the number of documents.
           We will often ignore the word order, resulting in a bag of words. This can be reduced to
        a ﬁxed length vector of counts (a histogram). We will use niv ∈ {0, 1, . . . , Li } to denote the
        number of times word v occurs in document i, for v = 1 : V . Note that the N × V count
        matrix N is often large but sparse, since we typically have many documents, but most words
        do not occur in any given document.
           In some cases, we might have multiple different bags of words, e.g., bags of text words and
        bags of visual words. These correspond to different “channels” or types of features. We will
        denote these by yirl , for r = 1 : R (the number of responses) and l = 1 : Lir . If Lir = 1, it
        means we have a single token (a bag of length 1); in this case, we just write yir ∈ {1, . . . , Vr }
        for brevity. If every channel is just a single token, we write the ﬁxed-size response vector as
        yi,1:R ; in this case, the N × R design matrix Y will not be sparse. For example, in social
        science surveys, yir could be the response of person i to the r’th multi-choice question.
           Out goal is to build joint probability models of p(yi ) or p(ni ) using latent variables to capture
        the correlations. We will then try to interpret the latent variables, which provide a compressed
        representation of the data. We provide an overview of some approaches in Section 27.2, before
        going into more detail in later sections.
           Towards the end of the chapter, we will consider modeling graphs and relations, which can
        also be represented as sparse discrete matrices. For example, we might want to model the graph
        of which papers mycite which other papers. We will denote these relations by R, reserving the
        symbol Y for any categorical data (e.g., text) associated with the nodes.
         946                                                   Chapter 27. Latent variable models for discrete data


 27.2    Distributed state LVMs for discrete data
         In this section, we summarize a variety of possible approaches for constructing models of the
         form p(yi,1:Li ), for bags of tokens; p(y1:R ), for vectors of tokens; and p(ni ), for vectors of
         integer counts.

27.2.1   Mixture models
         The simplest approach is to use a ﬁnite mixture model (Chapter 11). This associates a single
         discrete latent variable, qi ∈ {1, . . . , K}, with every document, where K is the number of
         clusters. We will use a discrete prior, qi ∼ Cat(π). For variable length documents, we can
         deﬁne p(yil |qi = k) = bkv , where bkv is the probability that cluster k generates word v. The
         value of qi is known as a topic, and the vector bk is the k’th topic’s word distribution. That is,
         the likelihood has the form
                                     
                                     Li
            p(yi,1:Li |qi = k) =           Cat(yil |bk )                                                      (27.1)
                                     l=1

         The induced distribution on the visible data is given by
                                L                 
                                 i

            p(yi,1:Li ) =    πk      Cat(yil |bk )                                                           (27.2)
                           k          l=1

         The “generative story” which this encodes is as follows: for document i, pick a topic qi from
         π, call it k, and then for each word l = 1 : Li , pick a word from bk . We will consider more
         sophisticated generative models later in this chapter.
           If we have a ﬁxed set of categorical observations, we can use a different topic matrix for each
         output variable:

                                     
                                     R
                                                        (r)
            p(yi,1:R |qi = k) =            Cat(yil |bk )                                                     (27.3)
                                   r=1

         This is an unsupervised analog of naive Bayes classiﬁcation. 
           We can also model count vectors. If the sum Li =             v niv is known, we can use a
         multinomial:

            p(ni |Li , qi = k) = Mu(ni |Li , bk )                                                            (27.4)

         If the sum is unknown, we can use a Poisson class-conditional density to give

                               
                               V
            p(ni |qi = k) =          Poi(niv |λvk )                                                          (27.5)
                               v=1
                                              
         In this case, Li |qi = k ∼ Poi(          v   λvk ).
         27.2. Distributed state LVMs for discrete data                                                   947


27.2.2   Exponential family PCA
         Unfortunately, ﬁnite mixture models are very limited in their expressive power. A more ﬂexible
         model is to use a vector of real-valued continuous latent variables, similar to the factor analysis
         (FA) and PCA models in Chapter 12. In PCA, we use a Gaussian prior of the form p(zi ) =
         N (μ, Σ), where zi ∈ RK , and a Gaussian likelihood of the form p(yi |zi ) = N (Wzi , σ 2 I).
         This method can certainly be applied to discrete or count data. Indeed, the method known
         as latent semantic analysis (LSA) or latent semantic indexing (LSI) (Deerwester et al. 1990;
         Dumais and Landauer 1997) is exactly equivalent to applying PCA to a term by document count
         matrix.
            A better method for modeling categorical data is to use a multinoulli or multinomial distribu-
         tion. We just have to change the likelihood to
                                 
                                 Li
            p(yi,1:Li |zi ) =          Cat(yil |S(Wzi ))                                                (27.6)
                                 l=1

         where W ∈ RV ×K is a weight matrix and S is the softmax function. If we have a ﬁxed number
         of categorical responses, we can use
                             
                             R
            p(y1:R |zi ) =         Cat(yir |S(Wr zi ))                                                  (27.7)
                             r=1

         where Wr ∈ RV ×K is the weight matrix for the r’th response variable. This model is called
         categorical PCA, and is illustrated in Figure 27.1(a); see Section 12.4 for further discussion. If we
         have counts, we can use a multinomial model
            p(ni |Li , zi ) = Mu(ni |Li , S(Wzi ))                                                      (27.8)
         or a Poisson model
                           
                           V
            p(ni |zi ) =         Poi(niv | exp(wv,:
                                                T
                                                    zi ))                                               (27.9)
                           v=1

            All of these models are examples of exponential family PCA or ePCA (Collins et al. 2002;
         Mohamed et al. 2008), which is an unsupervised analog of GLMs. The corresponding induced
         distribution on the visible variables has the form
                             L                  
                                i

             p(yi,1:Li ) =         p(yil |zi , W) N (zi |μ, Σ)dzi                             (27.10)
                                   l=1

         Fitting this model is tricky, due to the lack of conjugacy. (Collins et al. 2002) proposed a
         coordinate ascent method that alternates between estimating the zi and W. This can be
         regarded as a degenerate version of EM, that computes a point estimate of zi in the E step. The
         problem with the degenerate approach is that it is very prone to overﬁtting, since the number
         of latent variables is proportional to the number of datacases (Welling et al. 2008). A true EM
         algorithm would marginalize out the latent variables zi . A way to do this for categorical PCA,
         using variational EM, is discussed in Section 12.4. For more general models, one can use MCMC
         (Mohamed et al. 2008).
         948                                                Chapter 27. Latent variable models for discrete data

                                                                                 α
                          μ               Σ




                              zi                                                 πi

                   yi,1       ...              yi,R                                                 Li
                                                      N                ni,1      ...         ni,V

               W 1,K,V        ...              W R,K,V
                                                                                                         N

                                                                         B K,V
                              γ

                                   (a)                                                 (b)

         Figure 27.1 Two LVMs for discrete data. Circles are scalar nodes, ellipses are vector nodes, squares are
         matrix nodes. (a) Categorical PCA. (b) Multinomial PCA.



27.2.3   LDA and mPCA
         In ePCA, the quantity Wzi represents the natural parameters of the exponential family. Some-
         times it is more convenient to use the dual parameters. For example, for the multinomial, the
         dual parameter is the probability vector, whereas the natural parameter is the vector of log odds.
            If we want to use the dual parameters, we need to constrain the latent variables so they live
         in the appropriate parameter space. In the case of categorical data, we will need to ensure the
         latent vector lives in SK , the K-dimensional probability simplex. To avoid confusion with ePCA,
         we will denote such a latent vector by π i . In this case, the natural prior for the latent variables
         is the Dirichlet, π i ∼ Dir(α). Typically we set α = α1K . If we set α  1, we encourage π i
         to be sparse, as shown in Figure 2.14.
            When we have a count vector whose total sum is known, the likelihood is given by
            p(ni |Li , π i ) = Mu(ni |Li , Bπ i )                                                            (27.11)
         This model is called multinomial PCA or mPCA (Buntine    2002; Buntine and Jakulin 2004,
         2006). See Figure 27.1(b). Since we are assuming niv = k bvk πiv , this can be seen as a form
                                                                                          parameter
         of matrix factorization for the count matrix. Note that we use bv,k to denote the
         vector, rather than wv,k , since we impose the constraints that 0 ≤ bv,k ≤ 1 and v bv,k = 1.
         The corresponding marginal distribution has the form

            p(ni |Li ) =      Mu(ni |Li , Bπ i )Dir(π i |α)dπ i                                              (27.12)

         Unfortunately, this integral cannot be computed analytically.
           If we have a variable length sequence (of known length), we can use
                                    
                                    Li
            p(yi,1:Li |π i ) =            Cat(yil |Bπ i )                                                    (27.13)
                                    l=1
         27.2. Distributed state LVMs for discrete data                                               949


         This is called latent Dirichlet allocation or LDA (Blei et al. 2003), and will be described in
         much greater detail below. LDA can be thought of as a probabilistic extension of LSA, where the
         latent quantities πik are non-negative and sum to one. By contrast, in LSA, zik can be negative
         which makes interpetation difficult.
            A predecessor to LDA, known as probabilistic latent semantic indexing or PLSI (Hofmann
         1999), uses the same model but computes a point estimate of π i for each document (similar to
         ePCA), rather than integrating it out. Thus in PLSI, there is no prior for π i .
            We can modify LDA to handle a ﬁxed number of different categorical responses as follows:
                                
                                R
            p(yi,1:R |π i ) =         Cat(yil |B(r) π i )                                           (27.14)
                                r=1

         This has been called the user rating proﬁle (URP) model (Marlin 2003), and the simplex factor
         model (Bhattacharya and Dunson 2011).

27.2.4   GaP model and non-negative matrix factorization
         Now consider modeling count vectors where we do not constrain the sum to be observed. In
         this case, the latent variables just need to be non-negative, so we will denote them by z+
                                                                                                  i . This
         can be ensured by using a prior of the form
                      
                      K
            p(z+
               i )=
                                +
                            Ga(zik |αk , βk )                                                       (27.15)
                      k=1

         The likelihood is given by
                          
                          V
            p(ni |z+
                   i )=         Poi(niv |bTv,: z+
                                                i )                                                 (27.16)
                          v=1

         This is called the GaP (Gamma-Poisson) model (Canny 2004). See Figure 27.2(a).
            In (Buntine and Jakulin 2006), it is shown that the GaP model, when conditioned on a ﬁxed
         Li , reduces to the mPCA model. This follows since a set of Poisson random variables, when
         conditioned on their sum, becomes a multinomial distribution (see e.g., (Ross 1989)).
            If we set αk = βk = 0 in the GaP model, we recover a method known as non-negative
         matrix factorization or NMF (Lee and Seung 2001), as shown in (Buntine and Jakulin 2006).
         NMF is not a probabilistic generative model, since it does not specify a proper prior for z+
                                                                                                    i .
         Furthermore, the algorithm proposed in (Lee and Seung 2001) is another degenerate EM algo-
         rithm, so suffers from overﬁtting. Some procedures to ﬁt the GaP model, which overcome these
         problems, are given in (Buntine and Jakulin 2006).
            To encourage z+ i to be sparse, we can modify the prior to be a spike-and-Gamma type prior
         as follows:
               +            +                      +
            p(zik ) = ρk I(zik = 0) + (1 − ρk )Ga(zik |αk , βk )                                    (27.17)
         where ρk is the probability of the spike at 0. This is called the conditional Gamma Poisson
         model (Buntine and Jakulin 2006). It is simple to modify Gibbs sampling to handle this kind of
         prior, although we will not go into detail here.
         950                                                             Chapter 27. Latent variable models for discrete data


                                        α1 β1         αK βK                                  α
                                                ...

                                                                                            πi
                                    +                     +
                                   zi,1         ...      zi,K
                                                                                            qil
                                 ni,1           ...
                                                              ni,V
                                                                     N                      yil
                                                                                                        Li
                                                                                                             N
                                            B
                                                                                            B


                                                 γ                                           γ


                                                (a)                                               (b)

                Figure 27.2 (a) Gaussian-Poisson (GAP) model. (b) Latent Dirichlet allocation (LDA) model.



 27.3    Latent Dirichlet allocation (LDA)
         In this section, we explain the latent Dirichlet allocation or LDA (Blei et al. 2003) model in
         detail.

27.3.1   Basics
         In a mixture of multinoullis, every document is assigned to a single topic, qi ∈ {1, . . . , K},
         drawn from a global distribution π. In LDA, every word is assigned to its own topic, qil ∈
         {1, . . . , K}, drawn from a document-speciﬁc distribution π i . Since a document belongs to a
         distribution over topics, rather than a single topic, the model is called an admixture mixture
         or mixed membership model (Erosheva et al. 2004). This model has many other applications
         beyond text analysis, e.g., genetics (Pritchard et al. 2000), health science (Erosheva et al. 2007),
         social network analysis (Airoldi et al. 2008), etc.
            Adding conjugate priors to the parameters, the full model is as follows:1
                        π i |α     ∼      Dir(α1K )                                                                      (27.18)
                      qil |π i     ∼      Cat(π i )                                                                      (27.19)
                       bk |γ       ∼      Dir(γ1V )                                                                      (27.20)
             yil |qil = k, B ∼            Cat(bk )                                                                       (27.21)
         This is illustrated in Figure 27.2(b). We can marginalize out the qi variables, thereby creating a

         1. Our notation is similar to the one we use elsewhere in this book, but is different from that used by most LDA papers.
         They typically use wnd for the identity of word n in document d, znd to represent the discrete indicator, θ d as the
         continuous latent vector for document d, and β k as the k’th topic vector.
27.3. Latent Dirichlet allocation (LDA)                                                                        951



                                             1       P(word1)
                                                                 = topic

                                                                 = observed
                                                                   document
                                                                 = generated
                                                                   document


                                                 0

                                                                     1   P(word2)


                                     1   P(word3)




Figure 27.3 Geometric interpretation of LDA. We have K = 2 topics and V = 3 words. Each document
(white dots), and each topic (black dots), is a point in the 3d simplex. Source: Figure 5 of (Steyvers and
Griffiths 2007). Used with kind permission of Tom Griffiths.


direct arc from π i to yil , with the following CPD:
                                                             
    p(yil = v|π i ) =          p(yil = v|qil = k)p(qil = k) =   πik bkv                                    (27.22)
                              k                                            k

As we mentioned in the introduction, this is very similar to the multinomial PCA model proposed
in (Buntine 2002), which in turn is closely related to categorical PCA, GaP, NMF, etc.
   LDA has an interesting geometric interpretation. Each vector bk deﬁnes a distribution over
V words; each k is known as a topic. Each document vector π i deﬁnes a distribution over K
topics. So we model each document as an admixture over topics. Equivalently, we can think
of LDA as a form of dimensionality reduction (assuming K < V , as is usually the case), where
we project a point in the V -dimensional simplex (a normalized document count vector xi ) onto
the K-dimensional simplex. This is illustrated in Figure 27.3, where we have V = 3 words and
K = 2 topics. The observed documents (which live in the 3d simplex) are approximated as
living on a 2d simplex spanned by the 2 topic vectors, each of which lives in the 3d simplex.
   One advantage of using the simplex as our latent space rather than Euclidean space is that
the simplex can handle ambiguity. This is importance since in natural language, words can often
have multiple meanings, a phenomomen known as polysemy. For example, “play” might refer
to a verb (e.g., “to play ball” or “to play the coronet”), or to a noun (e.g., “Shakespeare’s play”).
In LDA, we can have multiple topics, each of which can generate the word “play”, as shown in
Figure 27.4, reﬂecting this ambiguity.
   Given word l in document i, we can compute p(qil = k|yi , θ), and thus infer its most likely
topic. By looking at the word in isolation, it might be hard to know what sense of the word is
meant, but we can disambiguate this by looking at other words in the document. In particular,
given xi , we can infer the topic distribution π i for the document; this acts as a prior for
disambiguating qil . This is illustrated in Figure 27.5, where we show three documents from the
TASA corpus.2 In the ﬁrst document, there are a variety of music related words, which suggest
2. The TASA corpus is a collection of 37,000 high-school level English documents, comprising over 10 million words,
952                                                             Chapter 27. Latent variable models for discrete data




                             Topic 77                    Topic 82                   Topic 166
                                         word   prob.              word   prob.                word   prob.
                                      MUSIC     .090       LITERATURE     .031                PLAY    .136
                                     DANCE      .034              POEM    .028                BALL    .129
                                       SONG     .033           POETRY     .027               GAME     .065
                                       PLAY     .030              POET    .020            PLAYING     .042
                                        SING    .026            PLAYS     .019                  HIT   .032
                                    SINGING     .026            POEMS     .019             PLAYED     .031
                                       BAND     .026              PLAY    .015           BASEBALL     .027
                                    PLAYED      .023         LITERARY     .013              GAMES     .025
                                       SANG     .022          WRITERS     .013                 BAT    .019
                                      SONGS     .021           DRAMA      .012                 RUN    .019
                                   DANCING      .020            WROTE     .012             THROW      .016
                                      PIANO     .017             POETS    .011               BALLS    .015
                                   PLAYING      .016           WRITER     .011              TENNIS    .011
                                   RHYTHM       .015      SHAKESPEARE     .010               HOME     .010
                                    ALBERT      .013          WRITTEN     .009              CATCH     .010
                                   MUSICAL      .013            STAGE     .009               FIELD    .010




Figure 27.4 Three topics related to the word play.                        Source: Figure 9 of (Steyvers and Griffiths 2007).
Used with kind permission of Tom Griffiths.




         Document #29795
         Bix beiderbecke, at age060 fifteen207, sat174 on the slope071 of a bluff055 overlooking027 the mississippi137 river137. He
         was listening077 to music077 coming009 from a passing043 riverboat. The music077 had already captured006 his heart157
         as well as his ear119. It was jazz077. Bix beiderbecke had already had music077 lessons077. He showed002 promise134 on
         the piano077, and his parents035 hoped268 he might consider118 becoming a concert077 pianist077. But bix was
         interested268 in another kind050 of music077. He wanted268 to play077 the cornet. And he wanted268 to play077 jazz077...


         Document #1883
         There is a simple050 reason106 why there are so few periods078 of really great theater082 in our whole western046 world.
         Too many things300 have to come right at the very same time. The dramatists must have the right actors082, the
         actors082 must have the right playhouses, the playhouses must have the right audiences082. We must remember288 that
         plays082 exist143 to be performed077, not merely050 to be read254. ( even when you read254 a play082 to yourself, try288 to
         perform062 it, to put174 it on a stage078, as you go along.) as soon028 as a play082 has to be performed082, then some
         kind126 of theatrical082...


         Document #21359
         Jim296 has a game166 book254. Jim296 reads254 the book254. Jim296 sees081 a game166 for one. Jim296 plays166 the game166.
         Jim296 likes081 the game166 for one. The game166 book254 helps081 jim296. Don180 comes040 into the house038. Don180 and
         jim296 read254 the game166 book254. The boys020 see a game166 for two. The two boys020 play166 the game166. The
         boys020 play166 the game166 for two. The boys020 like the game166. Meg282 comes040 into the house282. Meg282 and
         don180 and jim296 read254 the book254. They see a game166 for three. Meg282 and don180 and jim296 play166 the game166.
         They play166 ...



Figure 27.5 Three documents from the TASA corpus containing different senses of the word play. Grayed
out words were ignored by the model, because they correspond to uninteresting stop words (such as “and”,
“the”, etc.) or very low frequency words. Source: Figure 10 of (Steyvers and Griffiths 2007). Used with
kind permission of Tom Griffiths.
           27.3. Latent Dirichlet allocation (LDA)                                                                        953


           π i will put most of its mass on the music topic (number 77); this in turn makes the music
           interpretation of “play” the most likely, as shown by the superscript. The second document
           interprets play in the theatrical sense, and the third in the sports sense. Note that is crucial
           that π i be a latent variable, so information can ﬂow between the qil ’s, thus enabling local
           disambiguation to use the full set of words.

27.3.2     Unsupervised discovery of topics
           One of the main purposes of LDA is discover topics in a large collection or corpus of docu-
           ments (see Figure 27.12 for an example). Unfortunately, since the model is unidentiﬁable, the
           interpertation of the topics can be difficult (Chang et al. 2009).. One approach, known as la-
           beled LDA (Ramage et al. 2009), exploits the existence of tags on documents as a way to ensure
           identiﬁability. In particular, it forces the topics to correspond to the tags, and then it learns a
           distribution over words for each tag. This can make the results easier to interpret.

27.3.3     Quantitatively evaluating LDA as a language model
           In order to evaluate LDA quantitatively, we can treat it as a language model, i.e., a probability
           distribution over sequences of words. Of course, it is not a very good language model, since it
           ignores word order and just looks at single words (unigrams), but it is interesting to compare
           LDA to other unigram-based models, such as mixtures of multinoullis, and pLSI. Such simple
           language models are sometimes useful for information retrieval purposes. The standard way to
           measure the quality of a language model is to use perplexity, which we now deﬁne below.

27.3.3.1   Perplexity
           The perplexity of language model q given a stochastic process3 p is deﬁned as
              perplexity(p, q)  2H(p,q)                                                                               (27.23)
           where H(p, q) is the cross-entropy of the two stochastic processes, deﬁned as
                                  1 
             H(p, q)  lim −             p(y1:N ) log q(y1:N )                                                         (27.24)
                        N →∞     Ny
                                           1:N


           The cross entropy (and hence perplexity) is minimized if q = p; in this case, the model can
           predict as well as the “true” distribution.
              We can approximate the stochastic process by using a single long test sequence (composed
           of multiple documents and multiple sentences, complete with end-of-sentence markers), call
               ∗
           it y1:N . (This approximation becomes more and more accurate as the sequence gets longer,
           provided the process is stationary and ergodic (Cover and Thomas 2006).) Deﬁne the empirical
           distribution (an approximation to the stochastic process) as
              pemp (y1:N ) = δy1:N
                               ∗   (y1:N )                                                                             (27.25)

           collated by a company formerly known as Touchstone Applied Science Associates, but now known as Questar Assessment
           Inc www.questarai.com.
           3. A stochastic process is one which can deﬁne a joint distribution over an arbitrary number of random variables. We
           can think of natural language as a stochastic process, since it can generate an inﬁnite stream of words.
           954                                          Chapter 27. Latent variable models for discrete data


           In this case, the cross-entropy becomes
                                1        ∗
              H(pemp , q) = −     log q(y1:N )                                                        (27.26)
                                N
           and the perplexity becomes
                                                                    9
                                                                    :N
                                                                    :             1
                                                      ∗
              perplexity(pemp , q) = 2H(pemp ,q) = q(y1:N )−1/N   = ;
                                                                    N
                                                                                                      (27.27)
                                                                        i=1
                                                                                    ∗
                                                                            q(yi∗ |y1:i−1 )

           We see that this is the geometric mean of the inverse predictive probabilities, which is the usual
           deﬁnition of perplexity (Jurafsky and Martin 2008, p96).
             In the case of unigram models, the cross entropy term is given by

                      1  1 
                         N     Li
              H=−                 log q(yil )                                                         (27.28)
                      N i=1 Li
                                 l=1

           where N is the number of documents and Li is the number of words in document i. Hence
           the perplexity of model q is given by

                                             1  1 
                                                N     Li
              perplexity(pemp , p) = exp −               log q(yil )                                  (27.29)
                                             N i=1 Li
                                                        l=1

              Intuitively, perplexity mesures the weighted average branching factor of the model’s predic-
           tive distribution. Suppose the model predicts that each symbol (letter, word, whatever) is equally
           likely, so p(yi |y1:i−1 ) = 1/K. Then the perplexity is ((1/K)N )−1/N = K. If some symbols
           are more likely than others, and the model correctly reﬂects this, its perplexity will be lower
           than K. Of course, H(p, p) = H(p) ≤ H(p, q), so we can never reduce the perplexity below
           the entropy of the underlying stochastic process.

27.3.3.2   Perplexity of LDA
           The key quantity is p(v), the predictive distribution of the model over possible words. (It is
           implicitly conditioned on the training set.) For LDA, this can be approximated by plugging in
           B (e.g., the posterior mean estimate) and approximately integrating out q using mean ﬁeld
           inference (see (Wallach et al. 2009) for a more accurate way to approximate the predictive
           likelihood).
              In Figure 27.6, we compare LDA to several other simple unigram models, namely MAP estima-
           tion of a multinoulli, MAP estimation of a mixture of multinoullis, and pLSI. (When performing
           MAP estimation, the same Dirichlet prior on B was used as in the LDA model.) The metric
           is perplexity, as in Equation 27.29, and the data is a subset of the TREC AP corpus containing
           16,333 newswire articles with 23,075 unique terms. We see that LDA signiﬁcantly outperforms
           these other methods.
         27.3. Latent Dirichlet allocation (LDA)                                                                                                                        955

                                                             7000
                                                                                                                  Unigram
                                                             6500                                                 Mixtures of Unigrams
                                                                                                                  LDA
                                                                                                                  Fold in pLSI
                                                             6000


                                                             5500




                                                Perplexity
                                                             5000


                                                             4500


                                                             4000


                                                             3500


                                                             3000


                                                             2500
                                                                    0   20       40       60   80    100    120   140      160       180   200
                                                                                               Number of Topics




         Figure 27.6 Perplexity vs number of topics on the TREC AP corpus for various language models. Based
         on Figure 9 of (Blei et al. 2003). Figure generated by bleiLDAperplexityPlot.

                                          α                                                                                                α

                      π1                ...                   ...                πN


               q1,1          q                                qN,1           q                             q1,1           q
                                                                                                                        . . . 1,L1
                                                                                                                                                     qN,1   q
                                                                                                                                                            . .N,L
                           . . . 1,L1         ...                            . .N,L
                                                                                . N                                                            ...             . N


               y1,1          y
                           . . . 1,L1
                                                              yN,1           y
                                                                             . .N,L                        y1,1           y                          yN,1   y
                                              ...                               . N                                     . . . 1,L1             ...          . .N,L
                                                                                                                                                               . N


                                         b1 . . . bK


                                          γ
                                                                                                                                           γ

                                              (a)                                                                                              (b)

         Figure 27.7 (a) LDA unrolled for N documents. (b) Collapsed LDA, where we integrate out the π i and
         the bk .


27.3.4   Fitting using (collapsed) Gibbs sampling
         It is straightforward to derive a Gibbs sampling algorithm for LDA. The full conditionals are as
         follows:
            p(qil = k|·)            ∝    exp[log πik + log bk,xil ]                                                                                                  (27.30)
                                                    
                 p(π i |·)          =    Dir({αk +      I(zil = k)})                                                                                                 (27.31)
                                                                             l
                                                                         
                 p(bk |·)           =    Dir({γv +                                         I(xil = v, zil = k)})                                                     (27.32)
                                                                             i        l

           However, one can get better performance by analytically integrating out the π i ’s and the bk ’s,
         956                                                      Chapter 27. Latent variable models for discrete data


         both of which have a Dirichlet distribution, and just sampling the discrete qil ’s. This approach
         was ﬁrst suggested in (Griffiths and Steyvers 2004), and is an example of collapsed Gibbs
         sampling. Figure 27.7(b) shows that now all the qil variables are fully correlated. However, we
         can sample them one at a time, as we explain below.
                                                        Li
            First, we need some notation. Let civk = l=1       I(qil =k, yil = v) be the number of times
         word v is assigned to topic k in document i. Let cik = v civk      be the number of times any
         word from document i has been assigned to topic k. Let cvk = i c      ivk be the number of times
         word v has been assigned to topic k in any document. Let niv        =    k civk be the number of
         times word v occurs in document i; thisis observed. Let ck = v cvk be the number of words
         assigned to topic k. Finally, let Li = k cik be the number of words in document i; this is
         observed.
            We can now derive the marginal prior. By applying Equation 5.24, one can show that
                                L                  
                                  i

             p(q|α) =                 Cat(qil |π i ) Dir(π i |α1K )dπ i                             (27.33)
                              i         l=1
                                             N 
                                                N      K
                                  Γ(Kα)                  k=1Γ(cik + α)
                      =                                                                                        (27.34)
                                  Γ(α)K        i=1
                                                         Γ(Li + Kα)
         By similar reasoning, one can show
                                   ⎡                    ⎤
                                     
            p(y|q, γ) =            ⎣       Cat(yil |bk )⎦ Dir(bk |γ1V )dbk                                     (27.35)
                                  k        il:qil =k
                                              K 
                                                 K       V
                                      Γ(V β)                v=1Γ(cvk + β)
                          =                                                                                    (27.36)
                                      Γ(β)V                 Γ(ck + V β)
                                                   k=1

         From the above equations, and using the fact that Γ(x + 1)/Γ(x) = x, we can derive the full
         conditional for p(qil |q−i,l ). Deﬁne c−
                                                ivk to be the same as civk except it is compute by summing
         over all locations in document i except for qil . Also, let yil = v. Then
                                                       c−
                                                        v,k + γ     c−
                                                                     i,k + α
            p(qi,l = k|q−i,l , y, α, γ)        ∝                                                               (27.37)
                                                       c−
                                                        k +Vγ
                                                              Li + Kα
         We see that a word in a document is assigned to a topic based both on how often that word is
         generated by the topic (ﬁrst term), and also on how often that topic is used in that document
         (second term).
            Given Equation 27.37, we can implement the collapsed Gibbs sampler as follows. We randomly
         assign a topic to each word, qil ∈ {1, . . . , K}. We can then sample a new topic as follows: for
         a given word in the corpus, decrement the relevant counts, based on the topic assigned to the
         current word; draw a new topic from Equation 27.37, update the count matrices; and repeat.
         This algorithm can be made efficient since the count matrices are very sparse.

27.3.5   Example
         This process is illustrated in Figure 27.8 on a small example with two topics, and ﬁve words.
         The left part of the ﬁgure illustrates 16 documents that were sampled from the LDA model using
           27.3. Latent Dirichlet allocation (LDA)                                                                               957

                      River      Stream     Bank       Money   Loan
                 1                                                                   River   Stream     Bank   Money   Loan
                 2                                                               1
                 3                                                               2
                 4                                                               3
                 5                                                               4
                 6                                                               5
                 7                                                               6
                 8                                                               7
                 9                                                               8
                10                                                               9
                11                                                              10
                12                                                              11
                13                                                              12
                                                                                13
                14                                                              14
                15                                                              15
                16                                                              16


                                          (a)                                                         (b)

           Figure 27.8 Illustration of (collapsed) Gibbs sampling applied to a small LDA example. There are N = 16
           documents, each containing a variable number of words drawn from a vocabulary of V = 5 words, There
           are two topics. A white dot means word the word is assigned to topic 1, a black dot means the word is
           assigned to topic 2. (a) The initial random assignment of states. (b) A sample from the posterior after 64
           steps of Gibbs sampling. Source: Figure 7 of (Steyvers and Griffiths 2007). Used with kind permission of
           Tom Griffiths.


           p(money|k = 1) = p(loan|k = 1) = p(bank|k = 1) = 1/3 and p(river|k = 2) = p(stream|k =
           2) = p(bank|k = 2) = 1/3. For example, we see that the ﬁrst document contains the word
           “bank” 4 times (indicated by the four dots in row 1 of the “bank” column), as well as various
           other ﬁnancial terms. The right part of the ﬁgure shows the state of the Gibbs sampler after
           64 iterations. The “correct” topic has been assigned to each token in most cases. For example,
           in document 1, we see that the word “bank” has been correctly assigned to the ﬁnancial topic,
           based on the presence of the words “money” and “loan”. The posterior mean estimate of the
           parameters is given by p̂(money|k = 1) = 0.32, p̂(loan|k = 1) = 0.29, p̂(bank|k = 1) =
           0.39, p̂(river|k = 2) = 0.25, p̂(stream|k = 2) = 0.4, and p̂(bank|k = 2) = 0.35, which is
           impressively accurate, given that there are only 16 training examples.

27.3.6     Fitting using batch variational inference
           A faster alternative to MCMC is to use variational EM. (We cannot use exact EM since exact
           inference of π i and qi is intractable.) We give the details below.

27.3.6.1   Sequence version
           Following (Blei et al. 2003), we will use a fully factorized (mean ﬁeld) approximation of the form
                                             
              q(π i , qi ) = Dir(π i |π̃ i )   Cat(qil |q̃il )                                         (27.38)
                                                   l

           We will follow the usual mean ﬁeld recipe. For q(qil ), we use Bayes’ rule, but where we need to
           take expectations over the prior:
              q̃ilk   ∝       byi,l ,k exp(E [log πik ])                                                                      (27.39)
           where
                                                               
              E [log πik ] = ψk (π̃ i. )  Ψ(π̃ik ) − Ψ(              π̃ik )                                                 (27.40)
                                                                 k
           958                                                Chapter 27. Latent variable models for discrete data


           where Ψ is the digamma function. The update for q(π i ) is obtained by adding up the expected
           counts:
                              
              π̃ik = αk +       q̃ilk                                                              (27.41)
                                  l

           The M step is obtained by adding up the expected counts and normalizing:
                                 N 
                                  Li
              b̂vk    ∝   γv +             q̃ilk I(yil = v)                                                (27.42)
                                 i=1 l=1


27.3.6.2   Count version
                                                 
           Note that the E step takes O(( i Li )V K) space to store the q̃ilk . It is much more space
           efficient to perform inference in the mPCA version of the model, which works with counts; these
           only take O(N V K) space, which is a big savings if documents are long. (By contrast, the
           collapsed Gibbs sampler must work explicitly with the qil variables.)
              We will focus on approximating p(π i , ci |ni , Li ), where we write ci as shorthand for ci.. . We
           will again use a fully factorized (mean ﬁeld) approximation of the form
                                              
               q(π i , ci ) = Dir(π i |π̃ i )   Mu(civ. |niv , c̃iv. )                                   (27.43)
                                            v

           The new E step becomes
                             
              π̃ik = αk +       niv c̃ivk                                                                  (27.44)
                                      v
              c̃ivk   ∝   bvk exp(E [log πik ])                                                            (27.45)

           The new M step becomes
                            
              b̂vk ∝ γv +      niv c̃ivk                                                                   (27.46)
                                  i


27.3.6.3   VB version
           We now modify the algorithm to use VB instead of EM, so that we infer the parameters as
           well as the latent variables. There are two advantages to this. First, by setting γ  1, VB will
           encourage B to be sparse (as in Section 21.6.1.6). Second, we will be able to generalize this to
           the online learning setting, as we discuss below.
             Our new posterior approximation becomes
                                                                        
              q(π i , ci , B) = Dir(π i |π̃ i )   Mu(civ. |niv , c̃iv. )   Dir(b.k |b̃.k )           (27.47)
                                                v                      k

           The update for c̃ivk changes, to the following:
              c̃ivk   ∝   exp (E [log bvk ] + E [log πik ])                                                (27.48)
         27.3. Latent Dirichlet allocation (LDA)                                                         959


          Algorithm 27.1: Batch VB for LDA
          1   Input: niv , K, αk , γv ;
          2   Estimate b̃vk using EM for multinomial mixtures;
          3   Initialize counts niv ;
          4   while not converged do
          5        // E step ;
         6         svk = 0 // expected sufficient statistics;
          7        for each document i = 1 : N do
         8              (π̃ i , c̃i ) = Estep(ni , B̃, α);
         9              svk + = niv c̃ivk ;
         10       // M step ;
         11       for each topic k = 1 : K do
         12           b̃vk = γv + svk ;

         13   function (π̃ i , c̃i ) = Estep(ni , B̃, α);
         14   Initialize π̃ik = αk ;
         15   repeat
         16        π̃i.old = π̃i. , π̃ik = αk ;
         17        for each word v = 1 : V do
         18               for each topic k!= 1 : K do            #
         19                c̃ivk = exp ψk (b̃v. ) + ψk (π̃ old
                                                           i.  )   ;
         20           c̃iv. = normalize(c̃iv. );
         21           π̃ik + = niv c̃ivk
                    1
                        
         22   until K k |π̃ik − π̃ik  old
                                          | < thresh;



         Also, the M step becomes
                            
            b̃vk = γv +        c̃ivk                                                                  (27.49)
                                   i

         No normalization is required, since we are just updating the pseudcounts. The overall algorithm
         is summarized in Algorithm 22.

27.3.7   Fitting using online variational inference
         In the bathc version, the E step clearly takes O(N KV T ) time, where T is the number of
         mean ﬁeld updates (typically T ∼ 5). This can be slow if we have many documents. This can
         be reduced by using stochastic gradient descent (Section 8.5.2) to perform online variational
         inference, as we now explain.
            We can derive an online version, following (Hoffman et al. 2010). We perform an E step in the
         usual way. We then compute the variational parameters for B treating the expected sufficient
         statistics from the single data case as if the whole data set had those statistics. Finally, we make
         960                                              Chapter 27. Latent variable models for discrete data


          Algorithm 27.2: Online variational Bayes for LDA
         1   Input: niv , K, αk , γv , τ0 , κ;
         2   Initialize b̃vk randomly;
         3   for t = 1 : ∞ do
         4        Set step size ρt = (τ0 + t)−κ ;
         5        Pick document i = i(t); ;
         6        (π̃ i , c̃i ) = Estep(ni , B̃, α);
         7        b̃new
                    vk = γv + N niv c̃ivk ;
         8        b̃vk = (1 − ρt )b̃vk + ρt b̃newvk ;




                                   Online 98K
                          900
                          850
                          800                                             Batch 98K
             Perplexity




                                Online 3.3M
                          750
                          700
                          650
                          600


                                         103.5    104    104.5      105         105.5     106       106.5
                                                 Documents seen (log scale)

         Figure 27.9 Test perplexity vs number of training documents for batch and online VB-LDA. From Figure
         1 of (Hoffman et al. 2010). Used with kind permission of David Blei.



         a partial update for the variational parameters for B, putting weight ρt on the new estimate
         and weight 1 − ρt on the old estimate. The step size ρt decays over time, as in Equation 8.83.
         The overall algorithm is summarized in Algorithm 3. In practice, we should use mini-batches,
         as explained in Section 8.5.2.3. In (Hoffman et al. 2010), they used a batch of size 256–4096.
            Figure 27.9 plots the perplexity on a test set of size 1000 vs number of analyzed documents (E
         steps), where the data is drawn from (English) Wikipedia. The ﬁgure shows that online variational
         inference is much faster than offline inference, yet produces similar results.

27.3.8   Determining the number of topics
         Choosing K, the number of topics, is a standard model selection problem. Here are some
         approaches that have been taken:

         • Use annealed importance sampling (Section 24.6.2) to approximate the evidence (Wallach
           et al. 2009).
         • Cross validation, using the log likelihood on a test set.
         27.4. Extensions of LDA                                                                        961


         • Use the variational lower bound as a proxy for log p(D|K).
         • Use non-parametric Bayesian methods (Teh et al. 2006).

 27.4    Extensions of LDA
         Many extensions of LDA have been proposed since the ﬁrst paper came out in 2003. We brieﬂy
         discuss a few of these below.

27.4.1   Correlated topic model
         One weakness of LDA is that it cannot capture correlation between topics. For example, if a
         document has the “business” topic, it is reasonable to expect the “ﬁnance” topic to co-occcur.
         The source of the problem is the use of a Dirichlet prior for π i . The problem with the Dirichelt
         it that it is characterized by just a mean vector and a strength parameter, but its covariance is
         ﬁxed (Σij = −αi αj ), rather than being a free parameter.
            One way around this is to replace the Dirichlet prior with the logistic normal distribution, as
         in categorical PCA (Section 27.2.2). The model becomes
                     bk |γ     ∼   Dir(γ1V )                                                        (27.50)
                         zi    ∼   N (μ, Σ)                                                          (27.51)
                     π i |zi   =   S(zi )                                                           (27.52)
                      qil |π i ∼   Cat(π i )                                                        (27.53)
            yil |qil = k, B ∼      Cat(bk )                                                         (27.54)
         This is known as the correlated topic model (Blei and Lafferty 2007). This is very similar to
         categorical PCA, but slightly different. To see the difference, let us marginalize out the qil and
         π i . Then in the CTM we have
            yil ∼ Cat(BS(zi ))                                                                      (27.55)
         where B is a stochastic matrix. By contrast, in catPCA we have
            yil ∼ Cat(S(Wzi ))                                                                      (27.56)
         where W is an unconstrained matrix.
            Fitting this model is tricky, since the prior for π i is no longer conjugate to the multinomial
         likelihood for qil . However, we can use any of the variational methods in Section 21.8.1.1, where
         we discussed Bayesian multiclass logistic regression. In the CTM case, things are even harder
         since the categorical response variables qi are hidden, but we can handle this by using an
         additional mean ﬁeld approximation. See (Blei and Lafferty 2007) for details.
                                                                                              −1
            Having ﬁt the model, one can then convert Σ̂ to a sparse precision matrix Σ̂ by pruning
         low-strength edges, to get a sparse Gaussian graphical model. This allows you to visualize the
         correlation between topics. Figure 27.10 shows the result of applying this procedure to articles
         from Science magazine, from 1990-1999. (This corpus contains 16,351 documents, and 5.7M words
         (19,088 of them unique), after stop-word and low-frequency removal.) Nodes represent topics,
         with the top 5 words per topic listed inside. The font size reﬂects the overall prevalence of the
         topic in the corpus. Edges represent signiﬁcant elements of the precision matrix.
         962                                                                                                       Chapter 27. Latent variable models for discrete data


                                                                                                                                                                           neurons
                                                                                                                                            brain                          stimulus
                                                                                                                                                                             motor
                                                                                                                                           memory
                                                                                                                                                                             visual
                                              activated                                                                                    subjects                                           synapses
                                      tyrosine phosphorylation                                                                                                              cortical
                                                                                                                                              left                                                ltp
                                              activation
                                          phosphorylation                   p53                                                              task            surface                          glutamate
                                               kinase                    cell cycle                 proteins                                                    tip                            synaptic
                                                                          activity                   protein
                                                                           cyclin                   binding               rna                                 image                            neurons
                                                                        regulation                  domain                dna                                sample            materials
                                                                                                                                             computer
                                                                                                    domains         rna polymerase                                              organic
                                                                                                                                              problem        device
                                                     receptor                                                          cleavage
                                                                                                                                           information
                                                                                                                                                                                polymer
                                science                                               amino acids                         site                                                 polymers
               research
                               scientists
                                                    receptors                             cdna                                              computers
                funding                                                                                                                                                        molecules      physicists
                support          says                  ligand                          sequence                                              problems
                                                                                                                                                           laser                               particles
                  nih          research               ligands                           isolated                                                          optical                              physics
               program          people                                                   protein                      sequence                              light
                                                    apoptosis                                                        sequences         surface
                                                                                                                                                                                               particle
                                                                                                                                                         electrons                           experiment
                                                                                                                       genome           liquid           quantum
                                                                       wild type                                         dna          surfaces                                                                 stars
                                                                        mutant                       enzyme          sequencing          ﬂuid
                                                                       mutations                    enzymes                             model                       reaction                               astronomers
               united states                                           mutants
                                                                                                       iron
                                                                                                    active site
                                                                                                                                                                   reactions                                 universe
                   women                                cells
                                                                       mutation                     reduction                                                      molecule                                  galaxies
                universities
                                                         cell                                                                                                      molecules
                                                     expression                                                                magnetic
                                                                                                                                                                                                              galaxy
                                                      cell lines                                        plants
                                                                                                                              magnetic ﬁeld                     transition state
                  students                          bone marrow                                          plant
                                                                                                                                  spin
                                                                                                                            superconductivity
                                                                                                        gene
                 education                                                                              genes
                                                                                                                            superconducting
                                                                                                                                                              pressure                    mantle
                                                                                                     arabidopsis
                                                                  bacteria                                                                                 high pressure                   crust                   sun
                                                                  bacterial                                                                                  pressures                 upper mantle             solar wind
                                                                    host                                                   fossil record                        core                    meteorites                earth
                                                                 resistance                         development                birds                         inner core                   ratios                 planets
                          mice                                    parasite                            embryos                 fossils                                                                             planet
                                                                                     gene                                   dinosaurs
                        antigen                      virus                                           drosophila                                 species
                                                                                   disease                                     fossil
                         t cells                       hiv                                             genes                                     forest
                                                                                  mutations
                       antigens                       aids                                           expression                                 forests
                                                                                   families                                                                                     earthquake                  co2
                    immune response                infection                                                                                  populations
                                                                                  mutation                                                                                      earthquakes               carbon
                                                    viruses                                                                                   ecosystems
                                                                                                                                                                                    fault             carbon dioxide
                                                                                                                                  ancient                                         images                 methane
                                       patients                                                             genetic                found
                                       disease                          cells                             population              impact
                                                                                                                                                                                    data                   water
                                                                                                                                                                                                                            ozone
                                      treatment                       proteins                            populations       million years ago        volcanic                                                           atmospheric
                                         drugs                                                            differences              africa
                                        clinical                    researchers                                                                      deposits                        climate
                                                                                                                                                                                                                       measurements
                                                                                                           variation                                                                                                    stratosphere
                                                                      protein                                                                        magma                           ocean
                                                                                                                                                     eruption                           ice                            concentrations
                                                                       found                                                                        volcanism                       changes
                                                                                                                                                                                climate change




         Figure 27.10 Output of the correlated topic model (with K = 50 topics) when applied to articles from
         Science. Nodes represent topics, with the 5 most probable phrases from each topic shown inside. Font
         size reﬂects overall prevalence of the topic. See http://www.cs.cmu.edu/~lemur/science/ for an
         interactive version of this model with 100 topics. Source: Figure 2 of (Blei and Lafferty 2007). Used with
         kind permission of David Blei.


27.4.2   Dynamic topic model
         In LDA, the topics (distributions over words) are assumed to be static. In some cases, it makes
         sense to allow these distributions to evolve smoothly over time. For example, an article might
         use the topic “neuroscience”, but if it was written in the 1900s, it is more likely to use words
         like “nerve”, whereas if it was written in the 2000s, it is more likely to use words like “calcium
         receptor” (this reﬂects the general trend of neuroscience towards molecular biology).
            One way to model this is use a dynamic logistic normal model, as illustrated in Figure 27.11.
         In particular, we assume the topic distributions evolve according to a Gaussian random walk,
         and then we map these Gaussian vectors to probabilities via the softmax function:
                  bt,k |bt−1,k                      ∼            N (bt−1,k , σ 2 1V )                                                                                                                                             (27.57)
                                  π ti              ∼            Dir(α1K )                                                                                                                                                        (27.58)
                             qil |π ti
                              t
                                                    ∼            Cat(π ti )                                                                                                                                                       (27.59)
            yilt |qilt    = k, B     t
                                                    ∼            Cat(S(btk ))                                                                                                                                                    (27.60)
         This is known as a dynamic topic model (Blei and Lafferty 2006b).
         27.4. Extensions of LDA                                                                       963

                                                        α



                                   π t−1
                                     i                  π ti               π t+1
                                                                             i


                                       qilt−1                  qilt            qilt+1


                                       y t−1
                                         il                    y til           y t+1
                                                                                 il


                                            N                          N            N



                                   bt−1
                                    k                   btk                bt+1
                                                                            k

                                                                                    K



                                       Figure 27.11 The dynamic topic model.



            One can perform approximate infernece in this model using a structured mean ﬁeld method
         (Section 21.4), that exploits the Kalman smoothing algorithm (Section 18.3.1) to perform exact
         inference on the linear-Gaussian chain between the bt,k nodes (see (Blei and Lafferty 2006b) for
         details).
            Figure 27.12 illustrates a typical output of the system when applied to 100 years of articles
         from Science. On the top, we visualize the top 10 words from a speciﬁc topic (which seems to
         be related to neuroscience) after 10 year intervals. On the bottom left, we plot the probability
         of some speciﬁc words belonging to this topic. On the bottom right, we list the titles of some
         articles that contained this topic.
            One interesting application of this model is to perform temporally-corrected document re-
         trieval. That is, suppose we look for documents about the inheritance of disease. Modern
         articles will use words like “DNA”, but older articles (before the discovery of DNA) may use other
         terms such as “heritable unit”. But both articles are likely to use the same topics. Similar ideas
         can be used to perform cross-language information retrieval, see e.g., (Cimiano et al. 2009).

27.4.3   LDA-HMM
         The LDA model assumes words are exchangeable, which is clearly not true. A simple way
         to model sequential dependence between words is to use a hidden Markov model or HMM.
         The trouble with HMMs is that they can only model short-range dependencies, so they cannot
         capture the overall gist of a document. Hence they can generate syntactically correct sentences
         (see e.g., Table 17.1). but not semantically plausible ones.
            It is possible to combine LDA with HMM to create a model called LDA-HMM (Griffiths et al.
964                                                                                     Chapter 27. Latent variable models for discrete data


   1881        1890        1900           1910           1920            1930               1940          1950         1960       1970          1980       1990       2000
   brain    movement       brain       movement       movement        stimulate            record       respons    response     respons         cell       cell      neuron
 movement       eye         eye           brain         sound          muscle              nerve         record    stimulate       cell       neuron    channel      active
  action       right     movement        sound          muscle          sound            stimulate     stimulate     record     potential   response     neuron       brain
   right       hand        right         nerve          active       movement            response         nerve    condition     stimul        active      ca2         cell
    eye        brain        left         active         nerve         response             muscle        muscle       active     neuron        brain      active       ﬁg
   hand         left       hand         muscle        stimulate         nerve            electrode       active     potential    active        stimul     brain    response
    left      action      nerve            left          ﬁber        frequency             active     frequency     stimulus      nerve       muscle    receptor    channel
  muscle      muscle      vision           eye         reaction          ﬁber               brain      electrode      nerve        eye        system     muscle     receptor
  nerve       sound       sound           right          brain          active              ﬁber       potential     subject     record        nerve    respons     synapse
  sound     experiment    muscle        nervous       response           brain            potential       study        eye      abstract     receptor    current     signal




                                                                                                1887 Mental Science
                                    nerve
                                                                                                1900 Hemianopsia in Migraine
                                                                                                1912 A Defence of the ``New Phrenology''
                                                                                                1921 The Synchronal Flashing of Fireﬂies
  "Neuroscience"                                                                                1932 Myoesthesis and Imageless Thought
                                                                                                1943 Acetylcholine and the Physiology of the Nervous System
                                                                                                1952 Brain Waves and Unit Discharge in Cerebral Cortex
                                                                                  ca2           1963 Errorless Discrimination Learning in the Pigeon
                                                          neuron                                1974 Temporal Summation of Light by a Vertebrate Visual Receptor
                                                                                                1983 Hysteresis in the Force-Calcium Relation in Muscle
                                                                                                1993 GABA-Activated Chloride Channels in Secretory Nerve Endings

                                1880        1900   1920   1940     1960    1980         2000




Figure 27.12 Part of the output of the dynamic topic model when applied to articles from Science. We
show the top 10 words for the neuroscience topic over time. We also show the probability of three words
within this topic over time, and some articles that contained this topic. Source: Figure 4 of (Blei and
Lafferty 2006b). Used with kind permission of David Blei.



2004). This model uses the HMM states to model function or syntactic words, such as “and” or
“however”, and uses the LDA to model content or semantic words, which are harder to predict.
There is a distinguished HMM state which speciﬁes when the LDA model should be used to
generate the word; the rest of the time, the HMM generates the word.
   More formally, for each document i, the model deﬁnes an HMM with states zil ∈ {0, . . . , C}.
In addition, each document has an LDA model associated with it. If zil = 0, we generate word
yil from the semantic LDA model, with topic speciﬁed by qil ; otherwise we generate word yil
from the syntactic HMM model. The DGM is shown in Figure 27.13. The CPDs are as follows:

                                 p(π i )                  =        Dir(π i |α1K )                                                                                       (27.61)
                         p(qil = k|π i )                  =        πik                                                                                                 (27.62)
                                                                                              
            p(zil = c |zi,l−1 = c)                        =        A  HM M
                                                                                        (c, c )                                                                        (27.63)
                                                                   
                                                                          B LDA (k, v)                      if c = 0
    p(yil = v|qil = k, zil = c)                           =                                                                                                            (27.64)
                                                                          B HM M (c, v)                     if c > 0

where BLDA is the usual topic-word matrix, BHM M is the state-word HMM emission matrix
and AHM M is the state-state HMM transition matrix.
  Inference in this model can be done with collapsed Gibbs sampling, analytically integrating
out all the continuous quantities. See (Griffiths et al. 2004) for the details.
  The results of applying this model (with K = 200 LDA topics and C = 20 HMM states) to the
combined Brown and TASA corpora4 are shown in Table 27.1. We see that the HMM generally is

4. The Brown corpus consists of 500 documents and 1,137,466 word tokens, with part-of-speech tags for each token.
27.4. Extensions of LDA                                                                                        965


                                              α


                                                    πi

                        qi,l−1               qi,l                    qi,l+1 . . .

                                                                                       B LDA
                        yi,l−1              yi,l            yi,l+1           ...


                        zi,l−1               zi,l                    zi,l+1 . . .

                                                                                N



                          AHMM               B HMM



                                        Figure 27.13     LDA-HMM model.

        In contrast to this approach, we study here how the overall network activity can control single cell
        parameters such as input resistance, as well as time and space constants, parameters that are crucial for
        excitability and spariotemporal (sic) integration.
   1.
        The integrated architecture in this paper combines feed forward control and error feedback adaptive
         control using neural networks.


      In other words, for our proof of convergence, we require the softassign algorithm to return a doubly
      stochastic matrix as *sinkhorn theorem guarantees that it will instead of a matrix which is merely close
   2. to being doubly stochastic based on some reasonable metric.
        The aim is to construct a portfolio with a maximal expected return for a given risk level and time
        horizon while simultaneously obeying *institutional or *legally required constraints.


        The left graph is the standard experiment the right from a training with # samples.
   3.
        The graph G is called the *guest graph, and H is called the host graph.



Figure 27.14 Function and content words in the NIPS corpus, as distinguished by the LDA-HMM model.
Graylevel indicates posterior probability of assignment to LDA component, with black being highest. The
boxed word appears as a function word in one sentence, and as a content word in another sentence.
Asterisked words had low frequency, and were treated as a single word type by the model. Source: Figure
4 of (Griffiths et al. 2004). Used with kind permission of Tom Griffiths.
966                                                     Chapter 27. Latent variable models for discrete data

           the         the        the         the        the           a          the          the        the
         blood           ,          ,          of          a         the            ,            ,          ,
             ,        and        and            ,         of          of           of            a          a
            of          of         of          to          ,           ,            a           of         in
         body            a         in          in         in          in          and         and        game
         heart          in      land          and         to       water           in        drink        ball
           and       trees         to     classes     picture         is         story      alcohol       and
            in        tree    farmers   government      ﬁlm          and           is           to       team
            to       with         for           a     image        matter          to        bottle        to
            is         on       farm         state      lens         are           as           in        play
         blood      forest    farmers   government     light       water         story       drugs        ball
         heart       trees      land         state       eye       matter       stories      drug        game
       pressure    forests      crops      federal      lens     molecules      poem        alcohol      team
         body        land       farm       public     image        liquid     characters    people          *
         lungs        soil      food        local     mirror      particles     poetry     drinking     baseball
        oxygen      areas      people         act      eyes          gas      character     person      players
        vessels      park     farming       states     glass        solid       author      effects     football
        arteries   wildlife    wheat      national    object     substance      poems      marijuana     player
             *       area      farms         laws     objects   temperature       life       body         ﬁeld
       breathing      rain      corn    department    lenses      changes        poet         use      basketball
           the          in         he           *         be        said          can        time           ,
             a         for         it        new       have        made         would         way           ;
            his         to       you        other        see        used          will       years          (
           this        on        they         ﬁrst     make        came         could         day           :
          their      with           i       same         do         went         may          part          )
         these          at        she       great      know        found          had       number
          your          by        we        good         get       called        must         kind
           her       from       there       small         go                       do        place
           my           as       this        little     take                     have
         some         into       who          old       ﬁnd                       did



Table 27.1 Upper row: Topics extracted by the LDA model when trained on the combined Brown and
TASA corpora. Middle row: topics extracted by LDA part of LDA-HMM model. Bottom row: topics extracted
by HMM part of LDA-HMM model. Each column represents a single topic/class, and words appear in order
of probability in that topic/class. Since some classes give almost all probability to only a few words, a list
is terminated when the words account for 90% of the probability mass. Source: Figure 2 of (Griffiths et al.
2004). Used with kind permission of Tom Griffiths.



responsible for syntactic words, and the LDA for semantics words. If we did not have the HMM,
the LDA topics would get “polluted” by function words (see top of ﬁgure), which is why such
words are normally removed during preprocessing.
   The model can also help disambiguate when the same word is being used syntactically or
semantically. Figure 27.14 shows some examples when the model was applied to the NIPS
corpus.5 We see that the roles of words are distinguished, e.g., “we require the algorithm to
return a matrix” (verb) vs “the maximal expected return” (noun). In principle, a part of speech
tagger could disambiguate these two uses, but note that (1) the LDA-HMM method is fully
unsupervised (no POS tags were used), and (2) sometimes a word can have the same POS tag,
but different senses, e.g., “the left graph” (a synactic role) vs “the graph G” (a semantic role).
   The topic of probabilistic models for syntax and semantics is a vast one, which we do not

The TASA corpus is an untagged collection of educational materials consisting of 37,651 documents and 12,190,931 word
tokens. Words appearing in fewer than 5 documents were replaced with an asterisk, but punctuation was included. The
combined vocabulary was of size 37,202 unique words.
5. NIPS stands for “Neural Information Processing Systems”. It is one of the top machine learning conferences. The
NIPS corpus volumes 1–12 contains 1713 documents.
           27.4. Extensions of LDA                                                                       967

                                       α                                     α


                                             πi                                    πi


                                       qil                              ci
                                                             q̄ i            qil
                                                                                                  A

                                       yil              ci                   yil

                                                                    N                         N

                                             B               w
                                                                                   B


                                                  (a)                                   (b)

                                     Figure 27.15 (a) Supervised LDA. (b) Discriminative LDA.



           have space to delve into any more. See e.g., (Jurafsky and Martin 2008) for further information.

27.4.4     Supervised LDA
           In this section, we discuss extensions of LDA to handle side information of various kinds beyond
           just words.

27.4.4.1   Generative supervised LDA
           Suppose we have a variable length sequence of words yil ∈ {1, . . . , V } as usual, but we also
           have a class label ci ∈ {1, . . . , C}. How can we predict ci from yi ? There are many possible
           approaches, but most are direct mappings from the words to the class. In some cases, such
           as sentiment analysis, we can get better performance by ﬁrst performing inference, to try
           to disambiguate the meaning of words. For example, suppose the goal is to determine if a
           document is a favorable review of a movie or not. If we encounter the phrase “Brad Pitt was
           excellent until the middle of the movie”, the word “excellent” may lead us to think the review is
           positive, but clearly the overall sentiment is negative.
              One way to tackle such problems is to build a joint model of the form p(ci , yi |θ). (Blei
           and McAuliffe 2010) proposes an approach, called supervised LDA, where the class label ci is
           generated from the topics as follows:

              p(ci |qi ) = Ber(sigm(wT qi ))                                                          (27.65)

           Here qi is the empirical topic distribution for document i:

                       1 
                           Li
              q ik           qilk                                                                    (27.66)
                       Li i=1

           See Figure 27.15(a) for an illustration.
           968                                                 Chapter 27. Latent variable models for discrete data


                                                               μ         Σ
                                                                                           xi
                                  xi
                                                        xi          Wi
                                                                                           αi         W
                                  πi         W
                                                               πi
                                                                                           πi
                            qil
                                                                                     qil
                                                         qil
                            yil
                                                                                     yil
                                                         yil
                                        N
                                                                                                 N
                                                                         N

                                  B                            B                           B


                                       (a)                      (b)                             (c)

           Figure 27.16 Discriminative variants of LDA. (a) Mixture of experts aka MR-LDA. The double ring denotes
           a node that π i a deterministic function of its parents. (b) Mixture of experts with random effects. (c)
           DMR-LDA.


             We can ﬁt this model using Monte Carlo EM: run the collapsed Gibbs sampler in the E step, to
           compute E [q ik ], and then use this as the input feature to a standard logistic regression package.

27.4.4.2   Discriminative supervised LDA
           An alternative approach, known as discriminative LDA (Lacoste-Julien et al. 2009), is shown in
           Figure 27.15(b). This is a discriminative model of the form p(yi |ci , θ). The only change from
           regular LDA is that the topic prior becomes input dependent, as follows:
              p(qil |π i , ci = c, θ) = Cat(Ac π)                                                           (27.67)
           where Ac is a K × K stochastic matrix.
              So far, we have assumed the “side information” is a single categorical variable ci . Often we
           have high dimensional covariates xi ∈ RD . For example, consider the task of image tagging.
           The idea is that yil represent correlated tags or labels, which we want to predict given xi . We
           now discuss several attempts to extend LDA so that it can generate tags given the inputs.
              The simplest approach is to use a mixture of experts (Section 11.2.4) with multiple outputs.
           This is just like LDA except we replace the Dirichlet prior on π i with a deterministic function
           of the input:
              πi    =   S(Wxi )                                                                             (27.68)
           In (Law et al. 2010), this is called multinomial regression LDA. See Figure 27.16(a). Eliminating
           the deterministic π i we have
              p(qil |xi , W) = Cat(S(Wxi ))                                                                 (27.69)
              We can ﬁt this with EM in the usual way. However, (Law et al. 2010) suggest an alternative.
           First ﬁt an unsupervised LDA model based only on yi ; then treat the inferred π i as data, and
           27.4. Extensions of LDA                                                                          969


           ﬁt a multinomial logistic regression model mapping xi to π i . Although this is fast, ﬁtting LDA
           in an unsupervised fashion does not necessarily result in a discriminative set of latent variables,
           as discussed in (Blei and McAuliffe 2010).
              There is a more subtle problem with this model. Since π i is a deterministic function of the
           inputs, it is effectively observed, rendering the qil (and hence the tags yil ) independent. In other
           words,
                                
                                Li                       Li 
                                                         
              p(yi |xi , θ) =         p(yil |xi , θ) =           p(yil |qil = k, B)p(qil = k|xi , W)     (27.70)
                                l=1                      l=1 k

           This means that if we observe the value of one tag, it will have no inﬂuence on any of the
           others. This may explain why the results in (Law et al. 2010) only show negligible improvement
           over predicting each tag independently.
              One way to induce correlations is to make W a random variable. The resulting model is
           shown in Figure 27.16(b). We call this a random effects mixture of experts. We typically
           assume a Gaussian prior on Wi . If xi = 1, then p(qil |xi , wi ) = Cat(S(wi )), so we recover
           the correlated topic model. It is possible to extend this model by adding Markovian dynamics
           to the qil variables. This is called a conditional topic random ﬁeld (Zhu and Xing 2010).
              A closely related approach, known as Dirichlet multinomial regression LDA (Mimno and
           McCallum 2008), is shown in Figure 27.16(c). This is identical to standard LDA except we make
           α a function of the input
              αi   =    exp(Wxi )                                                                        (27.71)
           where W is a K × D matrix. Eliminating the deterministic αi we have
              π i ∼ Dir(exp(Wxi ))                                                                       (27.72)
           Unlike (Law et al. 2010), this model allows information to ﬂow between tags via the latent π i .
              A variant of this model, where xi corresponds to a bag of discrete labels and π i ∼ Dir(α $
           xi ), is known as labeled LDA (Ramage et al. 2009). In this case, the labels xi are in 1:1
           correspondence with the latent topics, which makes the resulting topics much more interpretable.
           An extension, known as partially labeled LDA (Ramage et al. 2011), allows each label to have
           multiple latent sub-topics; this model includes LDA, labeled LDA and a multinomial mixture
           model as special cases.

27.4.4.3   Discriminative categorical PCA
           An alternative to using LDA is to expand the categorical PCA model with inputs, as shown in
           Figure 27.17(a). Since the latent space is now real-valued, we can use simple linear regression
           for the input-hidden mapping. For the hidden-output mapping, we use traditional catPCA:
               p(zi |xi , V)    =      N (Vxi , Σ)                                                       (27.73)
                                       
              p(yi |zi , W)     =         Cat(yil |S(Wzi ))                                              (27.74)
                                        l

           This model is essentially a probabilistic neural network with one hidden layer, as shown in
           Figure 27.17(b), but with exchangeable output (e.g., to handle variable numbers of tags). The
       970                                                        Chapter 27. Latent variable models for discrete data




                     xi                                              xi1            ...         ...           xiD


                                                                           zi1                          ziK
                     zi             V                    v1                               ...                             vK


               yil                                                   yi1            ...         ...
                                                                                                              yiLi
                                    W
                                                                                                                N

                           N                                                              W

                          (a)                                                             (b)

       Figure 27.17 (a) Categorical PCA with inputs and exchangeable outputs. (b) Same as (a), but with the
       vector nodes expanded out.



       key difference from a neural net is that information can ﬂow between the yil ’s via the latent
       bottleneck layer zi . This should work better than a conventional neural net when the output
       labels are highly correlated, even after conditioning on the features; this problem frequently
       arises in multi label classiﬁcation. Note that we could allow a direct xi to yi arc, but this would
       require too many parameters if the number of labels is large.6
          We can ﬁt this model with a small modiﬁcation of the variational EM algorithm in Section 12.4.
       If we use this model for regression, rather than classiﬁcation, we can perform the E step exactly,
       by modifying the EM algorithm for factor analysis. (Ma et al. 1997) reports that this method
       converges faster than standard backpropagation.
          We can also extend the model so that the prior on zi is a mixture of Gaussians using input-
       dependent means. If the output is Gaussian, this corresponds to a mixture of discriminative
       factor analysers (Fokoue 2005; Zhou and Liu 2008). If the output is categorical, this would be
       an (as yet unpublished) model, which we could call “discriminative mixtures of categorical factor
       analyzers”.

27.5   LVMs for graph-structured data
       Another source of discrete data is when modeling graph or network structures. To see the
       connection, recall that any graph on D nodes can be represented as a D × D adjacency
       matrix G, where G(i, j) = 1 iff there is an edge from node i to node j. Such matrices are
       binary, and often very sparse. See Figure 27.19 for an example.
          Graphs arise in many application areas, such as modeling social networks, protein-protein
       interaction networks, or patterns of disease transmission between people or animals. There are
       usually two primary goals when analysing such data: ﬁrst, try to discover some “interesting

       6. A non-probabilistic version of this idea, using squared loss, was proposed in (Ji et al. 2010). This is similar to a linear
       feed-forward neural network with an additional edge from xi directly to yi .
         27.5. LVMs for graph-structured data                                                                         971




                         1          2           3                              1           6                  4



                         4          5           6
                                                                          8          2                3           5


                         7          8           9
                                                                                     9                7

                                   (a)                                                    (b)

         Figure 27.18 (a) A directed graph. (b) The same graph, with the nodes partitioned into 3 groups, making
         the block structure more apparent.

                                 123456789                       16       82       0.1   0.9    0.1
                             1                                   4        35       0.1   0.1    0.9       η
                             2                                        97           0.9   0.1    0.1
                             3
                             4                                        z
                                                                                   164823597
                             5                                                 1
                                                                               6
                             6                                                 4
                                                                               8
                             7                                                 2
                                                                                                          R
                                                                               3
                             8                                                 5
                                                                               9
                             9                                                 7



                                         (a)                                       (b)

         Figure 27.19 (a) Adjacency matrix for the graph in Figure 27.18(a). (b) Rows and columns are shown
         permuted to show the block structure. We also sketch of how the stochastic block model can generate this
         graph. From Figure 1 of (Kemp et al. 2006). Used with kind permission of Charles Kemp.



         structure” in the graph, such as clusters or communities; second, try to predict which links
         might occur in the future (e.g., who will make friends with whom). Below we summarize some
         models that have been proposed for these tasks, some of which are related to LDA. Futher details
         on these and other approaches can be found in e.g., (Goldenberg et al. 2009) and the references
         therein.

27.5.1   Stochastic block model
         In Figure 27.18(a) we show a directed graph on 9 nodes. There is no apparent structure. However,
         if we look more deeply, we see it is possible to partition the nodes into three groups or blocks,
         B1 = {1, 4, 6}, B2 = {2, 3, 5, 8}, and B3 = {7, 9}, such that most of the connections go from
         nodes in B1 to B2 , or from B2 to B3 , or from B3 to B1 . This is illustrated in Figure 27.18(b).
972                                                            Chapter 27. Latent variable models for discrete data


                                                                                     A




   Relational system
                                                       A
                               A       B
                                                                             B           C           A           B
                                                       B

                               D       C                                 D       E       F           C           D
                                                       C

                                                                       G         H                       E
                                                       D


                           A   B   C   D       A   B       C   D         A B C D E F GH          A   B   C   D       E
                                                                     A
   Sorted matrix



                       A                   A                                                 A
                                                                     B
                                                                     C                       B
                       B                   B
                                                                     D                       C
                       C                   C                         E
                                                                     F                       D
                       D                                             G
                                           D                                                 E
                                                                     H


Figure 27.20 Some examples of graphs generated using the stochastic block model with different kinds
of connectivity patterns between the blocks. The abstract graph (between blocks) represent a ring, a
dominance hierarchy, a common-cause structure, and a common-effect structure. From Figure 4 of (Kemp
et al. 2010). Used with kind permission of Charles Kemp.



   The problem is easier to understand if we plot the adjacency matrices. Figure 27.19(a) shows
the matrix for the graph with the nodes in their original ordering. Figure 27.19(b) shows the
matrix for the graph with the nodes in their permtuted ordering. It is clear that there is block
structure.
   We can make a generative model of block structured graphs as follows. First, for every
node, sample a latent block qi ∼ Cat(π), where πk is the probability of choosing block k, for
k = 1 : K. Second, choose the probability of connecting group a to group b, for all pairs of
groups; let us denote this probability by ηa,b . This can come from a beta prior. Finally, generate
each edge Rij using the following model:
    p(Rij = r|qi = a, qj = b, η) = Ber(r|ηa,b )                                                                      (27.75)
This is called the stochastic block model (Nowicki and Snijders 2001). Figure 27.21(a) illustrates
the model as a DGM, and Figure 27.19(c) illustrates how this model can be used to cluster the
nodes in our example.
   Note that this is quite different from a conventional clustering problem. For example, we
see that all the nodes in block 3 are grouped together, even though there are no connections
between them. What they share is the property that they “like to” connect to nodes in block 1,
and to receive connections from nodes in block 2. Figure 27.20 illustrates the power of the model
for generating many different kinds of graph structure. For example, some social networks have
hierarchical structure, which can be modeled by clustering people into different social strata,
whereas others consist of a set of cliques.
   Unlike a standard mixture model, it is not possible to ﬁt this model using exact EM, because
all the latent qi variables become correlated. However, one can use variational EM (Airoldi et al.
         27.5. LVMs for graph-structured data                                                              973


                                                    qj                α           πj
                                 π
                                                                                       qi←j

                                     qi             Ri,j
                                                                           qi→j        Ri,j
                                                                 πi
                                                         I
                                                                                          I
                                                             J                                J
                                                η a,b                             η a,b


                                          (a)                             (b)

                Figure 27.21 (a) Stochastic block model. (b) Mixed membership stochastic block model.



         2008), collapsed Gibbs sampling (Kemp et al. 2006), etc. We omit the details (which are similar
         to the LDA case).
            In (Kemp et al. 2006), they lifted the restriction that the number of blocks K be ﬁxed, by
         replacing the Dirichlet prior on π by a Dirichlet process (see Section 25.2.2). This is known as
         the inﬁnite relational model. See Section 27.6.1 for details.
            If we have features associated with each node, we can make a discriminative version of this
         model, for example by deﬁning
            p(Rij = r|qi = a, qj = b, xi , xj , θ) = Ber(r|wa,b
                                                            T
                                                                f (xi , xj ))                           (27.76)
         where f (xi , xj ) is some way of combining the feature vectors. For example, we could use
         concatenation, [xi , xj ], or elementwise product xi ⊗ xj as in supervised LDA. The overall
         model is like a relational extension of the mixture of experts model.

27.5.2   Mixed membership stochastic block model
         In (Airoldi et al. 2008), they lifted the restriction that each node only belong to one cluster. That
         is, they replaced qi ∈ {1, . . . , K} with π i ∈ SK . This is known as the mixed membership
         stochastic block model, and is similar in spirit to fuzzy clustering or soft clustering. Note
         that πik is not the same as p(zi = k|D); the former represents ontological uncertainty (to
         what degree does each object belong to a cluster) wheras the latter represents epistemological
         uncertainty (which cluster does an object belong to). If we want to combine epistemological
         and ontological uncertainty, we can compute p(π i |D).
            In more detail, the generative process is as follows. First, each node picks a distribution over
         blocks, π i ∼ Dir(α). Second, choose the probability of connecting group a to group b, for all
         pairs of groups, ηa,b ∼ β(α, β). Third, for each edge, sample two discrete variables, one for
         each direction:
            qi→j ∼ Cat(π i ), qi←j ∼ Cat(π j )                                                          (27.77)
         Finally, generate each edge Rij using the following model:
            p(Rij = 1|qi→j = a, qi←j = b, η) = ηa,b                                                     (27.78)
         974                                              Chapter 27. Latent variable models for discrete data


                                                                                                                                            1 Ambrose
                                                                                           12   7         Outcasts                          2 Boniface
                                                                                                    5
                                                                                                    6                                       3 Mark
                                                                                                                                            4 Winfrid
                                                                                                                                            5 Elias
                                                                                                                                            6 Basil
                                                                                                                                            7 Simplicius
                                                                       Waverers                                                             8 Berthold
                                                                                                                                            9 John Bosco
                                                                                                                                            10 Victor
                                                                                      15                                                    11 Bonaventure
                                                                                                                              Young         12 Amand
                                                                 Loyal                                                        Turks         13 Louis
                                                               Opposition                                                                   14 Albert
                                                                                                                     9                      15Ramuald
                                                                                                                17                          16 Peter
                                                                       13                                                           3
                                                                8           11                                                              17 Gregory
                                                                   1                                                     14     4       2   18 Hugh
                                                                 16              10                                           18




                                 (a)                                                                    (b)

         Figure 27.22 (a) Who-likes-whom graph for Sampson’s monks. (b) Mixed membership of each monk in
         one of three groups. From Figures 2-3 of (Airoldi et al. 2008). Used with kind permission of Edo Airoldi.



         See Figure 27.21(b) for the DGM.
            Unlike the regular stochastic block model, each node can play a different role, depending on
         who it is connecting to. As an illustration of this, we will consider a data set that is widely used
         in the social networks analysis literature. The data concerns who-likes-whom amongst of group
         of 18 monks. It was collected by hand in 1968 by Sampson (Sampson 1968) over a period of
         months. (These days, in the era of social media such as Facebook, a social network with only 18
         people is trivially small, but the methods we are discussing can be made to scale.) Figure 27.22(a)
         plots the raw data, and Figure 27.22(b) plots E [π]i for each monk, where K = 3. We see that
         most of the monk belong to one of the three clusters, known as the “young turks”, the “outcasts”
         and the “loyal opposition”. However, some individuals, notably monk 15, belong to two clusters;
         Sampson called these monks the “waverers”. It is interesting to see that the model can recover
         the same kinds of insights as Sampson derived by hand.
            One prevalent problem in social network analysis is missing data. For example, if Rij = 0,
         it may be due to the fact that person i and j have not had an opportunity to interact, or
         that data is not available for that interaction, as opposed to the fact that these people don’t
         want to interact. In other words, absence of evidence is not evidence of absence. We can model
         this by modifying the observation model so that with probability ρ, we generate a 0 from the
         background model, and we only force the model to explain observed 0s with probability 1 − ρ.
         In other words, we robustify the observation model to allow for outliers, as follows:
            p(Rij = r|qi→j = a, qi←j = b, η) = ρδ0 (r) + (1 − ρ)Ber(r|ηa,b )                                                                                 (27.79)
         See (Airoldi et al. 2008) for details.

27.5.3   Relational topic model
         In many cases, the nodes in our network have atttributes. For example, if the nodes represent
         academic papers, and the edges represent citations, then the attributes include the text of the
         document itself. It is therefore desirable to create a model that can explain the text and the link
         structure concurrently. Such a model can predict links given text, or even vice versa.
            The relational topic model (RTM) (Chang and Blei 2010) is one way to do this. This is a
       27.6. LVMs for relational data                                                                    975


                                                                                      yjl
                                              B

                                                        α                             qjl
                                                                          πj



                                                                               q̄ j



                                                        πi

                                                  yil        qil                      Rij
                                                                   q̄ i
                                                                                            I
                                                                                                J


                                                                               w




                                Figure 27.23 DGM for the relational topic model.



       simple extension of supervised LDA (Section 27.4.4.1), where the response variable Rij (which
       represents whether there is an edge between nodes i and j) is modeled as follows:
          p(Rij = 1|qi , qj , θ) = sigm(wT (qi ⊗ qj ) + w0 )                                          (27.80)
                                                                                            Li
       Recall that qi is the empirical topic distribution for document i, q ik  L1i i=1           qilk . See
       Figure 27.23
          Note that it is important that Rij depend on the actual topics chosen, qi and qj , and not
       on the topic distributions, π i and π j , otherwise predictive performance is not as good. The
       intuitive reason for this is as follows: if Rij is a child of π i and π j , it will be treated as just
       another word, similar to the qil ’s and yil ’s; but since there are many more words than edges,
       the graph structure information will get “washed out”. By making Rij a child of qi and qj , the
       graph information can inﬂuence the choice of topics more directly.
          One can ﬁt this model in a manner similar to SLDA. See (Chang and Blei 2010) for details.
       The method does better at predicting missing links than the simpler approach of ﬁrst ﬁtting an
       LDA model, and then using the qi ’s as inputs to a logistic regression problem. The reason is
       analogous to the superiority of partial least squares (Section 12.5.2) to PCA+ linear regression,
       namely that the RTM learns a latent space that is forced to be predictive of the graph structure
       and words, whereas LDA might learn a latent space that is not useful for predicting the graph.

27.6   LVMs for relational data
       Graphs can be used to represent data which represents the relation amongst variables of a
       certain type, e.g., friendship relationships between people. But often we have multiple types of
       objects, and multiple types of relations. For example, Figure 27.24 illustrates two relations, one
       between people and people, and one between people and movies.
         In general, we deﬁne a k-ary relation R as a subset of k-tuples of the appropriate types:

          R ⊆ T1 × T2 × · · · × Tk                                                                    (27.81)
         976                                            Chapter 27. Latent variable models for discrete data




         Figure 27.24 Example of relational data. There are two types of objects, people and movies; one 2-ary
         relation, friends: people × people → {0, 1} and one 2-ary function, rates: people × movie → R. Age and
         sex are attributes (unary functions) of the people class.


         where Ti are sets or types. A binary, pairwise or dyadic relation is a relation deﬁned on pairs
         of objects. For example, the seen relation between people and movies might be represented as
         the set of movies that people have seen. We can either represent this explicitly as a set, such as
         seen    = { (Bob, StarWars), (Bob, TombRaider), (Alice, Jaws)}
         or implicitly, using an indicator function for the set:
         seen(Bob, StarWars)=1, seen(Bob, TombRaider)=1, seen(Alice, Jaws)=1
            A relation between two entities of types T 1 and T 2 can be represented as a binary function
         R : T 1 × T 2 → {0, 1}, and hence as a binary matrix. This can also be represented as a bipartite
         graph, in which we have nodes of two types. If T 1 = T 2 , this becomes a regular directed graph,
         as in Section 27.5. However, there are some situations that are not so easily modelled by graphs,
         but which can still be modelled by relations. For example, we might have a ternary relation,
         R : T 1 × T 1 × T 2 → {0, 1}, where, say, R(i, j, k) = 1 iff protein i interacts with protein j
         when chemical k is present. This can be modelled by a 3d binary matrix. We will give some
         examples of this in Section 27.6.1.
            Making probabilistic models of relational data is called statistical relational learning (Getoor
         and Taskar 2007). One approach is to directly model the relationship between the variables using
         graphical models; this is known as probabilistic relational modeling. Another approach is to
         use latent variable models, as we discuss below.

27.6.1   Inﬁnite relational model
         It is straightforward to extend the stochastic block model to model relational data: we just
         associate a latent variable qit ∈ {1, . . . , Kt } with each entity i of each type t. We then deﬁne
         the probability of the relation holding between speciﬁc entities by looking up the probability of
         the relation holding between entities of that type. For example, if R : T 1 × T 1 × T 2 → {0, 1},
         we have
            p(R(i, j, k) = 1|qi1 = a, qj1 = b, qk2 = c, η) = ηa,b,c                                     (27.82)
         If we allow the number of clusters Kt for each type to be unbounded, by using a Dirichlet pro-
         cess, the model is called the inﬁnite relational model (IRM) (Kemp et al. 2006). An essentially
           27.6. LVMs for relational data                                                                                                            977

                                                                       interact with
                                                                                                    

                                                                                  affects,
                                   affects,                  affects              causes,            causes,         affects,
                                   causes                                         complicates        complicates     complicates
                                                causes
                                                                                                                     disrupts
              affects,                                                                                                                 affects,
              complicates,                                      affects, process of,                                                   process of,
                                                              result of, manifestation of                                              result of
              process of,
              manifestation of                                         result of                              

                                                 result of                                  result of
                                                                         

                                   affects,                                                                         manifestation of
                                   process of                                                   manifestation of,
                                                                                                associated with

                                                      affects,                   manifestation of,
                                                      process of                 associated with
                                                                                                                  



           Figure 27.25 Illustration of an ontology learned by IRM applied to the Uniﬁed Medical Language System.
           The boxes represent 7 of the 14 concept clusters. Predicates that belong to the same cluster are grouped
           together, and associated with edges to which they pertain. All links with weight above 0.8 have been
           included. From Figure 9 of (Kemp et al. 2010). Used with kind permission of Charles Kemp.



           identical model, under the name inﬁnite hidden relational model (IHRM), was concurrently
           proposed in (Xu et al. 2006). We can ﬁt this model with variational Bayes (Xu et al. 2006, 2007)
           or collapsed Gibbs sampling (Kemp et al. 2006). Rather than go into algorithmic detail, we just
           sketch some interesting applications.

27.6.1.1   Learning ontologies
           An ontology refers to an organisation of knowledge. In AI, ontologies are often built by hand
           (see e.g., (Russell and Norvig 2010)), but it is interesting to try and learn them from data. In
           (Kemp et al. 2006), they show how this can be done using the IRM.
              The data comes from the Uniﬁed Medical Language System (McCray 2003), which deﬁnes
           a semantic network with 135 concepts (such as “disease or syndrome”, “diagnostic procedure”,
           “animal”), and 49 binary predicates (such as “affects”, “prevents”). We can represent this as a
           ternary relation R : T 1 × T 1 × T 2 → {0, 1}, where T 1 is the set of concepts and T 2 is the
           set of binary predicates. The result is a 3d cube. We can then apply the IRM to partition the
           cube into regions of roughly homogoneous response. The system found 14 concept clusters and
           21 predicate clusters. Some of these are shown in Figure 27.25. The system learns, for example,
           that biological functions affect organisms (since ηa,b,c ≈ 1 where a represents the biological
           function cluster, b represents the organism cluster, and c represents the affects cluster).

27.6.1.2   Clustering based on relations and features
           We can also use IRM to cluster objects based on their relations and their features. For example,
           (Kemp et al. 2006) consider a political dataset (from 1965) consisting of 14 countries, 54 binary
978                                                          Chapter 27. Latent variable models for discrete data




                   intervening military
                   constitutional govt




                   domestic violence




                   energy consumed
                   military personnel




                   some censorship
                   no free elections




                   govt education $




                   foreign mail sent
   a)




                   seaborne goods




                   foreign students
                   high censorship
                   communist bloc




                   num languages
                   female workers
                   religious books




                   assassinations
                   noncommunist




                   govt revolution




                   calories in diet
                   UN delinquent




                   railroad length

                   age of country




                   protein in diet
                   free elections




                   popn. density
                   num religions
                   exports/GNP




                   US aid taken
                   western bloc




                   unemployed
                   communists




                   investments
                   neutral bloc
                   far from US




                   road length
                   aid $ taken



                   arts NGOs
                   totalitarian




                   population




                   law NGOs
                   govt crisis




                   telephone

                   defense $




                   monarchy

                   emigrants
                   land area
                   Catholics
                   illiteracy




                   protests
                   purges




                   threats
                   rainfall




                   arable
                   elitist




                   GNP
         Brazil
   Netherlands
            UK
          USA
        Burma
     Indonesia
        Jordan
         Egypt
          India
         Israel
         China
          Cuba
        Poland
         USSR

   b)                                                              c)                                      d)   joint              joint
        military       sends        exports                                                                  membership        membership
        alliance     tourists to    books to    exports to              treaties        conferences           of IGOs           of NGOs




   e)                                                        f)                    g)                 h)                  i)
        negative      negative                                        book              economic                               common bloc
        behavior   communications accusations   protests          translations             aid             emigration          membership




Figure 27.26 Illustration of IRM applied to some political data containing features and pairwise interac-
tions. Top row (a). the partition of the countries into 5 clusters and the features into 5 clusters. Every
second column is labelled with the name of the corresponding feature. Small squares at bottom (a-i): these
are 8 of the 18 clusters of interaction types. From Figure 6 of (Kemp et al. 2006). Used with kind permission
of Charles Kemp.



predicates representing interaction types between countries (e.g., “sends tourists to”, “economic
aid”), and 90 features (e.g., “communist”, “monarchy”). To create a binary dataset, real-valued
features were thresholded at their mean, and categorical variables were dummy-encoded. The
data has 3 types: T 1 represents countries, T 2 represents interactions, and T 3 represents features.
We have two relations: R1 : T 1 ×T 1 ×T 2 → {0, 1}, and R2 : T 1 ×T 3 → {0, 1}. (This problem
therefore combines aspects of both the biclustering model and the ontology discovery model.)
When given multiple relations, the IRM treats them as conditionally independent. In this case,
we have

   p(R1 , R2 , q1 , q2 , q3 |θ) = p(R1 |q1 , q2 , θ)p(R2 |q1 , q3 , θ)                                                                 (27.83)
   The results are shown in Figure 27.26. The IRM divides the 90 features into 5 clusters, the
ﬁrst of which contains “noncommunist”, which captures one of the most important aspects of
this Cold-War era dataset. It also clusters the 14 countries into 5 clusters, reﬂecting natural
geo-political groupings (e.g., US and UK, or the Communist Bloc), and the 54 predicates into 18
clusters, reﬂecting similar relationships (e.g., “negative behavior and “accusations”).
         27.6. LVMs for relational data                                                                                     979


27.6.2   Probabilistic matrix factorization for collaborative ﬁltering
         As discussed in Section 1.3.4.2, collaborative ﬁltering (CF) requires predicting entries in a matrix
         R : T 1 × T 2 → R, where for example R(i, j) is the rating that user i gave to movie j. Thus
         we see that CF is a kind of relational learning problem (and one with particular commercial
         importance).
            Much of the work in this area makes use of the data that Netﬂix made available in their
         competition. In particular, a large 17,770 × 480,189 movie x user ratings matrix is provided. The
         full matrix would have ∼ 8.6 × 109 entries, but only 100,480,507 (about 1%) of the entries are
         observed, so the matrix is extremely sparse. In addition the data is quite imbalanced, with many
         users rating fewer than 5 movies, and a few users rating over 10,000 movies. The validation
         set is 1,408,395 (movie,user) pairs. Finally, there is a separate test set with 2,817,131 (movie,user)
         pairs, for which the ranking is known but withheld from contestants. The performance measure
         is root mean square error:
                         9
                         :
                         :1    N
             RM SE = ;            (X(mi , ui ) − X̂(mi , ui ))2                                         (27.84)
                            N i=1

         where X(mi , ui ) is the true rating of user ui on movie mi , and X̂(mi , ui ) is the prediction.
         The baseline system, known as Cinematch, had an RMSE on the training set of 0.9514, and on
         the test set of 0.9525. To qualify for the grand prize, teams needed to reduce the test RMSE by
         10%, i.e., get a test RMSE of 0.8563 or less. We will discuss some of the basic methods used byt
         the winning team below.
            Since the ratings are drawn from the set {0, 1, 2, 3, 4, 5}, it is tempting to use a categorical
         observation model. However, this does not capture the fact that the ratings are ordered. Although
         we could use an ordinal observation model, in practice people use a Gaussian observation model
         for simplicity. One way to make the model better match the data is to pass the model’s predicted
         mean response through a sigmoid, and then to map the [0, 1] interval to [0, 5] (Salakhutdinov
         and Mnih 2008). Alternatively we can " make the data a better match to the Gaussian model by
         transforming the data using Rij = 6 − Rij (Aggarwal and Merugu 2007).
            We could use the IRM for the CF task, by associating a discrete latent variable for each user
         qiu and for each movie or video qjv , and then deﬁning
             p(Rij = r|qiu = a, qjv = b, θ) = N (r|μa,b , σ 2 )                                                          (27.85)
         This is just another example of co-clustering. We can also extend the model to generate side
         information, such as attributes about each user and/or movie. See Figure 27.27 for an illustration.
             Another possibility is to replace the discrete latent variables with continuous latent variables
         π ui ∈ SKu and π vj ∈ SKv . However, it has been found (see e.g., (Shan and Banerjee 2010)) that
         one obtains much better results by using unconstrained real-valued latent factors for each user
         ui ∈ RK and each movie vj ∈ RK .7 We then use a likelihood of the form
             p(Rij = r|ui , vj ) = N (r|uTi vj , σ 2 )                                                                   (27.86)

         7. Good results with discrete latent variables have been obtained on some datasets that are smaller than Netﬂix, such as
         MovieLens and EachMovie. However, these datasets are much easier to predict, because there is less imbalance between
         the number of reviews performed by different users (in Netﬂix, some users have rated more than 10,000 movies, whereas
         others have rated less than 5).
980                                                   Chapter 27. Latent variable models for discrete data




Figure 27.27 Visualization of a small relational dataset, where we have one relation, likes(user, movie),
and features for movies (here, genre) and users (here, occupation). From Figure 5 of (Xu et al. 2008). Used
with kind permission of Zhao Xu.




                                                                         1.5




                                                                                                                                                                                                                                   s
                                                                                                                                                                                                                                  y




                                                                                                                                                                                                                                um
                                                                                                                                                                                                                               Bo



                                                                                                                                                                                                                               e

                                                                                                                                                                                                                             ba
                                                                                                                                                                                                                            ov
                               μv




                                                                                                                                                                                                                            y−

                                                                                                                                                                                                                      nk s
                                          Σv




                                                                                                                                                                                                                   ru e



                                                                                                                                                                                                                         en




                                                                                                                                                                                                                           n
                                                                                                                                                                                                                          L
                                                                                                                                                                                                                         ke




                                                                                                                                                                                                          ur ns h
                                                                                                                                                                                                                D be




                                                                                                                                                                                                                        io
                                                                                                                                                                                                            Tr vic
                                                                                                                                                                                                                       n
                                                                                                                                                                                                                     on




                                                                                                                                                                                                                      at
                                                                                                                                                                                                            h− ka



                                                                                                                                                                                                                   Te



                                                                                                                                                                                                 de t in lko

                                                                                                                                                                                                                    l
                                                                                                                                                                                                                   D

                                                                                                                                                                                                          nc uc



                                                                                                                                                                                                               a l
                                                                                                                                                                                                  I Hs en
                                                                         1.0




                                                                                                                                                                                            lle os Ma

                                                                                                                                                                                                              a
                                                                                                                                                                                                     Pu rt H



                                                                                                                                                                                                            oy
                                                                                                                                                                                                   r 1 li
                                                                                                                                                                                                lle l. u




                                                                                                                                                                                                          R



                                                                                                                                                                                         Be L hn
                                                                                                                                                                                                      ea
                                                                                                                                                                                             Ki o J




                                                                                                                                                                                                       o




                                                                                                                                                                                                        l
                                                                                                                                                                                                      e




                                                                                                                                                                                                     al
                                                                                                                                                                                                   Jo


                                                                                                                                                                                                     J
                                                                                                                                                                                                  Th




                                                                                                                                                                                                   H
                                                                                                                                                                                          n :V




                                                                                                                                                                                               ng




                                                                                                                                                                                                e
                                                                                                                                                                                        or Bill




                                                                                                                                                                                             ni
                                                                                                                                                                                            ei




                                                                                                                                                                                           ne
                                                                                                                                                                                         An
                                                                                                                                                                                          B
                                                                                                                                                                                        ed




                                                                                                                                                                                       Ka
                                                                                                                                                                                    l B ll
                                                                                                                                                                                 ra Ki
                                                                                                                                                                                      er




                                                                                                                                                                                     n
                                                                                                                                                                                   ed
                                                                                                                                                                                  ng
                                                                         0.5




                                                                                                                                                                                  ze
                                                                                                                                                                               ak
                                                                                                                                                                              Fi




                                                                                                                                                                              iti
                                                                                                                                                                             tu


                                                                                                                                                                           ce
                                                                                                                                                                         fB




                                                                                                                                                                           C
                                                                                                                                                                           a
                                                                                                                                                                         ot




                                                                                                                                                                          e
                                                                                                                                                                        fa
                                                                                                                                                                        N




                                                                                                                                                                       ic
                                    vj




                                                                                                                                                                      G


                                                                                                                                                                      al




                                                                                                                                                                     ar




                                                                                                                                                                    ho
                                                                                                                                                                    H
                                                       Factor Vector 2




                                                                                                                                                                   dy




                                                                                                                                                                  Sc
                                                                                                                                                          Tr on




                                                                                                                                                                  C
                                                                                                                                                                ed




                                                                                                                                                               ’s
                                                                                                                                                        d s
                                                                                                                                                             ip
                                                                                                                                                            Fr




                                                                                                                                                             a
                       σ2




                                                                                                                                                            ie
                                                                                                                                                             z
                                                                                                                                                    oa J




                                                                                                                                                          O




                                                                                                                                                         ph
                                                                                                                                                  R s.




                                                                                                                                                       ck
                                                                                                                                                       of




                                                                                                                                                     So
                                                                         0.0




                                                                                                                                                       v




                                                                                                                                                    ru
                                                                                                                                                     d
                                                                                                                                                   dy




                                                                                                                                                  ar




                                                                                                                                                 st
                                                                                                 ed




                                                                                                                                  so us re
                                                                                                                                               iz




                                                                                                                        to u ay W oon
                                                                                                                                             W




                                                                                                                               ea f M We
                                                                                               Fr




                                                                                                                                           M
                                                                                                                                           e




                                                                                                                                     n ic
                                                                                                                                        Th




                                                                                                                                         e


                                                                                                                                       1
                                                                                                                              Fu ard
                                                                                                                                    us
       μu




                                                                                                                             :S o
                                                                                                                                 W
                                                                                                                                rio
                                                                         −0.5




                                                                                                                          th t Y




                                                                                                                          ns nd
                                                                                                              e Th he
                                                                                                                       d es




                                                                                                                      al So
                                                                                                                             T
                                                                                                                    an g
                                                                                                                            e
                                                                                                                           n




                                                                                                                w on
                                                                                                                st Lo




                                                                                                                  W e
                                                                                                                       an
                                                                                                           C edd
                                                                                                                  om
                                                                                                            Fa e
                                         Rij




                                                                                                                    e



                                                                                                                    t
                                                                                                         e Th




                                                                                                            er m
                                                                                                               Ac
                                                                                                                 id
                    ui




                                                                                                              ag




                                                                                                                y




                                                                                                         st o
                                                                                                             Br
                                                                                                             gl




                                                                                                      Si pm
                                                                                                             at




                                                                                                         ay n




                                                                                                           Th
                                                                                                           m




                                                                                                           U




                                                                                                    aw tta
                                                                                                        Ar




                                                                                                         e
                                                                         −1.0




                                                                                                         e




                                                                                                  un ha



                                                                                                      St
                                                                                                     Th




                                                                                                      ot




                                                                                                 R an
                                                                                                   oy




                                                                                                 M
                                                                                                 C
                                               T1




                                                                                              in
       Σu




                                                                                            d
                                                                                         ai
                                                                                       M
                                                                         −1.5

                                          T2
                                                                                −1.5                  −1.0                        −0.5                          0.0                         0.5                         1.0
                                                                                                                                               Factor Vector 1


                         (a)                                                                                                                       (b)

Figure 27.28 (a) A DGM for probabilistic matrix factorization. (b) Visualization of the ﬁrst two factors in
the PMF model estimated from the Netﬂix challenge data. Each movie j is plotted at the location speciﬁed
v̂j . On the left we have low-brow humor and horror movies (Half Baked, Freddy vs Jason), and on the
right we have more serious dramas (Sophie’s Choice, Moonstruck). On the top we have critically acclaimed
independent movies (Punch-Drunk Love, I Heart Huckabees), and on the bottom we have mainstream
Hollywood blockbusters (Armageddon, Runway Bride). The Wizard of Oz is right in the middle of these axes.
From Figure 3 of (Koren et al. 2009). Used with kind permission of Yehuda Koren.



This has been called probabilistic matrix factorization (PMF) (Salakhutdinov and Mnih 2008).
See Figure 27.28(a) for the DGM. The intuition behind this method is that each user and each
movie get embedded into the same low-dimensional continuous space (see Figure 27.28(b)). If a
user is close to a movie in that space, they are likely to rate it highly. All of the best entries in
the Netﬂix competition used this approach in one form or another.8
  PMF is closely related to the SVD. In particular, if there is no missing data, then computing
the MLE for the ui ’s and the vj ’s is equivalent to ﬁnding a rank K approximation to R.
However, as soon as we have missing data, the problem becomes non-convex, as shown in

8. The winning entry was actually an ensemble of different methods, including PMF, nearest neighbor methods, etc.
27.6. LVMs for relational data                                                                                                                                                              981

           0.97
                                                                                               0.91
                                                                                                        40
                                                                                                             60    Plain
           0.96                                                                               0.905               90
                                                            Netflix                                     50
                                                                                                                        128
                                                                                                                          180
                                                            Baseline Score                                        100
                                                                                                                           200
           0.95                                                                                 0.9
                                                                                                                        w/Biases
                                                                                                         50
           0.94                                                                               0.895




    RMSE




                                                                                       RMSE
                                                                                                                   100
                                     SVD                                                       0.89
                                                                                                                           200
           0.93                                                                                                         w/Implicit feedback

                                                                                              0.885
           0.92                                                                                                                             50

                                          PMF                                                                                                     100   200
                                                                                                                                                                 500 1000
                                                                                               0.88                                                                      1500
           0.91
                                                                                                                                                 w/Temporal dynamics
                   Constrained
                   PMF                                                                        0.875
                                                                                                   10                    100              1000                10000             100000
            0.9
               0      5   10   15   20   25      30    35   40   45   50   55   60                                               Millions of Parameters
                                              Epochs

                                           (a)                                                                                            (b)

Figure 27.29 (a) RMSE on the validation set for different PMF variants vs number of passes through
the data. “SVD” is the unregularized version, λU = λV = 0. “PMF1” corresponds to λU = 0.01 and
λV = 0.001, while “PMF2” corresponds to λU = 0.001 and λV = 0.0001. “PMFA1” corresponds to a
version where the mean and diagonal covariance of the Gaussian prior were learned from data. From
Figure 2 of (Salakhutdinov and Mnih 2008). Used with kind permission of Ruslan Salakhutdinov. (b) RMSE
on the test set (quiz portion) vs number of parameters for several different models. “Plain” is the baseline
PMF with suitably chosen λU , λV . “With biases” adds fi and gj offset terms. “With implicit feedback”
“With temporal dynamics” allows the offset terms to change over time. The Netﬂix baseline system achieves
an RMSE of 0.9514, and the grand prize’s required accuracy is 0.8563 (which was obtained on 21 September
2009). Figure generated by netflixResultsPlot. From Figure 4 of (Koren et al. 2009). Used with kind
permission of Yehuda Koren.



(Srebro and Jaakkola 2003), and standard SVD methods cannot be applied. (Recall that in the
Netﬂix challenge, only about 1% of the matrix is observed.)
   The most straightforward way to ﬁt the PMF model is to minimize the overall NLL:
                                             ⎛                                             ⎞
                                                N M
                                                                                I(Oij =1)
    J(U, V) = − log p(R|U, V, O) = − log ⎝              N (Rij |uTi vj , σ 2 )             ⎠ (27.87)
                                                                                     i=1 j=1

where Oij = 1 if user i has seen movie j. Since this is non-convex, we can just ﬁnd a locally
optimal MLE. Since the Netﬂix data is so large (about 100 million observed entries), it is common
to use stochastic gradient descent (Section 8.5.2) for this task. The gradient for ui is given by
   dJ     d 1                                   
       =          I(Oij = 1)(Rij − uTi vj )2 = −   eij vj                                                                                                                                (27.88)
   dui   dui 2 ij
                                                                                                 j:Oij =1

where eij = Rij − uTi vj is the error term. By stochastically sampling a single movie j that user
i has watched, the update takes the following simple form:

   ui             =       ui + ηeij vj                                                                                                                                                   (27.89)

where η is the learning rate. The update for vj is similar.
982                                                     Chapter 27. Latent variable models for discrete data


 Of course, just maximizing the likelihood results in overﬁtting, as shown in Figure 27.29(a).
We can regularize this by imposing Gaussian priors:
                                  
  p(U, V) =       N (ui |μu , Σu )   N (vj |μv , Σv )                                 (27.90)
                 i                        j

                             2
If we use μu = μv = 0, Σu = σU IK , and Σv = σV2 IK , the new objective becomes
   J(U, V)     = − log p(R, U, V|O, θ)                                                                 (27.91)
                 
               =         I(Oij = 1)(Rij − uTi vj )2
                     i     j
                                                   
                     +λU           ||ui ||22 + λV       ||vj ||22 + const                              (27.92)
                               i                    j

where we have deﬁned λU = σ 2 /σU      2
                                         and λV = σ 2 /σV2 . By varying the regularizers, we can
reduce the effect of overﬁtting, as shown in Figure 27.29(a). We can ﬁnd MAP estimates using
stochastic gradient descent. We can also compute approximate posteriors using variational Bayes
(Ilin and Raiko 2010).
    If we use diagonal covariances for the priors, we can penalize each latent dimension by a
different amount. Also, if we use non-zero means for the priors, we can account for offset terms.
Optimizing the prior parameters (μu , Σu , μv , Σv ) at the same time as the model parameters
(U, V, σ 2 ) is a way to create an adaptive prior. This avoids the need to search for the optimal
values of λU and λV , and gives even better results, as shown in Figure 27.29(a).
    It turns out that much of the variation in the data can be explained by movie-speciﬁc or
user-speciﬁc effects. For example, some movies are popular for all types of users. And some
users give low scores for all types of movies. We can model this by allowing for user and movie
speciﬁc offset or bias terms as follows:
   p(Rij = r|ui , vj , θ) = N (r|uTi vj + μ + fi + gj , σ 2 )                                          (27.93)
where μ is the overall mean, fi is the user bias, gj is the movie bias, and                   uTi vj
                                                                                            is the
interaction term. This is equivalent to applying PMF just to the residual matrix, and gives much
better results, as shown in Figure 27.29(b). We can estimate the fi , gj and μ terms using
stochastic gradient descent, just as we estimated U, V and θ.
   We can also allow the bias terms to evolve over time, to reﬂect the changing preferences of
users (Koren 2009b). This is important since in the Netﬂix competition, the test data was more
recent than the training data. Figure 27.29(b) shows that allowing for temporal dynamics can
help a lot.
   Often we also have side information of various kinds. In the Netﬂix competition, entrants
knew which movies the user had rated in the test set, even though they did not know the
values of these ratings. That is, they knew the value of the (dense) O matrix even on the
test set. If a user chooses to rate a movie, it is likely because they have seen it, which in
turns means they thought they would like it. Thus the very act of rating reveals information.
Conversely, if a user chooses not rate a movie, it suggests they knew they would not like it.
So the data is not missing at random (see e.g., (Marlin and Zemel 2009)). Exploiting this can
improve performance, as shown in Figure 27.29(b). In real problems, information on the test set
is not available. However, we often know which movies the user has watched or declined to
       27.7. Restricted Boltzmann machines (RBMs)                                                     983


       watch, even if they did not rate them (this is called implicit feedback), and this can be used as
       useful side information.
          Another source of side information concerns the content of the movie, such as the movie
       genre, the list of the actors, or a synopsis of the plot. This can be denoted by xv , the features
       of the video. (In the case where we just have the id of the video, we can treat xv as a |V|-
       dimensional bit vector with just one bit turned on.) We may also know features about the user,
       which we can denote by xu . In some cases, we only know if the user clicked on the video or
       not, that is, we may not have a numerical rating. We can then modify the model as follows:
          p(R(u, v)|xu , xv , θ) = Ber(R(u, v)|(Uxu )T (Vxv ))                                     (27.94)
       where U is a |U| × K matrix, and V is a |V| × K matrix (we can incorporate an offset term
       by appending a 1 to xu and xv in the usual way). A method for computing the approximate
       posterior p(U, V|D) in an online fashion, using ADF and EP, was described in (Stern et al.
       2009). This was implemented by Microsoft and has been deployed to predict click through rates
       on all the ads used by Bing.
          Unfortunately, ﬁtting this model just from positive binary data can result in an over prediction
       of links, since no negative examples are included. Better performance is obtained if one has
       access to the set of all videos shown to the user, of which at most one was picked; data of this
       form is known as an impression log. In this case, we can use a multinomial model instead of
       a binary model; in (Yang et al. 2011), this was shown to work much better than a binary model.
       To understand why, suppose some is presented with a choice of an action movie starring Arnold
       Schwarzenegger, an action movie starring Vin Diesel, and a comedy starring Hugh Grant. If
       the user picks Arnold Schwarzenegger, we learn not only that they like prefer action movies to
       comedies, but also that they prefer Schwarzenegger to Diesel. This is more informative than just
       knowing that they like Schwarzenegger and action movies.

27.7   Restricted Boltzmann machines (RBMs)
       So far, all the models we have proposed in this chapter have been representable by directed
       graphical models. But some models are better represented using undirected graphs. For example,
       the Boltzmann machine (Ackley et al. 1985) is a pairwise MRF with hidden nodes h and visible
       nodes v, as shown in Figure 27.30(a). The main problem with the Boltzmann machine is that
       exact inference is intractable, and even approximate inference, using e.g., Gibbs sampling, can
       be slow. However, suppose we restrict the architecture so that the nodes are arranged in layers,
       and so that there are no connections between nodes within the same layer (see Figure 27.30(b)).
       Then the model has the form

                         1 
                              R K
          p(h, v|θ) =             ψrk (vr , hk )                                                   (27.95)
                        Z(θ) r=1
                                  k=1

       where R is the number of visible (response) variables, K is the number of hidden variables, and
       v plays the role of y earlier in this chapter. This model is known as a restricted Boltzmann
       machine (RBM) (Hinton 2002), or a harmonium (Smolensky 1986).
         An RBM is a special case of a product of experts (PoE) (Hinton 1999), which is so-called
       because we are multiplying together a set of “experts” (here, potential functions on each edge)
984                                                        Chapter 27. Latent variable models for discrete data




                                                                                                 H




                                                                                                  V


                                 (a)                                              (b)

Figure 27.30 (a) A general Boltzmann machine, with an arbitrary graph structure. The shaded (visible)
nodes are partitioned into input and output, although the model is actually symmetric and deﬁnes a joint
density on all the nodes. (b) A restricted Boltzmann machine with a bipartite structure. Note the lack of
intra-layer connections.


and then normalizing, whereas in a mixture of experts, we take a convex combination of
normalized distributions. The intuitive reason why PoE models might work better than a mixture
is that each expert can enforce a constraint (if the expert has a value which is  1 or  1)
or a “don’t care” condition (if the expert has value 1). By multiplying these experts together
in different ways we can create “sharp” distributions which predict data which satisﬁes the
speciﬁed constraints (Hinton and Teh 2001). For example, consider a distributed model of text.
A given document might have the topics “government”, “maﬁa” and “playboy”. If we “multiply”
the predictions of each topic together, the model may give very high probability to the word
“Berlusconi”9 (Salakhutdinov and Hinton 2010). By contrast, adding together experts can only
make the distribution broader (see Figure 14.17).
   Typically the hidden nodes in an RBM are binary, so h speciﬁes which constraints are active.
It is worth comparing this with the directed models we have discussed. In a mixture model, we
have one hidden variable q ∈ {1, . . . , K}. We can represent this using a set of K bits, with the
restriction that exactly one bit is on at a time. This is called a localist encoding, since only
one hidden unit is used to generate the response vector. This is analogous to the hypothetical
notion of grandmother cells in the brain, that are able to recognize only one kind of object.
By contrast, an RBM uses a distributed encoding, where many units are involved in generating
each output. Models that used vector-valued hidden variables, such as π ∈ SK , as in mPCA/
LDA, or z ∈ RK , as in ePCA also use distributed encodings.
   The main difference between an RBM and directed two-layer models is that the hidden
variables are conditionally independent given the visible variables, so the posterior factorizes:
                 
    p(h|v, θ) =      p(hk |v, θ)                                                            (27.96)
                      k

This makes inference much simpler than in a directed model, since we can estimate each hk

9. Silvio Berlusconi is the current (2011) prime minister of Italy.
           27.7. Restricted Boltzmann machines (RBMs)                                                                                985

               Visible                    Hidden       Name                                        Reference
               Binary                     Binary       Binary RBM                                  (Hinton 2002)
               Gaussian                   Binary       Gaussian RBM                                (Welling and Sutton 2005)
               Categorical                Binary       Categorical RBM                             (Salakhutdinov et al. 2007)
               Multiple categorical       Binary       Replicated softmax/ undirected LDA          (Salakhutdinov and Hinton 2010)
               Gaussian                   Gaussian     Undirected PCA                              (Marks and Movellan 2001)
               Binary                     Gaussian     Undirected binary PCA                       (Welling and Sutton 2005)

                                            Table 27.2 Summary of different kinds of RBM.



           independently and in parallel, as in a feedforward neural network. The disadvantage is that
           training undirected models is much harder, as we discuss below.

 27.7.1    Varieties of RBMs
           In this section, we describe various forms of RBMs, by deﬁning different pairwise potential
           functions. See Table 27.2 for a summary. All of these are special cases of the exponential
           family harmonium (Welling et al. 2004).

27.7.1.1   Binary RBMs
           The most common form of RBM has binary hidden nodes and binary visible nodes. The joint
           distribution then has the following form:
                                       1
               p(v, h|θ)     =             exp(−E(v, h; θ))                                                                     (27.97)
                                      Z(θ)
                                          R 
                                           K                      
                                                                   R                
                                                                                    K
              E(v, h; θ)             −              vr hk Wrk −         v r br −         hk c k                                (27.98)
                                          r=1 k=1                  r=1              k=1
                             =        −(v Wh + vT b + h c)
                                            T                      T
                                                                                                                                (27.99)
                                      
                   Z(θ)      =             exp(−E(v, h; θ))                                                                    (27.100)
                                      v     h

           where E is the energy function, W is a R × K weight matrix, b are the visible bias terms, c are
           the hidden bias terms, and θ = (W, b, c) are all the parameters. For notational simplicity, we
           will absorb the bias terms into the weight matrix by clamping dummy units v0 = 1 and h0 = 1
           and setting w0,: = c and w:,0 = b. Note that naively computing Z(θ) takes O(2R 2K ) time
           but we can reduce this to O(min{R2K , K2R }) time (Exercise 27.1).
             When using a binary RBM, the posterior can be computed as follows:

                                  
                                  K                         
              p(h|v, θ)     =             p(hk |v, θ) =          Ber(hk |sigm(w:,k
                                                                               T
                                                                                   v))                                         (27.101)
                                  k=1                        k

           By symmetry, one can show that we can generate data given the hidden variables as follows:
                                          
              p(v|h, θ) =    p(vr |h, θ) =   Ber(vr |sigm(wr,:
                                                            T
                                                               h))                               (27.102)
                              r                         r
           986                                                         Chapter 27. Latent variable models for discrete data


           We can write this in matrix-vetor notation as follows:

                 E [h|vθ]   =     sigm(WT v)                                                                       (27.103)
              E [v|h, θ]    =     sigm(Wh)                                                                         (27.104)

           The weights in W are called the generative weights, since they are used to generate the
           observations, and the weights in WT are called the recognition weights, since they are used
           to recognize the input.
              From Equation 27.101, we see that we activate hidden node k in proportion to how much the
           input vector v “looks like” the weight vector w:,k (up to scaling factors). Thus each hidden node
           captures certain features of the input, as encoded in its weight vector, similar to a feedforward
           neural network.

27.7.1.2   Categorical RBM
           We can extend the binary RBM to categorical visible variables by using a 1-of-C encoding,
           where C is the number of states for each vir . We deﬁne a new energy function as follows
           (Salakhutdinov et al. 2007; Salakhutdinov and Hinton 2010):
                                       R 
                                        K 
                                           C                              R 
                                                                           C                   
                                                                                                K
              E(v, h; θ)          −                         c
                                                     vrc hk Wrk −                   vrc bcr −         hk c k       (27.105)
                                       r=1 k=1 c=1                        r=1 c=1               k=1

           The full conditionals are given by
                                                           
                    p(vr |h, θ)    =    Cat(S({bcr +                   c C
                                                                   hk Wrk }c=1 ))                                  (27.106)
                                                           k
                                                      
              p(hk = 1|c, θ)       =    sigm(ck +                        c
                                                                    vrc Wrk )                                      (27.107)
                                                       r       c


27.7.1.3   Gaussian RBM
           We can generalize the model to handle real-valued data. In particular, a Gaussian RBM has the
           following energy function:
                                  R 
                                   K
                                                           1
                                                                   R                    K
              E(v, h|θ) = −                 Wrk hk vr −          (vr − br )2 −   a k hk                            (27.108)
                                  r=1 k=1
                                                           2 r=1
                                                                                        k=1

           The parameters of the model are θ = (wrk , ak , br ). (We have assumed the data is standardized,
           so we ﬁx the variance to σ 2 = 1.) Compare this to a Gaussian in information form:
                                       1
              Nc (v|η, Λ) ∝ exp(η T v − vT Λv)                                                                     (27.109)
                                       2
                                                                       
           where η = Λμ. We seethat we have set Λ = I, and η = k hk w:,k . Thus the mean is
           given by μ = Λ−1 η = k hk w:,k . The full conditionals, which are needed for inference and
           27.7. Restricted Boltzmann machines (RBMs)                                                      987


           learning, are given by
                                                   
                   p(vr |h, θ)   =   N (vr |br +           wrk hk , 1)                                  (27.110)
                                                   k
                                                   
              p(hk = 1|v, θ)     =   sigm ck +              wrk vr                                      (27.111)
                                                       r

           We see that each visible unit has a Gaussian distribution whose mean is a function of the
           hidden bit vector. More powerful models, which make the (co)variance depend on the hidden
           state, can also be developed (Ranzato and Hinton 2010).

27.7.1.4   RBMs with Gaussian hidden units
           If we use Gaussian latent variables and Gaussian visible variables, we get an undirected version
           of factor analysis. However, it turns out that it is identical to the standard directed version
           (Marks and Movellan 2001).
              If we use Gaussian latent variables and categorical observed variables, we get an undirected
           version of categorical PCA (Section 27.2.2). In (Salakhutdinov et al. 2007), this was applied to the
           Netﬂix collaborative ﬁltering problem, but was found to be signiﬁcantly inferior to using binary
           latent variables, which have more expressive power.

27.7.2     Learning RBMs
           In this section, we discuss some ways to compute ML parameter estimates of RBMs, using
           gradient-based optimizers. It is common to use stochastic gradient descent, since RBMs often
           have many parameters and therefore need to be trained on very large datasets. In addition, it is
           standard to use 2 regularization, a technique that is often called weight decay in this context.
           This requires a very small change to the objective and gradient, as discussed in Section 8.3.6.

27.7.2.1   Deriving the gradient using p(h, v|θ)
           To compute the gradient, we can modify the equations from Section 19.5.2, which show how to
           ﬁt a generic latent variable maxent model. In the context of the Boltzmann machine, we have
           one feature per edge, so the gradient is given by

                     1 
                        N
               ∂
                   =       E [vr hk |vi , θ] − E [vr hk |θ]                                             (27.112)
              ∂wrk   N i=1

           We can write this in matrix-vector form as follows:
                                                       
             ∇w  = Epemp (·|θ) vhT − Ep(·|θ) vhT                                                       (27.113)
                                                                               N
           where pemp (v, h|θ)  p(h|v, θ)pemp (v), and pemp (v) = N1 i=1 δvi (v) is the empirical
           distribution. (We can derive a similar expression for the bias terms by setting vr = 1 or
           hk = 1.)
              The ﬁrst term on the gradient, when v is ﬁxed to a data case, is sometimes called the
           clamped phase, and the second term, when v is free, is sometimes called the unclamped
           988                                                   Chapter 27. Latent variable models for discrete data


           phase. When the model expectations match the empirical expectations, the two terms cancel
           out, the gradient becomes zero and learning stops. This algorithm was ﬁrst proposed in (Ackley
           et al. 1985). The main problem is efficiently computing the expectations. We discuss some ways
           to do this below.

27.7.2.2   Deriving the gradient using p(v|θ)
           We now present an alternative way to derive Equation 27.112, which also applies to other energy
           based models. First we marginalize out the hidden variables and write the RBM in the form
                     1
           p(v|θ) = Z(θ) exp(−F (v; θ)), where F (v; θ) is the free energy:
                                                           R 
                                                              K
              F (v)             E(v, h) =            exp              vr hk Wrk                              (27.114)
                            h                    h           r=1 k=1

                           
                            K               
                                            R
                       =            exp              vr hk Wrk                                                (27.115)
                            h k=1           r=1

                           
                           K                        
                                                     R
                       =                   exp             vr hr Wrk                                          (27.116)
                           k=1 hr ∈{0,1}             r=1

                           
                           K                 
                                             R
                       =          1 + exp(           vr Wrk )                                                 (27.117)
                           k=1               r=1
           Next we write the (scaled) log-likelihood in the following form:
                       1                      1 
                           N                      N
              (θ) =          log p(vi |θ) = −       F (vi |θ) − log Z(θ)                                     (27.118)
                      N i=1                    N i=1
                                         
           Using the fact that Z(θ) = v exp(−F (v; θ)) we have
                                1 
                                   N
                                                 ∇Z
              ∇(θ)    =    −         ∇F (vi ) −                                                              (27.119)
                                N i=1             Z

                                1               
                                   N
                                                          exp(−F (v))
                       =    −         ∇F (vi ) +   ∇F (v)                                                    (27.120)
                                N i=1            v
                                                              Z

                                1 
                                   N
                       =    −         ∇F (vi ) + E [∇F (v)]                                                   (27.121)
                                N i=1
           Plugging in the free energy (Equation 27.117), one can show that
                ∂
                    F (v) = −vr E [hk |v, θ] = −E [vr hk |v, θ]                                              (27.122)
              ∂wrk
           Hence
                             1 
                                 N
                ∂
                    (θ) =         E [vr hk |v, θ] − E [vr hk |θ]                                            (27.123)
              ∂wrk           N i=1
           which matches Equation 27.112.
           27.7. Restricted Boltzmann machines (RBMs)                                                           989


                                                 +M

                                      ;L+M!         ;L+M!                           ;L+M!
                                                                                                     LQILQLW\



                                          ;L
                                                       7 VWHS   7 LQILQLW\HTXLOLEULXP
                                       7 GDWD    UHFRQVWUXFWLRQV           VDPSOHV



           Figure 27.31 Illustration of Gibbs sampling in an RBM. The visible nodes are initialized at a datavector,
           then we sample a hidden vector, then another visible vector, etc. Eventually (at “inﬁnity”) we will be
           producing samples from the joint distribution p(v, h|θ).



27.7.2.3   Approximating the expectations
           We can approximate the expectations needed to evaluate the gradient by performing block
           Gibbs sampling, using Equations 27.101 and 27.102. In more detail, we can sample from the
           joint distribution p(v, h|θ) as follows: initialize the chain at vv 1 (e.g. by setting v1 = vi for
           some data vector), and then sample from h1 ∼ p(h|v1 ), then from v2 ∼ p(v|h1 ), then from
           h2 ∼ p(h|v2 ), etc. See Figure 27.31 for an illustration. Note, however, that we have to wait until
           the Markov chain reaches equilibrium (i.e., until it has “burned in”) before we can interpret the
           samples as coming from the joint distribution of interest, and this might take a long time.
              A faster alternative is to use mean ﬁeld, where we make the approximation E [vr hk ] ≈
           E [vr ] E [hk ]. However, since p(v, h) is typically multimodal, this is usually a very poor approx-
           imation, since it will average over different modes (see Section 21.2.2). Furthermore, there is a
           more subtle reason not to use mean ﬁeld: since the gradient has the form E [vr hk |v]−E [vr hk ],
           we see that the negative sign in front means that the method will try to make the variational
           bound as loose as possible (Salakhutdinov and Hinton 2009). This explains why earlier attempts
           to use mean ﬁeld to learn Boltzmann machines (e.g., (Kappen and Rodriguez 1998)) did not work.

27.7.2.4   Contrastive divergence
           The problem with using Gibbs sampling to compute the gradient is that it is slow. We now
           present a faster method known as contrastive divergence or CD (Hinton 2002). CD was
           originally derived by approximating an objective function deﬁned as the difference of two KL
           divergences, rather than trying to maximize the likelihood itself. However, from an algorithmic
           point of view, it can be thought of as similar to stochastic gradient descent, except it approxi-
           mates the “unclamped” expectations with “brief” Gibbs sampling where we initialize each Markov
           chain at the data vectors. That is, we approximate the gradient for one datavector as follows:
                                               
              ∇w  ≈ E vhT |vi − Eq vhT                                                              (27.124)

           where q corresponds to the distribution generated by K up-down Gibbs sweeps, started at vi ,
           as in Figure 27.31. This is known as CD-K. In more detail, the procedure (for K = 1) is as
           990                                            Chapter 27. Latent variable models for discrete data


           follows:

                hi ∼ p(h|vi , θ)                                                                       (27.125)
                vi ∼ p(v|hi , θ)                                                                      (27.126)
                hi ∼ p(h|vi , θ)                                                                     (27.127)

           We then make the approximation
                     
             Eq vhT ≈ vi (hi )T                                                                       (27.128)

           Such samples are sometimes called fantasy data. We can think of vi as the model’s best
           attempt at reconstructing vi after being coded and then decoded by the model. This is similar
           to the way we train auto-encoders, which are models which try to “squeeze” the data through a
           restricted parametric “bottleneck” (see Section 28.3.2).
              In practice, it is common to use E [h|vi ] instead of a sampled value hi in the ﬁnal upwards
           pass, since this reduces the variance. However, it is not valid to use E [h|vi ] instead of sampling
           hi ∼ p(h|vi ) in the earlier upwards passes, because then each hidden unit would be able to
           pass more than 1 bit of information, so it would not act as much of a bottleneck.
              The whole procedure is summarized in Algorithm 3. (Note that we follow the positive gradient
           since we are maximizing likelihood.) Various tricks can be used to speed this algorithm up, such
           as using a momentum term (Section 8.3.2), using mini-batches, averaging the updates, etc. Such
           details can be found in (Hinton 2010; Swersky et al. 2010).

            Algorithm 27.3: CD-1 training for an RBM with binary hidden and visible units
            1   Initialize weights W ∈ RR×K randomly;
           2    t := 0;
           3    for each epoch do
           4         t := t + 1 ;
           5         for each minibatch of size B do
           6             Set minibatch gradient to zero, g := 0 ;
           7             for each case vi in the minibatch do
           8                 Compute μi = E [h|vi , W];
           9                 Sample hi ∼ p(h|vi , W);
           10                Sample vi ∼ p(v|hi , W);
           11                Compute μi = E [h|vi , W];
           12                Compute gradient ∇W = (vi )(μi )T − (vi )(μi )T ;
           13                Accumulate g := g + ∇W ;
           14          Update parameters W := W + (αt /B)g




27.7.2.5   Persistent CD
           In Section 19.5.5, we presented a technique called stochastic maximum likelihood (SML) for
           ﬁtting maxent models. This avoids the need to run MCMC to convergence at each iteration,
           27.7. Restricted Boltzmann machines (RBMs)                                                         991


           by exploiting the fact that the parameters are changing slowly, so the Markov chains will not
           be pushed too far from equilibrium after each update (Younes 1989). In other words, there are
           two dynamical processes running at different time scales: the states change quickly, and the
           parameters change slowly. This algorithm was independently rediscovered in (Tieleman 2008),
           who called it persistent CD. See Algorithm 3 for the pseudocode.
             PCD often works better than CD (see e.g., (Tieleman 2008; Marlin et al. 2010; Swersky et al.
           2010)), although CD can be faster in the early stages of learning.

            Algorithm 27.4: Persistent CD for training an RBM with binary hidden and visible units
            1   Initialize weights W ∈ RD×L randomly;
           2    Initialize chains (vs , hs )Ss=1 randomly ;
           3    for t = 1, 2, . . . do
           4         // Mean ﬁeld updates ;
           5         for each case i = 1 : N do
           6             μik = sigm(viT w:,k )
           7        // MCMC updates ;
           8        for each sample s = 1 : S do
           9            Generate (vs , hs ) by brief Gibbs sampling from old (vs , hs )
           10       // Parameter updates ;
                            N                           S
           11       g = N1 i=1 vi (μi )T −       1
                                                 S         s=1    vs (hs )T ;
           12       W := W + αt g;
           13       Decrease αt




27.7.3     Applications of RBMs
           The main application of RBMs is as a building block for deep generative models, which we
           discuss in Section 28.2. But they can also be used as substitutes for directed two-layer models.
           They are particularly useful in cases where inference of the hidden states at test time must be
           fast. We give some examples below.

27.7.3.1   Language modeling and document retrieval
           We can use a categorical RBM to deﬁne a generative model for bag-of-words, as an alternative
           to LDA. One subtlety is that the partition function in an undirected models depends on how
           big the graph is, and therefore on how long the document is. A solution to this was proposed
           in (Salakhutdinov and Hinton 2010): use a categorical RBM with tied weights, but multiply the
           hidden activation bias terms ck by the document length L to compensate form the fact that the
           observed word-count vector v is larger in magnitude:
                                       K 
                                        C                            
                                                                      C                    
                                                                                           K
                E(v, h; θ)        −             v   c
                                                         hk Wkc   −         v c bcr   −L         hk c k   (27.129)
                                       k=1 c=1                        c=1                  k=1
992                                                                     Chapter 27. Latent variable models for discrete data


       Data set                 Number of docs           K        D̄     St. Dev.                     Avg. Test perplexity per word (in nats)
                                 Train       Test                                                  LDA-50     LDA-200      R. Soft-50    Unigram
       NIPS                      1,690         50      13,649    98.0     245.3                     3576        3391         3405          4385
       20-news                  11,314       7,531      2,000    51.8     70.8                      1091        1058          953          1335
       Reuters                  794,414     10,000     10,000    94.6     69.3                      1437        1142          988          2208



Figure 27.32 Comparison of RBM (replicated softmax) and LDA on three corpora. K is the number of
words in the vocabulary, D is the average document length, and St. Dev. is the standard deviation of the
document length. Source: (Salakhutdinov and Hinton 2010) .

                                        20-newsgroups                                                           Reuters
                                                                                              50
                        60                Replicated
                                          Softmax 50−D                                                      Replicated
                                                                                              40            Softmax 50−D
                        50
        Precision (%)




                                                                              Precision (%)
                             LDA 50−D
                        40                                                                    30

                        30                                                                          LDA 50−D
                                                                                              20
                        20
                                                                                              10
                        10


                         0.02     0.1      0.4   1.6     6.4    25.6    100                    0.001 0.006 0.051 0.4       1.6   6.4    25.6 100
                                            Recall (%)                                                            Recall (%)


Figure 27.33 Precision-recall curves for RBM (replicated softmax) and LDA on two corpora. From Figure
3 of (Salakhutdinov and Hinton 2010). Used with kind permission of Ruslan Salakhutdinov.


              L
where v c = l=1 I(yil = c). This is like having a single multinomial node (so we have dropped
the r subscript) with C states, where C is the number of words in the vocabulary. This is
called the replicated softmax model (Salakhutdinov and Hinton 2010), and is an undirected
alternative to mPCA/ LDA.
   We can compare the modeling power of RBMs vs LDA by measuring the perplexity on a test
set. This can be approximated using annealing importance sampling (Section 24.6.2). The results
are shown in Figure 27.32. We see that the LDA is signiﬁcantly better than a unigram model,
but that an RBM is signiﬁcantly better than LDA.
   Another advantage of the LDA is that inference is fast and exact: just a single matrix-vector
multiply followed by a sigmoid nonlinearity, as in Equation 27.107. In addition to being faster,
the RBM is more accurate. This is illustrated in Figure 27.33, which shows precision-recall curves
for RBMs and LDA on two different corpora. These curves were generated as follows: a query
document from the test set is taken, its similarity to all the training documents is computed,
where the similarity is deﬁned as the cosine of the angle between the two topic vectors, and
then the top M documents are returned for varying M . A retrieved document is considered
relevant if it has the same class label as that of the query’s (this is the only place where labels
are used).
           27.7. Restricted Boltzmann machines (RBMs)                                                 993


27.7.3.2   RBMs for collaborative ﬁltering
           RBMs have been applied to the Netﬂix collaborative ﬁltering competition (Salakhutdinov et al.
           2007). In fact, an RBM with binary hidden nodes and categorical visible nodes can slightly
           outperform SVD. By combining the two methods, performance can be further improved. (The
           winning entry in the challenge was an ensemble of many different types of model (Koren 2009a).)

           Exercises
           Exercise 27.1 Partition function for an RBM
           Show how to compute Z(θ) for an RBM with K binary hidden nodes and R binary observed nodes in
           O(R2K ) time, assuming K < R.
28      Deep learning



 28.1   Introduction
        Many of the models we have looked at in this book have a simple two-layer architecture of
        the form z → y for unsupervised latent variable models, or x → y for supervised models.
        However, when we look at the brain, we seem many levels of processing. It is believed that each
        level is learning features or representations at increasing levels of abstraction. For example, the
        standard model of the visual cortex (Hubel and Wiesel 1962; Serre et al. 2005; Ranzato et al.
        2007) suggests that (roughly speaking) the brain ﬁrst extracts edges, then patches, then surfaces,
        then objects, etc. (See e.g., (Palmer 1999; Kandel et al. 2000) for more information about how
        the brain might perform vision.)
           This observation has inspired a recent trend in machine learning known as deep learning
        (see e.g., (Bengio 2009), deeplearning.net, and the references therein), which attempts to
        replicate this kind of architecture in a computer. (Note the idea can be applied to non-vision
        problems as well, such as speech and language.)
           In this chapter, we give a brief overview of this new ﬁeld. However, we caution the reader
        that the topic of deep learning is currently evolving very quickly, so the material in this chapter
        may soon be outdated.

 28.2   Deep generative models
        Deep models often have millions of parameters. Acquiring enough labeled data to train such
        models is diffcult, despite crowd sourcing sites such as Mechanical Turk. In simple settings, such
        as hand-written character recognition, it is possible to generate lots of labeled data by making
        modiﬁed copies of a small manually labeled training set (see e.g., Figure 16.13), but it seems
        unlikely that this approach will scale to complex scenes.1
           To overcome the problem of needing labeled training data, we will focus on unsupervised
        learning. The most natural way to perform this is to use generative models. In this section, we
        discuss three different kinds of deep generative models: directed, undirected, and mixed.

        1. There have been some attempts to use computer graphics and video games to generate realistic-looking images of
        complex scenes, and then to use this as training data for computer vision systems. However, often graphics programs
        cut corners in order to make perceptually appealing images which are not reﬂective of the natural statistics of real-world
        images.
         996                                                                             Chapter 28. Deep learning




                        (a)                                (b)                                    (c)

         Figure 28.1 Some deep multi-layer graphical models. Observed variables are at the bottom. (a) A directed
         model. (b) An undirected model (deep Boltzmann machine). (c) A mixed directed-undirected model (deep
         belief net).


28.2.1   Deep directed networks
         Perhaps the most natural way to build a deep generative model is to construct a deep directed
         graphical model, as shown in Figure 28.1(a). The bottom level contains the observed pixels (or
         whatever the data is), and the remaining layers are hidden. We have assumed just 3 layers for
         notational simplicity. The number and size of layers is usually chosen by hand, although one
         can also use non-parametric Bayesian methods (Adams et al. 2010) or boosting (Chen et al. 2010)
         to infer the model structure.
            We shall call models of this form deep directed networks or DDNs. If all the nodes are
         binary, and all CPDs are logistic functions, this is called a sigmoid belief net (Neal 1992). In
         this case, the model deﬁnes the following joint distribution:
                                                                 
             p(h1 , h2 , h3 , v|θ) =     Ber(vi |sigm(hT1 w0i ))     Ber(h1j |sigm(hT2 w1j ))       (28.1)
                                         i                              j
                                                                           
                                             Ber(h2k |sigm(hT3 w2k ))           Ber(h3l |w3l )               (28.2)
                                         k                                  l

            Unfortunately, inference in directed models such as these is intractable because the posterior
         on the hidden nodes is correlated due to explaining away. One can use fast mean ﬁeld approxi-
         mations (Jaakkola and Jordan 1996a; Saul and Jordan 2000), but these may not be very accurate,
         since they approximate the correlated posterior with a factorial posterior. One can also use
         MCMC inference (Neal 1992; Adams et al. 2010), but this can be quite slow because the variables
         are highly correlated. Slow inference also results in slow learning.

28.2.2   Deep Boltzmann machines
         A natural alternative to a directed model is to construct a deep undirected model. For example,
         we can stack a series of RBMs on top of each other, as shown in Figure 28.1(b). This is known
         as a deep Boltzmann machine or DBM (Salakhutdinov and Hinton 2009). If we have 3 hidden
         layers, the model is deﬁned as follows:
                                            ⎛                                                      ⎞
                                   1                                            
          p(h1 , h2 , h3 , v|θ) =      exp ⎝     vi h1j W1ij +     h1j h2j W2jk +     h2k h3l W3kl ⎠(28.3)
                                  Z(θ)        ij                   jk                        kl
         28.2. Deep generative models                                                                                  997


         where we are ignoring constant offset or bias terms.
           The main advantage over the directed model is that one can perform efficient block (layer-
         wise) Gibbs sampling, or block mean ﬁeld, since all the nodes in each layer are conditionally
         independent of each other given the layers above and below (Salakhutdinov and Larochelle
         2010). The main disadvantage is that training undirected models is more difficult, because of the
         partition function. However, below we will see a greedy layer-wise strategy for learning deep
         undirected models.

28.2.3   Deep belief networks
         An interesting compromise is to use a model that is partially directed and partially undirected.
         In particular, suppose we construct a layered model which has directed arrows, except at the
         top, where there is an undirected bipartite graph, as shown in Figure 28.1(c). This model is
         known as a deep belief network (Hinton et al. 2006) or DBN.2 If we have 3 hidden layers, the
         model is deﬁned as follows:
                                                              
            p(h1 , h2 , h3 , v|θ) =     Ber(vi |sigm(hT1 w1i )   Ber(h1j |sigm(hT2 w2j )            (28.4)
                                            i                              j

                                            1       
                                                exp   h2k h3l W3kl                                                   (28.5)
                                           Z(θ)
                                                           kl

         Essentially the top two layers act as an associative memory, and the remaining layers then
         generate the output.
            The advantage of this peculiar architecture is that we can infer the hidden states in a
         fast, bottom-up fashion. To see why, suppose we only have two hidden layers, and that
         W2 = W1T , so the second level weights are tied to the ﬁrst level weights (see Figure 28.2(a)).
         This deﬁnes a model
                                 of the form p(h1 , h2 , v|W1 ). One can show that the distribution
                                                                                     1
         p(h1 , v|W1 ) = h2 p(h1 , h2 , v|W1 ) has the form p(h1 , v|W1 ) = Z(W        1)
                                                                                          exp(vT W1 h1 ),
         which is equivalent to an RBM. Since the DBN is equivalent to the RBM as far as p(h1 , v|W1 )
         is concerned, we can infer the posterior p(h1 |v, W1 ) in the DBN exactly as in the RBM. This
         posterior is exact, even though it is fully factorized.
            Now the only way to get a factored posterior is if the prior p(h1 |W1 ) is a complementary
         prior. This is a prior which, when multiplied by the likelihood p(v|h1 ), results in a perfectly
         factored posterior. Thus we see that the top level RBM in a DBN acts as a complementary prior
         for the bottom level directed sigmoidal likelihood function.
            If we have multiple hidden levels, and/or if the weights are not tied, the correspondence
         between the DBN and the RBM does not hold exactly any more, but we can still use the factored
         inference rule as a form of approximate bottom-up inference. Below we show that this is a valid
         variational lower bound. This bound also suggests a layer-wise training strategy, that we will
         explain in more detail later. Note, however, that top-down inference in a DBN is not tractable,
         so DBNs are usually only used in a feedforward manner.

         2. Unforuntately the acronym “DBN” also stands for “dynamic Bayes net” (Section 17.6.7). Geoff Hinton, who invented
         deep belief networks, has suggested the acronyms DeeBNs and DyBNs for these two different meanings. However, this
         terminology is non-standard.
         998                                                                     Chapter 28. Deep learning




                               (a)                                  (b)                       (c)

         Figure 28.2 (a) A DBN with two hidden layers and tied weights that is equivalent to an RBM. Source:
         Figure 2.2 of (Salakhutdinov 2009). (b) A stack of RBMs trained greedily. (c) The corresponding DBN.
         Source: Figure 2.3 of (Salakhutdinov 2009). Used with kind permission of Ruslan Salakhutdinov.



28.2.4   Greedy layer-wise learning of DBNs
         The equivalence between DBNs and RBMs suggests the following strategy for learning a DBN.

         • Fit an RBM to learn W1 using methods described in Section 27.7.2.
         • Unroll the RBM into a DBN with 2 hidden layers, as in Figure 28.2(a). Now “freeze” the
           directed weights W1 and let W2 be “untied” so it is no longer forced to be equal to W1T .
           We will now learn a better prior for p(h1 |W2 ) by ﬁtting a second RBM. The input data to
           this new RBM is the activation of the hidden units E [h1 |v, W1 ] which can be computed
           using a factorial approximation.
         • Continue to add more hidden layers until some stopping criterion is satisiﬁed, e.g., you run
           out of time or memory, or you start to overﬁt the validation set. Construct the DBN from
           these RBMs, as illustrated in Figure 28.2(c).

            One can show (Hinton et al. 2006) that this procedure always increases a lower bound the
         observed data likelihood. Of course this procedure might result in overﬁtting, but that is a
         different matter.
            In practice, we want to be able to use any number of hidden units in each level. This means
         we will not be able to initialize the weights so that W = W−1    T
                                                                               . This voids the theoretical
         guarantee. Nevertheless the method works well in practice, as we will see. The method can also
         be extended to train DBMs in a greedy way (Salakhutdinov and Larochelle 2010).
            After using the greedy layer-wise training strategy, it is standard to “ﬁne tune” the weights,
         using a technique called backﬁtting. This works as follows. Perform an upwards sampling pass
         to the top. Then perform brief Gibbs sampling in the top level RBM, and perform a CD update
         of the RBM parameters. Finally, perform a downwards ancestral sampling pass (which is an
         approximate sample from the posterior), and update the logistic CPD parameters using a small
         gradient step. This is called the up-down procedure (Hinton et al. 2006). Unfortunately this
         procedure is very slow.
         28.3. Deep neural networks                                                                     999


 28.3    Deep neural networks
         Given that DBNs are often only used in a feed-forward, or bottom-up, mode, they are effectively
         acting like neural networks. In view of this, it is natural to dispense with the generative story
         and try to ﬁt deep neural networks directly, as we discuss below. The resulting training methods
         are often simpler to implement, and can be faster.
            Note, however, that performance with deep neural nets is sometimes not as good as with
         probabilistic models (Bengio et al. 2007). One reason for this is that probabilistic models support
         top-down inference as well as bottom-up inference. (DBNs do not support efficient top-down
         inference, but DBMs do, and this has been shown to help (Salakhutdinov and Larochelle 2010).)
         Top-down inference is useful when there is a lot of ambiguity about the correct interpretation
         of the signal.
            It is interesting to note that in the mammalian visual cortex, there are many more feedback
         connections than there are feedforward connections (see e.g., (Palmer 1999; Kandel et al. 2000)).
         The role of these feedback connections is not precisely understood, but they presumably provide
         contextual prior information (e.g., coming from the previous “frame” or retinal glance) which
         can be used to disambiguate the current bottom-up signals (Lee and Mumford 2003).
            Of course, we can simulate the effect of top-down inference using a neural network. However
         the models we discuss below do not do this.

28.3.1   Deep multi-layer perceptrons
         Many decision problems can be reduced to classiﬁcation, e.g., predict which object (if any) is
         present in an image patch, or predict which phoneme is present in a given acoustic feature
         vector. We can solve such problems by creating a deep feedforward neural network or multi-
         layer perceptron (MLP), as in Section 16.5, and then ﬁtting the parameters using gradient descent
         (aka back-propagation).
            Unfortunately, this method does not work very well. One problem is that the gradient becomes
         weaker the further we move away from the data; this is known as the “vanishing gradient”
         problem (Bengio and Frasconi 1995). A related problem is that there can be large plateaus in
         the error surface, which cause simple ﬁrst-order gadient-based methods to get stuck (Glorot and
         Bengio 2010).
            Consequently early attempts to learn deep neural networks proved unsuccesful. Recently there
         has been some progress, due to the adoption of GPUs (Ciresan et al. 2010) and second-order
         optimization algorithms (Martens 2010). Nevertheless, such models remain difficult to train.
            Below we discuss a way to initialize the parameters using unsupervised learning; this is called
         generative pre-training. The advantage of performing unsupervised learning ﬁrst is that the
         model is forced to model a high-dimensional response, namely the input feature vector, rather
         than just predicting a scalar response. This acts like a data-induced regularizer, and helps
         backpropagation ﬁnd local minima with good generalization properties (Erhan et al. 2010; Glorot
         and Bengio 2010).
         1000                                                                            Chapter 28. Deep learning


                                                                              $
                                  
                                       
                                              %
                                  
                                             
                                                                                                 
                                                                                      
                                                                                               
                                                                                    
                                                                                             
                                             
                                                                                         
                                                                                                

                                                                   !"#         
                                                                                                
                                       
                                                                                     
                                             
                                                                                                 
                                                                                      
                                                                                                 
                                                                                  
                                                                                               




                                                 

                                                                       


         Figure 28.3 Training a deep autoencoder. (a) First we greedily train some RBMs. (b) Then we construct
         the auto-encoder by replicating the weights. (c) Finally we ﬁne-tune the weights using back-propagation.
         From Figure 1 of (Hinton and Salakhutdinov 2006). Used with kind permission of Ruslan Salakhutdinov.



28.3.2   Deep auto-encoders
         An auto-encoder is a kind of unsupervised neural network that is used for dimensionality
         reduction and feature discovery. More precisely, an auto-encoder is a feedforward neural network
         that is trained to predict the input itself. To prevent the system from learning the trivial identity
         mapping, the hidden layer in the middle is usually constrained to be a narrow bottleneck. The
         system can minimize the reconstruction error by ensuring the hidden units capture the most
         relevant aspects of the data.
            Suppose the system has one hidden layer, so the model has the form v → h → v. Further,
         suppose all the functions are linear. In this case, one can show that the weights to the K
         hidden units will span the same subspace as the ﬁrst K principal components of the data
         (Karhunen and Joutsensalo 1995; Japkowicz et al. 2000). In other words, linear auto-encoders are
         equivalent to PCA. However, by using nonlinear activation functions, one can discover nonlinear
         representations of the data.
            More powerful representations can be learned by using deep auto-encoders. Unfortunately
         training such models using back-propagation does not work well, because the gradient signal
         becomes too small as it passes back through multiple layers, and the learning algorithm often
         gets stuck in poor local minima.
            One solution to this problem is to greedily train a series of RBMs and to use these to initialize
         an auto-encoder, as illustrated in Figure 28.3. The whole system can then be ﬁne-tuned using
         backprop in the usual fashion. This approach, ﬁrst suggested in (Hinton and Salakhutdinov
         28.4. Applications of deep networks                                                                  1001


                                   2000 top-level units


                             10 label units         500 units


                         This could be the          500 units
                         top level of
                         another sensory
                         pathway                     28 x 28
                                                     pixel
                                                     image

                                              (a)                                (b)

         Figure 28.4 (a) A DBN architecture for classifying MNIST digits. Source: Figure 1 of (Hinton et al. 2006).
         Used with kind permission of Geoff Hinton. (b) These are the 125 errors made by the DBN on the 10,000
         test cases of MNIST. Above each image is the estimated label. Source: Figure 6 of (Hinton et al. 2006).
         Used with kind permission of Geoff Hinton. Compare to Figure 16.15.


         2006), works much better than trying to ﬁt the deep auto-encoder directly starting with random
         weights.

28.3.3   Stacked denoising auto-encoders
         A standard way to train an auto-encoder is to ensure that the hidden layer is narrower than the
         visible layer. This prevents the model from learning the identity function. But there are other
         ways to prevent this trivial solution, which allow for the use of an over-complete representation.
         One approach is to impose sparsity constraints on the activation of the hidden units (Ranzato
         et al. 2006). Another approach is to add noise to the inputs; this is called a denoising auto-
         encoder (Vincent et al. 2010). For example, we can corrupt some of the inputs, for example
         by setting them to zero, so the model has to learn to predict the missing entries. This can be
         shown to be equivalent to a certain approximate form of maximum likelihood training (known
         as score matching) applied to an RBM (Vincent 2011).
            Of course, we can stack these models on top of each other to learn a deep stacked denoising
         auto-encoder, which can be discriminatively ﬁne-tuned just like a feedforward neural network,
         if desired.

 28.4    Applications of deep networks
         In this section, we mention a few applications of the models we have been discussing.

28.4.1   Handwritten digit classiﬁcation using DBNs
         Figure 28.4(a) shows a DBN (from (Hinton et al. 2006)) consisting of 3 hidden layers. The visible
         layer corresponds to binary images of handwritten digits from the MNIST data set. In addition,
         the top RBM is connected to a softmax layer with 10 units, representing the class label.
         1002                                                                                                    Chapter 28. Deep learning

                                                                                                        European Community
                                                                                   Interbank Markets    Monetary/Economic



                                                                       Energy Markets
                                                                                                                          Disasters and
                                                                                                                          Accidents




                                                                      Leading                                         Legal/Judicial
                                                                      Economic
                                                                      Indicators


                                                                                                             Government
                                                                                   Accounts/
                                                                                                             Borrowings
                                                                                   Earnings


                                           (a)                                                         (b)

         Figure 28.5 2d visualization of some bag of words data from the Reuters RCV1-v2 corpus. (a) Results of
         using LSA. (b) results of using a deep auto-encoder. Source: Figure 4 of (Hinton and Salakhutdinov 2006).
         Used with kind permission of Ruslan Salakhutdinov.



            The ﬁrst 2 hidden layers were trained in a greedy unsupervised fashion from 50,000 MNIST
         digits, using 30 epochs (passes over the data) and stochastic gradient descent, with the CD
         heuristic. This process took “a few hours per layer” (Hinton et al. 2006, p1540). Then the top
         layer was trained using as input the activations of the lower hidden layer, as well as the class
         labels. The corresponding generative model had a test error of about 2.5%. The network weights
         were then carefully ﬁne-tuned on all 60,000 training images using the up-down procedure. This
         process took “about a week” (Hinton et al. 2006, p1540). The model can be used to classify
         by performing a deterministic bottom-up pass, and then computing the free energy for the
         top-level RBM for each possible class label. The ﬁnal error on the test set was about 1.25%. The
         misclassiﬁed examples are shown in Figure 28.4(b).
            This was the best error rate of any method on the permutation-invariant version of MNIST
         at that time. (By permutation-invariant, we mean a method that does not exploit the fact that
         the input is an image. Generic methods work just as well on permuted versions of the input
         (see Figure 1.5), and can therefore be applied to other kinds of datasets.) The only other method
         that comes close is an SVM with a degree 9 polynomial kernel, which has achieved an error
         rate of 1.4% (Decoste and Schoelkopf 2002). By way of comparison, 1-nearest neighbor (using
         all 60,000 examples) achieves 3.1% (see mnist1NNdemo). This is not as good, although 1-NN is
         much simpler.3

28.4.2   Data visualization and feature discovery using deep auto-encoders
         Deep autoencoders can learn informative features from raw data. Such features are often used
         as input to standard supervised learning methods.
            To illustrate this, consider ﬁtting a deep auto-encoder with a 2d hidden bottleneck to some

         3. One can get much improved performance on this task by exploiting the fact that the input is an image. One way to do
         this is to create distorted versions of the input, adding small shifts and translations (see Figure 16.13 for some examples).
         Applying this trick reduced the SVM error rate to 0.56%. Similar error rates can be achieved using convolutional neural
         networks (Section 16.5.1) trained on distorted images ((Simard et al. 2003) got 0.4%). However, the point of DBNs is that
         they offer a way to learn such prior knowledge, without it having to be hand-crafted.
         28.4. Applications of deep networks                                                                                                1003


                                                                                                                    
                                                                                                                 !
                                                                                                                  ! 
                                                                                                                    
                                                                                                                  "# $
                                                        




                                         
                                                         



                                                        



                                                        




                                                                                                   
                                                                                                


         Figure 28.6 Precision-recall curves for document retrieval in the Reuters RCV1-v2 corpus. Source: Figure
         3.9 of (Salakhutdinov 2009). Used with kind permission of Ruslan Salakhutdinov.



         text data. The results are shown in Figure 28.5. On the left we show the 2d embedding produced
         by LSA (Section 27.2.2), and on the right, the 2d embedding produced by the auto-encoder. It is
         clear that the low-dimensional representation created by the auto-encoder has captured a lot of
         the meaning of the documents, even though class labels were not used.4
            Note that various other ways of learning low-dimensional continuous embeddings of words
         have been proposed. See e.g., (Turian et al. 2010) for details.

28.4.3   Information retrieval using deep auto-encoders (semantic hashing)
         In view of the sucess of RBMs for information retrieval discussed in Section 27.7.3.1, it is natural
         to wonder if deep models can do even better. In fact they can, as is shown in Figure 28.6.
            More interestingly, we can use a binary low-dimensional representation in the middle layer
         of the deep auto-encoder, rather than a continuous representation as we used above. This
         enables very fast retrieval of related documents. For example, if we use a 20-bit code, we
         can precompute the binary representation for all the documents, and then create a hash-table
         mapping codewords to documents. This approach is known as semantic hashing, since the
         binary representation of semantically similar documents will be close in Hamming distance.
            For the 402,207 test documents in Reuters RCV1-v2, this results in about 0.4 documents per
         entry in the table. At test time, we compute the codeword for the query, and then simply retrieve
         the relevant documents in constant time by looking up the contents of the relevant address in
         memory. To ﬁnd other other related documents, we can compute all the codewords within a

         4. Some details. Salakhutdinov and Hinton used the Reuters RCV1-v2 data set, which consists of 804,414 newswire
         articles, manually classiﬁed into 103 topics. They represent each document by counting how many times each of the top
         2000 most frequent words occurs. They trained a deep auto-encoder with 2000-500-250-125-2 layers on half of the data.
         The 2000 visible units use a replicated softmax distribution, the 2 hidden units in the middle layer have a Gaussian
         distribution, and the remaining units have the usual Bernoulli-logistic distribution. When ﬁne tuning the auto-encoder,
         a cross-entropy loss function (equivalent to maximum likelihood under a multinoulli distribution) was used. See (Hinton
         and Salakhutdinov 2006) for further details.
         1004                                                                                    Chapter 28. Deep learning



                                              h11       h12    h13       w1     h21      h22     h23
                                                        1            1
                                                    w           w             w2        w2        w2




                                              x1               x2               x3               x4




         Figure 28.7 A small 1d convolutional RBM with two groups of hidden units, each associated with a ﬁlter
         of size 2. h11 and h21 are two different “views” of the data in the ﬁrst window, (x1 , x2 ). The ﬁrst view is
         computed using the ﬁlter w1 , the second view using ﬁlter w2 . Similarly, h12 and h22 are the views of the
         data in the second window, (x2 , x3 ), computed using w1 and w2 respectively.



         Hamming distance of, say, 4. This results in retrieving about 6196 × 0.4 ≈ 2500 documents5 .
         The key point is that the total time is independent of the size of the corpus.
            Of course, there are other techniques for fast document retrieval, such as inverted indices.
         These rely on the fact that individual words are quite informative, so we can simply intersect all
         the documents that contain each word. However, when performing image retrieval, it is clear that
         we do not want to work at the pixel level. Recently (Krizhevsky and Hinton 2010) showed that
         a deep autoencoder could learn a good semantic hashing function that outperformed previous
         techniques (Torralba et al. 2008; Weiss et al. 2008) on the 80 million tiny images dataset. It
         is hard to apply inverted indexing techniques to real-valued data (although one could imagine
         vector quantizing image patches).

28.4.4   Learning audio features using 1d convolutional DBNs
         To apply DBNs to time series of unbounded length, it is necessary to use some form of parameter
         tying. One way to do this is to use convolutional DBNs (Lee et al. 2009; Desjardins and Bengio
         2008), which use convolutional RBMs as their basic unit. These models are a generative version of
         convolutional neural nets discussed in Section 16.5.1. The basic idea is illustrated in Figure 28.7.
         The hidden activation vector for each group is computed by convolving the input vector with
         that group’s ﬁlter (weight vector or matrix). In other words, each node within a hidden group
         is a weighted combination of a subset of the inputs. We compute the activaton of all the
         hidden nodes by “sliding” this weight vector over the input. This allows us to model translation
         invariance, since we use the same weights no matter where in the input vector the pattern
         occurs.6 Each group has its own ﬁlter, corresponding to its own pattern detector.
                                
         5. Note that 6196 = 4k=0 20     k
                                             is the number of bit vectors that are up to a Hamming distance of 4 away.
         6. It is often said that the goal of deep learnng is to discover invariant features, e.g., a representation of an object
         that does not change even as nuisance variables, such as the lighting, do change. However, sometimes these so-called
         “nuisance variables” may be the variables of interest. For example if the task is to determine if a photograph was taken
         in the morning or the evening, then lighting is one of the more salient features, and object identity may be less relevant.
         As always, one task’s “signal” is another task’s “noise”, so it unwise to “throw away” apparently irrelevant information
         28.5. Discussion                                                                                1005


           More formally, for binary 1d signals, we can deﬁne the full conditionals in a convolutional
         RBM as follows (Lee et al. 2009):
            p(hkt = 1|v)    =    sigm((wk ⊗ v)t + bt )                                                  (28.6)
                                      
            p(vs = 1|h)     =    sigm( (wk ⊗ hk )s + cs )                                               (28.7)
                                        k

         where wk is the weight vector for group k, bt and cs are bias terms, and a ⊗ b represents the
         convolution of vectors a and b.
            It is common to add a max pooling layer as well as a convolutional layer, which computes
         a local maximum over the ﬁltered response. This allows for a small amount of translation
         invariance. It also reduces the size of the higher levels, which speeds up computation consider-
         ably. Deﬁning this for a neural network is simple, but deﬁning this in a way which allows for
         information ﬂow backwards as well as forwards is a bit more involved. The basic idea is similar
         to a noisy-OR CPD (Section 10.2.3), where we deﬁne a probabilistic relationship between the max
         node and the parts it is maxing over. See (Lee et al. 2009) for details. Note, however, that the
         top-down generative process will be difficult, since the max pooling operation throws away so
         much information.
            (Lee et al. 2009) applies 1d convolutional DBNs of depth 2 to auditory data. When the input
         consists of speech signals, the method recovers a representation that is similar to phonemes.
         When applied to music classiﬁcation and speaker identiﬁcation, their method outperforms tech-
         niques using standard features such as MFCC. (All features were fed into the same discriminative
         classiﬁer.)
            In (Seide et al. 2011), a deep neural net was used in place of a GMM inside a conventional
         HMM. The use of DNNs signiﬁcantly improved performance on conversational speech recogni-
         tion. In an interview, the tech lead of this project said “historically, there have been very few
         individual technologies in speech recognition that have led to improvements of this magnitude”.7

28.4.5   Learning image features using 2d convolutional DBNs
         We can extend a convolutional DBN from 1d to 2d in a straightforward way (Lee et al. 2009), as
         illustrated in Figure 28.8. The results of a 3 layer system trained on four classes of visual objects
         (cars, motorbikes, faces and airplanes) from the Caltech 101 dataset are shown in Figure 28.9.
         We only show the results for layers 2 and 3, because layer 1 learns Gabor-like ﬁlters that are
         very similar to those learned by sparse coding, shown in Figure 13.21(b). We see that layer 2 has
         learned some generic visual parts that are shared amongst object classes, and layer 3 seems to
         have learned ﬁlters that look like grandmother cells, that are speciﬁc to individual object classes,
         and in some cases, to individual objects.

 28.5    Discussion
         So far, we have been discussing models inspired by low-level processing in the brain. These
         models have produced useful features for simple classiﬁcation tasks. But can this pure bottom-up

         too early.
         7. Source: http://research.microsoft.com/en-us/news/features/speechrecognition-082911.aspx.
1006                                                                        Chapter 28. Deep learning




Figure 28.8 A 2d convolutional RBM with max-pooling layers. The input signal is a stack of 2d images
(e.g., color planes). Each input layer is passed through a different set of ﬁlters. Each hidden unit is
obtained by convolving with the appropriate ﬁlter, and then summing over the input planes. The ﬁnal layer
is obtained by computing the local maximum within a small window. Source: Figure 1 of (Chen et al.
2010) . Used with kind permission of Bo Chen.

       faces, cars, airplanes, motorbikes




                        (a)                                                (b)

Figure 28.9 Visualization of the ﬁlters learned by a convolutional DBN in layers two and three. Source:
Figure 3 of (Lee et al. 2009). Used with kind permission of Honglak Lee.



approach scale to more challenging problems, such as scene interpretation or natural language
understanding?
   To put the problem in perspective, consider the DBN for handwritten digit classiﬁcation in
Figure 28.4(a). This has about 1.6M free parameters (28 × 28 × 500 + 500 × 500 + 510 × 2000 =
1, 662, 000). Although this is a lot, it is tiny compared to the number of neurons in the brain.
As Hinton says,
   This is about as many parameters as 0.002 cubic millimetres of mouse cortex, and several
   hundred networks of this complexity could ﬁt within a single voxel of a high-resolution
   fMRI scan. This suggests that much bigger networks may be required to compete with
   human shape recognition abilities. — (Hinton et al. 2006, p1547).
To scale up to more challenging problems, various groups are using GPUs (see e.g., (Raina
et al. 2009)) and/or parallel computing. But perhaps a more efficient approach is to work at a
higher level of abstraction, where inference is done in the space of objects or their parts, rather
28.5. Discussion                                                                              1007


than in the space of bits and pixels. That is, we want to bridge the signal-to-symbol divide,
where by “symbol” we mean something atomic, that can be combined with other symbols in a
compositional way.
   The question of how to convert low level signals into a more structured/ “semantic” represen-
tation is known as the symbol grounding problem (Harnard 1990). Traditionally such symbols
are associated with words in natural language, but it seems unlikely we can jump directly from
low-level signals to high-level semantic concepts. Instead, what we need is an intermediate level
of symbolic or atomic parts.
   A very simple way to create such parts from real-valued signals, such as images, is to apply
vector quantization. This generates a set of visual words. These can then be modelled using
some of the techniques from Chapter 27 for modeling bags of words. Such models, however, are
still quite “shallow”.
   It is possible to deﬁne, and learn, deep models which use discrete latent parts. Here we just
mention a few recent approaches, to give a ﬂavor of the possibilites. (Salakhutdinov et al. 2011)
combine RBMs with hierarchical latent Dirichlet allocation methods, trained in an unsupervised
way. (Zhu et al. 2010) use latent and-or graphs, trained in a manner similar to a latent structural
SVM. A similar approach, based on grammars, is described in (Girshick et al. 2011). What is
interesting about these techniques is that they apply data-driven machine learning methods
to rich structured/symbolic “AI-style” models. This seems like a promising future direction for
machine learning.
Notation



Introduction
It is very difficult to come up with a single, consistent notation to cover the wide variety of
data, models and algorithms that we discuss. Furthermore, conventions differ between machine
learning and statistics, and between different books and papers. Nevertheless, we have tried
to be as consistent as possible. Below we summarize most of the notation used in this book,
although individual sections may introduce new notation. Note also that the same symbol may
have different meanings depending on the context, although we try to avoid this where possible.

General math notation

           Symbol           Meaning
           x              Floor of x, i.e., round down to nearest integer
           %x&              Ceiling of x, i.e., round up to nearest integer
           x⊗y              Convolution of x and y
           x$y              Hadamard (elementwise) product of x and y
           a∧b              logical AND
           a∨b              logical OR
           ¬a               logical NOT
           I(x)             Indicator function, I(x) = 1 if x is true, else I(x) = 0
           ∞                Inﬁnity
           →                Tends towards, e.g., n → ∞
           ∝                Proportional to, so y = ax can be written as y ∝ x
           |x|              Absolute value
           |S|              Size (cardinality) of a set
           n!               Factorial function
           ∇                Vector of ﬁrst derivatives
           ∇2               Hessian matrix of second derivatives
                           Deﬁned as
           O(·)             Big-O: roughly means order of magnitude
           R                The real numbers
           1:n              Range (Matlab convention): 1 : n = {1, 2, . . . , n}
           ≈                Approximately equal to
           argmaxx f (x)    Argmax: the value x that maximizes f
1010                                                                                     Notation

                                                      Γ(a)Γ(b)
          B(a, b)           Beta function, B(a, b) =   Γ(a+b)
                                                        
                                                            Γ(α )
          B(α)              Multivariate beta function, Γ(k αkk )
           n                                               k

           k                n choose k, equal to n!/(k!(n − k)!)
          δ(x)              Dirac delta function, δ(x) = ∞ if x = 0, else δ(x) = 0
          δij               Kronecker delta, equals 1 if i = j, otherwise equals 0
          δx (y)            Kronecker delta, equals 1 if x = y, otherwise equals 0
          exp(x)            Exponential function ex 
                                                         ∞
          Γ(x)              Gamma function, Γ(x) = 0 ux−1 e−u du
                                                           d
          Ψ(x)              Digamma function, Ψ(x) = dx      log Γ(x)
          X                 A set from which values are drawn (e.g., X = RD )

Linear algebra notation
We use boldface lowercase to denote vectors, such as a, and boldface uppercase to denote
matrices, such as A. Vectors are assumed to be column vectors, unless noted otherwise.

          Symbol           Meaning
          A'0              A is a positive deﬁnite matrix
          tr(A)            Trace of a matrix
          det(A)           Determinant of matrix A
          |A|              Determinant of matrix A
          A−1              Inverse of a matrix
          A†               Pseudo-inverse of a matrix
          AT               Transpose of a matrix
          aT               Transpose of a vector
          diag(a)          Diagonal matrix made from vector a
          diag(A)          Diagonal vector extracted from matrix A
          I or Id          Identity matrix of size d × d (ones on diagonal, zeros off)
          1 or 1d          Vector of ones (of length d)
          0 or 0d          Vector of zeros (of length
                                                  $  d)
          ||x|| = ||x||2   Euclidean or 2 norm
                                                        d    2
                                                        j=1 xj
                                    d
          ||x||1           1 norm j=1 |xj |
          A:,j             j’th column of matrix
          Ai,:             transpose of i’th row of matrix (a column vector)
          Aij              Element (i, j) of matrix A
          x⊗y              Tensor product of x and y


Probability notation
We denote random and ﬁxed scalars by lower case, random and ﬁxed vectors by bold lower case,
and random and ﬁxed matrices by bold upper case. Occastionally we use non-bold upper case
to denote scalar random variables. Also, we use p() for both discrete and continuous random
variables.
Notation                                                                                     1011


   Symbol             Meaning
   X⊥Y                X is independent of Y
   X ⊥ Y             X is not independent of Y
   X ⊥ Y |Z           X is conditionally independent of Y given Z
   X ⊥ Y |Z          X is not conditionally independent of Y given Z
   X∼p                X is distributed according to distribution p
   α                  Parameters of a Beta or Dirichlet distribution
   cov [x]            Covariance of x
   E [X]              Expected value of X
   Eq [X]             Expected value of X wrt distribution q
   H (X) or H (p)     Entropy of distribution p(X)
   I (X; Y )          Mutual information between X and Y
   KL (p||q)          KL divergence from distribution p to q
   (θ)               Log-likelihood function
   L(θ, a)            Loss function for taking action a when true state of nature is θ
   λ                  Precision (inverse variance) λ = 1/σ 2
   Λ                  Precision matrix Λ = Σ−1
   mode [X]           Most probable value of X
   μ                  Mean of a scalar distribution
   μ                  Mean of a multivariate distribution
   p(x)               Probability density or mass function
   p(x|y)             Conditional probability density of x given y
   Φ                  cdf of standard normal
   φ                  pdf of standard normal
   π                  multinomial parameter vector, Stationary distribution of Markov chain
   ρ                  Correlation coefficient
   sigm(x)            Sigmoid (logistic) function, 1+e1−x
   σ2                 Variance
   Σ                  Covariance matrix
   var [x]            Variance of x
   ν                  Degrees of freedom parameter
   Z                  Normalization constant of a probability distribution


Machine learning/statistics notation
In general, we use upper case letters to denote constants, such as C, D, K, N , S, T , etc. We
use lower case letters as dummy indexes of the appropriate range, such as c = 1 : C to index
classes, j = 1 : D to index input features, k = 1 : K to index states or clusters, s = 1 : S to
index samples, t = 1 : T to index time, etc. To index data cases, we use the notation i = 1 : N ,
although the notation n = 1 : N is also widely used.
   We use x to represent an observed data vector. In a supervised problem, we use y or y to
represent the desired output label. We use z to represent a hidden variable. Sometimes we also
use q to represent a hidden discrete variable.
1012                                                                                     Notation


        Symbol        Meaning
        C             Number of classes
        D             Dimensionality of data vector (number of features)
        R             Number of outputs (response variables)
        D             Training data D = {xi |i = 1 : N } or D = {(xi , yi )|i = 1 : N }
        Dtest         Test data
        J(θ)          Cost function
        K             Number of states or dimensions of a variable (often latent)
        κ(x, y)       Kernel function
        K             Kernel matrix
        λ             Strength of 2 or 1 regularizer
        N             Number of data cases
                                                                N
        Nc            Number of examples of class c, Nc = n=1 I(yn = c)
        φ(x)          Basis function expansion of feature vector x
        Φ             Basis function expansion of design matrix X
        q()           Approximate or proposal distribution
        Q(θ, θold )   Auxiliary function in EM
        S             Number of samples
        T             Length of a sequence
        T (D)         Test statistic for data
        T             Transition matrix of Markov chain
        θ             Parameter vector
        θ (s)         s’th sample of parameter vector
        θ̂            Estimate (usually MLE or MAP) of θ
        θ̂ M L        Maximum likelihood estimate of θ
        θ̂ M AP       MAP estimate of θ
        θ             Estimate (usually posterior mean) of θ
        w             Vector of regression weights (called β in statistics)
        W             Matrix of regression weights
        xij           Component (i.e., feature) j of data case i, for i = 1 : N ,j = 1 : D
        xi            Training case, i = 1 : N
        X             Design matrix of size N × D
                                                N
        x             Empirical mean x = N1 i=1 xi
        x̃            Future test case
        x∗            Future test case
        y             Vector of all training labels y = (y1 , . . . , yN )
        zij           Latent component j for case i


Graphical model notation
In graphical models, we index nodes by s, t, u ∈ V, and states by i, j, k ∈ X .
Notation                                                                     1013


   Symbol     Meaning
   s∼t        Node s is connected to node t
   bel        Belief function
   C          Cliques of a graph
   chj        Child of node j in a DAG
   descj      Descendants of node j in a DAG
   G          A graph
   E          Edges of a graph
   mbt        Markov blanket of node t
   nbdt       Neighborhood of node t
   pat        Parents of node t in a DAG
   predt      Predecessors of node t in a DAG wrt some ordering
   ψc (xc )   Potential function for clique c
   S          Separators of a graph
   θsjk       prob. node s is in state k given its parents are in states j
   V          Nodes of a graph
1014                                                      Notation


List of commonly used abbreviations
 Abbreviation   Meaning
 cdf            Cumulative distribution function
 CPD            Conditional probability distribution
 CPT            Conditional probability table
 CRF            Conditional random ﬁeld
 DAG            Directed acyclic graphic
 DGM            Directed graphical model
 EB             Empirical Bayes
 EM             Expectation maximization algorithm
 EP             Expectation propagation
 GLM            Generalized linear model
 GMM            Gaussian mixture model
 HMM            Hidden Markov model
 iid            Independent and identically distributed
 iff            If and only if
 KL             Kullback Leibler divergence
 LDS            Linear dynamical system
 LHS            Left hand side (of an equation)
 MAP            Maximum A Posterior estimate
 MCMC           Markov chain Monte Carlo
 MH             Metropolis Hastings
 MLE            Maximum likelihood estimate
 MPM            Maximum of Posterior Marginals
 MRF            Markov random ﬁeld
 MSE            Mean squared error
 NLL            Negative log likelihood
 OLS            Ordinary least squares
 pd             Positive deﬁnite (matrix)
 pdf            Probability density function
 pmf            Probability mass function
 RBPF           Rao-Blackwellised particle ﬁlter
 RHS            Right hand side (of an equation)
 RJMCMC         Reversible jump MCMC
 RSS            Residual sum of squares
 SLDS           Switching linear dynamical system
 SSE            Sum of squared errors
 UGM            Undirected graphical model
 VB             Variational Bayes
 wrt            With respect to
                                           Aji, S. M. and R. J. McEliece (2000,      Andrieu, C., N. de Freitas, and
                                               March). The generalized distribu-       A. Doucet (2000).      Sequential
                                               tive law. IEEE Trans. Info. The-        Bayesian estimation and model se-
                                               ory 46(2), 325–343.                     lection for dynamic kernel ma-
                                                                                       chines. Technical report, Cam-
                                           Alag, S. and A. Agogino (1996). In-         bridge Univ.
                                              ference using message propoga-         Andrieu, C., N. de Freitas, and
Bibliography                                  tion and topology transformation
                                              in vector Gaussian continuous net-
                                                                                       A. Doucet (2001).       Robust Full
                                                                                       Bayesian Learning for Radial Ba-
                                              works. In UAI.
                                                                                       sis Networks. Neural Computa-
                                                                                       tion 13(10), 2359–2407.
                                           Albers, C., M. Leisink, and H. Kap-
                                              pen (2006). The Cluster Variation      Andrieu, C., N. de Freitas, A. Doucet,
                                              Method for Efficient Linkage Anal-       and M. Jordan (2003). An introduc-
                                              ysis on Extended Pedigrees. BMC          tion to MCMC for machine learn-
                                              Bioinformatics 7.                        ing. Machine Learning 50, 5–43.

                                           Albert, J. and S. Chib (1993). Bayesian   Andrieu, C., A. Doucet, and V. Tadic
                                              analysis of binary and polychoto-        (2005). Online EM for parameter
Abend, K., T. J. Harley, and L. N. Kanal                                               estimation in nonlinear-non Gaus-
  (1965). Classiﬁcation of Binary Ran-        mous response data. J. of the Am.        sian state-space models. In Proc.
  dom Patterns. IEEE Transactions on          Stat. Assoc. 88(422), 669–679.           IEEE CDC.
  Information Theory 11(4), 538–544.
                                           Allwein, E., R. Schapire, and Y. Singer   Andrieu, C. and J. Thoms (2008). A
Ackley, D., G. Hinton, and T. Sejnowski       (2000). Reducing multiclass to bi-       tutorial on adaptive MCMC. Statis-
   (1985). A learning algorithm for           nary: A unifying approach for mar-       tical Computing 18, 343–373.
   boltzmann machines. Cognitive              gin classiﬁers. J. of Machine Learn-
   Science 9, 147–169.                        ing Research, 113–141.                 Aoki, M. (1987). State space modeling of
                                                                                       time series. Springer.
Adams, R. P., H. Wallach, and              Aloise, D., A. Deshpande, P. Hansen,      Archambeau, C. and F. Bach (2008).
  Z. Ghahramani (2010). Learning the          and P. Popat (2009). NP-hardness          Sparse probabilistic projections. In
  structure of deep sparse graphical          of Euclidean sum-of-squares clus-         NIPS.
  models. In AI/Statistics.                   tering. Machine Learning 75, 245–
                                              249.                                   Argyriou, A., T. Evgeniou, and M. Pon-
Aggarwal, D. and S. Merugu (2007).                                                      til (2008). Convex multi-task fea-
  Predictive discrete latent factor        Alpaydin, E. (2004). Introduction to         ture learning.      Machine Learn-
  models for large scale dyadic data.         machine learning. MIT Press.              ing 73(3), 243–272.
  In Proc. of the Int’l Conf. on Knowl-                                              Armagan, A., D. Dunson, and J. Lee
  edge Discovery and Data Mining.          Altun, Y., T. Hofmann, and I. Tsochan-      (2011). Generalized double pareto
                                              taridis (2006). Large Margin Meth-       shrinkage. Technical report, Duke.
                                              ods for Structured and Interde-
Ahmed, A. and E. Xing (2007).                 pendent Output Variables.        In
  On tight approximate inference of                                                  Armstrong, H. (2005). Bayesian esti-
                                              G. Bakir, T. Hofmann, B. Scholkopf,      mation of decomposable Gaussian
  the logistic-normal topic admixture         A. Smola, B. Taskar, and S. Vish-
  model. In AI/Statistics.                    wanathan (Eds.), Machine Learning        graphical models. Ph.D. thesis,
                                                                                       UNSW.
                                              with Structured Outputs. MIT Press.
Ahn, J.-H. and J.-H. Oh (2003). A Con-                                               Armstrong, H., C. Carter, K. Wong,
  strained EM Algorithm for Princi-        Amir, E. (2010). Approximation Al-          and R. Kohn (2008). Bayesian Co-
  pal Component Analysis. Neural             gorithms for Treewidth. Algorith-         variance Matrix Estimation using a
  Computation 15, 57–65.                     mica 56(4), 448.                          Mixture of Decomposable Graphi-
                                                                                       cal Models. Statistics and Comput-
Ahn, S., A. Korattikara, and M. Welling    Amir, E. and S. McIlraith (2005).           ing, 1573–1375.
  (2012). Bayesian Posterior Sam-            Partition-based logical reason-
  pling via Stochastic Gradient Fisher       ing for ﬁrst-order and propo-           Arnborg, S., D. G. Corneil, and
  Scoring. In Intl. Conf. on Machine                                                    A. Proskurowski (1987). Complex-
                                             sitional theories.          Artiﬁcial      ity of ﬁnding embeddings in a k-
  Learning.                                  Intelligence 162(1), 49–88.                tree. SIAM J. on Algebraic and Dis-
Airoldi, E., D. Blei, S. Fienberg, and                                                  crete Methods 8, 277–284.
                                           Ando, R. and T. Zhang (2005). A
   E. Xing (2008). Mixed-membership          framework for learning predictive       Arora, S. and B. Barak (2009). Com-
   stochastic blockmodels. J. of Ma-         structures from multiple tasks and         plexity Theory: A Modern Approach.
   chine Learning Research 9, 1981–          unlabeled data.     J. of Machine          Cambridge.
   2014.                                     Learning Research 6, 1817–1853.
                                                                                     Arthur, D. and S. Vassilvitskii (2007). k-
Aitchison, J. (1982). The statistical                                                   means++: the advantages of careful
                                           Andrews, D. and C. Mallows (1974).
   analysis of compositional data. J. of     Scale mixtures of Normal distribu-         seeding. In Proc. 18th ACM-SIAM
   Royal Stat. Soc. Series B 44(2), 139–     tions. J. of Royal Stat. Soc. Series       symp. on Discrete algorithms, pp.
   177.                                      B 36, 99–102.                              1027âĂŞ1035.
1016                                                                                                        BIBLIOGRAPHY


Arulampalam, M., S. Maskell, N. Gor-        Banerjee, O., L. E. Ghaoui, and                technique occuring in the statisti-
   don, and T. Clapp (2002, Febru-             A. d’Aspremont (2008). Model se-            cal analysis of probabalistic func-
   ary). A Tutorial on Particle Fil-           lection through sparse maximum              tions in markov chains. The Annals
   ters for Online Nonlinear/Non-              likelihood estimation for multivari-        of Mathematical Statistics 41, 164–
   Gaussian Bayesian Tracking. IEEE            ate gaussian or binary data. J. of          171.
   Trans. on Signal Processing 50(2),          Machine Learning Research 9, 485–
   174–189.                                    516.                                     Beal, M. (2003). Variational Algorithms
                                                                                           for Approximate Bayesian Inference.
Asavathiratham, C. (2000). The Inﬂu-        Bar-Shalom, Y. and T. Fortmann                 Ph.D. thesis, Gatsby Unit.
   ence Model: A Tractable Representa-         (1988). Tracking and data associa-
   tion for the Dynamics of Networked          tion. Academic Press.                    Beal, M. and Z. Ghahramani (2006).
   Markov Chains. Ph.D. thesis, MIT,                                                       Variational Bayesian Learning of
   Dept. EECS.                              Bar-Shalom, Y. and X. Li (1993). Es-           Directed Graphical Models with
                                               timation and Tracking: Principles,          Hidden Variables. Bayesian Anal-
Atay-Kayis, A. and H. Massam (2005).           Techniques and Software. Artech             ysis 1(4).
   A Monte Carlo method for comput-            House.
   ing the marginal likelihood in non-                                                  Beal, M. J., Z. Ghahramani, and C. E.
   decomposable Gaussian graphical                                                         Rasmussen (2002). The inﬁnite hid-
                                            Barash, Y. and N. Friedman (2002).             den Markov model. In NIPS-14.
   models. Biometrika 92, 317–335.             Context-speciﬁc Bayesian cluster-
                                               ing for gene expression data. J.         Beck, A. and M. Teboulle (2009). A fast
Attenberg, J., K. Weinberger, A. Smola,        Comp. Bio. 9, 169–191.
   A. Dasgupta, and M. Zinkevich                                                           iterative shrinkage-thresholding al-
   (2009). Collaborative spam ﬁlter-                                                       gorothm for linear inverse prob-
   ing with the hashing trick. In Virus     Barber, D. (2006). Expectation Cor-            lems. SIAM J. on Imaging Sci-
   Bulletin.                                   rection for Smoothed Inference in           ences 2(1), 183–202.
                                               Switching Linear Dynamical Sys-
Attias, H. (1999). Independent factor          tems. J. of Machine Learning Re-         Beinlich, I., H. Suermondt, R. Chavez,
                                               search 7, 2515–2540.                        and G. Cooper (1989). The ALARM
   analysis. Neural Computation 11,                                                        monitoring system: A case study
   803–851.                                                                                with two probabilistic inference
                                            Barber, D. and C. Bishop (1998).               techniques for belief networks. In
Attias, H. (2000).     A variational           Ensemble Learning in Bayesian
   Bayesian framework for graphical            Neural Networks. In C. Bishop               Proc. of the Second European Conf.
   models. In NIPS-12.                         (Ed.), Neural Networks and Machine          on AI in Medicine, pp. 247–256.
                                               Learning, pp. 215–237. Springer.         Bekkerman, R., M. Bilenko, and
Bach, F. (2008). Bolasso: Model Con-
   sistent Lasso Estimation through                                                        J. Langford (Eds.) (2011). Scaling Up
                                            Barber, D. and S. Chiappa (2007).              Machine Learning. Cambridge.
   the Bootstrap. In Intl. Conf. on Ma-        Uniﬁed inference for variational
   chine Learning.                             bayesian linear gaussian state           Bell, A. J. and T. J. Sejnowski (1995).
                                               space models. In NIPS.                      An information maximisation ap-
Bach, F. and M. Jordan (2001). Thin
   junction trees. In NIPS.                                                                proach to blind separation and
                                            Barbieri, M. and J. Berger (2004). Op-         blind deconvolution. Neural Com-
Bach, F. and M. Jordan (2005). A prob-         timal predictive model selection.           putation 7 (6), 1129–1159.
   abilistic interpretation of canonical       Annals of Statistics 32, 870–897.
   correlation analysis. Technical Re-                                                  Bengio, Y. (2009). Learning deep ar-
   port 688, U. C. Berkeley.                Bartlett, P., M. Jordan, and J. McAuliffe      chitectures for AI. Foundations and
                                               (2006). Convexity, Classiﬁcation,           Trends in Machine Learning 2(1), 1–
Bach, F. and E. Moulines (2011). Non-          and Risk Bounds. J. of the Am. Stat.        127.
   asymptotic analysis of stochastic           Assoc. 101(473), 138–156.
   approximation algorithms for ma-                                                     Bengio, Y. and S. Bengio (2000).
   chine learning. In NIPS.                 Baruniak, R. (2007). Compressive sens-         Modeling high-dimensional dis-
                                                                                           crete data with multi-layer neural
                                               ing. IEEE Signal Processing Maga-           networks. In NIPS.
Bahmani, B., B. Moseley, A. Vattani,           zine.
   R. Kumar, and S. Vassilvitskii (2012).
   Scalable k-Means++. In VLDB.                                                         Bengio, Y., O. Delalleau, N. Roux,
                                            Barzilai, J. and J. Borwein (1988). Two        J. Paiement, P. Vincent, and
Bakker, B. and T. Heskes (2003). Task          point step size gradient methods.           M. Ouimet (2004). Learning eigen-
   Clustering and Gating for Bayesian          IMA J. of Numerical Analysis 8, 141–        functions links spectral embedding
   Multitask Learning. J. of Machine           148.                                        and kernel PCA. Neural Computa-
   Learning Research 4, 83–99.                                                             tion 16, 2197–2219.
                                            Basu, S., T. Choudhury, B. Clarkson,
Baldi, P. and Y. Chauvin (1994).               and A. Pentland (2001). Learn- Bengio, Y. and P. Frasconi (1995). Dif-
   Smooth online learning algorithms           ing human interactions with              fusion of context and credit infor-
   for hidden Markov models. Neural            the inﬂuence model.         Techni-      mation in markovian models. J. of
   Computation 6, 305–316.                     cal Report 539, MIT Media Lab.           AI Research 3, 249–270.
                                               ftp://whitechapel.media.mit.edu/pub/tech-
Balding, D. (2006). A tutorial on sta-         reports/TR-539-ABSTRACT.html.         Bengio, Y. and P. Frasconi (1996).
   tistical methods for population as-                                                  Input/output HMMs for sequence
   sociation studies. Nature Reviews        Baum, L. E., T. Petrie, G. Soules, and      processing. IEEE Trans. on Neural
   Genetics 7, 81–91.                          N. Weiss (1970). A maximization          Networks 7 (5), 1231–1249.
BIBLIOGRAPHY                                                                                                               1017


Bengio, Y., P. Lamblin, D. Popovici,        Bhattacharya, A. and D. B. Dunson           Bishop, C. M. (1995). Neural Networks
   and H. Larochelle (2007). Greedy           (2011). Simplex factor models for            for Pattern Recognition. Clarendon
   layer-wise training of deep net-           multivariate unordered categorical           Press.
   works. In NIPS.                            data. J. of the Am. Stat. Assoc.. To
                                              appear.                                   Bishop, Y., S. Fienberg, and P. Holland
Berchtold, A. (1999). The double chain                                                     (1975). Discrete Multivariate Analy-
   markov model. Comm. Stat. Theor.         Bickel, P. and E. Levina (2004). Some          sis: Theory and Practice. MIT Press.
   Methods 28, 2569–2589.                      theory for Fisher’s linear discrimi-
                                               nant function, "Naive Bayes", and        Bistarelli, S., U. Montanari, and
Berger, J. (1985). Bayesian salesman-          some alternatives when there are            F. Rossi (1997). Semiring-based
   ship. In P. K. Goel and A. Zellner          many more variables than obser-             constraint satisfaction and opti-
   (Eds.), Bayesian Inference and De-          vations. Bernoulli 10, 989–1010.            mization. J. of the ACM 44(2), 201–
   cision Techniques with Applications:                                                    236.
                                            Bickson, D. (2009). Gaussian Belief
   Essays in Honor of Bruno deFinetti.         Propagation: Theory and Applica-         Blake, A., P. Kohli, and C. Rother (Eds.)
   North-Holland.                              tion. Ph.D. thesis, Hebrew Univer-          (2011). Advances in Markov Random
                                               sity of Jerusalem.                          Fields for Vision and Image Process-
Berger, J. and R. Wolpert (1988). The                                                      ing. MIT Press.
   Likelihood Principle. The Institute      Bilmes, J. (2000). Dynamic Bayesian
   of Mathematical Statistics. 2nd edi-        multinets. In UAI.                       Blei, D. and J. Lafferty (2006a). Corre-
   tion.                                                                                   lated topic models. In NIPS.
                                            Bilmes, J. A. (2001). Graphical models
Berkhin, P. (2006).      A survey of           and automatic speech recognition.        Blei, D. and J. Lafferty (2006b). Dy-
   clustering datamining techniques.           Technical Report UWEETR-2001-               namic topic models. In Intl. Conf.
   In J. Kogan, C. Nicholas, and               0005, Univ. Washington, Dept. of            on Machine Learning, pp. 113–120.
   M. Teboulle (Eds.), Grouping Multi-         Elec. Eng.
   dimensional Data: Recent Advances                                                    Blei, D. and J. Lafferty (2007). A Corre-
                                            Binder, J., D. Koller, S. J. Russell, and      lated Topic Model of "Science". An-
   in Clustering, pp. 25–71. Springer.         K. Kanazawa (1997). Adaptive prob-          nals of Applied Stat. 1(1), 17–35.
                                               abilistic networks with hidden vari-
Bernardo, J. and A. Smith (1994).              ables. Machine Learning 29, 213–
   Bayesian Theory. John Wiley.                                                         Blei, D. and J. McAuliffe (2010, March).
                                               244.                                        Supervised topic models. Technical
                                                                                           report, Princeton.
Berrou, C., A. Glavieux, and P. Thiti-      Binder, J., K. Murphy, and S. Russell
   majashima (1993). Near Shannon              (1997). Space-efficient inference in     Blei, D., A. Ng, and M. Jordan (2003).
   limit error-correcting coding and           dynamic probabilistic networks. In          Latent dirichlet allocation. J. of
   decoding: Turbo codes. Proc. IEEE           Intl. Joint Conf. on AI.                    Machine Learning Research 3, 993–
   Intl. Comm. Conf..                                                                      1022.
                                            Birnbaum, A. (1962). On the founda-
Berry, D. and Y. Hochberg (1999).              tions of statistical infernece. J. of    Blumensath, T. and M. Davies (2007).
   Bayesian perspectives on multiple           the Am. Stat. Assoc. 57, 269–326.           On the difference between Orthog-
   comparisons. J. Statist. Planning                                                       onal Matching Pursuit and Orthog-
   and Inference 82, 215–227.               Bishop, C. (1999). Bayesian PCA. In            onal Least Squares. Technical re-
                                               NIPS.                                       port, U. Edinburgh.
Bertele, U. and F. Brioschi (1972). Non-    Bishop, C. (2006a). Pattern recognition
   serial Dynamic Programming. Aca-                                                     Bo, L., C. Sminchisescu, A. Kanaujia,
                                               and machine learning. Springer.             and D. Metaxas (2008). Fast Algo-
   demic Press.
                                                                                           rithms for Large Scale Conditional
                                            Bishop, C. (2006b). Pattern recognition        3D Prediction. In CVPR.
Bertsekas, D. (1997). Parallel and Dis-        and machine learning. Springer.
   tribution Computation: Numerical                                                     Bohning, D. (1992). Multinomial logis-
   Methods. Athena Scientiﬁc.               Bishop, C. and G. James (1993). Analy-        tic regression algorithm. Annals of
                                               sis of multiphase ﬂows using dual-         the Inst. of Statistical Math. 44, 197–
Bertsekas, D. (1999). Nonlinear Pro-           energy densitometry and neural             200.
   gramming (Second ed.). Athena               networks. Nuclear Instruments and
   Scientiﬁc.                                  Methods in Physics Research A327,        Bollen, K. (1989). Structural Equation
                                               580–593.                                    Models with Latent Variables. John
Bertsekas, D. and J. Tsitsiklis (2008).                                                    Wiley & Sons.
   Introduction to Probability. Athena      Bishop, C. and M. Svensén (2003).
   Scientiﬁc. 2nd Edition.                     Bayesian hierarchical mixtures of        Bordes, A., L. Bottou, and P. Galli-
                                               experts. In UAI.                            nari (2009, July). Sgd-qn: Care-
Besag, J. (1975). Statistical analysis of                                                  ful quasi-newton stochastic gradi-
                                            Bishop, C. and M. Tipping (2000).
   non-lattice data. The Statistician 24,      Variational relevance vector ma-            ent descent. J. of Machine Learning
   179–196.                                    chines. In UAI.                             Research 10, 1737–1754.

Bhatnagar, N., C. Bogdanov, and             Bishop, C. M. (1994). Mixture density       Bordes, A., L. Bottou, P. Gallinari,
  E. Mossel (2010). The compu-                 networks. Technical Report NCRG             J. Chang, and S. A. Smith (2010). Er-
  tational complexity of estimating            4288, Neural Computing Research             ratum: SGDQN is Less Careful than
  convergence time. Technical re-              Group, Department of Computer               Expected. J. of Machine Learning
  port, .                                      Science, Aston University.                  Research 11, 2229–2240.
1018                                                                                                      BIBLIOGRAPHY


Boser, B. E., I. M. Guyon, and V. N.      Brand, M. (1999). Structure learning        Brown, P., M. Vannucci, and T. Fearn
   Vapnik (1992). A training algorithm       in conditional probability models           (1998). Multivariate Bayesian vari-
   for optimal margin classiﬁers. In         via an entropic prior and param-            able selection and prediction. J. of
   Proc. of the Workshop on Computa-         eter extinction. Neural Computa-            the Royal Statistical Society B 60(3),
   tional Learning Theory.                   tion 11, 1155–1182.                         627–641.
Bottcher, S. G. and C. Dethlefsen         Braun, M. and J. McAuliffe (2010). Vari-    Bruckstein, A., D. Donoho, and
   (2003). deal: A package for learning      ational Inference for Large-Scale           M. Elad (2009). From sparse so-
   bayesian networks. J. of Statistical      Models of Discrete Choice. J. of the        lutions of systems of equations to
   Software 8(20).                           Am. Stat. Assoc. 105(489), 324–335.         sparse modeling of signals and im-
                                                                                         ages. SIAM Review 51(1), 34–81.
Bottolo, L. and S. Richardson (2010).     Breiman, L. (1996). Bagging predictors.
   Evolutionary stochastic search.           Machine Learning 24, 123–140.            Bryson, A. and Y.-C. Ho (1969). Applied
   Bayesian Analysis 5(3), 583–618.                                                      optimal control: optimization, esti-
                                          Breiman, L. (1998). Arcing classiﬁers.         mation, and control. Blaisdell Pub-
Bottou, L. (1998). Online algorithms                                                     lishing Company.
                                             Annals of Statistics 26, 801–849.
   and stochastic approximations. In
   D. Saad (Ed.), Online Learning and                                                 Buhlmann, P. and T. Hothorn (2007).
                                          Breiman, L. (2001a). Random forests.          Boosting Algorithms: Regulariza-
   Neural Networks. Cambridge.               Machine Learning 45(1), 5–32.              tion, Prediction and Model Fitting.
Bottou, L. (2007). Learning with large                                                  Statistical Science 22(4), 477–505.
   datasets (nips tutorial).              Breiman, L. (2001b). Statistical mod-
                                             eling: the two cultures. Statistical     Buhlmann, P. and S. van de
Bottou, L., O. Chapelle, D. DeCoste,         Science 16(3), 199–231.                    Geer (2011). Statistics for High-
   and J. Weston (Eds.) (2007). Large                                                   Dimensional Data: Methodology,
   Scale Kernel Machines. MIT Press.      Breiman, L., J. Friedman, and R. Ol-          Theory and Applications. Springer.
                                             shen (1984). Classiﬁcation and re-
Bouchard, G. (2007). Efficient bounds        gression trees. Wadsworth.               Buhlmann, P. and B. Yu (2003). Boost-
  for the softmax and applications                                                      ing with the L2 loss: Regression
  to approximate inference in hybrid      Breslow, N. E. and D. G. Clayton (1993).      and classiﬁcation. J. of the Am. Stat.
  models. In NIPS 2007 Workshop              Approximate inference in general-          Assoc. 98(462), 324–339.
  on Approximate Inference in Hybrid         ized linear mixed models. J. of the
                                             Am. Stat. Assoc. 88(421), 9–25.          Buhlmann, P. and B. Yu (2006). Sparse
  Models.                                                                               boosting. J. of Machine Learning
Bouchard-Cote, A. and M. Jordan           Briers, M., A. Doucet, and S. Maskel          Research 7, 1001–1024.
  (2009). Optimization of structured         (2010). Smoothing algorithms for
  mean ﬁeld objectives. In UAI.              state-space models.          Annals of   Bui, H., S. Venkatesh, and G. West
                                             the Institute of Statistical Mathemat-      (2002). Policy Recognition in the
Bowman, A. and A. Azzalini (1997). Ap-       ics 62(1), 61–89.                           Abstract Hidden Markov Model. J.
                                                                                         of AI Research 17, 451–499.
  plied Smoothing Techniques for Data
  Analysis. Oxford.                       Brochu, E., M. Cora, and N. de Fre-         Buntine, W. (2002). Variational Exten-
                                             itas (2009, November). A tutorial          sions to EM and Multinomial PCA.
Box, G. and N. Draper (1987). Empir-         on Bayesian optimization of expen-         In Intl. Conf. on Machine Learning.
   ical Model-Building and Response          sive cost functions, with applica-
   Surfaces. Wiley.                          tion to active user modeling and         Buntine, W. and A. Jakulin (2004). Ap-
                                             hierarchical reinforcement learn-          plying Discrete PCA in Data Analy-
Box, G. and G. Tiao (1973). Bayesian         ing. Technical Report TR-2009-23,          sis. In UAI.
                                             Department of Computer Science,
   inference in statistical analysis.        University of British Columbia.
   Addison-Wesley.                                                                    Buntine, W. and A. Jakulin (2006). Dis-
                                                                                        crete Component Analysis. In Sub-
Boyd, S. and L. Vandenberghe (2004).      Brooks, S. and G. Roberts (1998).             space, Latent Structure and Feature
   Convex optimization. Cambridge.           Assessing convergence of Markov            Selection: Statistical and Optimiza-
                                             Chain Monte Carlo algorithms.              tion Perspectives Workshop.
Boyen, X. and D. Koller (1998).              Statistics and Computing 8, 319–
   Tractable inference for complex           335.                                     Buntine, W. and A. Weigend (1991).
   stochastic processes. In UAI.                                                        Bayesian backpropagation. Com-
                                          Brown, L., T. Cai, and A. DasGupta            plex Systems 5, 603–643.
Boykov, Y., O. Veksler, and R. Zabih         (2001). Interval estimation for a bi-
   (2001). Fast approximate energy           nomial proportion. Statistical Sci-      Burges, C. J., T. Shaked, E. Renshaw,
   minimization via graph cuts. IEEE         ence 16(2), 101–133.                        A. Lazier, M. Deeds, N. Hamilton,
   Trans. on Pattern Analysis and Ma-                                                    and G. Hullender (2005). Learning
   chine Intelligence 23(11).             Brown, M. P., R. Hughey, A. Krogh, I. S.       to rank using gradient descent. In
                                             Mian, K. Sjölander, and D. Haus-            Intl. Conf. on Machine Learning, pp.
Brand, M. (1996). Coupled hidden             sler (1993). Using dirichlet mixtures       89–96.
   Markov models for modeling inter-         priors to derive hidden Markov
   acting processes. Technical Report        models for protein families. In          Burkard, R., M. Dell’Amico, and
   405, MIT Lab for Perceptual Com-          Intl. Conf. on Intelligent Systems for      S. Martello (2009). Assignment
   puting.                                   Molecular Biology, pp. 47–55.               Problems. SIAM.
BIBLIOGRAPHY                                                                                                                1019


Byran, K. and T. Leise (2006). The         Caron, F. and A. Doucet (2008).             Cesa-Bianchi, N. and G. Lugosi (2006).
   25,000,000,000 Eigenvector: The            Sparse Bayesian nonparametric re-           Prediction, learning, and games.
   Linear Algebra behind Google.              gression. In Intl. Conf. on Machine         Cambridge University Press.
   SIAM Review 48(3).                         Learning.
                                                                                       Cevher, V. (2009). Learning with com-
Calvetti, D. and E. Somersalo (2007).      Carreira-Perpinan, M. and C. Williams          pressible priors. In NIPS.
   Introduction to Bayesian Scientiﬁc         (2003). An isotropic gaussian mix-
   Computing. Springer.                       ture can have more modes than            Chai, K. M. A. (2010). Multi-task learn-
                                              components.      Technical Report          ing with Gaussian processes. Ph.D.
Candes, E., J. Romberg, and T. Tao            EDI-INF-RR-0185, School of Infor-          thesis, U. Edinburgh.
  (2006). Robust uncertainty prin-            matics, U. Edinburgh.
  ciples: Exact signal reconstruction                                                  Chang, H., Y. Weiss, and W. Freeman
  from highly incomplete frequency         Carter, C. and R. Kohn (1994). On             (2009). Informative Sensing. Tech-
  information. IEEE. Trans. Inform.           Gibbs sampling for state space             nical report, Hebrew U. Submitted
  Theory 52(2), 489–509.                      models. Biometrika 81(3), 541–553.         to IEEE Transactions on Info. The-
                                                                                         ory.
Candes, E. and M. Wakin (2008,             Carterette, B., P. Bennett, D. Chicker-
  March). An introduction to com-             ing, and S. Dumais (2008). Here          Chang, J. and D. Blei (2010). Hierar-
  pressive sampling. IEEE Signal Pro-         or There: Preference Judgments for         chical relational models for docu-
  cessing Magazine 21.                        Relevance. In Proc. ECIR.                  ment networks. The Annals of Ap-
                                                                                         plied Statistics 4(1), 124–150.
                                           Caruana, R. (1998). A dozen tricks with
Candes, E., M. Wakin, and S. Boyd             multitask learning. In G. Orr and
  (2008).   Enhancing sparsity by                                                      Chang, J., J. Boyd-Graber, S. Gerrish,
                                              K.-R. Mueller (Eds.), Neural Net-          C. Wang, and D. Blei (2009). Read-
  reweighted l1 minimization. J. of           works: Tricks of the Trade. Springer-
  Fourier Analysis and Applications 1,                                                   ing tea leaves: How humans inter-
                                             Verlag.                                     pret topic models. In NIPS.
  877–905.
                                           Caruana, R. and A. Niculescu-Mizil          Chapelle, O. and L. Li (2011). An empir-
Cannings, C., E. A. Thompson, and             (2006). An empirical comparison            ical evaluation of Thompson sam-
  M. H. Skolnick (1978). Probabil-            of supervised learning algorithms.         pling. In NIPS.
  ity functions in complex pedigrees.         In Intl. Conf. on Machine Learning.
  Advances in Applied Probability 10,                                                  Chartrand, R. and W. Yin (2008). It-
  26–61.                                   Carvahlo, C., N. Polson, and J. Scott         eratively reweighted algorithms for
                                              (2010). The horseshoe estimator for        compressive sensing. In Intl. Conf.
Canny, J. (2004). Gap: a factor model         sparse signals. Biometrika 97 (2),
  for discrete data. In Proc. An-             465.                                       on Acoustics, Speech and Signal
  nual Intl. ACM SIGIR Conference,                                                       Proc.
  pp. 122–129.                             Carvahlo, L. and C. Lawrence (2007).
                                              Centroid estimation in discrete          Chechik, G., A. G. N. Tishby, and
                                              high-dimensional spaces with ap-           Y. Weiss (2005). Information bot-
Cao, Z., T. Qin, T.-Y. Liu, M.-F. Tsai,                                                  tleneck for gaussian variables. J.
  and H. Li (2007). Learning to rank:         plications in biology.  Proc. of
  From pairwise approach to listwise          the National Academy of Science,           of Machine Learning Research 6,
  approach. In Intl. Conf. on Machine         USA 105(4).                                165âĂŞ188.
  Learning, pp. 129âĂŞ136.                                                           Cheeseman, P., J. Kelly, M. Self, J. Stutz,
                                           Carvalho, C. M. and M. West (2007).
                                              Dynamic matrix-variate graphical           W. Taylor, and D. Freeman (1988).
Cappe, O. (2010). Online Expectation                                                     Autoclass: A Bayesian classiﬁcation
  Maximisation. In K. Mengersen,              models. Bayesian Analysis 2(1), 69–
                                              98.                                        system. In Proc. of the Fifth Intl.
  M. Titterington, and C. Robert
  (Eds.), Mixtures.                                                                      Workshop on Machine Learning.
                                           Casella, G. and R. Berger (2002). Statis-
Cappe, O. and E. Mouline (2009, June).        tical inference. Duxbury. 2nd edi-       Cheeseman, P. and J. Stutz (1996).
  Online EM Algorithm for Latent              tion.                                      Bayesian classiﬁcation (autoclass):
                                                                                         Theory and results. In Fayyad,
  Data Models. J. of Royal Stat. Soc.      Castro, M., M. Coates, and R. D.              Pratetsky-Shapiro, Smyth, and
  Series B 71(3), 593–613.                    Nowak (2004). Likelihood based hi-         Uthurasamy (Eds.), Advances in
                                              erarchical clustering. IEEE Trans. in      Knowledge Discovery and Data Min-
Cappe, O., E. Moulines, and T. Ryden          Signal Processing 52(8), 230.              ing. MIT Press.
  (2005). Inference in Hidden Markov
  Models. Springer.                        Celeux, G. and J. Diebolt (1985).           Chen, B., K. Swersky, B. Marlin, and
                                              The SEM algorithm: A probabilis-           N. de Freitas (2010). Sparsity priors
Carbonetto, P. (2003). Unsupervised           tic teacher derive from the EM             and boosting for learning localized
   statistical models for general object      algorithm for the mixture prob-            distributed feature representations.
   recognition. Master’s thesis, Uni-         lem. Computational Statistics Quar-        Technical report, UBC.
   versity of British Columbia.               terly 2, 73–82.
                                                                                       Chen, B., J.-A. Ting, B. Marlin, and
Carlin, B. P. and T. A. Louis (1996).      Cemgil, A. T. (2001). A technique for         N. de Freitas (2010). Deep learning
   Bayes and Empirical Bayes Methods         painless derivation of kalman ﬁlter-        of invariant spatio-temporal fea-
   for Data Analysis. Chapman and            ing recursions. Technical report, U.        tures from video. In NIPS Workshop
   Hall.                                     Nijmegen.                                   on Deep Learning.
1020                                                                                                       BIBLIOGRAPHY


Chen, M., D. Carlson, A. Zaas,              Chipman, H., E. George, and R. Mc-         Cleveland, W. and S. Devlin (1988).
  C. Woods, G. Ginsburg, A. Hero,              Culloch (2006). Bayesian Ensemble          Locally-weighted regression: An
  J. Lucas, and L. Carin (2011,                Learning. In NIPS.                         approach to regression analysis by
  March).     The Bayesian Elastic                                                        local ﬁtting. J. of the Am. Stat. As-
  Net: Classifying Multi-Task Gene-         Chipman, H., E. George, and R. Mc-            soc. 83(403), 596–610.
  Expression Data.       IEEE Trans.           Culloch (2010). BART: Bayesian ad-
  Biomed. Eng. 58(3), 468–79.                  ditive regression trees. Ann. Appl.     Collins, M. (2002).       Discrimina-
                                               Stat. 4(1), 266–298.                       tive Training Methods for Hidden
Chen, R. and S. Liu (2000). Mixture                                                       Markov Models: Theory and Exper-
  Kalman ﬁlters. J. Royal Stat. Soc. B.     Choi, M., V. Tan, A. Anandkumar, and          iments with Perceptron Algorithms.
                                              A. Willsky (2011). Learning latent          In EMNLP.
Chen, S. and J. Goodman (1996). An            tree graphical models. J. of Ma-
  empirical study of smoothing tech-
  niques for language modeling. In            chine Learning Research.                 Collins, M., S. Dasgupta, and R. E.
  Proc. 34th ACL, pp. 310–318.                                                            Schapire (2002). A generalization
                                            Choi, M. J. (2011). Trees and Be-             of principal components analysis
Chen, S. and J. Goodman (1998).               yond: Exploiting and Improving              to the exponential family. In NIPS-
  An empirical study of smoothing             Tree-Structured Graphical Models.           14.
  techniques for language modeling.           Ph.D. thesis, MIT.
  Technical Report TR-10-98, Dept.                                                     Collins, M. and N. Duffy (2002). Con-
  Comp. Sci., Harvard.                      Choset, H. and K. Nagatani (2001).            volution kernels for natural lan-
                                              Topological simultaneous localiza-          guage. In NIPS.
Chen, S. and J. Wigger (1995, July). Fast     tion and mapping (SLAM): toward
  orthogonal least squares algorithm          exact localization without explicit
  for efficient subset model selection.                                                Collobert, R. and J. Weston (2008).
                                              localization. IEEE Trans. Robotics          A Uniﬁed Architecture for Natural
  IEEE Trans. Signal Processing 3(7),         and Automation 17 (2).
  1713–1715.                                                                              Language Processing: Deep Neural
                                                                                          Networks with Multitask Learning.
                                            Chow, C. K. and C. N. Liu (1968).             In Intl. Conf. on Machine Learning.
Chen, S. S., D. L. Donoho, and M. A.          Approximating discrete probabil-
  Saunders (1998). Atomic decompo-            ity distributions with dependence
  sition by basis pursuit. SIAM Jour-         trees. IEEE Trans. on Info. Theory 14,   Combettes, P. and V. Wajs (2005). Sig-
  nal on Scientiﬁc Computing 20(1),           462–67.                                    nal recovery by proximal forward-
  33–61.                                                                                 backward splitting. SIAM J. Multi-
                                            Christensen, O., G. Roberts, and             scale Model. Simul. 4(4), 1168–1200.
Chen, X., S. Kim, Q. Lin, J. G.
  Carbonell, and E. P. Xing (2010).           M. SkÃűld (2006). Robust Markov
  Graph-Structured Multi-task Re-             chain Monte Carlo methods for            Cook, J. (2005). Exact Calculation
  gression and an Efficient Optimiza-         spatial generalized linear mixed           of Beta Inequalities. Technical re-
  tion Method for General Fused               models. J. of Computational and            port, M. D. Anderson Cancer Cen-
  Lasso. Technical report, CMU.               Graphical Statistics 15, 1–17.             ter, Dept. Biostatistics.

Chib, S. (1995). Marginal likelihood        Chung, F. (1997). Spectral Graph The-      Cooper, G. and E. Herskovits (1992).
   from the Gibbs output. J. of the           ory. AMS.                                  A Bayesian method for the induc-
   Am. Stat. Assoc. 90, 1313–1321.                                                       tion of probabilistic networks from
                                            Cimiano, P., A. Schultz, S. Sizov,           data. Machine Learning 9, 309–347.
Chickering, D. (1996).      Learning           P. Sorg, and S. Staab (2009). Ex-
   Bayesian networks is NP-Complete.           plicit versus latent concept models
   In AI/Stats V.                                                                      Cooper, G. and C. Yoo (1999). Causal
                                               for cross-language information re-        discovery from a mixture of exper-
                                               trieval. In Intl. Joint Conf. on AI.      imental and observational data. In
Chickering, D. and D. Heckerman
   (1997). Efficient approximations for                                                  UAI.
   the marginal likelihood of incom-        Cipra, B. (2000). The Ising Model Is
   plete data given a Bayesian net-            NP-Complete. SIAM News 33(6).           Cover, T. and P. Hart (1967). Near-
   work. Machine Learning 29, 181–                                                       est neighbor pattern classiﬁcation.
                                            Ciresan, D. C., U. Meier, L. M.
   212.                                        Gambardella, and J. Schmidhuber           IEEE Trans. Inform. Theory 13(1), 21–
                                               (2010). Deep big simple neural nets       27.
Chickering, D. M. (2002). Optimal              for handwritten digit recognition.
   structure identiﬁcation with greedy                                                 Cover, T. M. and J. A. Thomas
   search. Journal of Machine Learn-           Neural Computation 22(12), 3207–
                                               3220.                                     (1991). Elements of Information The-
   ing Research 3, 507–554.                                                              ory. John Wiley.
Chipman, H., E. George, and R. Mc-          Clarke, B. (2003). Bayes model av-
   Culloch (1998). Bayesian CART               eraging and stacking when model         Cover, T. M. and J. A. Thomas
                                               approximation error cannot be ig-         (2006). Elements of Information
   model search. J. of the Am. Stat.
   Assoc. 93, 935–960.                         nored. J. of Machine Learning Re-         Theory. John Wiley. 2nd edition.
                                               search, 683–712.
Chipman, H., E. George, and R. Mc-                                                     Cowles, M. and B. Carlin (1996).
   Culloch (2001). The practical imple-     Clarke, B., E. Fokoue, and H. H. Zhang       Markov chain monte carlo conver-
   mentation of Bayesian Model Se-             (2009). Principles and Theory for         gence diagnostics: A comparative
   lection. Model Selection. IMS Lec-          Data Mining and Machine Learn-            review. J. of the Am. Stat. Assoc. 91,
   ture Notes.                                 ing. Springer.                            883–904.
BIBLIOGRAPHY                                                                                                               1021


Crisan, D., P. D. Moral, and T. Lyons        Dawid, A. P. and S. L. Lauritzen            Dempster, A. P., N. M. Laird, and D. B.
   (1999).    Discrete ﬁltering using          (1993). Hyper-markov laws in the            Rubin (1977). Maximum likelihood
   branching and interacting particle          statistical analysis of decompos-           from incomplete data via the EM
   systems. Markov Processes and Re-           able graphical models. The Annals           algorithm. J. of the Royal Statistical
   lated Fields 5(3), 293–318.                 of Statistics 3, 1272–1317.                 Society, Series B 34, 1–38.

Cui, Y., X. Z. Fern, and J. G. Dy            de Freitas, N., R. Dearden, F. Hut-         Denison, D., C. Holmes, B. Mallick,
   (2010). Learning multiple nonre-             ter, R. Morales-Menendez, J. Mutch,        and A. Smith (2002). Bayesian
   dundant clusterings. ACM Transac-            and D. Poole (2004). Diagnosis by          methods for nonlinear classiﬁcation
   tions on Knowledge Discovery from            a waiter and a mars explorer. Proc.        and regression. Wiley.
   Data 4(3).                                   IEEE 92(3).
                                                                                         Denison, D., B. Mallick, and A. Smith
Cukier, K. (2010, February). Data, data      de Freitas, N., M. Niranjan, and A. Gee       (1998). A Bayesian CART algorithm.
  everywhere.                                   (2000). Hierarchical Bayesian mod-         Biometrika 85, 363–377.
                                                els for regularisation in sequential
                                                learning. Neural Computation 12(4),      Desjardins, G. and Y. Bengio (2008).
Dagum, P. and M. Luby (1993). Ap-               955–993.
  proximating probabilistic inference                                                      Empirical evaluation of convolu-
  in Bayesian belief networks is NP-                                                       tional RBMs for vision. Technical
  hard. Artiﬁcial Intelligence 60, 141–      Dechter, R. (1996). Bucket elimination:       Report 1327, U. Montreal.
  153.                                         a unifying framework for proba-
                                               bilistic inference. In UAI.               Dey, D., S. Ghosh, and B. Mallick (Eds.)
Dahl, J., L. Vandenberghe, and V. Roy-                                                     (2000). Generalized Linear Models:
                                             Dechter, R. (2003). Constraint Process-       A Bayesian Perspective. Chapman &
  chowdhury (2008, August). Co-                ing. Morgan Kaufmann.
  variance selection for non-chordal                                                       Hall/CRC Biostatistics Series.
  graphs via chordal embedding.
                                             Decoste, D. and B. Schoelkopf (2002).       Diaconis, P., S. Holmes, and R. Mont-
  Optimization Methods and Soft-               Training invariant support vector
  ware 23(4), 501–502.                                                                      gomery (2007). Dynamical Bias in
                                               machines. Machine learnng 41, 161–           the Coin Toss. SIAM Review 49(2),
                                               190.                                         211–235.
Dahlhaus, R. and M. Eichler (2000).
  Causality and graphical models for         Deerwester, S., S. Dumais, G. Fur-
  time series. In P. Green, N. Hjort,                                                    Diaconis, P. and D. Ylvisaker (1985).
                                               nas, T. Landauer, and R. Harshman            Quantifying prior opinion.     In
  and S. Richardson (Eds.), Highly             (1990). Indexing by latent semantic
  structured stochastic systems. Ox-                                                        Bayesian Statistics 2.
                                               analysis. J. of the American Society
  ford University Press.                       for Information Science 41(6), 391–       Dietterich, T. G. and G. Bakiri (1995).
                                               407.                                         Solving multiclass learning prob-
Dallal, S. and W. Hall (1983). Approxi-
   mating priors by mixtures of natu-                                                       lems via ECOCs. J. of AI Research 2,
                                             DeGroot, M. (1970). Optimal Statistical        263–286.
   ral conjugate priors. J. of Royal Stat.     Decisions. McGraw-Hill.
   Soc. Series B 45, 278–286.
                                                                                         Diggle, P. and P. Ribeiro (2007). Model-
                                             Deisenroth, M., C. Rasmussen, and              based Geostatistics. Springer.
Darwiche, A. (2009). Modeling and               J. Peters (2009). Gaussian Process
  Reasoning with Bayesian Networks.             Dynamic Programming. Neurocom-
  Cambridge.                                    puting 72(7), 1508–1524.                 Ding, Y. and R. Harrison (2010). A
                                                                                            sparse multinomial probit model
                                             Dellaportas, P., P. Giudici, and               for classiﬁcation. Pattern Analysis
Daume, H. (2007a). Fast search for                                                          and Applications, 1–9.
  Dirichlet process mixture models.             G. Roberts (2003). Bayesian infer-
  In AI/Statistics.                             ence for nondecomposable graphi-
                                                cal gaussian models. Sankhya, Ser.       Dobra, A. (2009). Dependency net-
                                                A 65, 43–55.                               works for genome-wide data. Tech-
Daume, H. (2007b). Frustratingly easy                                                      nical report, U. Washington.
  domain adaptation. In Proc. the As-
  soc. for Comp. Ling.                       Dellaportas, P. and A. F. M. Smith
                                                (1993). Bayesian Inference for Gen-      Dobra, A. and H. Massam (2010). The
                                                eralized Linear and Proportional           mode oriented stochastic search
Dawid, A. P. (1992). Applications of a          Hazards Models via Gibbs Sam-              (MOSS) algorithm for log-linear
  general propagation algorithm for             pling.     J. of the Royal Statisti-       models with conjugate priors. Sta-
  probabilistic expert systems. Statis-         cal Society. Series C (Applied Statis-     tistical Methodology 7, 240–253.
  tics and Computing 2, 25–36.                  tics) 42(3), 443–459.
                                                                                         Domingos, P. and D. Lowd (2009).
Dawid, A. P. (2002). Inﬂuence dia-           Delyon, B., M. Lavielle, and                  Markov Logic: An Interface Layer for
  grams for causal modelling and in-            E. Moulines (1999). Convergence of         AI. Morgan & Claypool.
  ference. Intl. Stat. Review 70, 161–          a stochastic approximation version
  189. Corrections p437.                        of the EM algorithm. Annals of           Domingos, P. and M. Pazzani (1997).
                                                Statistics 27 (1), 94–128.                 On the optimality of the simple
Dawid, A. P. (2010). Beware of the DAG!                                                    bayesian classiﬁer under zero-one
  J. of Machine Learning Research 6,         Dempster, A. (1972). Covariance selec-        loss. Machine Learning 29, 103–
  59–86.                                       tion. Biometrics 28(1).                     130.
1022                                                                                                          BIBLIOGRAPHY


Domke, J., A. Karapurkar, and Y. Aloi-      Duda, R. O., P. E. Hart, and D. G. Stork      Elad, M. and I. Yavnch (2009). A plu-
  monos (2008). Who killed the di-            (2001). Pattern Classiﬁcation. Wiley           rality of sparse representations is
  rected model? In CVPR.                      Interscience. 2nd edition.                     better than the sparsest one alone.
                                                                                             IEEE Trans. on Info. Theory 55(10),
Doucet, A., N. de Freitas, and N. J. Gor-   Dumais, S. and T. Landauer (1997). A             4701–4714.
  don (2001). Sequential Monte Carlo          solution to Plato’s problem: The
  Methods in Practice. Springer Ver-          latent semantic analysis theory of          Elidan, G. and S. Gould (2008). Learn-
  lag.                                        acquisition, induction and repre-               ing Bounded Treewidth Bayesian
                                              sentation of knowledge. Psycholog-              Networks. J. of Machine Learning
Doucet, A., N. Gordon, and V. Krish-          ical Review 104, 211–240.                       Research, 2699–2731.
  namurthy (2001). Particle Filters for
  State Estimation of Jump Markov           Dunson, D., J. Palomo, and K. Bollen          Elidan, G., N. Lotner, N. Friedman, and
  Linear Systems. IEEE Trans. on Sig-         (2005). Bayesian Structural Equa-               D. Koller (2000). Discovering hid-
  nal Processing 49(3), 613–624.              tion Modeling. Technical Report                 den variables: A structure-based
                                              2005-5, SAMSI.                                  approach. In NIPS.
Dow, J. and J. Endersby (2004). Multi-
  nomial probit and multinomial             Durbin, J. and S. J. Koopman (2001).          Elidan, G., I. McGraw, and D. Koller
  logit: a comparison of choice mod-          Time Series Analysis by State Space             (2006).    Residual belief propa-
  els for voting research. Electoral          Methods. Oxford University Press.               gation: Informed scheduling for
  Studies 23(1), 107–122.                                                                     asynchronous message passing. In
                                            Durbin, R., S. Eddy, A. Krogh, and                UAI.
Drineas, P., A. Frieze, R. Kannan,            G. Mitchison (1998). Biological Se-
   S. Vempala, and V. Vinay (2004).           quence Analysis: Probabilistic Mod-         Elkan, C. (2003). Using the triangle in-
   Clustering large graphs via the sin-                                                      equality to accelerate k-means. In
   gular value decomposition. Ma-             els of Proteins and Nucleic Acids.
                                              Cambridge: Cambridge University                Intl. Conf. on Machine Learning.
   chine Learning 56, 9–33.                   Press.
                                                                                          Elkan, C. (2005). Deriving TF-IDF as
Drugowitsch, J. (2008). Bayesian lin-       Earl, D. and M. Deem (2005). Paral-              a Fisher kernel. In Proc. Intl. Symp.
  ear regression. Technical report, U.         lel tempering: Theory, applications,          on String Processing and Informa-
  Rochester.
                                               and new perspectives. Phys. Chem.             tion Retrieval (SPIRE), pp. 296–301.
Druilhet, P. and J.-M. Marin (2007). In-       Chem. Phys. 7, 3910.
  variant HPD credible sets and MAP                                                       Elkan, C. (2006). Clustering docu-
  estimators. Bayesian Analysis 2(4),       Eaton, D. and K. Murphy (2007). Exact            ments with an exponential fmaily
  681–692.                                     Bayesian structure learning from              approximation of the Dirichlet
                                               uncertain interventions. In AI/S-             compoind multinomial model. In
Duane, S., A. Kennedy, B. Pendle-              tatistics.                                    Intl. Conf. on Machine Learning.
  ton, and D. Roweth (1987). Hy-
  brid Monte Carlo. Physics Letters         Edakunni, N., S. Schaal, and S. Vi-           Ellis, B. and W. H. Wong (2008). Learn-
  B 195(2), 216–222.                           jayakumar (2010). Probabilistic in-            ing causal bayesian network struc-
                                               cremental locally weighted learn-              tures from experimental data. J. of
Duchi, J., S. Gould, and D. Koller             ing using randomly varying coeffi-             the Am. Stat. Assoc. 103(482), 778–
  (2008).     Projected subgradient            cient model. Technical report, USC.            789.
  methods for learning sparse gaus-
  sians. In UAI.                            Edwards, D., G. de Abreu, and                 Engel, Y., S. Mannor, and R. Meir
                                              R. Labouriau (2010). Selecting high-           (2005). Reinforcement Learning
Duchi, J., E. Hazan, and Y. Singer            dimensional mixed graphical mod-
                                              els using minimal AIC or BIC                   with Gaussian Processes. In Intl.
  (2010). Adaptive Subgradient Meth-                                                         Conf. on Machine Learning.
  ods for Online Learning and                 forests. BMC Bioinformatics 11(18).
  Stochastic Optimization. In Proc.                                                       Erhan, D., Y. Bengio, A. Courville, P.-A.
  of the Workshop on Computational          Efron, B. (1986). Why Isn’t Everyone             Manzagol, P. Vincent, and S. Ben-
  Learning Theory.                             a Bayesian? The American Statisti-            gio (2010). Why Does Unsupervised
                                               cian 40(1).                                   Pre-training Help Deep Learning?
Duchi, J., S. Shalev-Shwartz, Y. Singer,                                                     J. of Machine Learning Research 11,
  and T. Chandra (2008). Efficient          Efron, B. (2010). Large-Scale Infer-             625–660.
  projections onto the L1-ball for             ence: Empirical Bayes Methods for
  learning in high dimensions. In              Estimation, Testing, and Prediction.       Erosheva, E., S. Fienberg, and
  Intl. Conf. on Machine Learning.             Cambridge.                                    C. Joutard (2007).      Describing
                                                                                             disability through individual-level
Duchi, J. and Y. Singer (2009). Boost-      Efron, B., I. Johnstone, T. Hastie, and          mixture models for multivariate bi-
  ing with structural sparsity. In Intl.       R. Tibshirani (2004). Least angle re-         nary data. Annals of Applied Statis-
  Conf. on Machine Learning.                   gression. Annals of Statistics 32(2),         tics.
                                               407–499.
Duchi, J., D. Tarlow, G. Elidan, and                                                      Erosheva, E., S. Fienberg, and J. Laf-
  D. Koller (2007). Using combi-            Efron, B. and C. Morris (1975). Data             ferty (2004). Mixed-membership
  natorial optimization within max-            analysis using stein’s estimator and          models of scientiﬁc publications.
  product belief propagation.     In           its generalizations. J. of the Am. Stat.      Proc. of the National Academy of
  NIPS.                                        Assoc. 70(350), 311–319.                      Science, USA 101, 5220–2227.
BIBLIOGRAPHY                                                                                                               1023


Escobar, M. D. and M. West (1995).          Finkel, J. and C. Manning (2009). Hier-     Frey, B. (2003).    Extending factor
   Bayesian density estimation and             archical bayesian domain adapta-            graphs so as to unify directed and
   inference using mixtures. J. of the         tion. In Proc. NAACL, pp. 602–610.          undirected graphical models. In
   Am. Stat. Assoc. 90(430), 577–588.                                                      UAI.
                                            Fischer, B. and J. Schumann (2003).
Ewens, W. (1990). Population genet-            Autobayes: A system for generating       Frey, B. and D. Dueck (2007, Febru-
  ics theory - the past and the fu-            data analysis programs from sta-            ary). Clustering by Passing Mes-
  ture. In S.Lessard (Ed.), Mathemeti-         tistical models. J. Functional Pro-         sages Between Data Points. Sci-
  cal and Statistica Developments of           gramming 13(3), 483–508.                    ence 315, 972âĂŞ976.
  Evolutionary Theory, pp. 177–227.
  Reidel.                                   Fishelson, M. and D. Geiger (2002).         Friedman, J. (1991).     Multivariate
                                               Exact genetic linkage computations          adaptive regression splines. Ann.
                                               for general pedigrees. BMC Bioin-           Statist. 19, 1–67.
Fan, J. and R. Z. Li (2001). Variable se-
   lection via non-concave penalized           formatics 18.
                                                                                        Friedman, J. (1997a). On bias, variance,
   likelihood and its oracle properties.                                                   0-1 loss and the curse of dimen-
   J. of the Am. Stat. Assoc. 96(456),      Fletcher, R. (2005). On the Barzilai-          sionality. J. Data Mining and Knowl-
   1348–1360.                                  Borwein Method. Applied Opti-
                                               mization 96, 235–256.                       edge Discovery 1, 55–77.
Fearnhead, P. (2004). Exact bayesian                                                    Friedman, J. (2001). Greedy function
   curve ﬁtting and signal segmen-          Fokoue, E. (2005). Mixtures of factor          approximation: a gradient boost-
   tation. IEEE Trans. Signal Process-         analyzers: an extension with co-
                                                                                           ing machine. Annals of Statistics 29,
   ing 53, 2160–2166.                          variates. J. Multivariate Analysis 95,      1189–1232.
                                               370–384.
Felzenszwalb, P. and D. Huttenlocher                                                    Friedman, J., T. Hastie, and R. Tibshi-
   (2006). Efficient belief propagation     Forbes, J., T. Huang, K. Kanazawa, and         rani (2000). Additive logistic regres-
   for early vision. Intl. J. Computer         S. Russell (1995). The BATmobile:           sion: a statistical view of boosting.
   Vision 70(1), 41–54.                        Towards a Bayesian automated taxi.          Annals of statistics 28(2), 337–374.
                                               In Intl. Joint Conf. on AI.
Ferrucci, D., E. Brown, J. Chu-Carroll,                                                 Friedman, J., T. Hastie, and R. Tib-
   J. Fan, D. Gondek, A. Kalyanpur,         Forsyth, D. and J. Ponce (2002). Com-          shirani (2008). Sparse inverse co-
   A. Lally, J. W. Murdock, E. N.              puter vision: a modern approach.            variance estimation the graphical
   amd J. Prager, N. Schlaefter, and           Prentice Hall.                              lasso. Biostatistics 9(3), 432–441.
   C. Welty (2010). Building Wat-
   son: An Overview of the DeepQA           Fraley, C. and A. Raftery (2002).           Friedman, J., T. Hastie, and R. Tibshi-
   Project. AI Magazine, 59–79.                Model-based clustering, discrimi-           rani (2010, Februrary). Regulariza-
                                               nant analysis, and density estima-          tion Paths for Generalized Linear
Fienberg, S. (1970). An iterative pro-         tion. J. of the Am. Stat. Assoc. (97),      Models via Coordinate Descent. J.
   cedure for estimation in contin-            611–631.                                    of Statistical Software 33(1).
   gency tables. Annals of Mathemat-
                                                                                        Friedman, N. (1997b).       Learning
   ical Statistics 41(3), 907âĂŞ917.      Fraley, C. and A. Raftery (2007).              Bayesian networks in the presence
                                               Bayesian Regularization for Normal          of missing values and hidden vari-
Figueiredo, M. (2003).        Adaptive         Mixture Estimation and Model-               ables. In UAI.
   sparseness for supervised learn-            Based Clustering. J. of Classiﬁca-
   ing. IEEE Trans. on Pattern Anal-           tion 24, 155–181.                        Friedman, N., D. Geiger, and M. Gold-
   ysis and Machine Intelligence 25(9),                                                    szmidt (1997). Bayesian network
   1150–1159.                               Franc, V., A. Zien, and B. Schoelkopf          classiﬁers. Machine Learning J. 29,
                                               (2011). Support vector machines as          131–163.
Figueiredo, M., R. Nowak, and                  probabilistic models. In Intl. Conf.
   S. Wright (2007). Gradient pro-             on Machine Learning.                     Friedman, N., D. Geiger, and N. Lot-
   jection for sparse reconstruction:                                                      ner (2000). Likelihood computation
   application to compressed sensing        Frank, I. and J. Friedman (1993). A            with value abstraction. In UAI.
   and other inverse problems. IEEE.           statistical view of some chemomet-
   J. on Selected Topics in Signal Pro-        rics regression tools. Technomet-        Friedman, N. and D. Koller (2003). Be-
   cessing.                                    rics 35(2), 109–135.                        ing Bayesian about Network Struc-
                                                                                           ture: A Bayesian Approach to
                                            Fraser, A. (2008). Hidden Markov Mod-          Structure Discovery in Bayesian
Figueiredo, M. A. T. and A. K. Jain                                                        Networks. Machine Learning 50,
   (2002). Unsupervised learning of ﬁ-         els and Dynamical Systems. SIAM
   nite mixture models. IEEE Trans. on         Press.                                      95–126.
   Pattern Analysis and Machine Intel-                                                  Friedman, N., M. Ninion, I. Pe’er, and
   ligence 24(3), 381–396. Matlab code      Freund, Y. and R. R. Schapire (1996).
                                               Experiments with a new boosting             T. Pupko (2002). A Structural EM
   at http://www.lx.it.pt/ mtf/mixture-                                                    Algorithm for Phylogenetic Infer-
   code.zip.                                   algorithm. In Intl. Conf. on Machine        ence. J. Comp. Bio. 9, 331–353.
                                               Learning.
Fine, S., Y. Singer, and N. Tishby                                                      Friedman, N. and Y. Singer (1999). Ef-
   (1998). The hierarchical Hidden          Frey, B. (1998). Graphical Models for          ﬁcient Bayesian parameter estima-
   Markov Model: Analysis and appli-           Machine Learning and Digital Com-           tion in large discrete domains. In
   cations. Machine Learning 32, 41.           munication. MIT Press.                      NIPS-11.
1024                                                                                                         BIBLIOGRAPHY


Fruhwirth-Schnatter, S. (2007). Fi-         Gelman, A., J. Carlin, H. Stern, and        Ghahramani, Z. and G. Hinton (1996b).
   nite Mixture and Markov Switching           D. Rubin (2004). Bayesian data             Parameter estimation for linear dy-
   Models. Springer.                           analysis. Chapman and Hall. 2nd            namical systems. Technical Re-
                                               edition.                                   port CRG-TR-96-2, Dept. Comp.
Fruhwirth-Schnatter, S. and R. Fruh-                                                      Sci., Univ. Toronto.
   wirth (2010). Data Augmentation          Gelman, A. and J. Hill (2007). Data
   and MCMC for Binary and Multi-              analysis using regression and mul-       Ghahramani, Z. and M. Jordan (1997).
   nomial Logit Models. In T. Kneib            tilevel/ hierarchical models. Cam-         Factorial hidden Markov models.
   and G. Tutz (Eds.), Statistical Mod-        bridge.                                    Machine Learning 29, 245–273.
   elling and Regression Structures, pp.
   111–132. Springer.                       Gelman, A. and X.-L. Meng (1998).           Gilks, W. and C. Berzuini (2001).
                                               Simulating normalizing constants:           Following a moving target –
Fu, W. (1998). Penalized regressions:          from importance sampling to                 Monte Carlo infernece for dynamic
   the bridge verus the lasso. J. Com-         bridge sampling to path sampling.           Bayesian models. J. of Royal Stat.
   putational and graphical statistics.        Statisical Science 13, 163–185.             Soc. Series B 63, 127–146.
Fukushima, K. (1975). Cognitron: a          Gelman, A. and T. Raghunathan (2001).       Gilks, W., N. Best, and K. Tan (1995).
   self-organizing multilayered neu-           Using conditional distributions for         Adaptive rejection Metropolis sam-
   ral network. Biological Cybernet-           missing-data imputation. Statistical        pling. Applied Statistics 44, 455–472.
   ics 20(6), 121–136.                         Science.
                                                                                        Gilks, W. and P. Wild (1992). Adaptive
Fung, R. and K. Chang (1989). Weight-       Gelman, A. and D. Rubin (1992). Infer-         rejection sampling for Gibbs sam-
   ing and integrating evidence for            ence from iterative simulation us-          pling. Applied Statistics 41, 337–348.
   stochastic simulation in Bayesian           ing multiple sequences. Statistical
   networks. In UAI.                           Science 7, 457–511.                      Girolami, M., B. Calderhead, and
Gabow, H., Z. Galil, and T. Spencer                                                        S. Chin (2010). Riemannian Man-
                                            Geman, S., E. Bienenstock, and                 ifold Hamiltonian Monte Carlo. J.
  (1984). Efficient implementation            R. Doursat (1992). Neural networks           of Royal Stat. Soc. Series B. To ap-
  of graph algorithms using contrac-          and the bias-variance dilemma.               pear.
  tion. In IEEE Symposium on the              Neural Computing 4, 1–58.
  Foundations of Computer Science.                                                      Girolami, M. and S. Rogers (2005). Hi-
                                            Geman, S. and D. Geman (1984).                 erarchic bayesian models for kernel
Gales, M. (2002). Maximum like-               Stochastic relaxation, Gibbs distri-
   lihood multiple subspace projec-           butions, and the Bayesian restora-           learning. In Intl. Conf. on Machine
   tions for hidden Markov models.            tion of images. IEEE Trans. on Pat-          Learning, pp. 241–248.
   IEEE. Trans. on Speech and Audio           tern Analysis and Machine Intelli-
   Processing 10(2), 37–47.                   gence 6(6).                               Girolami, M. and S. Rogers (2006).
                                                                                           Variational Bayesian multinomial
Gales, M. J. F. (1999). Semi-tied covari-   Geoffrion, A. (1974).   Lagrangian             probit regression with Gaussian
   ance matrices for hidden Markov            relaxation for integer program-              process priors. Neural Comptua-
   models. IEEE Trans. on Speech and          ming. Mathematical Programming               tion 18(8), 1790 – 1817.
   Audio Processing 7 (3), 272–281.           Study 2, 82–114.
                                                                                        Girshick, R., P. Felzenszwalb, and
Gamerman, D. (1997). Efficient sam-         George, E. and D. Foster (2000). Cal-          D. McAllester (2011). Object de-
  pling from the posterior distribu-          ibration and empirical bayes vari-           tection with grammar models. In
  tion in generalized linear mixed                                                         NIPS.
                                              able selection. Biometrika 87 (4),
  models. Statistics and Computing 7,         731–747.
  57–68.                                                                                Gittins, J. (1989). Multi-armed Bandit
                                            Getoor, L. and B. Taskar (Eds.) (2007).        Allocation Indices. Wiley.
Geiger, D. and D. Heckerman (1994).            Introduction to Relational Statistical
   Learning Gaussian networks. In              Learning. MIT Press.                     Giudici, P. and P. Green (1999).
   UAI, Volume 10, pp. 235–243.                                                            Decomposable graphical gaus-
                                            Geyer, C. (1992). Practical markov             sian     model      determination.
Geiger, D. and D. Heckerman (1997).           chain monte carlo. Statistical Sci-          Biometrika 86(4), 785–801.
   A characterization of Dirchlet dis-        ence 7, 473–483.
   tributions through local and global                                                  Givoni, I. E. and B. J. Frey (2009, June).
   independence. Annals of Statis-          Ghahramani, Z. and M. Beal (2000).             A binary variable model for affin-
   tics 25, 1344–1368.                        Variational inference for Bayesian           ity propagation. Neural Computa-
                                              mixtures of factor analysers. In             tion 21(6), 1589–1600.
Gelfand, A. (1996). Model determina-          NIPS-12.
   tion using sampling-based meth-                                                      Globerson, A. and T. Jaakkola (2008).
   ods. In Gilks, Richardson, and           Ghahramani, Z. and M. Beal (2001).             Fixing max-product: Convergent
   Spiegelhalter (Eds.), Markov Chain         Propagation algorithms for varia-            message passing algorithms for
   Monte Carlo in Practice. Chapman           tional Bayesian learning. In NIPS-           MAP LP-relaxations. In NIPS.
   & Hall.                                    13.
                                                                                        Glorot, X. and Y. Bengio (2010, May).
Gelfand, A. and A. Smith (1990).            Ghahramani, Z. and G. Hinton (1996a).          Understanding the difficulty of
   Sampling-based approaches to cal-          The EM algorithm for mixtures of             training deep feedforward neural
   culating marginal densities. J. of the     factor analyzers. Technical report,          networks. In AI/Statistics, Volume 9,
   Am. Stat. Assoc. 85, 385–409.              Dept. of Comp. Sci., Uni. Toronto.           pp. 249–256.
BIBLIOGRAPHY                                                                                                             1025


Gogate, V., W. A. Webb, and P. Domin-      Greenshtein, E. and J. Park (2009). Ap-    Gustafsson, M. (2001).     A proba-
  gos (2010).      Learning efficient         plication of Non Parametric Empir-        bilistic derivation of the partial
  Markov networks. In NIPS.                   ical Bayes Estimation to High Di-         least-squares algorithm. Journal of
                                              mensional Classiﬁcation. J. of Ma-        Chemical Information and Model-
Goldenberg, A., A. X. Zheng, S. E. Fien-      chine Learning Research 10, 1687–         ing 41, 288–294.
   berg, and E. M. Airoldi (2009). A          1704.
   Survey of Statistical Network Mod-                                                 Guyon, I., S. Gunn, M. Nikravesh, and
   els. Foundations and Trends in Ma-      Greig, D., B. Porteous, and A. Seheult       L. Zadeh (Eds.) (2006). Feature Ex-
   chine Learning, 129–233.                   (1989). Exact maximum a posteriori        traction: Foundations and Applica-
                                              estimation for binary images. J. of       tions. Springer.
Golub, G. and C. F. van Loan (1996).          Royal Stat. Soc. Series B 51(2), 271–
   Matrix computations. Johns Hop-            279.                                    Hacker, J. and P. Pierson (2010).
   kins University Press.                                                               Winner-Take-All Politics:    How
                                           Griffin, J. and P. Brown (2007).             Washington Made the Rich Richer–
                                              Bayesian adaptive lassos with non-        and Turned Its Back on the Middle
Gonen, M., W. Johnson, Y. Lu, and             convex penalization. Technical re-        Class. Simon & Schuster.
  P. Westfall (2005, August). The             port, U. Kent.
  Bayesian Two-Sample t Test. The
  American Statistician 59(3), 252–        Griffin, J. and P. Brown (2010). In-       Halevy, A., P. Norvig, and F. Pereira
  257.                                        ference with normal-gamma prior            (2009). The unreasonable effective-
                                              distributions in regression prob-          ness of data. IEEE Intelligent Sys-
                                                                                         tems 24(2), 8–12.
Gonzales, T. (1985). Clustering to            lems. Bayesian Analysis 5(1), 171–
  minimize the maximum interclus-             188.
                                                                                      Hall, P., J. T. Ormerod, and M. P. Wand
  ter distance. Theor. Comp. Sci. 38,                                                    (2011). Theory of Gaussian Varia-
  293–306.                                 Griffiths, T. . and J. Tenenbaum (2009).
                                              Theory-Based Causal Induction.             tional Approximation for a Gener-
                                              Psychological Review 116(4), 661–          alised Linear Mixed Model. Statis-
Gorder, P. F. (2006, Nov/Dec). Neu-           716.                                       tica Sinica 21, 269–389.
  ral networks show new promise for
  machine vision. Computing in sci-                                                   Hamilton, J. (1990). Analysis of time
  ence & engineering 8(6), 4–8.            Griffiths, T. and M. Steyvers (2004).
                                              Finding scientiﬁc topics. Proc. of        series subject to changes in regime.
                                                                                        J. Econometrics 45, 39–70.
                                              the National Academy of Science,
Gordon, N. (1993).         Novel ap-          USA 101, 5228–5235.
  proach to nonlinear/non-Gaussian                                                    Hans, C. (2009). Bayesian Lasso re-
  Bayesian state estimation. IEE Pro-      Griffiths, T., M. Steyvers, D. Blei, and     gression. Biometrika 96(4), 835–
  ceedings (F) 140(2), 107–113.               J. Tenenbaum (2004). Integrating          845.
                                              topics and syntax. In NIPS.
Graepel, T., J. Quinonero-Candela,                                                    Hansen, M. and B. Yu (2001). Model
   T. Borchert, and R. Herbrich            Griffiths, T. and J. Tenenbaum (2001).       selection and the principle of min-
   (2010). Web-Scale Bayesian Click-          Using vocabulary knowledge in             imum description length. J. of the
   Through Rate Prediction for Spon-          bayesian multinomial estimation.          Am. Stat. Assoc..
   sored Search Advertising in Mi-            In NIPS, pp. 1385–1392.
   crosoftâĂŹs Bing Search Engine. In                                               Hara, H. and A. Takimura (2008).
   Intl. Conf. on Machine Learning.        Griffiths, T. and J. Tenenbaum (2005).       A Localization Approach to Im-
                                              Structure and strength in causal          prove Iterative Proportional Scal-
                                              induction. Cognitive Psychology 51,       ing in Gaussian Graphical Models.
Grauman, K. and T. Darrell (2007,             334–384.
   April). The Pyramid Match Kernel:                                                    Communications in Statistics - The-
   Efficient Learning with Sets of Fea-                                                 ory and Method. to appear.
                                           Grimmett, G. and D. Stirzaker (1992).
   tures. J. of Machine Learning Re-          Probability and Random Processes.
   search 8, 725–760.                         Oxford.                                 Hardin, J. and J. Hilbe (2003). Gener-
                                                                                        alized Estimating Equations. Chap-
                                           Guan, Y., J. Dy, D. Niu, and Z. Ghahra-      man and Hall/CRC.
Green, P. (1998). Reversible jump
   Markov chain Monte Carlo compu-           mani (2010). Variational Inference
   tation and Bayesian model deter-          for Nonparametric Multiple Clus-         Harmeling, S. and C. K. I. Williams
                                             tering. In 1st Intl. Workshop on           (2011). Greedy learning of binary
   mination. Biometrika 82, 711–732.                                                    latent trees. IEEE Trans. on Pat-
                                             Discovering, Summarizing and Us-
                                                                                        tern Analysis and Machine Intelli-
                                             ing Multiple Clustering (MultiClust).      gence 33(6), 1087–1097.
Green, P. (2003). Tutorial on trans-
   dimensional MCMC. In P. Green,          Guedon, Y. (2003). Estimating hidden
   N. Hjort, and S. Richardson (Eds.),       semi-markov chains from discrete         Harnard, S. (1990).  The symbol
   Highly Structured Stochastic Systems.     sequences. J. of Computational and         grounding problem. Physica D 42,
   OUP.                                                                                 335–346.
                                             Graphical Statistics 12, 604–639.
Green, P. and B. Silverman (1994). Non-    Guo, Y. (2009). Supervised exponential     Harvey, A. C. (1990). Forecasting, Struc-
   parametric regression and general-        family principal component anal-           tural Time Series Models, and the
   ized linear models. Chapman and           ysis via convex optimization. In           Kalman Filter. Cambridge Univer-
   Hall.                                     NIPS.                                      ity Press.
1026                                                                                                        BIBLIOGRAPHY


Hastie, T., S. Rosset, R. Tibshirani, and   Heckerman, D., C. Meek, and                  Hinton, G. E., P. Dayan, and M. Revow
  J. Zhu (2004). The entire regular-          G. Cooper (1997, February). A                 (1997). Modeling the manifolds of
  ization path for the support vector         Bayesian approach to causal dis-              images of handwritten digits. IEEE
  machine. J. of Machine Learning             covery. Technical Report MSR-TR-              Trans. on Neural Networks 8, 65–74.
  Research 5, 1391–1415.                      97-05, Microsoft Research.
                                                                                         Hinton, G. E. and Y. Teh (2001).
Hastie, T. and R. Tibshirani (1990).        Heckerman, D., C. Meek, and D. Koller           Discovering multiple constraints
  Generalized additive models. Chap-          (2004). Probabilistic models for              that are frequently approximately
  man and Hall.                               relational data.    Technical Re-                      ˛
                                                                                            satisïňAed. In UAI.
                                              port MSR-TR-2004-30, Microsoft
                                              Research.
Hastie, T., R. Tibshirani, and J. Fried-                                                 Hjort, N., C. Holmes, P. Muller, and
  man (2001). The Elements of Statis-       Heller, K. and Z. Ghahramani (2005).            S. Walker (Eds.) (2010). Bayesian
  tical Learning. Springer.                    Bayesian Hierarchical Clustering. In         Nonparametrics. Cambridge.
                                               Intl. Conf. on Machine Learning.
Hastie, T., R. Tibshirani, and J. Fried-                                                 Hoeﬂing, H. (2010). A Path Algorithm
  man (2009). The Elements of Statisti-     Henrion, M. (1988). Propagation of             for the Fused Lasso Signal Approx-
  cal Learning. Springer. 2nd edition.        uncertainty by logic sampling in             imator. Technical report, Stanford.
                                              Bayes’ networks. In UAI, pp. 149–
Hastings, W. (1970). Monte carlo              164.                                       Hoeﬂing, H. and R. Tibshirani
  sampling methods using markov                                                            (2009). Estimation of Sparse Bi-
  chains and their applications.            Herbrich, R., T. Minka, and T. Graepel         nary Pairwise Markov Networks us-
  Biometrika 57 (1), 97–109.                  (2007). TrueSkill: A Bayesian skill          ing Pseudo-likelihoods. J. of Ma-
                                              rating system. In NIPS.                      chine Learning Research 10.
Haykin, S. (1998). Neural Networks: A       Hertz, J., A. Krogh, and R. G. Palmer
  Comprehensive Foundation. Pren-                                                        Hoeting, J., D. Madigan, A. Raftery,
                                              (1991). An Introduction to the Theory        and C. Volinsky (1999). Bayesian
  tice Hall. 2nd Edition.                     of Neural Comptuation. Addison-              model averaging: A tutorial. Statis-
                                              Wesley.                                      tical Science 4(4).
Haykin, S. (Ed.) (2001). Kalman Filter-
  ing and Neural Networks. Wiley.           Hillar, C., J. Sohl-Dickstein, and
                                               K. Koepsell (2012, April). Efficient      Hoff, P. D. (2009, July).      A First
Hazan, T. and A. Shashua (2008).               and optimal binary hopﬁeld asso-            Course in Bayesian Statistical Meth-
  Convergent message-passing algo-             ciative memory storage using min-           ods. Springer.
  rithms for inference over general            imum probability ﬂow. Technical
  graphs with convex free energy. In           report.                                   Hoffman, M., D. Blei, and F. Bach
  UAI.                                                                                     (2010). Online learning for latent
                                            Hinton, G. (1999). Products of experts.        dirichlet allocation. In NIPS.
Hazan, T. and A. Shashua (2010).               In Proc. 9th Intl. Conf. on Artif. Neu-
  Norm-product belief propagation:             ral Networks (ICANN), Volume 1, pp.       Hoffman, M. and A. Gelman (2011).
  primal-dual message passing for              1–6.                                        The no-U-turn sampler: Adaptively
  approximate inference. IEEE Trans.                                                       setting path lengths in Hamilto-
  on Info. Theory 56(12), 6294–6316.        Hinton, G. (2002). Training products of        nian Monte Carlo. Technical report,
                                               experts by minimizing contrastive           Columbia U.
He, Y.-B. and Z. Geng (2009). Active           divergence. Neural Computation 14,
   learning of causal networks with            1771–1800.                                Hofmann, T. (1999). Probabilistic la-
   intervention experiments and opti-                                                      tent semantic indexing. Research
   mal designs. J. of Machine Learning      Hinton, G. (2010). A Practical Guide           and Development in Information
   Research 10, 2523–2547.                     to Training Restricted Boltzmann            Retrieval, 50–57.
                                               Machines. Technical report, U.
                                               Toronto.
Heaton, M. and J. Scott (2009).                                                          Holmes, C. and L. Held (2006).
  Bayesian computation and the lin-         Hinton, G. and D. V. Camp (1993).              Bayesian auxiliary variable models
  ear model. Technical report, Duke.           Keeping neural networks simple by           for binary and multinomial regres-
                                               minimizing the description length           sion. Bayesian Analysis 1(1), 145–
Heckerman, D., D. Chickering,                  of the weights. In in Proc. of the          168.
  C. Meek, R. Rounthwaite, and                 6th Ann. ACM Conf. on Computa-
  C. Kadie (2000).        Dependency           tional Learning Theory, pp. 5–13.         Honkela, A. and H. Valpola (2004).
  networks for density estimation,             ACM Press.                                  Variational Learning and Bits-Back
  collaborative ﬁltering, and data vi-                                                     Coding: An Information-Theoretic
  sualization. J. of Machine Learning       Hinton, G., S. Osindero, and Y. Teh            View to Bayesian Learning. IEEE.
  Research 1, 49–75.                           (2006). A fast learning algorithm           Trans. on Neural Networks 15(4).
                                               for deep belief nets. Neural Com-
Heckerman, D., D. Geiger, and                  putation 18, 1527–1554.                   Honkela, A., H. Valpola, and
  M. Chickering (1995). Learning                                                           J. Karhunen (2003).    Accelerat-
  Bayesian networks: the combina-           Hinton, G. and R. Salakhutdinov (2006,         ing Cyclic Update Algorithms for
  tion of knowledge and statistical            July). Reducing the dimensionality          Parameter Estimation by Pattern
  data. Machine Learning 20(3), 197–           of data with neural networks. Sci-          Searches. Neural Processing Let-
  243.                                         ence 313(5786), 504–507.                    ters 17, 191–203.
BIBLIOGRAPHY                                                                                                                1027


Hopﬁeld, J. J. (1982, April). Neu-          Hunter, D. and R. Li (2005). Variable      Jacob, L., F. Bach, and J.-P. Vert (2008).
  ral networks and physical systems           selection using MM algorithms.              Clustered Multi-Task Learning: a
  with emergent collective computa-           Annals of Statistics 33, 1617–1642.         Convex Formulation. In NIPS.
  tional abilities. Proc. of the National
  Academy of Science, USA 79(8),            Hunter, D. R. and K. Lange (2004). A       Jain, A. and R. Dubes (1988). Algo-
  2554âĂŞ2558.                              Tutorial on MM Algorithms. The               rithms for Clustering Data. Prentice
                                              American Statistician 58, 30–37.             Hall.
Hornik, K. (1991). Approximation ca-
  pabilities of multilayer feedforward      Hyaﬁl, L. and R. Rivest (1976). Con-       James, G. and T. Hastie (1998). The
  networks. Neural Networks 4(2),             structing Optimal Binary Decision           error coding method and PICTS.
                                              Trees is NP-complete. Information           J. of Computational and Graphical
  251âĂŞ257.                                Processing Letters 5(1), 15–17.             Statistics 7 (3), 377–387.
Horvitz, E., J. Apacible, R. Sarin, and     Hyvarinen, A., J. Hurri, and P. Hoyer      Japkowicz, N., S. Hanson, and
  L. Liao (2005). Prediction, Expecta-        (2009). Natural Image Statistics: a         M. Gluck (2000). Nonlinear autoas-
  tion, and Surprise: Methods, De-                                                        sociation is not equivalent to PCA.
  signs, and Study of a Deployed              probabilistic approach to early com-
  Traffic Forecasting Service. In UAI.        putational vision. Springer.                Neural Computation 12, 531–545.

Howard, R. and J. Matheson (1981). In-      Hyvarinen, A. and E. Oja (2000). In-       Jaynes, E. T. (2003). Probability the-
  ﬂuence diagrams. In R. Howard               dependent component analysis: al-           ory: the logic of science. Cambridge
  and J. Matheson (Eds.), Readings on         gorithms and applications. Neural           university press.
  the Principles and Applications of          Networks 13, 411–430.
  Decision Analysis, volume II. Strate-                                                Jebara, T., R. Kondor, and A. Howard
  gic Decisions Group.                      Ilin, A. and T. Raiko (2010). Practi-         (2004). Probability product kernels.
                                                cal Approaches to Principal Com-          J. of Machine Learning Research 5,
                                                ponent Analysis in the Presence           819–844.
Hoyer, P. (2004). Non-negative matrix           of Missing Values. J. of Machine
  factorizaton with sparseness con-
  straints. J. of Machine Learning Re-          Learning Research 11, 1957–2000.       Jeffreys, H. (1961). Theory of Probability.
                                                                                           Oxford.
  search 5, 1457–1469.                      Insua, D. R. and F. Ruggeri (Eds.)
                                               (2000). Robust Bayesian Analysis.       Jelinek, F. (1997). Statistical methods for
Hsu, C.-W., C.-C. Chang, and C.-J. Lin         Springer.
  (2009). A practical guide to sup-                                                        speech recognition. MIT Press.
  port vector classiﬁcation. Technical      Isard, M. (2003). PAMPAS: Real-Valued
  report, Dept. Comp. Sci., National                                                   Jensen, C. S., A. Kong, and U. Kjaerulff
                                               Graphical Models for Computer Vi-          (1995). Blocking-gibbs sampling
  Taiwan University.                           sion. In CVPR, Volume 1, pp. 613.          in very large probabilistic expert
Hu, D., L. van der Maaten, Y. Cho,                                                        systems. Intl. J. Human-Computer
                                            Isard, M. and A. Blake (1998). CON-           Studies, 647–666.
  L. Saul, and S. Lerner (2010). Latent        DENSATION - conditional density
  Variable Models for Predicting File          propagation for visual tracking.
  Dependencies in Large-Scale Soft-                                                    Jermyn, I. (2005). Invariant bayesian
                                               Intl. J. of Computer Vision 29(1), 5–
  ware Development. In NIPS.                   18.                                        estimation on manifolds. Annals of
                                                                                          Statistics 33(2), 583–605.
Hu, M., C. Ingram, M.Sirski, C. Pal,        Jaakkola, T. (2001). Tutorial on varia-
  S. Swamy, and C. Patten (2000).              tional approximation methods. In        Jerrum, M. and A. Sinclair (1993).
  A Hierarchical HMM Implementa-               M. Opper and D. Saad (Eds.), Ad-            Polynomial-time approximation al-
  tion for Vertebrate Gene Splice Site                                                     gorithms for the Ising model. SIAM
  Prediction. Technical report, Dept.          vanced mean ﬁeld methods. MIT               J. on Computing 22, 1087–1116.
  Computer Science, Univ. Waterloo.            Press.
                                            Jaakkola, T. and D. Haussler (1998). Ex-   Jerrum, M. and A. Sinclair (1996).
Huang, J., Q. Morris, and B. Frey              ploiting generative models in dis-          The markov chain monte carlo
  (2007). Bayesian inference of Mi-            criminative classiﬁers. In NIPS, pp.        method: an approach to approxi-
  croRNA targets from sequence and             487–493.                                    mate counting and integration. In
  expression data. J. Comp. Bio..                                                          D. S. Hochbaum (Ed.), Approxima-
                                            Jaakkola, T. and M. Jordan (1996a).            tion Algorithms for NP-hard prob-
Hubel, D. and T. Wiesel (1962). Recep-         Computing upper and lower                   lems. PWS Publishing.
  tive ﬁelds, binocular itneraction,           bounds on likelihoods in in-
  and functional architecture in the           tractable networks. In UAI.             Jerrum, M., A. Sinclair, and E. Vigoda
  cat’s visual cortex. J. Physiology 160,                                                  (2004). A polynomial-time approx-
  106–154.                                  Jaakkola, T. and M. Jordan (1996b).            imation algorithm for the perma-
                                               A variational approach to Bayesian          nent of a matrix with non-negative
Huber, P. (1964). Robust estimation            logistic regression problems and            entries. Journal of the ACM , 671–
  of a location parameter. Annals of           their extensions. In AI + Statistics.       697.
  Statistics 53, 73âĂŞ101.
                                            Jaakkola, T. S. and M. I. Jordan (2000).   Ji, S., D. Dunson, and L. Carin
Hubert, L. and P. Arabie (1985). Com-          Bayesian parameter estimation via           (2009).     Multi-task compressive
  paring partitions. J. of Classiﬁca-          variational methods. Statistics and         sensing. IEEE Trans. Signal Process-
  tion 2, 193–218.                             Computing 10, 25–37.                        ing 57 (1).
1028                                                                                                        BIBLIOGRAPHY


Ji, S., L. Tang, S. Yu, and J. Ye (2010).   Journee, M., Y. Nesterov, P. Richtarik,     Karhunen, J. and J. Joutsensalo
    A shared-subspace learning frame-          and R. Sepulchre (2010). General-           (1995). Generalizations of princi-
    work for multi-label classiﬁcation.        ized power method for sparse prin-          pal component analysis, optimiza-
    ACM Trans. on Knowledge Discovery          cipal components analysis. J. of            tion problems, and neural net-
    from Data 4(2).                            Machine Learning Research 11, 517–          works. Neural Networks 8(4), 549–
                                               553.                                        562.
Jirousek, R. and S. Preucil (1995). On
    the effective implementation of the     Julier, S. and J. Uhlmann (1997). A         Kass, R. and L. Wasserman (1995). A
    iterative proportional ﬁtting proce-        new extension of the Kalman ﬁl-            reference bayesian test for nested
    dure. Computational Statistics &            ter to nonlinear systems. In Proc.         hypotheses and its relationship to
    Data Analysis 19, 177–189.                  of AeroSense: The 11th Intl. Symp. on      the schwarz criterio. J. of the Am.
                                                Aerospace/Defence Sensing, Simula-         Stat. Assoc. 90(431), 928–934.
Joachims, T. (2006). Training Linear            tion and Controls.                      Katayama, T. (2005). Subspace Methods
   SVMs in Linear Time. In Proc. of                                                        for Systems Identiﬁcation. Springer
   the Int’l Conf. on Knowledge Discov-     Jurafsky, D. and J. H. Martin (2000).          Verlag.
   ery and Data Mining.                        Speech and language processing:
                                               An Introduction to Natural Lan-          Kaufman, L. and P. Rousseeuw (1990).
Joachims, T., T. Finley, and C.-N. Yu          guage Processing, Computational            Finding Groups in Data: An Intro-
   (2009). Cutting-Plane Training of           Linguistics, and Speech Recognition.       duction to Cluster Analysis. Wiley.
   Structural SVMs. Machine Learn-             Prentice-Hall.
   ing 77 (1), 27–59.                                                                   Kawakatsu, H. and A. Largey (2009).
                                            Jurafsky, D. and J. H. Martin (2008).         EM algorithms for ordered probit
Johnson, J. K., D. M. Malioutov, and           Speech and language processing:            models with endogenous regres-
   A. S. Willsky (2006). Walk-sum in-          An Introduction to Natural Lan-            sors. The Econometrics Journal 12(1),
   terpretation and analysis of gaus-          guage Processing, Computational            164–186.
   sian belief propagation. In NIPS,           Linguistics, and Speech Recognition.
   pp. 579–586.                                Prentice-Hall. 2nd edition.              Kearns, M. J. and U. V. Vazirani (1994).
                                                                                           An Introduction to Computational
Johnson, M. (2005). Capacity and            Kaariainen, M. and J. Langford (2005).         Learning Theory. MIT Press.
   complexity of HMM duration mod-             A Comparison of Tight Generaliza-
   eling techniques. Signal Processing         tion Bounds. In Intl. Conf. on Ma-       Kelley, J. E. (1960). The   cutting-plane
   Letters 12(5), 407–410.                     chine Learning.                             method for solving        convex pro-
                                                                                           grams. J. of the Soc.    for Industrial
Johnson, N. (2009). A study of the          Kaelbling, L., M. Littman, and                 and Applied Math. 8,     703–712.
   NIPS feature selection challenge.           A. Moore (1996). Reinforcement
   Technical report, Stanford.                 learning: A survey. J. of AI Re-         Kemp, C., J. Tenenbaum, S. Niyogi, and
                                               search 4, 237–285.                         T. Griffiths (2010). A probabilistic
Johnson, V. and J. Albert (1999). Ordi-                                                   model of theory formation. Cogni-
   nal data modeling. Springer.                                                           tion 114, 165–196.
                                            Kaelbling, L. P., M. Littman, and
                                               A. Cassandra (1998).      Planning       Kemp, C., J. Tenenbaum, T. Y. T. Grif-
Jones, B., A. Dobra, C. Carvalho,              and acting in partially observable         ﬁths and, and N. Ueda (2006).
   C. Hans, C. Carter, and M. West             stochastic domains. Artiﬁcial Intel-       Learning systems of concepts with
   (2005). Experiments in stochastic           ligence 101.                               an inﬁnite relational model. In
   computation for high-dimensional                                                       AAAI.
   graphical models. Statistical Sci-       Kaiser, H. (1958). The varimax crite-
   ence 20, 388–400.                           rion for analytic rotation in factor     Kersting, K., S. Natarajan, and D. Poole
                                               analysis. Psychometrika 23(3).              (2011).    Statistical Relational AI:
Jordan, M. I. (2007). An introduction to                                                   Logic, Probability and Computa-
   probabilistic graphical models. In       Kakade, S., Y. W. Teh, and S. Roweis           tion. Technical report, UBC.
   preparation.                                (2002). An alternate objective func-
                                               tion for markovian ﬁelds. In Intl.       Khan, M. E., B. Marlin, G. Bouchard,
Jordan, M. I. (2011). The era of big           Conf. on Machine Learning.                 and K. P. Murphy (2010). Varia-
   data. In ISBA Bulletin, Volume 18,                                                     tional bounds for mixed-data fac-
   pp. 1–3.                                                                               tor analysis. In NIPS.
                                            Kanazawa, K., D. Koller, and S. Rus-
                                              sell (1995). Stochastic simulation al-    Khan, Z., T. Balch, and F. Dellaert
Jordan, M. I., Z. Ghahramani, T. S.           gorithms for dynamic probabilistic
   Jaakkola, and L. K. Saul (1998). An                                                    (2006). MCMC Data Association
                                              networks. In UAI.                           and Sparse Factorization Updating
   introduction to variational meth-
   ods for graphical models. In M. Jor-                                                   for Real Time Multitarget Tracking
                                            Kandel, E., J. Schwarts, and T. Jessell       with Merged and Multiple Mea-
   dan (Ed.), Learning in Graphical           (2000). Principles of Neural Science.       surements. IEEE Trans. on Pat-
   Models. MIT Press.                         McGraw-Hill.                                tern Analysis and Machine Intelli-
                                                                                          gence 28(12).
Jordan, M. I. and R. A. Jacobs (1994).      Kappen, H. and F. Rodriguez (1998).
   Hierarchical mixtures of experts           Boltzmann machine learning using          Kirkpatrick, S., C. G. Jr., and M. Vecchi
   and the EM algorithm. Neural               mean ﬁeld theory and linear re-              (1983). Optimization by simulated
   Computation 6, 181–214.                    sponse correction. In NIPS.                  annealing. Science 220, 671–680.
BIBLIOGRAPHY                                                                                                              1029


Kitagawa, G. (2004). The two-ﬁlter for-     Koller, D. and U. Lerner (2001). Sam-      Kschischang, F., B. Frey, and H.-A.
   mula for smoothing and an im-               pling in Factored Dynamic Sys-             Loeliger (2001, February). Factor
   plementation of the Gaussian-sum            tems. In A. Doucet, N. de Fre-             graphs and the sum-product algo-
   smoother. Annals of the Institute of        itas, and N. Gordon (Eds.), Sequen-        rithm. IEEE Trans Info. Theory.
   Statistical Mathematics 46(4), 605–         tial Monte Carlo Methods in Prac-
   623.                                        tice. Springer.                         Kuan, P., G. Pan, J. A. Thomson,
                                                                                         R. Stewart, and S. Keles (2009).
Kjaerulff, U. (1990). Triangulation of      Kolmogorov, V. (2006, October). Con-         A hierarchical semi-Markov model
   graphs – algorithms giving small            vergent Tree-reweighted Message           for detecting enrichment with ap-
   total state space. Technical Report         Passing for Energy Minimization.          plication to ChIP-Seq experiments.
   R-90-09, Dept. of Math. and Comp.           IEEE Trans. on Pattern Analysis and       Technical report, U. Wisconsin.
   Sci., Aalborg Univ., Denmark.
                                               Machine Intelligence 28(10), 1568–
Kjaerulff, U. and A. Madsen (2008).            1583.                                   Kulesza, A. and B. Taskar (2011). Learn-
                                                                                          ing Determinantal Point Processes.
   Bayesian Networks and Inﬂuence                                                         In UAI.
   Diagrams: A Guide to Construction        Kolmogorov, V. and M. Wainwright
   and Analysis. Springer.                     (2005). On optimality properties
                                               of tree-reweighted message pass-        Kumar, N. and A. Andreo (1998). Het-
                                               ing. In UAI, pp. 316–322.                 eroscedastic discriminant analysis
Klaassen, C. and J. A. Wellner (1997).                                                   and reduced rank HMMs for im-
   Efficient estimation in the bivari-                                                   proved speech recognition. Speech
   ate noramal copula model: Nor-           Kolmogorov, V. and R. Zabin (2004).          Communication 26, 283–297.
   mal margins are least favorable.            What energy functions can be min-
   Bernoulli 3(1), 55–77.                      imized via graph cuts? IEEE Trans.
                                               on Pattern Analysis and Machine         Kumar, S. and M. Hebert (2003). Dis-
Klami, A. and S. Kaski (2008). Proba-          Intelligence 26(2), 147–159.              criminative random ﬁelds: A dis-
   bilistic approach to detecting de-                                                    criminative framework for contex-
   pendencies between data sets.                                                         tual interaction in classiﬁcation. In
                                            Komodakis, N., N. Paragios, and              Intl. Conf. on Computer Vision.
   Neurocomputing 72, 39–46.                  G. Tziritas (2011). MRF Energy Mini-
Klami, A., S. Virtanen, and S. Kaski          mization and Beyond via Dual De-         Kuo, L. and B. Mallick (1998). Vari-
   (2010). Bayesian exponential fam-          composition. IEEE Trans. on Pat-           able selection for regression mod-
   ily projections for coupled data           tern Analysis and Machine Intelli-         els. Sankhya Series B 60, 65–81.
   sources. In UAI.                           gence 33(3), 531–552.
                                                                                       Kurihara, K., M. Welling, and N. Vlas-
Kleiner, A., A. Talwalkar, P. Sarkar, and   Koo, T., A. M. Rush, M. Collins,              sis (2006). Accelerated variational
   M. I. Jordan (2011). A scalable boot-      T. Jaakkola, and D. Sontag (2010).          DP mixture models. In NIPS.
   strap for massive data. Technical          Dual Decomposition for Parsing
   report, UC Berkeley.                       with Non-Projective Head Au-
                                              tomata.     In Proc. EMNLP, pp.          Kushner, H. and G. Yin (2003).
Kneser, R. and H. Ney (1995). Im-                                                         Stochastic approximation and recur-
                                              1288âĂŞ1298.                              sive algorithms and applications.
  proved backing-off for n-gram lan-
  guage modeling. In Intl. Conf. on                                                       Springer.
  Acoustics, Speech and Signal Proc.,       Koren, Y. (2009a). The bellkor solution
  Volume 1, pp. 181–184.                       to the netﬂix grand prize. Techni-      Kuss and C. Rasmussen (2005). As-
                                               cal report, Yahoo! Research.               sessing approximate inference for
Ko, J. and D. Fox (2009).           GP-                                                   binary gaussian process classiﬁca-
   BayesFilters: Bayesian Filtering Us-     Koren, Y. (2009b). Collaborative ﬁl-          tion. J. of Machine Learning Re-
   ing Gaussian Process Prediction             tering with temporal dynamics. In          search 6, 1679–1704.
   and Observation Models.          Au-        Proc. of the Int’l Conf. on Knowledge
   tonomous Robots Journal.                    Discovery and Data Mining.              Kwon, J. and K. Murphy (2000). Mod-
                                                                                         eling freeway traffic with coupled
Kohn, R., M. Smith, and D. Chan                                                          HMMs. Technical report, Univ. Cal-
  (2001). Nonparametric regression          Koren, Y., R. Bell, and C. Volinsky
                                               (2009). Matrix factorization tech-        ifornia, Berkeley.
  using linear combinations of basis
                                               niques for recommender systems.
  functions. Statistical Computing 11,         IEEE Computer 42(8), 30–37.
  313–322.                                                                             Kyung, M., J. Gill, M. Ghosh, and
                                                                                          G. Casella (2010). Penalized Regres-
Koivisto, M. (2006). Advances in ex-        Krishnapuram,       B.,     L.  Carin,        sion, Standard Errors and Bayesian
   act Bayesian structure discovery in         M. Figueiredo, and A. Hartemink            Lassos. Bayesian Analysis 5(2), 369–
   Bayesian networks. In UAI.                  (2005). Learning sparse bayesian           412.
                                               classiﬁers: multi-class formulation,
Koivisto, M. and K. Sood (2004). Ex-           fast algorithms, and generalization     Lacoste-Julien, S., F. Huszar, and
   act Bayesian structure discovery in         bounds.       IEEE Transaction on          Z. Ghahramani (2011). Approximate
   Bayesian networks. J. of Machine            Pattern Analysis and Machine               inference for the loss-calibrated
   Learning Research 5, 549–573.               Intelligence.                              Bayesian. In AI/Statistics.

Koller, D. and N. Friedman (2009).          Krizhevsky, A. and G. Hinton (2010).       Lacoste-Julien, S., F. Sha, and M. I. Jor-
   Probabilistic Graphical Models:             Using Very Deep Autoencoders               dan (2009). DiscLDA: Discrimina-
   Principles and Techniques. MIT              for Content-Based Image Retrieval.         tive learning for dimensionality re-
   Press.                                      Submitted.                                 duction and classiﬁcation. In NIPS.
1030                                                                                                            BIBLIOGRAPHY


Lafferty, J., A. McCallum, and                Lauritzen, S. L. and D. J. Spiegelhal-       Lee, A., F. Caron, A. Doucet, and
   F. Pereira (2001). Conditional ran-           ter (1988). Local computations with          C. Holmes (2010). A hierarchical
   dom ﬁelds: Probabilistic models               probabilities on graphical struc-            bayesian framework for construct-
   for segmenting and labeling se-               tures and their applications to ex-          ing sparsity-inducing priors. Tech-
   quence data. In Intl. Conf. on Ma-            pert systems. J. R. Stat. Soc. B B(50),      nical report, U. Oxford.
   chine Learning.                               127–224.
                                                                                           Lee, A., F. Caron, A. Doucet, and
Lange, K., R. Little, and J. Taylor (1989).   Law, E., B. Settles, and T. Mitchell            C. Holmes (2011). Bayesian Sparsity-
   Robust statistical modeling using             (2010). Learning to tag from open            Path-Analysis of Genetic Associ-
                                                 vocabulary labels. In Proc. Euro-            ation Signal using Generalized t
   the t disribution. J. of the Am. Stat.
   Assoc. 84(408), 881–896.                      pean Conf. on Machine Learning.              Prior. Technical report, U. Oxford.
                                              Law, M., M. Figueiredo, and A. Jain          Lee, D. and S. Seung (2001). Algo-
Langville, A. and C. Meyer (2006).               (2004). Simultaneous Feature Se-
   Updating Markov chains with an                                                             rithms for non-negative matrix fac-
                                                 lection and Clustering Using Mix-            torization. In NIPS.
   eye on Google’s PageRank. SIAM                ture Models. IEEE Trans. on Pat-
   J. on Matrix Analysis and Applica-            tern Analysis and Machine Intelli-
   tions 27 (4), 968–987.                        gence 26(4).                              Lee, H., R. Grosse, R. Ranganath, and
                                                                                              A. Ng (2009). Convolutional deep
Larranaga, P., C. M. H. Kuijpers,                                                             belief networks for scalable un-
                                              Lawrence, N. D. (2005). Probabilis-             supervised learning of hierarchical
   M. Poza, and R. H. Murga (1997).              tic non-linear principal component
   Decomposing bayesian networks:                analysis with gaussian process la-           representations. In Intl. Conf. on
   triangulation of the moral graph              tent variable models. J. of Machine          Machine Learning.
   with genetic algorithms. Statistics           Learning Research 6, 1783–1816.
   and Computing (UK) 7 (1), 19–34.                                                        Lee, H., Y. Largman, P. Pham, and
                                              Lawrence, N. D. (2012). A unifying              A. Ng (2009). Unsupervised feature
Lashkari, D. and P. Golland (2007).              probabilistic perspective for spec-          learning for audio classiﬁcation us-
   Convex clustering with examplar-             tral dimensionality reduction: in-            ing convolutional deep belief net-
   based models. In NIPS.                       sights and new models. J. of Ma-              works. In NIPS.
                                                chine Learning Research 13, 1609–
Lasserre, J., C. Bishop, and T. Minka           1638.                                      Lee, S.-I., V. Ganapathi, and D. Koller
   (2006). Principled hybrids of gen-                                                         (2006). Efficient structure learn-
   erative and discriminative models.         Learned-Miller, E. (2004). Hyperspac-           ing of Markov networks using L1-
   In CVPR.                                      ings and the estimation of infor-            regularization. In NIPS.
                                                 mation theoretic quantities. Tech-
Lau, J. and P. Green (2006).                     nical Report 04-104, U. Mass.             Lee, T. S. and D. Mumford (2003). Hi-
   Bayesian model-based clustering               Amherst Comp. Sci. Dept.                     erarchical Bayesian inference in the
   procedures. Journal of Computa-                                                            visual cortex. J. of Optical Society of
   tional and Graphical Statistics 12,        LeCun, Y., B. Boser, J. S. Denker,              America A 20(7), 1434–1448.
   351–357.                                      D. Henderson, R. E. Howard,
                                                 W. Hubbard, and L. D. Jackel (1989,       Lenk, P., W. S. DeSarbo, P. Green,
                                                 Winter). Backpropagation applied             and M. Young (1996). Hierarchi-
Lauritzen, S. (1996). Graphical Models.          to handwritten zip code recogni-
   OUP.                                                                                       cal Bayes Conjoint Analysis: Re-
                                                 tion. Neural Computation 1(4), 541–          covery of Partworth Heterogeneity
                                                 551.                                         from Reduced Experimental De-
Lauritzen, S. (2000). Causal infer-                                                           signs. Marketing Science 15(2), 173–
   ence from graphical models. In             LeCun, Y., L. Bottou, Y. Bengio,                191.
   D. R. C. O. E. Barndoff-Nielsen               and P. Haffner (1998, November).
   and C. Klueppelberg (Eds.), Com-              Gradient-based learning applied to
   plex stochastic systems. Chapman                                                        Lenkoski, A. and A. Dobra (2008).
                                                 document recognition. Proceedings            Bayesian structural learning and
   and Hall.                                     of the IEEE 86(11), 2278–2324.               estimation in Gaussian graphical
                                                                                              models. Technical Report 545, De-
Lauritzen, S. and D. Nilsson (2001).          LeCun, Y., S. Chopra, R. Hadsell, F.-J.         partment of Statistics, University of
   Representing and solving decision             Huang, and M.-A. Ranzato (2006).             Washington.
   problems with limited information.            A tutorial on energy-based learn-
   Management Science 47, 1238–1251.             ing. In B. et al. (Ed.), Predicting       Lepar, V. and P. P. Shenoy (1998).
                                                 Structured Outputs. MIT press.               A Comparison of Lauritzen-
Lauritzen, S. L. (1992, December).                                                            Spiegelhalter, Hugin and Shenoy-
   Propagation of probabilities, means        Ledoit, O. and M. Wolf (2004a). Honey,          Shafer Architectures for Computing
   and variances in mixed graphical              I Shrunk the Sample Covariance               Marginals of Probability Distribu-
   association models. J. of the Am.             Matrix. J. of Portfolio Manage-              tions. In G. Cooper and S. Moral
   Stat. Assoc. 87 (420), 1098–1108.             ment 31(1).                                  (Eds.), UAI, pp. 328–337. Morgan
                                                                                              Kaufmann.
Lauritzen, S. L. (1995). The EM al-           Ledoit, O. and M. Wolf (2004b). A well-
   gorithm for graphical association             conditioned estimator for large-          Lerner, U. and R. Parr (2001). Infer-
   models with missing data. Com-                dimensional covariance matrices. J.          ence in hybrid networks: Theoreti-
   putational Statistics and Data Anal-          of Multivariate Analysis 88(2), 365–         cal limits and practical algorithms.
   ysis 19, 191–201.                             411.                                         In UAI.
BIBLIOGRAPHY                                                                                                               1031


Leslie, C., E. Eskin, A. Cohen, J. We-        Liu, C. and D. Rubin (1995). ML Esti-       Lunn, D., A. Thomas, N. Best, and
   ston, and W. Noble (2003). Mis-               mation of the T distribution using         D. Spiegelhalter (2000). WinBUGS
   match string kernels for discrimi-            EM and its extensions, ECM and             – a Bayesian modelling framework:
   native protein classiﬁcation. Bioin-          ECME. Statistica Sinica 5, 19–39.          concepts, structure, and extensibil-
   formatics 1, 1–10.                                                                       ity. Statistics and Computing 10,
                                              Liu, H., J. Lafferty, and L. Wasserman        325–337.
Levy, S. (2011). In The Plex: How                (2009). The nonparanormal: Semi-
   Google Thinks, Works, and Shapes              parametric estimation of high di-        Ma, H., H. Yang, M. Lyu, and I. King
   Our Lives. Simon & Schuster.                  mensional undirected graphs. J.            (2008). SoRec: Social recommenda-
                                                 of Machine Learning Research 10,           tion using probabilistic matrix fac-
Li, L., W. Chu, J. Langford, and                 2295–2328.                                 torization. In Proc. of 17th Conf. on
   X. Wang (2011). Unbiased offline                                                         Information and Knowledge Man-
   evaluation of contextual-bandit-           Liu, J. (2001). Monte Carlo Strategies in     agement.
   based news article recommenda-                Scientiﬁc Computation. Springer.
   tion algorithms. In WSDM.                                                              Ma, S., C. Ji, and J. Farmer (1997). An
                                              Liu, J. S., W. H. Wong, and A. Kong           efficient EM-based training algo-
Liang, F., S. Mukherjee, and M. West                                                        rithm for feedforward neural net-
   (2007). Understanding the use of              (1994). Covariance structure of the
                                                 gibbs sampler with applications            works. Neural Networks 10(2), 243–
   unlabelled data in predictive mod-                                                       256.
                                                 to the comparisons of estima-
   elling. Statistical Science 22, 189–          tors and augmentation schemes.
   205.                                                                                   Maathuis, M., D. Colombo, M. Kalisch,
                                                 Biometrika 81(1), 27–40.
                                                                                            and P. BÃijhlmann (2010). Pre-
Liang, F., R. Paulo, G. Molina,                                                             dicting causal effects in large-scale
   M. Clyde, and J. Berger (2008). Mix-       Liu, T.-Y. (2009). Learning to rank           systems from observational data.
   tures of g-priors for Bayesian Vari-          for information retrieval. Founda-         Nature Methods 7, 247–248.
   able Selection. J. of the Am. Stat.           tions and Trends in Information Re-
   Assoc. 103(481), 410–423.                     trieval 3(3), 225–331.                   Maathuis, M., M. Kalisch, and
                                                                                            P. BÃijhlmann (2009). Estimating
Liang, P. and M. I. Jordan (2008).            Lizotte, D. (2008). Practical Bayesian        high-dimensional intervention ef-
   An asymptotic analysis of gen-                optimization. Ph.D. thesis, U. Al-         fects from observational data. An-
   erative, discriminative, and pseu-            berta.                                     nals of Statistics 37, 3133–3164.
   dolikelihood estimators. In In-
   ternational Conference on Machine                                                      MacKay, D. (1992). Bayesian interpo-
   Learning (ICML).                           Ljung, L. (1987). System Identiﬁciation:
                                                 Theory for the User. Prentice Hall.        lation. Neural Computation 4, 415–
                                                                                            447.
Liang, P. and D. Klein. Online EM
   for Unsupervised Models. In Proc.          Lo, C. H. (2009). Statistical methods
   NAACL Conference.                             for high throughput genomics. Ph.D.      MacKay, D. (1995a). Developments in
                                                 thesis, UBC.                               probabilistic modeling with neural
                                                                                            networks — ensemble learning. In
Liao, L., D. J. Patterson, D. Fox, and
   H. Kautz (2007). Learning and                                                            Proc. 3rd Ann. Symp. Neural Net-
                                              Lo, K., F. Hahne, R. Brinkman, R. Ryan,
   Inferring Transportation Routines.            and R. Gottardo (2009, May). ﬂow-          works.
   Artiﬁcial Intelligence 171(5), 311–331.       clust: a bioconductor package for
                                                 automated gating of ﬂow cytome-          MacKay, D. (1995b). Probable net-
Lindley, D. (1982). Scoring rules and            try data. BMC Bioinformatics 10,           works and plausible predictions
   the inevetability of probability. ISI         145+.                                      — a review of practical Bayesian
   Review 50, 1–26.                                                                         methods for supervised neural net-
                                                                                            works. Network.
                                              Lopes, H. and M. West (2004).
Lindley, D. V. (1972). Bayesian Statistics:      Bayesian model assessment in fac-
   A Review. SIAM.                               tor analysis. Statisica Sinica 14, 41–   MacKay, D. (1997). Ensemble learning
                                                 67.                                        for Hidden Markov Models. Tech-
Lindley, D. V. and L. D. Phillips (1976).                                                   nical report, U. Cambridge.
   Inference for a Bernoulli Process          Lowe, D. G. (1999). Object recognition
   (A Bayesian View). The American              from local scale-invariant features.      MacKay, D. (1999). Comparision of
   Statistician 30(3), 112–119.                 In Proc. of the International Con-          approximate methods for handling
                                                ference on Computer Vision ICCV,            hyperparameters. Neural Computa-
Lindsay, B. (1988). Composite like-                                                         tion 11(5), 1035–1068.
   lihood methods.      Contemporary            Corfu, pp. 1150–1157.
   Mathematics 80(1), 221–239.                                                            MacKay, D. (2003). Information Theory,
                                              Luce, R. (1959). Individual choice be-        Inference, and Learning Algorithms.
Lipton, R. J. and R. E. Tarjan (1979).           havior: A theoretical analysis. Wi-        Cambridge University Press.
   A separator theorem for planar                ley.
   graphs. SIAM Journal of Applied                                                        Macnaughton-Smith,      P.,  W. T.
   Math 36, 177–189.                          Lunn, D., N. Best, and J. Whit-               Williams, M. B. Dale, and G. Mock-
                                                taker (2009). Generic reversible            ett (1964). Dissimilarity analysis:
Little., R. J. and D. B. Rubin (1987). Sta-     jump MCMC using graphical mod-              a new technique of hierarchical
    tistical Analysis with Missing Data.        els. Statistics and Computing 19(4),        sub-division. Nature 202, 1034 –
    New York: Wiley and Son.                    395–408.                                    1035.
1032                                                                                                    BIBLIOGRAPHY


Madeira, S. C. and A. L. Oliveira         Mansinghka, V., P. Shafto, E. Jonas,       Matthews, R. (1998). Bayesian Critique
  (2004). Biclustering algorithms for       C. Petschulat, and J. Tenenbaum            of Statistics in Health: The Great
  biological data analysis: A survey.       (2011).  Cross-Categorization: A           Health Hoax.
  IEEE/ACM Transactions on Compu-           Nonparametric Bayesian Method
  tational Biology and Bioinformat-         for Modeling Heterogeneous, High         Maybeck, P. (1979). Stochastic models,
  ics 1(1), 24–45.                          Dimensional Data. Technical re-            estimation, and control. Academic
                                            port, MIT.                                 Press.
Madigan, D. and A. Raftery (1994).
  Model selection and accounting          Margolin, A., I. Nemenman, K. Basso,
                                            C. Wiggins, G. Stolovitzky, and R. F.    Mazumder, R. and T. Hastie (2012).
  for model uncertainty in graphical                                                   The Graphical Lasso: New Insights
                                            abd A. Califano (2006). ARACNE:
  models using Occam’s window. J. of        An Algorithm for the Reconstruc-           and Alternatives. Technical report.
  the Am. Stat. Assoc. 89, 1535–1546.       tion of Gene Regulatory Networks
                                            in a Mammalian Cellular Context.         McAuliffe, J., D. Blei, and M. Jordan
Madsen, R., D. Kauchak, and C. Elkan        BMC Bionformatics 7.                       (2006). Nonparametric empirical
  (2005). Modeling word burstiness                                                     bayes for the dirichlet process mix-
  using the Dirichlet distribution. In    Marin, J.-M. and C. Robert (2007).           ture model. Statistics and Comput-
  Intl. Conf. on Machine Learning.          Bayesian Core: a practical approach        ing 16(1), 5–14.
                                            to computational Bayesian statistics.
Mairal, J., F. Bach, J. Ponce, and          Springer.                                McCallum, A. (2003). Efficiently induc-
  G. Sapiro (2010). Online learning                                                    ing features of conditional random
  for matrix factorization and sparse     Marks, T. K. and J. R. Movellan (2001).      ﬁelds. In UAI.
  coding. J. of Machine Learning Re-        Diffusion networks, products of ex-
                                            perts, and factor analysis. Techni-
  search 11, 19–60.                         cal report, University of California     McCallum, A., D. Freitag, and
                                            San Diego.                                 F. Pereira (2000). Maximum En-
Mairal, J., M. Elad, and G. Sapiro                                                     tropy Markov Models for Informa-
  (2008). Sparse representation for       Marlin, B. (2003). Modeling user rat-        tion Extraction and Segmentation.
  color image restoration. IEEE Trans.      ing proﬁles for collaborative ﬁlter-       In Intl. Conf. on Machine Learning.
  on Image Processing 17 (1), 53–69.        ing. In NIPS.
                                                                                     McCallum, A. and K. Nigam (1998).
Malioutov, D., J. Johnson, and A. Will-   Marlin, B. (2008). Missing Data Prob-        A comparison of event models for
  sky (2006). Walk-sums and belief          lems in Machine Learning. Ph.D.            naive Bayes text classiﬁcation. In
  propagation in gaussian graphical         thesis, U. Toronto.                        AAAI/ICML workshop on Learning
  models. J. of Machine Learning Re-                                                   for Text Categorization.
  search 7, 2003–2030.                    Marlin, B., E. Khan, and K. Murphy
                                            (2011). Piecewise Bounds for Es-
                                            timating Bernoulli-Logistic Latent       McCray, A. (2003). An upper level
Mallat, S., G. Davis, and Z. Zhang                                                     ontology for the biomedical do-
  (1994, July).      Adaptive time-         Gaussian Models. In Intl. Conf. on
                                                                                       main. Comparative and Functional
  frequency decompositions. SPIE            Machine Learning.                          Genomics 4, 80–84.
  Journal of Optical Engineering 33,      Marlin, B. and R. Zemel (2009). Collab-
  2183–2919.                                orative prediction and ranking with      McCullagh, P. and J. Nelder (1989).
                                            non-random missing data. In Proc.          Generalized linear models. Chap-
Mallat, S. and Z. Zhang (1993). Match-      of the 3rd ACM Conference on Rec-          man and Hall. 2nd edition.
  ing pursuits with time-frequency          ommender Systems.
  dictionaries. IEEE Transactions on                                                 McCullich, W. and W. Pitts (1943). A
  Signal Processing 41(12), 3397–3415.    Marlin, B. M., K. Swersky, B. Chen, and      logical calculus of the ideas imma-
                                            N. de Freitas (2010). Inductive prin-      nent in nervous activity. Bulletin of
Malouf, R. (2002). A comparison of          ciples for restricted boltzmann ma-        Mathematical Biophysics 5, 115–137.
  algorithms for maximum entropy            chine learning. In AI/Statistics.
  parameter estimation. In Proc.
  Sixth Conference on Natural Lan-        Marroquin, J., S. Mitter, and T. Pog-      McDonald, J. and W. Newey (1988).
  guage Learning (CoNLL-2002), pp.          gio (1987). Probabilistic solution         Partially Adaptive Estimation of Re-
  49–55.                                    of ill-posed problems in computa-          gression Models via the General-
                                                                                       ized t Distribution. Econometric
                                            tional vision. J. of the Am. Stat. As-     Theory 4(3), 428–445.
Manning, C., P. Raghavan, and               soc. 82(297), 76–89.
  H. Schuetze (2008). Introduction                                                   McEliece, R. J., D. J. C. MacKay, and
  to Information Retrieval. Cambridge     Martens, J. (2010). Deep learning via
                                            hessian-free optimization. In Intl.        J. F. Cheng (1998). Turbo decod-
  University Press.                                                                    ing as an instance of Pearl’s ’belief
                                            Conf. on Machine Learning.                 propagation’ algorithm. IEEE J. on
Manning, C. and H. Schuetze (1999).                                                    Selected Areas in Comm. 16(2), 140–
                                          Maruyama, Y. and E. George (2008). A
  Foundations of statistical natural        g-prior extension for p > n. Tech-         152.
  language processing. MIT Press.           nical report, U. Tokyo.
                                                                                     McFadden, D. (1974). Conditional logit
Mansinghka, V., D. Roy, R. Rifkin,        Mason, L., J. Baxter, P. Bartlett, and       analysis of qualitative choice be-
  and J. Tenenbaum (2007). AClass:          M. Frean (2000). Boosting algo-            havior. In P. Zarembka (Ed.), Fron-
  An online algorithm for generative        rithms as gradient descent. In             tiers in econometrics, pp. 105–142.
  classiﬁcation. In AI/Statistics.          NIPS, Volume 12, pp. 512–518.              Academic Press.
BIBLIOGRAPHY                                                                                                              1033


McGrayne, S. B. (2011).       The the-       Meltzer, T., C. Yanover, and Y. Weiss        Minka, T. (2001b). Empirical Risk Min-
  ory that would not die: how                  (2005).     Globally optimal solu-           imization is an incomplete induc-
  Bayes’ rule cracked the enigma code,         tions for energy minimization in             tive principle. Technical report,
  hunted down Russian submarines,              stereo vision using reweighted be-           MIT.
  and emerged triumphant from two              lief propagation. In ICCV, pp. 428–
                                               435.                                       Minka, T. (2001c). Expectation propa-
  centuries of controversy. Yale Uni-                                                       gation for approximate Bayesian in-
  versity Press.                                                                            ference. In UAI.
                                             Meng, X. L. and D. van Dyk (1997).
                                               The EM algorithm — an old folk
McKay, B. D., F. E. Oggier, G. F. Royle,       song sung to a fast new tune (with         Minka, T. (2001d). A family of algo-
  N. J. A. Sloane, I. M. Wanless, and          Discussion). J. Royal Stat. Soc. B 59,       rithms for approximate Bayesian in-
  H. S. Wilf (2004). Acyclic digraphs          511–567.
  and eigenvalues of (0,1)-matrices. J.                                                     ference. Ph.D. thesis, MIT.
  Integer Sequences 7 (04.3.3).
                                             Mesot, B. and D. Barber (2009). A Sim-       Minka, T. (2001e).    Statistical ap-
                                               ple Alternative Derivation of the            proaches to learning and discovery
McKay, D. and L. C. B. Peto (1995).            Expectation Correction Algorithm.            10-602: Homework assignment 2,
  A hierarchical dirichlet language            IEEE Signal Processing Letters 16(1),        question 5. Technical report, CMU.
  model. Natural Language Engineer-            121–124.
  ing 1(3), 289–307.                                                                      Minka, T. (2003). A comparison of nu-
                                             Metropolis,    N.,   A. Rosenbluth,            merical optimizers for logistic re-
McLachlan, G. J. and T. Krishnan               M. Rosenbluth, A. Teller, and                gression. Technical report, MSR.
  (1997). The EM Algorithm and Ex-             E. Teller (1953). Equation of state
  tensions. Wiley.                             calculations by fast computing             Minka, T. (2005). Divergence measures
                                               machines. J. of Chemical Physics 21,         and message passing. Technical re-
Meek, C. and D. Heckerman (1997).              1087–1092.                                   port, MSR Cambridge.
  Structure and parameter learn-
  ing for causal independence and            Metz, C. (2010). Google behavioral ad        Minka, T. and Y. Qi (2003). Tree-
  causal interaction models. In UAI,           targeter is a Smart Ass. The Regis-          structured approximations by ex-
  pp. 366–375.                                 ter.                                         pectation propagation. In NIPS.

Meek, C., B. Thiesson, and D. Hecker-        Miller, A. (2002). Subset selection in re-   Minka, T., J. Winn, J. Guiver, and
  man (2002). Staged mixture mod-               gression. Chapman and Hall. 2nd             D. Knowles (2010). Infer.NET 2.4.
  elling and boosting. In UAI, San              edition.                                    Microsoft Research Cambridge.
  Francisco, CA, pp. 335–343. Mor-                                                          http://research.microsoft.com/infernet.
  gan Kaufmann.                              Mimno, D. and A. McCallum (2008).            Minsky, M. and S. Papert (1969). Per-
                                               Topic models conditioned on ar-              ceptrons. MIT Press.
Meila, M. (2001). A random walks view          bitrary features with dirichlet-
  of spectral segmentation. In AI/S-           multinomial regression. In UAI.
  tatistics.                                                                              Mitchell, T. (1997). Machine Learning.
                                             Minka, T. (1999). Pathologies of ortho-         McGraw Hill.
Meila, M. (2005). Comparing cluster-           dox statisics. Technical report, MIT
  ings: an axiomatic view. In Intl.            Media Lab.                                 Mitchell, T. and J. Beauchamp (1988).
                                                                                             Bayesian Variable Selection in Lin-
  Conf. on Machine Learning.                                                                 ear Regression. J. of the Am. Stat.
                                             Minka, T. (2000a). Automatical choice
                                               of dimensionality for PCA. Techni-            Assoc. 83, 1023–1036.
Meila, M. and T. Jaakkola (2006).
  Tractable Bayesian learning of tree          cal report, MIT.
                                                                                          Mobahi, H., R. Collobert, and J. We-
  belief networks. Statistics and Com-                                                      ston (2009). Deep learning from
  puting 16, 77–92.                          Minka, T. (2000b). Bayesian linear re-
                                               gression. Technical report, MIT.             temporal coherence in video. In
                                                                                            Intl. Conf. on Machine Learning.
Meila, M. and M. I. Jordan (2000).           Minka, T. (2000c). Bayesian model av-
  Learning with mixtures of trees. J.          eraging is not model combination.          Mockus, J., W. Eddy, A. Mockus,
  of Machine Learning Research 1, 1–           Technical report, MIT Media Lab.             L. Mockus, and G. Reklaitis (1996).
  48.                                                                                       Bayesian Heuristic Approach to Dis-
                                             Minka, T. (2000d). Empirical risk min-         crete and Global Optimization: Al-
Meinshausen, N. (2005). A note on the          imization is an incomplete induc-            gorithms, Visualization, Software,
  lasso for gaussian graphical model           tive principle. Technical report,            and Applications. Kluwer.
  selection. Technical report, ETH             MIT.
  Seminar fur Statistik.                                                                  Moghaddam, B., A. Gruber, Y. Weiss,
                                             Minka, T. (2000e). Estimating a Dirich-        and S. Avidan (2008). Sparse re-
Meinshausen, N. and P. Buhlmann                let distribution. Technical report,          gression as a sparse eigenvalue
  (2006). High dimensional graphs              MIT.                                         problem. In Information Theory &
  and variable selection with the                                                           Applications Workshop (ITA’08).
  lasso. The Annals of Statistics 34,        Minka, T. (2000f). Inferring a Gaussian
  1436–1462.                                   distribution. Technical report, MIT.       Moghaddam, B., B. Marlin, E. Khan,
                                                                                            and K. Murphy (2009). Accel-
Meinshausen, N. and P. BÃijhlmann            Minka, T. (2001a). Bayesian inference          erating bayesian structural infer-
  (2010). Stability selection. J. of Royal     of a uniform distribution. Techni-           ence for non-decomposable gaus-
  Stat. Soc. Series B 72, 417–473.             cal report, MIT.                             sian graphical models. In NIPS.
1034                                                                                                         BIBLIOGRAPHY


Moghaddam, B. and A. Pentland              Musso, C., N. Oudjane, and F. LeGland         Neal, R. M. and G. E. Hinton (1998).
  (1995). Probabilistic visual learning      (2001). Improving regularized par-            A new view of the EM algorithm
  for object detection. In Intl. Conf.       ticle ﬁlters. In A. Doucet, J. F. G.          that justiﬁes incremental and other
  on Computer Vision.                        de Freitas, and N. Gordon (Eds.),             variants. In M. Jordan (Ed.), Learn-
                                             Sequential Monte Carlo Methods in             ing in Graphical Models. MIT Press.
Mohamed, S., K. Heller, and                  Practice. Springer.
  Z. Ghahramani (2008). Bayesian                                                         Neapolitan, R. (2003).      Learning
  Exponential Family PCA. In NIPS.         Nabney, I. (2001). NETLAB: algorithms           Bayesian Networks. Prentice Hall.
                                             for pattern recognition. Springer.
Moler, C. (2004). Numerical Computing                                                    Neﬁan, A., L. Liang, X. Pi, X. Liu,
  with MATLAB. SIAM.                       Neal, R. (1992). Connectionist learning         and K. Murphy (2002). Dynamic
                                             of belief networks. Artiﬁcial Intelli-        Bayesian Networks for Audio-
Morris, R. D., X. Descombes, and             gence 56, 71–113.                             Visual Speech Recognition. J. Ap-
  J. Zerubia (1996). The Ising/Potts                                                       plied Signal Processing.
  model is not well suited to seg-         Neal, R. (1993). Probabilistic Inference
  mentation tasks. In IEEE DSP Work-         Using Markov Chain Monte Carlo              Nemirovski, A. and D. Yudin (1978). On
  shop.                                      Methods. Technical report, Univ.              Cezari’s convergence of the steep-
                                             Toronto.                                      est descent method for approxi-
Mosterman, P. J. and G. Biswas (1999).                                                     mating saddle points of convex-
  Diagnosis of continuous valued           Neal, R. (1996). Bayesian learning for          concave functions. Soviet Math.
  systems in transient operating re-         neural networks. Springer.                    Dokl. 19.
  gions. IEEE Trans. on Systems, Man,
  and Cybernetics, Part A 29(6), 554–      Neal, R. (1997). Monte Carlo Im-              Nesterov, Y. (2004). Introductory Lec-
  565.                                       plementation of Gaussian Process              tures on Convex Optimization. A
                                             Models for Bayesian Regression                basic course. Kluwer.
Moulines, E., J.-F. Cardoso, and E. Gas-     and Classiﬁcation. Technical Re-
  siat (1997). Maximum likelihood            port 9702, U. Toronto.
  for blind separation and deconvo-                                                      Newton, M., D. Noueiry, D. Sarkar,
  lution of noisy signals using mix-                                                       and P. Ahlquist (2004). Detecting
                                           Neal, R. (1998). Erroneous Results              differential gene expression with
  ture models. In Proc. IEEE Int.            in ’Marginal Likelihood from the
  Conf. on Acoustics, Speech and Sig-                                                      a semiparametric hierarchical mix-
                                             Gibbs Output’. Technical report, U.           ture method. Biostatistics 5, 155–
  nal Processing (ICASSP’97), Munich,        Toronto.                                      176.
  Germany, pp. 3617–3620.
                                           Neal, R. (2000). Markov Chain Sam-            Newton, M. and A. Raftery (1994). Ap-
Muller, P., G. Parmigiani, C. Robert,        pling Methods for Dirichlet Process
  and J. Rousseau (2004). Optimal                                                          proximate Bayesian Inference with
                                             Mixture Models. J. of Computa-                the Weighted Likelihood Bootstrap.
  sample size for multiple testing:          tional and Graphical Statistics 9(2),
  the case of gene expression mi-                                                          J. of Royal Stat. Soc. Series B 56(1),
                                             249–265.                                      3–48.
  croarrays. J. of the Am. Stat. As-
  soc. 99, 990–1001.                       Neal, R. (2003a). Slice sampling. An-         Ng, A., M. Jordan, and Y. Weiss (2001).
                                             nals of Statistics 31(3), 7–5–767.             On Spectral Clustering: Analysis
Mumford, D. (1994). Neuronal archi-
  tectures for pattern-theoretic prob-                                                      and an algorithm. In NIPS.
  lems. In C. Koch and J. Davis (Eds.),    Neal, R. (2010). MCMC using Hamil-
  Large Scale Neuronal Theories of the       tonian Dynamics. In S. Brooks,              Ng, A. Y. and M. I. Jordan (2002). On
  Brain. MIT Press.                          A. Gelman, G. Jones, and X.-L.                 discriminative vs. generative classi-
                                             Meng (Eds.), Handbook of Markov                ﬁers: A comparison of logistic re-
Murphy, K. (2000). Bayesian map              Chain Monte Carlo. Chapman &                   gression and naive bayes. In NIPS-
  learning in dynamic environments.          Hall.                                          14.
  In NIPS, Volume 12.
                                           Neal, R. and D. MacKay (1998).                Nickisch, H. and C. Rasmussen (2008).
Murphy, K. and M. Paskin (2001). Lin-        Likelihood-based boosting. Techni-             Approximations for binary gaus-
  ear time inference in hierarchical         cal report, U. Toronto.                        sian process classiﬁcation. J. of Ma-
  HMMs. In NIPS.                                                                            chine Learning Research 9, 2035–
                                           Neal, R. and J. Zhang (2006). High               2078.
Murphy, K., Y. Weiss, and M. Jordan          dimensional classiﬁcation Bayesian
  (1999). Loopy belief propagation for       neural networks and Dirichlet dif-
                                             fusion trees. In I. Guyon, S. Gunn,         Nilsson, D. (1998). An efficient algo-
  approximate inference: an empiri-                                                         rithm for ﬁnding the M most prob-
  cal study. In UAI.                         M. Nikravesh, and L. Zadeh (Eds.),
                                             Feature Extraction. Springer.                  able conﬁgurations in a probabilis-
Murphy, K. P. (1998). Filtering and                                                         tic expert system. Statistics and
  smoothing in linear dynamical sys-       Neal, R. M. (2001). Annealed impor-              Computing 8, 159–173.
  tems using the junction tree algo-         tance sampling. Statistics and Com-
  rithm. Technical report, U.C. Berke-       puting 11, 125–139.                         Nilsson, D. and J. Goldberger (2001).
  ley, Dept. Comp. Sci.                                                                     Sequentially ﬁnding the N-Best List
                                           Neal, R. M. (2003b). Density Model-              in Hidden Markov Models. In Intl.
Murray, I. and Z. Ghahramani (2005).         ing and Clustering using Dirichlet             Joint Conf. on AI, pp. 1280–1285.
  A note on the evidence and                 Diffusion Trees. In J. M. Bernardo
  bayesian occam’s razor. Technical          et al. (Eds.), Bayesian Statistics 7, pp.   Nocedal, J. and S. Wright (2006). Nu-
  report, Gatsby.                            619–629. Oxford University Press.             merical Optimization. Springer.
BIBLIOGRAPHY                                                                                                                1035


Nowicki, K. and T. A. B. Snijders           Osborne, M. R., B. Presnell, and B. A.      Pearl, J. and T. Verma (1991). A theory
  (2001). Estimation and prediction           Turlach (2000b). On the lasso and            of inferred causation. In Knowledge
  for stochastic blockstructures. Jour-       its dual. J. Computational and               Representation, pp. 441–452.
  nal of the American Statistical Asso-       graphical statistics 9, 319–337.
  ciation 96(455), 1077–??                                                              Pe’er, D. (2005, April). Bayesian net-
                                            Ostendorf, M., V. Digalakis, and               work analysis of signaling net-
Nowlan, S. and G. Hinton (1992). Sim-          O. Kimball (1996). From HMMs to             works: a primer. Science STKE 281,
  plifying neural networks by soft             segment models: a uniﬁed view               14.
  weight sharing. Neural Computa-              of stochastic modeling for speech        Peng, F., R. Jacobs, and M. Tan-
  tion 4(4), 473–493.                          recognition. IEEE Trans. on Speech          ner (1996).      Bayesian Inference
                                               and Audio Processing 4(5), 360–             in Mixtures-of-Experts and Hier-
Nummiaro, K., E. Koller-Meier, and             378.                                        archical Mixtures-of-Experts Mod-
  L. V. Gool (2003). An adaptive                                                           els With an Application to Speech
  color-based particle ﬁlter. Image         Overschee, P. V. and B. D. Moor                Recognition. J. of the Am. Stat. As-
  and Vision Computing 21(1), 99–110.         (1996). Subspace Identiﬁcation for           soc. 91(435), 953–960.
                                              Linear Systems: Theory, Implemen-
Obozinski, G., B. Taskar, and M. I. Jor-      tation, Applications. Kluwer Aca-         Petris, G., S. Petrone, and P. Campag-
  dan (2007). Joint covariate selection       demic Publishers.                            noli (2009). Dynamic linear models
  for grouped classiﬁcation. Techni-                                                       with R. Springer.
  cal report, UC Berkeley.
                                            Paatero, P. and U. Tapper (1994). Pos-
                                               itive matrix factorization: A non-       Pham, D.-T. and P. Garrat (1997). Blind
Oh, M.-S. and J. Berger (1992). Adap-                                                      separation of mixture of inde-
  tive importance sampling in Monte            negative factor model with opti-
                                               mal utilization of error estimates of       pendent sources through a quasi-
  Carlo integration. J. of Statistical         data values. Environmetrics 5, 111–         maximum likelihood approach.
  Computation and Simulation 41(3),            126.                                        IEEE Trans. on Signal Process-
  143 – 168.                                                                               ing 45(7), 1712–1725.
                                            Padadimitriou, C. and K. Steiglitz          Pietra, S. D., V. D. Pietra, and J. Laf-
Oh, S., S. Russell, and S. Sastry (2009).
  Markov Chain Monte Carlo Data                (1982). Combinatorial optimization:         ferty (1997). Inducing features of
  Association for Multi-Target Track-          Algorithms and Complexity. Pren-            random ﬁelds. IEEE Trans. on Pat-
  ing. IEEE Trans. on Automatic Con-           tice Hall.                                  tern Analysis and Machine Intelli-
  trol 54(3), 481–497.                                                                     gence 19(4).
                                            Paisley, J. and L. Carin (2009). Non-
                                               parametric factor analysis with          Plackett, R. (1975). The analysis of per-
O’Hagan, A. (1978). Curve ﬁtting and                                                       mutations. Applied Stat. 24, 193–
   optimal design for prediction. J. of        beta process priors. In Intl. Conf.
                                               on Machine Learning.                        202.
   Royal Stat. Soc. Series B 40, 1–42.
                                                                                        Platt, J. (1998). Using analytic QP
O’Hara, R. and M. Sillanpaa (2009).         Palmer, S. (1999). Vision Science: Pho-        and sparseness to speed training of
   A Review of Bayesian Variable Se-           tons to Phenomenology. MIT Press.           support vector machines. In NIPS.
   lection Methods: What, How and
   Which. Bayesian Analysis 4(1), 85–       Parise, S. and M. Welling (2005).           Platt, J. (2000). Probabilities for sv ma-
   118.                                        Learning in Markov Random                   chines. In A. Smola, P. Bartlett,
                                               Fields: An Empirical Study. In Joint        B. Schoelkopf, and D. Schuurmans
Olshausen, B. A. and D. J. Field (1996).       Statistical Meeting.                        (Eds.), Advances in Large Margin
   Emergence of simple cell recep-                                                         Classiﬁers. MIT Press.
   tive ﬁeld properties by learning a       Park, T. and G. Casella (2008). The
   sparse code for natural images. Na-                                                  Platt, J., N. Cristianini, and J. Shawe-
                                               Bayesian Lasso. J. of the Am. Stat.         Taylor (2000). Large margin DAGs
   ture 381, 607–609.                          Assoc. 103(482), 681–686.                   for multiclass classiﬁcation. In
Opper, M. (1998). A Bayesian approach                                                      NIPS, Volume 12, pp. 547–553.
                                            Parviainen, P. and M. Koivisto (2011).
  to online learning. In D. Saad               Ancestor relations in the presence       Plummer, M. (2003). JAGS: A Program
  (Ed.), On-line learning in neural            of unobserved variables. In Proc.           for Analysis of Bayesian Graphi-
  networks. Cambridge.                         European Conf. on Machine Learn-            cal Models Using Gibbs Sampling.
                                               ing.                                        In Proc. 3rd Intl. Workshop on Dis-
Opper, M. and C. Archambeau (2009).                                                        tributed Statistical Computing.
  The variational Gaussian approxi-         Paskin, M. (2003). Thin junction tree
  mation revisited. Neural Computa-            ﬁlters for simultaneous localization     Polson, N. and S. Scott (2011). Data
  tion 21(3), 786–792.                         and mapping. In Intl. Joint Conf. on        augmentation for support vector
                                               AI.                                         machines. Bayesian Analysis 6(1),
Opper, M. and D. Saad (Eds.) (2001).                                                       1–124.
  Advanced mean ﬁeld methods: the-          Pearl, J. (1988). Probabilistic Reasoning
  ory and practice. MIT Press.                 in Intelligent Systems: Networks of      Pontil, M., S. Mukherjee, and F. Girosi
                                               Plausible Inference. Morgan Kauf-           (1998). On the Noise Model of Sup-
Osborne, M. R., B. Presnell, and B. A.         mann.                                       port Vector Machine Regression.
  Turlach (2000a). A new approach to                                                       Technical report, MIT AI Lab.
  variable selection in least squares       Pearl, J. (2000). Causality: Models, Rea-   Poon, H. and P. Domingos (2011). Sum-
  problems. IMA Journal of Numeri-             soning and Inference. Cambridge             product networks: A new deep ar-
  cal Analysis 20(3), 389–403.                 Univ. Press.                                chitecture. In UAI.
1036                                                                                                        BIBLIOGRAPHY


Pourahmadi, M. (2004). Simultaneous         Raiffa, H. (1968). Decision Analysis. Ad-   Rao, A. and K. Rose (2001, February).
   Modelling of Covariance Matrices:           dison Wesley.                               Deterministically Annealed Design
   GLM, Bayesian and Nonparamet-                                                           of Hidden Markov Model Speech
   ric Perspectives. Technical report,      Raina, R., A. Madhavan, and A. Ng              Recognizers. IEEE Trans. on Speech
   Northern Illinois University.               (2009). Large-scale deep unsuper-           and Audio Proc. 9(2), 111–126.
                                               vised learning using graphics pro-
Prado, R. and M. West (2010). Time             cessors. In Intl. Conf. on Machine       Rasmussen, C. (2000). The inﬁnite
   Series: Modelling, Computation and          Learning.                                   gaussian mixture model. In NIPS.
   Inference. CRC Press.
                                            Raina, R., A. Ng, and D. Koller (2005).     Rasmussen, C. E. and J. Quiñonero-
Press, S. J. (2005).     Applied mul-          Transfer learning by constructing           Candela (2005). Healing the rele-
   tivariate analysis, using Bayesian          informative priors. In NIPS.                vance vector machine by augmen-
   and frequentist methods of infer-                                                       tation. In Intl. Conf. on Machine
   ence. Dover. Second edition.             Rajaraman, A. and J. Ullman (2010).            Learning, pp. 689–696.
                                               Mining of massive datasets. Self-        Rasmussen, C. E. and C. K. I. Williams
Press, W., W. Vetterling, S. Teukolosky,       published.
   and B. Flannery (1988). Numeri-                                                         (2006). Gaussian Processes for Ma-
   cal Recipes in C: The Art of Scien-                                                     chine Learning. MIT Press.
                                            Rajaraman, A. and J. Ullman (2011).
   tiﬁc Computing (Second ed.). Cam-           Mining of massive datasets. Cam-
   bridge University Press.                                                             Ratsch, G., T. Onoda, and K. Muller
                                               bridge.                                     (2001). Soft margins for adaboost.
Prince, S. (2012). Computer Vision:                                                        Machine Learning 42, 287–320.
                                            Rakotomamonjy, A., F. Bach, S. Canu,
   Models, Learning and Inference.             and Y. Grandvalet (2008). Sim-
   Cambridge.                                                                           Rattray, M., O. Stegle, K. Sharp, and
                                               pleMKL. J. of Machine Learning Re-          J. Winn (2009). Inference algo-
Pritchard, J., M. M. Stephens, and             search 9, 2491–2521.                        rithms and learning theory for
    P. Donnelly (2000). Inference of                                                       Bayesian sparse factor analysis. In
    population structure using multi-       Ramage, D., D. Hall, R. Nallapati,             Proc. Intl. Workshop on Statistical-
    locus genotype data. Genetics 155,        and C. Manning (2009). Labeled               Mechanical Informatics.
    945–959.                                  LDA: A supervised topic model for
                                              credit attribution in multi-labeled       Rauch, H. E., F. Tung, and C. T. Striebel
Qi, Y. and T. Jaakkola (2008). Param-         corpora. In EMNLP.                           (1965). Maximum likelihood esti-
   eter Expanded Variational Bayesian                                                      mates of linear dynamic systems.
   Methods. In NIPS.                        Ramage, D., C. Manning, and S. Du-             AIAA Journal 3(8), 1445–1450.
                                              mais (2011). Partially Labeled Topic
Qi, Y., M. Szummer, and T. Minka              Models for Interpretable Text Min-        Ravikumar, P., J. Lafferty, H. Liu, and
   (2005). Bayesian Conditional Ran-          ing. In Proc. of the Int’l Conf. on          L. Wasserman (2009). Sparse Ad-
   dom Fields. In 10th Intl. Workshop         Knowledge Discovery and Data Min-            ditive Models. J. of Royal Stat. Soc.
   on AI/Statistics.                          ing.                                         Series B 71(5), 1009–1030.

Quinlan, J. (1990). Learning logical def-   Ramaswamy, S., P. Tamayo, R. Rifkin,        Raydan, M. (1997). The barzilai and
  initions from relations. Machine            S. Mukherjee, C. Yeang, M. Angelo,           borwein gradient method for the
  Learning 5, 239–266.                        C. Ladd, M. Reich, E. Latulippe,             large scale unconstrained mini-
                                              J. Mesirov, T. Poggio, W. Gerald,            mization problem. SIAM J. on Opti-
Quinlan, J. R. (1986). Induction of de-       M. Loda, E. Lander, and T. Golub             mization 7 (1), 26–33.
  cision trees. Machine Learning 1,           (2001). Multiclass cancer diagno-
  81–106.                                     sis using tumor gene expression           Rennie, J. (2004). Why sums are bad.
                                              signature. Proc. of the National             Technical report, MIT.
Quinlan, J. R. (1993). C4.5 Programs for      Academy of Science, USA 98, 15149–        Rennie, J., L. Shih, J. Teevan, and
  Machine Learning. Morgan Kauff-             15154.                                       D. Karger (2003). Tackling the poor
  man.                                                                                     assumptions of naive Bayes text
                                            Ranzato, M. and G. Hinton (2010).              classiﬁers. In Intl. Conf. on Machine
Quinonero-Candela, J., C. Rasmussen,           Modeling pixel means and covari-            Learning.
  and C. Williams (2007). Approxi-             ances using factored third-order
  mation methods for gaussian pro-             Boltzmann machines. In CVPR.             Reshed, D., Y. Reshef, H. Finucane,
  cess regression.     In L. Bottou,                                                       S. Grossman, G. McVean, P. Turn-
  O. Chapelle, D. DeCoste, and J. We-       Ranzato, M., F.-J. Huang, Y.-L.                baugh, E. Lander, M. Mitzen-
  ston (Eds.), Large Scale Kernel Ma-          Boureau, and Y. LeCun (2007). Un-           macher, and P. Sabeti (2011, De-
  chines, pp. 203–223. MIT Press.              supervised Learning of Invariant            cember). Detecting novel associa-
                                               Feature Hierarchies with Applica-           tions in large data sets. Science 334,
Rabiner, L. R. (1989). A tutorial on Hid-      tions to Object Recognition. In             1518–1524.
   den Markov Models and selected              CVPR.
   applications in speech recognition.                                                  Resnick, S. I. (1992). Adventures in
   Proc. of the IEEE 77 (2), 257–286.       Ranzato, M., C. Poultney, S. Chopra,           Stochastic Processes. Birkhauser.
                                               and Y.LeCun (2006).       Efficient
Rai, P. and H. Daume (2009). Multi-            learning of sparse representations       Rice, J. (1995). Mathematical statistics
   label prediction via sparse inﬁnite         with an energy-based model. In              and data analysis. Duxbury. 2nd
   CCA. In NIPS.                               NIPS.                                       edition.
BIBLIOGRAPHY                                                                                                               1037


Richardson, S. and P. Green (1997). On      Rosenblatt, F. (1958). The percep-          Ruppert, D., M. Wand, and R. Carroll
   Bayesian Analysis of Mixtures With          tron: A probabilistic model for            (2003). Semiparametric Regression.
   an Unknown Number of Compo-                 information storage and organiza-          Cambridge University Press.
   nents. J. of Royal Stat. Soc. Series        tion in the brain. Psychological Re-
   B 59, 731–758.                              view 65(6), 386âĂŞ408.                 Rush, A. M. and M. Collins (2012). A
                                                                                           tutorial on Lagrangian relaxation
Riesenhuber, M. and T. Poggio               Ross, S. (1989). Introduction to Proba-        and dual decomposition for NLP.
   (1999). Hierarchical models of ob-          bility Models. Academic Press.              Technical report, Columbia U.
   ject recognition in cortex. Nature
   Neuroscience 2, 1019–1025.               Rosset, S., J. Zhu, and T. Hastie (2004).   Russell, S., J. Binder, D. Koller, and
                                               Boosting as a regularized path to           K. Kanazawa (1995). Local learning
Rish, I., G. Grabarnik, G. Cec-                a maximum margin classiﬁer. J. of           in probabilistic networks with hid-
   chi, F. Pereira, and G. Gordon              Machine Learning Research 5, 941–           den variables. In Intl. Joint Conf. on
   (2008). Closed-form supervised di-          973.                                        AI.
   mensionality reduction with gener-
   alized linear models. In Intl. Conf.     Rossi, P., G. Allenby, and R. McCulloch
                                               (2006). Bayesian Statistics and Mar-     Russell, S. and P. Norvig (1995). Ar-
   on Machine Learning.                                                                    tiﬁcial Intelligence: A Modern Ap-
                                               keting. Wiley.
                                                                                           proach. Englewood Cliffs, NJ: Pren-
Ristic, B., S. Arulampalam, and N. Gor-     Roth, D. (1996, Apr). On the hardness          tice Hall.
   don (2004). Beyond the Kalman Fil-          of approximate reasoning. Artiﬁcial
   ter: Particle Filters for Tracking Ap-      Intelligence 82(1-2), 273–302.           Russell, S. and P. Norvig (2002). Ar-
   plications. Artech House Radar Li-                                                      tiﬁcial Intelligence: A Modern Ap-
   brary.                                   Rother, C., P. Kohli, W. Feng, and J. Jia      proach. Prentice Hall. 2nd edition.
                                               (2009). Minimizing sparse higher
Robert, C. (1995). Simulation of trun-         order energy functions of discrete
                                               variables. In CVPR, pp. 1382–1389.       Russell, S. and P. Norvig (2010). Ar-
  cated normal distributions. Statis-
  tics and computing 5, 121–125.                                                           tiﬁcial Intelligence: A Modern Ap-
                                            Rouder, J., P. Speckman, D. Sun, and           proach. Prentice Hall. 3rd edition.
                                              R. Morey (2009). Bayesian t tests
Robert, C. and G. Casella (2004).             for accepting and rejecting the null
  Monte Carlo Statisical Methods.                                                       S. and M. Black (2009, April). Fields
                                              hypothesis. Pyschonomic Bulletin &           of experts. Intl. J. Computer Vi-
  Springer. 2nd edition.                      Review 16(2), 225–237.                       sion 82(2), 205–229.
Roberts, G. and J. Rosenthal (2001).        Roverato, A. (2002).          Hyper in-
  Optimal scaling for various                  verse Wishart distribution for non-      Sachs, K., O. Perez, D. Pe’er,
  Metropolis-Hastings        algorithms.       decomposable graphs and its ap-             D. Lauffenburger, and G. Nolan
  Statistical Science 16, 351–367.             plication to Bayesian inference for         (2005). Causal protein-signaling
                                               Gaussian graphical models. Scand.           networks derived from multipa-
Roberts, G. O. and S. K. Sahu                  J. Statistics 29, 391–411.                  rameter single-cell data.   Sci-
  (1997). Updating schemes, corre-                                                         ence 308.
  lation structure, blocking and pa-        Roweis, S. (1997). EM algorithms for
  rameterization for the gibbs sam-           PCA and SPCA. In NIPS.                    Sahami, M. and T. Heilman (2006).
  pler. J. of Royal Stat. Soc. Series                                                      A Web-based Kernel Function for
                                            Rubin, D. (1998). Using the SIR algo-          Measuring the Similarity of Short
  B 59(2), 291–317.                           rithm to simulate posterior distri-
                                              butions. In Bayesian Statistics 3.           Text Snippets. In WWW conferenec.
Robinson, R. W. (1973). Counting la-
  beled acyclic digraphs. In F. Harary      Rue, H. and L. Held (2005). Gaus-           Salakhutdinov, R. (2009). Deep Gen-
  (Ed.), New Directions in the Theory         sian Markov Random Fields: The-              erative Models. Ph.D. thesis, U.
  of Graphs, pp. 239–273. Academic            ory and Applications, Volume 104             Toronto.
  Press.                                      of Monographs on Statistics and Ap-
                                              plied Probability. London: Chap-          Salakhutdinov, R. and G. Hinton
Roch, S. (2006).        A short proof         man & Hall.                                  (2009). Deep Boltzmann machines.
   that phylogenetic tree reconstru-                                                       In AI/Statistics, Volume 5, pp. 448–
   tion by maximum likelihood is            Rue, H., S. Martino, and N. Chopin             455.
   hard. IEEE/ACM Trans. Comp. Bio.           (2009). Approximate Bayesian In-
                                              ference for Latent Gaussian Models
   Bioinformatics 31(1).                      Using Integrated Nested Laplace           Salakhutdinov, R. and G. Hinton
                                                                                           (2010). Replicated Softmax: an
                                              Approximations. J. of Royal Stat. Soc.       Undirected Topic Model. In NIPS.
Rodriguez,  A. and K. Ghosh                   Series B 71, 319–392.
  (2011).     Modeling relational
  data through nested partition             Rumelhart, D., G. Hinton, and               Salakhutdinov, R. and H. Larochelle
  models. Biometrika. To appear.              R. Williams (1986). Learning inter-          (2010). Efficient Learning of Deep
                                              nal representations by error propa-          Boltzmann Machines. In AI/Statis-
Rose, K. (1998, November). Determin-          gation. In D. Rumelhart, J. McClel-          tics.
   istic annealing for clustering, com-       land, and the PDD Research Group
   pression, classiﬁcation, regression,       (Eds.), Parallel Distributed Process-     Salakhutdinov, R. and A. Mnih (2008).
   and related optimization problems.         ing: Explorations in the Microstruc-         Probabilistic matrix factorization.
   Proc. IEEE 80, 2210–2239.                  ture of Cognition. MIT Press.                In NIPS, Volume 20.
1038                                                                                                       BIBLIOGRAPHY


Salakhutdinov, R. and S. Roweis            Schaefer, J. and K. Strimmer (2005).        Schniter, P., L. C. Potter, and J. Ziniel
   (2003). Adaptive overrelaxed bound         A shrinkage approach to large-              (2008). Fast Bayesian Matching
   optimization methods. In Proceed-          scale covariance matrix estimation          Pursuit: Model Uncertainty and
   ings of the International Conference       and implications for functional ge-         Parameter Estimation for Sparse
   on Machine Learning, Volume 20,            nomics. Statist. Appl. Genet. Mol.          Linear Models. Technical report, U.
   pp. 664–671.                               Biol 4(32).                                 Ohio. Submitted to IEEE Trans. on
                                                                                          Signal Processing.
Salakhutdinov, R., J. Tenenbaum, and       Schapire, R. (1990). The strength of
                                                                                       Schnitzspan, P., S. Roth, and B. Schiele
   A. Torralba (2011). Learning To            weak learnability. Machine Learn-           (2010).   Automatic discovery of
   Learn with Compound HD Models.             ing 5, 197–227.                             meaningful object parts with latent
   In NIPS.                                                                               CRFs. In CVPR.
                                           Schapire, R. and Y. Freund (2012).
Salakhutdinov, R. R., A. Mnih, and            Boosting: Foundations and Algo-          Schoelkopf, B. and A. Smola (2002).
   G. E. Hinton (2007). Restricted            rithms. MIT Press.                          Learning with Kernels: Support Vec-
   boltzmann machines for collabo-                                                        tor Machines, Regularization, Opti-
   rative ﬁltering. In Intl. Conf. on      Schapire, R., Y. Freund, P. Bartlett, and      mization, and Beyond. MIT Press.
   Machine Learning, Volume 24, pp.           W. Lee (1998). Boosting the mar-
   791–798.                                   gin: a new explanation for the ef-       Schoelkopf, B., A. Smola, and K.-R.
                                              fectiveness of voting methods. An-          Mueller (1998). Nonlinear compo-
Salojarvi, J., K. Puolamaki, and              nals of Statistics 5, 1651–1686.            nent analysis as a kernel eigen-
   S. Klaski (2005). On discriminative                                                    value problem. Neural Computa-
   joint density modeling. In Proc. Eu-    Scharstein, D. and R. Szeliski (2002). A       tion 10, 1299 – 1319.
   ropean Conf. on Machine Learning.          taxonomy and evaluation of dense
                                              two-frame stereo correspondence          Schraudolph, N. N., J. Yu, and S. Gün-
Sampson, F. (1968). A Novitiate in a          algorithms. Intl. J. Computer Vi-           ter (2007). A Stochastic Quasi-
  Period of Change: An Experimental           sion 47 (1), 7–42.                          Newton Method for Online Convex
  and Case Study of Social Relation-                                                      Optimization. In AI/Statistics, pp.
  ships. Ph.D. thesis, Cornell.            Schaul, T., S. Zhang, and Y. LeCun             436–443.
                                              (2012). No more pesky learning
                                              rates. Technical report, Courant In-     Schwarz, G. (1978). Estimating the di-
Santner, T., B. Williams, and W. Notz                                                     mension of a model. Annals of
   (2003). The Design and Analysis of         stite of Mathematical Sciences.
   Computer Experiments. Springer.                                                        Statistics 6(2), 461âĂŞ464.
                                           Schmee, J. and G. Hahn (1979). A sim-
Sarkar, J. (1991). One-armed bandit           ple method for regresssion analy-        Schwarz, R. and Y. Chow (1990). The
   problems with covariates. The An-          sis with censored data. Technomet-          n-best algorithm: an efficient and
                                              rics 21, 417–432.                           exact procedure for ﬁnding the n
   nals of Statistics 19(4), 1978–2002.
                                                                                          most likely hypotheses. In Intl.
Sato, M. and S. Ishii (2000). On-line      Schmidt, M. (2010). Graphical model            Conf. on Acoustics, Speech and Sig-
   EM algorithm for the normalized            structure learning with L1 regular-         nal Proc.
   Gaussian network. Neural Compu-            ization. Ph.D. thesis, UBC.
   tation 12, 407–432.                                                                 Schweikerta, G., A. Zien, G. Zeller,
                                           Schmidt, M., G. Fung, and R. Rosales           J. Behr, C. Dieterich, C. Ong,
                                              (2009). Optimization methods for            P. Philips, F. D. Bona, L. Hartmann,
Saul, L., T. Jaakkola, and M. Jordan
   (1996). Mean Field Theory for Sig-          − 1 regularization. Technical re-         A. Bohlen, N. KrÃijger, S. Son-
   moid Belief Networks. J. of AI Re-         port, U. British Columbia.                  nenburg, and G. RÃd’tsch (2009).
   search 4, 61–76.                                                                       mGene: Accurate SVM-based Gene
                                           Schmidt, M. and K. Murphy (2009).              Finding with an Application to Ne-
                                              Modeling Discrete Interventional            matode Genomes. Genome Re-
Saul, L. and M. Jordan (1995). Exploit-       Data using Directed Cyclic Graphi-
   ing tractable substructures in in-                                                     search, 19, 2133–2143.
                                              cal Models. In UAI.
   tractable networks. In NIPS, Vol-                                                   Scott, D. (1979).       On optimal
   ume 8.                                  Schmidt, M., K. Murphy, G. Fung, and           and     data-based     histograms.
                                              R. Rosales (2008). Structure Learn-         Biometrika 66(3), 605–610.
Saul, L. and M. Jordan (2000). Attrac-        ing in Random Fields for Heart
   tor dynamics in feedforward neural         Motion Abnormality Detection. In         Scott, J. G. and C. M. Carvalho (2008).
   networks. Neural Computation 12,           CVPR.                                       Feature-inclusion stochastic search
   1313–1335.                                                                             for gaussian graphical models. J.
                                           Schmidt, M., A. Niculescu-Mizil, and           of Computational and Graphical
Saunders, C., J. Shawe-Taylor, and            K. Murphy (2007). Learning Graph-           Statistics 17 (4), 790–808.
   A. Vinokourov (2003). String Ker-          ical Model Structure using L1-
   nels, Fisher Kernels and Finite State      Regularization Paths. In AAAI.           Scott, S. (2009). Data augmenta-
   Automata. In NIPS.                                                                     tion, frequentist estimation, and
                                           Schmidt, M., E. van den Berg,                  the bayesian analysis of multino-
Savage, R., K. Heller, Y. Xi, Z. Ghahra-      M. Friedlander, and K. Murphy               mial logit models. Statistical Papers.
   mani, W. Truman, M. Grant,                 (2009). Optimizing Costly Func-
   K. Denby, and D. Wild (2009).              tions with Simple Constraints: A         Scott, S. (2010). A modern Bayesian
   R/BHC: fast Bayesian hierarchi-            Limited-Memory Projected Quasi-             look at the multi-armed bandit.
   cal clustering for microarray data.        Newton Algorithm. In AI & Statis-           Applied Stochastic Models in Busi-
   BMC Bioinformatics 10(242).                tics.                                       ness and Industry 26, 639–658.
BIBLIOGRAPHY                                                                                                            1039


Sedgewick, R. and K. Wayne (2011). Al-      Shalev-Shwartz, S., Y. Singer, and        Silander, T. and P. Myllmaki (2006).
   gorithms. Addison Wesley.                   N. Srebro (2007). Pegasos: pri-            A simple approach for ﬁnding the
                                               mal estimated sub-gradient solver          globally optimal Bayesian network
Seeger, M. (2008). Bayesian Inference          for svm. In Intl. Conf. on Machine         structure. In UAI.
   and Optimal Design in the Sparse            Learning.
   Linear Model. J. of Machine Learn-                                                 Sill, J., G. Takacs, L. Mackey, and
                                            Shalizi, C. (2009). Cs 36-350 lecture         D. Lin (2009). Feature-weighted lin-
   ing Research 9, 759–813.                                                               ear stacking. Technical report, .
                                               10: Principal components: mathe-
Seeger, M. and H. Nickish (2008).              matics, example, interpretation.       Silverman, B. W. (1984).        Spline
   Compressed sensing and bayesian                                                        smoothing: the equivalent variable
   experimental design. In Intl. Conf.      Shan, H. and A. Banerjee (2010). Resid-       kernel method. Annals of Statis-
   on Machine Learning.                        ual Bayesian co-clustering for ma-         tics 12(3), 898–916.
                                               trix approximation. In SIAM Intl.
Segal, D. (2011, 12 February). The dirty       Conf. on Data Mining.                  Simard, P., D. Steinkraus, and J. Platt
   little secrets of search. New York                                                    (2003). Best practices for convolu-
   Times.                                   Shawe-Taylor, J. and N. Cristianini          tional neural networks applied to
                                               (2004). Kernel Methods for Pattern        visual document analysis. In Intl.
Seide, F., G. Li, and D. Yu (2011). Con-       Analysis. Cambridge.                      Conf. on Document Analysis and
   versational Speech Transcription                                                      Recognition (ICDAR).
   Using Context-Dependent Deep             Sheng, Q., Y. Moreau, and B. D. Moor
   Neural Networks. In Interspeech.            (2003). Biclustering Microarray data   Simon, D. (2006). Optimal State Es-
                                               by Gibbs sampling. Bioinformat-           timation: Kalman, H Inﬁnity, and
Sejnowski, T. and C. Rosenberg (1987).         ics 19, ii196–ii205.                      Nonlinear Approaches. Wiley.
   Parallel networks that learn to pro-
   nounce english text. Complex Sys-        Shi, J. and J. Malik (2000). Normal-      Singliar, T. and M. Hauskrecht (2006).
   tems 1, 145–168.                            ized cuts and image segmentation.         Noisy-OR Component Analysis and
                                               IEEE Trans. on Pattern Analysis and       its Application to Link Analysis. J.
Sellke, T., M. J. Bayarri, and J. Berger       Machine Intelligence.                     of Machine Learning Research 7.
   (2001). Calibration of p Values
   for Testing Precise Null Hypothe-        Shoham, Y. and K. Leyton-Brown            Smidl, V. and A. Quinn (2005). The
   ses. The American Statistician 55(1),       (2009). Multiagent Systems: Algo-        Variational Bayes Method in Signal
   62–71.                                                                               Processing. Springer.
                                               rithmic, Game- Theoretic, and Log-
Serre, T., L. Wolf, and T. Poggio (2005).      ical Foundations. Cambridge Uni-       Smith, A. F. M. and A. E. Gelfand
   Object recognition with features            versity Press.                           (1992). Bayesian statistics with-
   inspired by visual cortex. In CVPR,                                                  out tears: A sampling-resampling
   pp. 994–1000.                            Shotton, J., A. Fitzgibbon, M. Cook,        perspective. The American Statisti-
                                               T. Sharp, M. Finocchio, R. Moore,        cian 46(2), 84–88.
Shachter, R. (1998). Bayes-ball: The           A. Kipman, and A. Blake (2011).
   rational pastime (for determining           Real-time human pose recognition       Smith, R. and P. Cheeseman (1986).
   irrelevance and requisite informa-          in parts from a single depth image.      On the representation and estima-
   tion in belief networks and inﬂu-           In CVPR.                                 tion of spatial uncertainty. Intl. J.
   ence diagrams). In UAI.                                                              Robotics Research 5(4), 56–68.
                                            Shwe, M., B. Middleton, D. Heck-
Shachter, R. and C. R. Kenley                 erman, M. Henrion, E. Horvitz,          Smith, V., J. Yu, T. Smulders,
   (1989). Gaussian inﬂuence dia-             H. Lehmann, and G. Cooper (1991).         A. Hartemink, and E. Jarvis (2006).
   grams. Managment Science 35(5),            Probabilistic diagnosis using a re-       Computational Inference of Neural
   527–550.                                   formulation of the internist-1/qmr        Information Flow Networks. PLOS
                                              knowledge base.       Methods. Inf.       Computational Biology 2, 1436–
Shachter, R. D. and M. A. Peot (1989).        Med 30(4), 241–255.                       1439.
   Simulation approaches to general                                                   Smolensky, P. (1986).       Information
   probabilistic inference on belief        Siddiqi, S., B. Boots, and G. Gordon
   networks. In UAI, Volume 5.                 (2007). A constraint generation ap-      processing in dynamical systems:
                                               proach to learning stable linear dy-     foundations of harmony theory.
                                               namical systems. In NIPS.                In D. Rumehart and J. McClel-
Shafer, G. R. and P. P. Shenoy (1990).                                                  land (Eds.), Parallel Distributed Pro-
   Probability propagation. Annals of                                                   cessing: Explorations in the Mi-
   Mathematics and AI 2, 327–352.           Siepel, A. and D. Haussler (2003).
                                               Combining phylogenetic and hid-          crostructure of Cognition. Volume 1.
                                               den markov models in biosequence         McGraw-Hill.
Shafto, P., C. Kemp, V. Mansinghka,
   M. Gordon, and J. B. Tenenbaum              analysis. In Proc. 7th Intl. Conf.     Smyth, P., D. Heckerman, and M. I. Jor-
   (2006). Learning cross-cutting sys-         on Computational Molecular Biol-         dan (1997). Probabilistic indepen-
   tems of categories. In Cognitive Sci-       ogy (RECOMB).                            dence networks for hidden Markov
   ence Conference.                                                                     probability models. Neural Compu-
                                            Silander, T., P. Kontkanen, and P. Myl-     tation 9(2), 227–269.
Shahaf, D., A. Chechetka, and                   lymÃd’ki (2007). On Sensitivity of
   C. Guestrin (2009). Learning Thin            the MAP Bayesian Network Struc-       Sohl-Dickstein, J., P. Battaglino, and
   Junction Trees via Graph Cuts. In            ture to the Equivalent Sample Size       M. DeWeese (2011). In Intl. Conf.
   AISTATS.                                     Parameter. In UAI, pp. 360–367.          on Machine Learning.
1040                                                                                                             BIBLIOGRAPHY


Sollich, P. (2002). Bayesian methods         Stephens, M. (2000). Dealing with              Sun, L., S. Ji, S. Yu, and J. Ye (2009). On
   for support vector machines: evi-            label-switching in mixture mod-                the equivalence between canonical
   dence and predictive class proba-            els. J. Royal Statistical Society, Series      correlation analysis and orthonor-
   bilities. Machine Learning 46, 21–           B 62, 795–809.                                 malized partial least squares. In
   52.                                                                                         Intl. Joint Conf. on AI.
                                             Stern, D., R. Herbrich, and T. Grae-
Sontag, D., A. Globerson, and                   pel (2009). Matchbox: Large Scale           Sunehag, P., J. Trumpf, S. V. N. Vish-
   T. Jaakkola (2011). Introduction to          Bayesian Recommendations. In                   wanathan, and N. N. Schraudolph
   dual decomposition for inference.            Proc. 18th. Intl. World Wide Web               (2009). Variable Metric Stochastic
   In S. Sra, S. Nowozin, and S. J.             Conference.                                    Approximation Theory. In AI/Statis-
   Wright (Eds.), Optimization for Ma-                                                         tics, pp. 560–566.
   chine Learning. MIT Press.                Steyvers, M. and T. Griffiths (2007).          Sutton, C. and A. McCallum (2007).
                                                Probabilistic topic models.     In             Improved Dynamic Schedules for
Sorenson, H. and D. Alspach (1971).             T. Landauer, D. McNamara, S. Den-              Belief Propagation. In UAI.
   Recursive Bayesian estimation us-            nis, and W. Kintsch (Eds.), Latent
   ing Gaussian sums. Automatica 7,             Semantic Analysis: A Road to Mean-          Sutton, R. and A. Barto (1998). Rein-
   465âĂŞ 479.                                ing. Laurence Erlbaum.                         forcment Learning: An Introduction.
                                                                                               MIT Press.
Soussen, C., J. Iier, D. Brie, and           Stigler, S. (1986). The history of statis-
   J. Duan (2010). From Bernoulli-               tics. Harvard University press.            Swendsen, R. and J.-S. Wang (1987).
   Gaussian deconvolution to sparse                                                           Nonuniversal critical dynamics in
   signal restoration. Technical report,     Stolcke, A. and S. M. Omohundro                  Monte Carlo simulations. Physical
   Centre de Recherche en Automa-               (1992). Hidden Markov Model In-               Review Letters 58, 86–88.
   tique de Nancy.                              duction by Bayesian Model Merg-
                                                ing. In NIPS-5.                             Swersky, K., B. Chen, B. Marlin, and
Spaan, M. and N. Vlassis (2005).                                                              N. de Freitas (2010).       A Tuto-
   Perseus: Randomized Point-based                                                            rial on Stochastic Approximation
   Value Iteration for POMDPs. J. of AI      Stoyanov, V., A. Ropson, and J. Eis-             Algorithms for Training Restricted
                                                ner (2011). Empirical risk minimiza-          Boltzmann Machines and Deep Be-
   Research 24, 195–220.                        tion of graphical model parameters            lief Nets. In Information Theory and
                                                given approximate inference, de-              Applications (ITA) Workshop.
Spall, J. (2003). Introduction to Stochas-      coding, and model structure. In
   tic Search and Optimization: Es-             AI/Statistics.                              Szeliski, R. (2010).   Computer Vi-
   timation, Simulation, and Control.
   Wiley.                                                                                      sion: Algorithms and Applications.
                                             Sudderth, E. (2006). Graphical Models             Springer.
                                                for Visual Object Recognition and
Speed, T. (2011, December). A cor-              Tracking. Ph.D. thesis, MIT.                Szeliski, R., R. Zabih, D. Scharstein,
   relation for the 21st century. Sci-                                                         O. Veksler, V. Kolmogorov, A. Agar-
   ence 334, 152–1503.                                                                         wala, M. Tappen, and C. Rother
                                             Sudderth, E. and W. Freeman (2008,
                                                March). Signal and Image Process-              (2008).     A Comparative Study
Speed, T. and H. Kiiveri (1986). Gaus-          ing with Belief Propagation. IEEE              of Energy Minimization Methods
   sian Markov distributions over ﬁ-                                                           for Markov Random Fields with
   nite graphs.       Annals of Statis-         Signal Processing Magazine.
                                                                                               Smoothness-Based Priors.        IEEE
   tics 14(1), 138–150.                                                                        Trans. on Pattern Analysis and Ma-
                                             Sudderth, E., A. Ihler, W. Freeman, and           chine Intelligence 30(6), 1068–1080.
Spiegelhalter, D. J. and S. L. Lauritzen        A. Willsky (2003). Nonparametric
   (1990). Sequential updating of con-          Belief Propagation. In CVPR.                Szepesvari, C. (2010). Algorithms for
   ditional probabilities on directed                                                          Reinforcement Learning. Morgan
   graphical structures. Networks 20.        Sudderth, E., A. Ihler, M. Isard,                 Claypool.
                                                W. Freeman, and A. Willsky (2010).
Spirtes, P., C. Glymour, and                    Nonparametric Belief Propagation.           Taleb, N. (2007). The Black Swan:
   R. Scheines (2000).         Causa-           Comm. of the ACM 53(10).                       The Impact of the Highly Improba-
   tion, Prediction, and Search. MIT                                                           ble. Random House.
   Press. 2nd edition.                       Sudderth, E. and M. Jordan (2008).
                                                Shared Segmentation of Natural              Talhouk, A., K. Murphy, and A. Doucet
Srebro, N. (2001). Maximum Likelihood           Scenes Using Dependent Pitman-                 (2011). Efficient Bayesian Inference
   Bounded Tree-Width Markov Net-              Yor Processes. In NIPS.                         for Multivariate Probit Models with
   works. In UAI.                                                                              Sparse Inverse Correlation Matri-
                                             Sudderth, E., M. Wainwright, and                  ces. J. Comp. Graph. Statist..
Srebro, N. and T. Jaakkola (2003).              A. Willsky (2008). Loop series and
   Weighted low-rank approxima-                 bethe variational bounds for attrac-        Tanner, M. (1996). Tools for statistical
   tions. In Intl. Conf. on Machine             tive graphical models. In NIPS.                inference. Springer.
   Learning.
                                             Sun, J., N. Zheng, and H. Shum                 Tanner, M. and W. Wong (1987). The
Steinbach, M., G. Karypis, and V. Ku-           (2003). Stereo matching using be-              calculation of posterior distribu-
   mar (2000). A comparison of doc-             lief propagation. IEEE Trans. on Pat-          tions by data augmentation. J. of
   ument clustering techniques. In              tern Analysis and Machine Intelli-             the Am. Stat. Assoc. 82(398), 528–
   KDD Workshop on Text Mining.                 gence 25(7), 787–800.                          540.
BIBLIOGRAPHY                                                                                                                 1041


Tarlow, D., I. Givoni, and R. Zemel         Tibshirani, R. (1996).        Regression       Tseng, P. (2008). On Accelerated Proxi-
   (2010). Hop-map: efficient message          shrinkage and selection via the                mal Gradient Methods for Convex-
   passing with high order potentials.         lasso. J. Royal. Statist. Soc B 58(1),         Concave Optimization. Technical
   In AI/Statistics.                           267–288.                                       report, U. Washington.

Taskar, B., C. Guestrin, and D. Koller      Tibshirani, R., G. Walther, and                Tsochantaridis, I., T. Joachims, T. Hof-
   (2003). Max-margin markov net-              T. Hastie (2001). Estimating the               mann, and Y. Altun (2005, Septem-
   works. In NIPS.                             number of clusters in a dataset via            ber).     Large margin methods
                                               the gap statistic. J. of Royal Stat. Soc.      for structured and interdependent
Taskar, B., D. Klein, M. Collins,              Series B 32(2), 411–423.                       output variables. J. of Machine
   D. Koller, and C. Manning (2004).                                                          Learning Research 6, 1453–1484.
   Max-margin parsing. In Proc. Em-         Tieleman, T. (2008). Training re-
   pirical Methods in Natural Lan-             stricted Boltzmann machines us-             Tu, Z. and S. Zhu (2002). Image Seg-
   guage Processing.                           ing approximations to the likeli-              mentation by Data-Driven Markov
                                               hood gradient. In Proceedings of               Chain Monte Carlo. IEEE Trans. on
                                                                                              Pattern Analysis and Machine Intel-
Teh, Y. W. (2006). A hierarchical              the 25th international conference on
   Bayesian language model based on                                                           ligence 24(5), 657–673.
                                               Machine learning, pp. 1064–1071.
   Pitman-Yor processes. In Proc. of           ACM New York, NY, USA.                      Turian, J., L. Ratinov, and Y. Ben-
   the Assoc. for Computational Lin-                                                          gio (2010). Word representations:
   guistics, pp. 985=992.                   Ting, J., A. D’Souza, S. Vijayakumar,             a simple and general method for
                                               and S. Schaal (2010). Efficient                semi-supervised learning. In Proc.
Teh, Y.-W., M. Jordan, M. Beal, and            learning and feature selection in              ACL.
   D. Blei (2006). Hierarchical Dirich-        high-dimensional regression. Neu-
   let processes. J. of the Am. Stat. As-      ral Computation 22(4), 831–886.             Turlach, B., W. Venables, and S. Wright
   soc. 101(476), 1566–1581.                                                                  (2005). Simultaneous variable se-
                                            Tipping, M. (1998). Probabilistic visual-         lection. Technometrics 47 (3), 349–
Tenenbaum, J. (1999). A Bayesian               ization of high-dimensional binary             363.
   framework for concept learning.             data. In NIPS.
   Ph.D. thesis, MIT.                                                                      Turner, R., P. Berkes, M. Sahani, and
                                            Tipping, M. (2001). Sparse bayesian               D. Mackay (2008). Counterexam-
Tenenbaum, J. B. and F. Xu (2000).             learning and the relevance vector              ples to variational free energy com-
   Word learning as bayesian infer-                                                           pactness folk theorems. Technical
                                               machine. J. of Machine Learning                report, U. Cambridge.
   ence. In Proc. 22nd Annual Conf.of          Research 1, 211–244.
   the Cognitive Science Society.                                                          Ueda, N. and R. Nakano (1998). Deter-
                                            Tipping, M. and C. Bishop (1999).                ministic annealing EM algorithm.
Theocharous, G., K. Murphy, and                Probabilistic principal component             Neural Networks 11, 271–282.
  L. Kaelbling (2004). Representing            analysis. J. of Royal Stat. Soc. Series
  hierarchical POMDPs as DBNs for              B 21(3), 611–622.                           Usunier, N., D. Buffoni, and P. Galli-
  multi-scale robot localization. In                                                         nari (2009). Ranking with ordered
  IEEE Intl. Conf. on Robotics and Au-      Tipping, M. and A. Faul (2003). Fast             weighted pairwise classiﬁcation.
  tomation.                                    marginal likelihood maximisation
                                               for sparse bayesian models. In AI/S-        Vaithyanathan, S. and B. Dom (1999).
Thiesson, B., C. Meek, D. Chickering,          tats.                                          Model selection in unsupervised
   and D. Heckerman (1998). Learning                                                          learning with applications to doc-
   mixtures of DAG models. In UAI.          Tishby, N., F. Pereira, and W. Biale              ument clustering. In Intl. Conf. on
                                               (1999). The information bottle-                Machine Learning.
Thomas, A. and P. Green (2009).                neck method. In The 37th an-
  Enumerating the decomposable                 nual Allerton Conf. on Communica-           van der Merwe, R., A. Doucet,
  neighbours of a decomposable                 tion, Control, and Computing, pp.              N. de Freitas, and E. Wan (2000).
  graph under a simple perturbation                                                           The unscented particle ﬁlter. In
                                               368âĂŞ377.                                   NIPS-13.
  scheme. Comp. Statistics and Data
  Analysis 53, 1232–1238.                   Tomas, M., D. Anoop, K. Stefan,                van Dyk, D. and X.-L. Meng (2001).
                                              B. Lukas, and C. Jan (2011). Empir-             The Art of Data Augmentation.
Thrun, S., W. Burgard, and D. Fox             ical evaluation and combination of              J. Computational and Graphical
   (2006). Probabilistic Robotics. MIT        advanced language modeling tech-                Statistics 10(1), 1–50.
   Press.                                     niques. In Proc. 12th Annual Conf.
                                              of the Intl. Speech Communication            Vandenberghe, L. (2006). Applied nu-
Thrun, S., M. Montemerlo, D. Koller,          Association (INTERSPEECH).                      merical computing: Lecture notes.
   B. Wegbreit, J. Nieto, and E. Nebot
   (2004). Fastslam: An efficient so-       Torralba, A., R. Fergus, and Y. Weiss          Vandenberghe, L. (2011). Ee236c - op-
   lution to the simultaneous local-           (2008). Small codes and large im-              timization methods for large-scale
   ization and mapping problem with            age databases for recognition. In              systems.
   unknown data association. J. of             CVPR.
   Machine Learning Research 2004.                                                         Vanhatalo, J. (2010). Speeding up the
                                            Train, K. (2009). Discrete choice meth-           inference in Gaussian process mod-
Thrun, S. and L. Pratt (Eds.) (1997).          ods with simulation. Cambridge                 els. Ph.D. thesis, Helsinki Univ.
   Learning to learn. Kluwer.                  University Press. Second edition.              Technology.
1042                                                                                                      BIBLIOGRAPHY


Vanhatalo, J., V. PietilÃd’inen, and        Viterbi, A. (1967).     Error bounds      Wand, M. (2009). Semiparametric
   A. Vehtari (2010). Approximate in-          for convolutional codes and an           regression and graphical models.
   ference for disease mapping with            asymptotically optimum decoding          Aust. N. Z. J. Stat. 51(1), 9–41.
   sparse gaussian processes. Statis-          algorithm. IEEE Trans. on Informa-
   tics in Medicine 29(15), 1580–1607.         tion Theory 13(2), 260âĂŞ269.        Wand, M. P., J. T. Ormerod, S. A.
                                                                                        Padoan, and R. Fruhrwirth (2011).
                                            von Luxburg, U. (2007). A tutorial on       Mean Field Variational Bayes for
Vapnik, V. (1998). Statistical Learning                                                 Elaborate Distributions. Bayesian
   Theory. Wiley.                              spectral clustering. Statistics and
                                               Computing 17 (4), 395–416.               Analysis 6(4), 847 – 900.
Vapnik, V., S. Golowich, and A. Smola       Wagenmakers, E.-J., R. Wetzels,           Wang, C. (2007). Variational Bayesian
   (1997). Support vector method for          D. Borsboom, and H. van der               Approach to Canonical Correlation
   function approximation, regression         Maas (2011). Why Psychologists            Analysis. IEEE Trans. on Neural Net-
   estimation, and signal processing.         Must Change the Way They Ana-             works 18(3), 905–910.
   In NIPS.                                   lyze Their Data: The Case of Psi.
                                              Journal of Personality and Social       Wasserman, L. (2004). All of statistics.
Varian, H. (2011). Structural time series     Psychology.                               A concise course in statistical infer-
   in R: a Tutorial. Technical report,                                                  ence. Springer.
   Google.                                  Wagner, D. and F. Wagner (1993). Be-
                                              tween min cut and graph bisec-          Wei, G. and M. Tanner (1990). A Monte
Verma, T. and J. Pearl (1990). Equiva-        tion. In Proc. 18th Intl. Symp. on        Carlo implementation of the EM al-
   lence and synthesis of causal mod-                                                   gorithm and the poor man’s data
                                              Math. Found. of Comp. Sci., pp. 744–      augmentation algorithms. J. of the
   els. In UAI.                               750.                                      Am. Stat. Assoc. 85(411), 699–704.
Viinikanoja, J., A. Klami, and S. Kaski     Wainwright, M., T. Jaakkola, and          Weinberger, K., A. Dasgupta, J. Atten-
   (2010). Variational Bayesian Mixture       A. Willsky (2001). Tree-based repa-       berg, J. Langford, and A. Smola
   of Robust CCA Models. In Proc. Eu-         rameterization for approximate es-        (2009). Feature hashing for large
   ropean Conf. on Machine Learning.          timation on loopy graphs. In NIPS-
                                              14.                                       scale multitask learning. In Intl.
                                                                                        Conf. on Machine Learning.
Vincent, P. (2011). A Connection be-        Wainwright, M., T. Jaakkola, and
   tween Score Matching and Denois-           A. Willsky (2005). A new class          Weiss, D., B. Sapp, and B. Taskar
   ing Autoencoders. Neural Compu-            of upper bounds on the log parti-         (2010). Sidestepping intractable in-
   tation 23(7), 1661–1674.                   tion function. IEEE Trans. Info. The-     ference with structured ensemble
                                              ory 51(7), 2313–2335.                     cascades. In NIPS.
Vincent, P., H. Larochelle, I. La-
   joie, Y. Bengio, and P.-A. Manzagol      Wainwright, M., P. Ravikumar, and         Weiss, Y. (2000). Correctness of local
   (2010). Stacked Denoising Autoen-          J. Lafferty (2006). Inferring graph-      probability propagation in graph-
   coders: Learning Useful Represen-          ical model structure using  − 1-         ical models with loops. Neural
   tations in a Deep Network with a           regularized pseudo-likelihood. In         Computation 12, 1–41.
   Local Denoising Criterion. J. of Ma-       NIPS.
                                                                                      Weiss, Y. (2001). Comparing the mean
   chine Learning Research 11, 3371–                                                    ﬁeld method and belief propaga-
   3408.                                    Wainwright, M. J., T. S. Jaakkola, and
                                              A. S. Willsky (2003). Tree-based          tion for approximate inference in
                                              reparameterization framework for          MRFs. In Saad and Opper (Eds.),
Vinh, N., J. Epps, and J. Bailey (2009).      analysis of sum-product and re-           Advanced Mean Field Methods. MIT
   Information theoretic measures for         lated algorithms. IEEE Trans. on In-      Press.
   clusterings comparison: Is a cor-          formation Theory 49(5), 1120–1146.
   rection for chance necessary? In                                                   Weiss, Y. and W. T. Freeman (1999).
   Intl. Conf. on Machine Learning.         Wainwright, M. J. and M. I. Jordan          Correctness of belief propagation
                                              (2008a). Graphical models, expo-          in Gaussian graphical models of ar-
Vinyals, M., J. Cerquides, J. Rodriguez-      nential families, and variational in-     bitrary topology. In NIPS-12.
   Aguilar, and A. Farinelli (2010).          ference. Foundations and Trends in
   Worst-case bounds on the quality           Machine Learning 1–2, 1–305.            Weiss, Y. and W. T. Freeman (2001a).
   of max-product ﬁxed-points. In                                                       Correctness of belief propagation
   NIPS.                                    Wainwright, M. J. and M. I. Jordan          in Gaussian graphical models of ar-
                                              (2008b). Graphical models, expo-          bitrary topology. Neural Computa-
                                              nential families, and variational in-     tion 13(10), 2173–2200.
Viola, P. and M. Jones (2001). Rapid
   object detection using a boosted           ference. Foundations and Trends in
                                              Machine Learning 1–2, 1–305.            Weiss, Y. and W. T. Freeman (2001b).
   cascade of simple classiﬁers. In                                                     On the optimality of solutions of
   CVPR.                                    Wallach, H., I. Murray, R. Salakhutdi-      the max-product belief propaga-
                                              nov, and D. Mimno (2009). Evalua-         tion algorithm in arbitrary graphs.
Virtanen, S. (2010). Bayesian expo-           tion methods for topic models. In         IEEE Trans. Information Theory,
   nential family projections. Master’s       Intl. Conf. on Machine Learning.          Special Issue on Codes on Graphs
   thesis, Aalto University.                                                            and Iterative Algorithms 47 (2), 723–
                                            Wan, E. A. and R. V. der Merwe (2001).      735.
Vishwanathan, S. V. N. and A. Smola           The Unscented Kalman Filter. In
   (2003). Fast kernels for string and        S. Haykin (Ed.), Kalman Filtering       Weiss, Y., A. Torralba, and R. Fergus
   tree matching. In NIPS.                    and Neural Networks. Wiley.               (2008). Spectral hashing. In NIPS.
BIBLIOGRAPHY                                                                                                             1043


Welling, M., C. Chemudugunta, and          Williams, C. (1998). Computation with      Wood, F., C. Archambeau, J. Gasthaus,
  N. Sutter (2008). Deterministic la-         inﬁnite networks. Neural Computa-         L. James, and Y. W. Teh (2009). A
  tent variable models and their pit-         tion 10(5), 1203–1216.                    stochastic memoizer for sequence
  falls. In Intl. Conf. on Data Mining.                                                 data. In Intl. Conf. on Machine
                                           Williams, C. (2000). A MCMC ap-              Learning.
Welling, M., T. Minka, and Y. W. Teh          proach to Hierarchical Mixture
  (2005). Structured region graphs:           Modelling . In S. A. Solla, T. K.       Wright,   S.,    R. Nowak,        and
  Morphing EP into GBP. In UAI.               Leen, and K.-R. Müller (Eds.), NIPS.      M. Figueiredo (2009).         Sparse
                                              MIT Press.                                reconstruction by separable ap-
Welling, M., M. Rosen-Zvi, and G. Hin-                                                  proximation. IEEE Trans. on Signal
  ton (2004). Exponential family har-                                                   Processing 57 (7), 2479–2493.
  moniums with an application to           Williams, C. (2002). On a Connec-
  information retrieval. In NIPS-14.          tion between Kernel PCA and Met-        Wu, T. T. and K. Lange (2008). Coordi-
                                              ric Multidimensional Scaling. Ma-         nate descent algorithms for lasso
Welling, M. and C. Sutton (2005).             chine Learning J. 46(1).
  Learning in Markov random ﬁelds                                                       penalized regression. Ann. Appl.
  with contrastive free energies. In                                                    Stat 2(1), 224–244.
                                           Williams, O. and A. Fitzgibbon (2006).
  Tenth International Workshop on             Gaussian process implicit surfaces.     Wu, Y., H. Tjelmeland, and M. West
  Artiﬁcial Intelligence and Statistics       In Gaussian processes in practice.        (2007). Bayesian CART: Prior struc-
  (AISTATS).                                                                            ture and MCMC computations. J.
                                           Williamson, S. and Z. Ghahramani             of Computational and Graphical
Welling, M. and Y.-W. Teh (2001). Belief                                                Statistics 16(1), 44–66.
  optimization for binary networks:           (2008). Probabilistic models for
  a stable alternative to loopy belief        data combination in recommender
                                              systems. In NIPS Workshop on            Xu, F. and J. Tenenbaum (2007). Word
  propagation. In UAI.                                                                   learning as Bayesian inference. Psy-
                                              Learning from Multiple Sources.
Werbos, P. (1974). Beyond regression:                                                    chological Review 114(2).
  New Tools for Prediction and Analy-      Winn, J. and C. Bishop (2005). Varia-      Xu, Z., V. Tresp, A. Rettinger, and
  sis in the Behavioral Sciences. Ph.D.      tional message passing. J. of Ma-           K. Kersting (2008). Social net-
  thesis, Harvard.                           chine Learning Research 6, 661–             work mining with nonparametric
                                             694.                                        relational models. In ACM Work-
West, M. (1987).    On scale mix-                                                        shop on Social Network Mining and
  tures of normal distributions.           Wipf, D. and S. Nagarajan (2007). A
  Biometrika 74, 646–648.                                                                Analysis (SNA-KDD 2008).
                                             new view of automatic relevancy
West, M. (2003). Bayesian Factor Re-         determination. In NIPS.                  Xu, Z., V. Tresp, K. Yu, and H.-P.
  gression Models in the "Large p,                                                       Kriegel (2006). Inﬁnite hidden rela-
  Small n" Paradigm. Bayesian Statis-      Wipf, D. and S. Nagarajan (2010, April).      tional models. In UAI.
  tics 7 .                                   Iterative Reweighted −1 and −2
                                             Methods for Finding Sparse Solu-         Xu, Z., V. Tresp, S. Yu, K. Yu, and H.-P.
West, M. and J. Harrison (1997).             tions. J. of Selected Topics in Signal      Kriegel (2007). Fast inference in in-
  Bayesian forecasting and dynamic                                                       ﬁnite hidden relational models. In
                                             Processing (Special Issue on Com-           Workshop on Mining and Learning
  models. Springer.                          pressive Sensing) 4(2).
                                                                                         with Graphs.
Weston, J., S. Bengio, and N. Usunier
  (2010). Large Scale Image Annota-        Wipf, D., B. Rao, and S. Nagarajan         Xue, Y., X. Liao, L. Carin, and B. Krish-
  tion: Learning to Rank with Joint          (2010). Latent variable bayesian           napuram (2007). Multi-task learn-
  Word-Image Embeddings. In Proc.            models for promoting sparsity.             ing for classiﬁcation with dirichlet
  European Conf. on Machine Learn-           IEEE Transactions on Information           process priors. J. of Machine Learn-
  ing.                                       Theory.                                    ing Research 8, 2007.
Weston, J., F. Ratle, and R. Collobert     Witten, D., R. Tibshirani, and T. Hastie   Yadollahpour, P., D. Batra, and
  (2008). Deep Learning via Semi-             (2009). A penalized matrix de-             G. Shakhnarovich (2011). Diverse M-
  Supervised Embedding. In Intl.              composition, with applications to          best Solutions in MRFs. In NIPS
  Conf. on Machine Learning.                  sparse principal components and            workshop on Disrete Optimization
                                              canonical correlation analysis. Bio-       in Machine Learning.
Weston, J. and C. Watkins (1999).             statistics 10(3), 515–534.
  Multi-lcass support vector ma-                                                      Yan, D., L. Huang, and M. I. Jordan
  chines. In ESANN.                        Wolpert, D. (1992). Stacked generaliza-       (2009). Fast approximate spectral
                                             tion. Neural Networks 5(2), 241–259.        clustering. In 15th ACM Conf. on
Wiering, M. and M. van Otterlo                                                           Knowledge Discovery and Data Min-
  (Eds.) (2012). Reinforcement learn-                                                    ing.
  ing: State-of-the-art. Springer.         Wolpert, D. (1996). The lack of a priori
                                             distinctions between learning algo-      Yang, A., A. Ganesh, S. Sastry, and
Wilkinson, D. and S. Yeung (2002).           rithms. Neural Computation 8(7),            Y. Ma (2010, Feb).       Fast l1-
   Conditional simulation from highly        1341–1390.                                  minimization algorithms and an
   structured gaussian systems with                                                      application in robust face recog-
   application to blocking-mcmc for        Wong, F., C. Carter, and R. Kohn              nition: A review. Technical Re-
   the bayesian analysis of very large       (2003).    Efficient estimation of          port UCB/EECS-2010-13, EECS De-
   linear models. Statistics and Com-        covariance      selection  models.          partment, University of California,
   puting 12, 287–300.                       Biometrika 90(4), 809–830.                  Berkeley.
1044                                                                                                     BIBLIOGRAPHY


Yang, C., R. Duraiswami, and L. David     Yuille, A. (2001). CCCP algorithms         Zhao, P. and B. Yu (2007). Stagewise
   (2005). Efficient kernel machines         to minimze the Bethe and Kikuchi          Lasso. J. of Machine Learning Re-
   using the improved fast Gauss             free energies: convergent alterna-        search 8, 2701–2726.
   transform. In NIPS.                       tives to belief propagation. Neural
                                             Computation 14, 1691–1722.              Zhou, H., D. Karakos, S. Khudanpur,
Yang, S., B. Long, A. Smola, H. Zha,                                                   A. Andreou, and C. Priebe (2009).
   and Z. Zheng (2011). Collaborative     Yuille, A. and A. Rangarajan (2003).         On Projections of Gaussian Dis-
   competitive ﬁltering: learning rec-       The concave-convex procedure.             tributions using Maximum Likeli-
   ommender using context of user                                                      hood Criteria. In Proc. of the Work-
                                             Neural Computation 15, 915.
   choice. In Proc. Annual Intl. ACM                                                   shop on Information Theory and its
   SIGIR Conference.
                                          Yuille, A. and S. Zheng (2009). Com-         Applications.
Yanover, C., O. Schueler-Furman, and         positional noisy-logical learning. In
   Y. Weiss (2007). Minimizing and           Intl. Conf. on Machine Learning.        Zhou, M., H. Chen, J. Paisley, L. Ren,
   Learning Energy Functions for                                                       G. Sapiro, and L. Carin (2009).
   Side-Chain Prediction. In Recomb.      Yuille, A. L. and X. He (2011). Proba-       Non-parametric Bayesian Dictio-
                                             bilistic models of vision and max-        nary Learning for Sparse Image
Yaun, G.-X., K.-W. Chang, C.-J. Hsieh,       margin methods.         Frontiers of      Representations. In NIPS.
   and C.-J. Lin (2010). A Comparison        Electrical and Electronic Engineer-
   of Optimization Methods and Soft-         ing 7 (1).                              Zhou, X. and X. Liu (2008). The
   ware for Large-scale L1-regularized                                                 EM algorithm for the extended ﬁ-
   Linear Classiﬁcation. J. of Machine                                                 nite mixture of the factor analyz-
                                          Zellner, A. (1986). On assessing prior       ers model. Computational Statistics
   Learning Research 11, 3183–3234.          distributions and bayesian regres-
                                             sion analysis with g-prior distri-        and Data Analysis 52, 3939–3953.
Yedidia, J., W. T. Freeman, and              butions.      In Bayesian inference
   Y. Weiss (2001). Understanding be-                                                Zhu, C. S., N. Y. Wu, and D. Mum-
                                             and decision techniques, Studies          ford (1997, November). Minimax
   lief propagation and its generaliza-
                                             of Bayesian and Econometrics and          entropy principle and its applica-
   tions. In Intl. Joint Conf. on AI.
                                             Statistics volume 6. North Holland.       tion to texture modeling. Neural
Yoshida, R. and M. West (2010).                                                        Computation 9(8).
   Bayesian learning in sparse graphi-    Zhai, C. and J. Lafferty (2004). A
   cal factor models via annealed en-       study of smoothing methods for           Zhu, J. and E. Xing (2010). Conditional
   tropy. J. of Machine Learning Re-        language models applied to infor-          topic random ﬁelds. In Intl. Conf.
   search 11, 1771–1798.                    mation retrieval. ACM Trans. on In-        on Machine Learning.
                                            formation Systems 22(2), 179–214.
Younes, L. (1989). Parameter estima-                                                 Zhu, L., Y. Chen, A.Yuille, and W. Free-
   tion for imperfectly observed Gibb-    Zhang, N. (2004). Hierarchical latnet        man (2010). Latent hierarchical
   sian ﬁelds. Probab. Theory and Re-       class models for cluster analysis. J.      structure learning for object detec-
   lated Fields 82, 625–645.                of Machine Learning Research, 301–         tion. In CVPR.
                                            308.
Yu, C. and T. Joachims (2009). Learn-                                                Zhu, M. and A. Ghodsi (2006). Au-
   ing structural SVMs with latent        Zhang, N. and D. Poole (1996). Ex-           tomatic dimensionality selection
   variables. In Intl. Conf. on Machine     ploiting causal independence in            from the scree plot via the use of
   Learning.                                Bayesian network inference. J. of          proﬁle likelihood. Computational
                                            AI Research, 301–328.                      Statistics & Data Analysis 51, 918–
Yu, S., K. Yu, V. Tresp, K. H-P., and                                                  930.
   M. Wu (2006). Supervised proba-
   bilistic principal component anal-     Zhang, T. (2008). Adaptive Forward-
                                            Backward Greedy Algorithm for            Zhu, M. and A. Lu (2004). The counter-
   ysis. In Proc. of the Int’l Conf. on     Sparse Learning with Linear Mod-           intuitive non-informative prior for
   Knowledge Discovery and Data Min-        els. In NIPS.                              the bernoulli family. J. Statistics Ed-
   ing.                                                                                ucation.
Yu, S.-Z. and H. Kobayashi (2006).        Zhang, X., T. Graepel, and R. Herbrich
                                            (2010). Bayesian Online Learning         Zinkevich, M. (2003). Online con-
   Practical implementation of an ef-                                                   vex programming and generalized
   ﬁcient forward-backward algorithm        for Multi-label and Multi-variate
                                            Performance Measures. In AI/Statis-         inﬁnitesimal gradient ascent. In
   for an explicit-duration hidden                                                      Intl. Conf. on Machine Learning, pp.
   Markov model. IEEE Trans. on Sig-        tics.
   nal Processing 54(5), 1947– 1951.                                                    928âĂŞ936.
                                          Zhao, J.-H. and P. L. H. Yu (2008,
Yuan, M. and Y. Lin (2006). Model           November). Fast ML Estimation for        Zobay, O. (2009). Mean ﬁeld inference
   selection and estimation in re-          the Mixture of Factor Analyzers via        for the Dirichlet process mixture
   gression with grouped variables.         an ECM Algorithm. IEEE. Trans. on          model. Electronic J. of Statistics 3,
   J. Royal Statistical Society, Series     Neural Networks 19(11).                    507–545.
   B 68(1), 49–67.
                                          Zhao, P., G. Rocha, and B. Yu (2005).      Zoeter, O. (2007). Bayesian generalized
Yuan, M. and Y. Lin (2007).                 Grouped and Hierarchical Model              linear models in a terabyte world.
   Model selection and estimation           Selection through Composite Abso-           In Proc. 5th International Sympo-
   in the gaussian graphical model.         lute Penalties. Technical report, UC        sium on image and Signal Process-
   Biometrika 94(1), 19–35.                 Berkeley.                                   ing and Analysis.
BIBLIOGRAPHY                                                                                                             1045


Zou, H. (2006). The adaptive Lasso             nent analysis. J. of Computational        cave penalized likelihood models.
  and its oracle properties. J. of the         and Graphical Statistics 15(2), 262–      Annals of Statistics 36(4), 1509–1533.
  Am. Stat. Assoc., 1418–1429.                 286.
Zou, H. and T. Hastie (2005). Regular-      Zou, H., T. Hastie, and R. Tibshirani
  ization and variable selection via          (2007). On the "Degrees of Free-        Zweig, G. and M. Padmanabhan
  the elastic net. J. of Royal Stat. Soc.     dom" of the Lasso. Annals of Statis-      (2000). Exact alpha-beta computa-
  Series B 67 (2), 301–320.                   tics 35(5), 2173–2192.                    tion in logarithmic space with ap-
                                                                                        plication to map word graph con-
Zou, H., T. Hastie, and R. Tibshirani       Zou, H. and R. Li (2008). One-              struction. In Proc. Intl. Conf. Spoken
  (2006). Sparse principal compo-             step sparse estimates in noncon-          Lang.
Index to code

agglomDemo, 894                            gaussInferParamsMean1d, 121
amazonSellerDemo, 155                      gaussInferParamsMean2d, 123
arsDemo, 819                               gaussInterpDemo, 113
arsEnvelope, 819                           gaussInterpNoisyDemo, 125
                                           gaussMissingFitEm, 374
bayesChangeOfVar, 151                      gaussMissingFitGibbs, 840
bayesLinRegDemo2d, 233                     gaussPlot2d, 142
bayesTtestDemo, 138                        gaussPlot2Ddemo, 47
beliefPropagation, 768                     gaussPlotDemo, 19
bernoulliEntropyFig, 57                    gaussSeqUpdateSigma1D, 131
besselk, 477                               generativeVsDiscrim, 269
betaBinomPostPredDemo, 79                  geomRidge, 229
betaCredibleInt, 153                       ggmFitDemo, 939
betaHPD, 153, 154                          ggmFitHtf, 939
betaPlotDemo, 43                           ggmFitMinfunc, 939
biasVarModelComplexity3, 204               ggmLassoDemo, 13, 940
bimodalDemo, 150                           ggmLassoHtf, 940
binaryFaDemoTipping, 403                   gibbsDemoIsing, 670, 873
binomDistPlot, 35                          gibbsGaussDemo, 848
binomialBetaPosteriorDemo, 75              giniDemo, 548
bleiLDAperplexityPlot, 955                 gpcDemo2d, 529
bolassoDemo, 440                           gpnnDemo, 536
boostingDemo, 555, 558                     gprDemoArd, 520
bootstrapDemoBer, 192                      gprDemoChangeHparams, 519
                                           gprDemoMarglik, 522
                                           gprDemoNoiseFree, 517
cancerHighDimClassifDemo, 110              gpSpatialDemoLaplace, 532
cancerRatesEb, 172                         groupLassoDemo, 451
casinoDemo, 606, 607
centralLimitDemo, 52
changeOfVarsDemo1d, 53                     hclustYeastDemo, 894, 896
chowliuTreeDemo, 913                       hingeLossPlot, 211, 556
coinsModelSelDemo, 164                     hmmFilter, 609
contoursSSEdemo, 219                       hmmFwdBack, 611
convexFnHand, 222                          hmmLillypadDemo, 604
curseDimensionality, 18                    hmmSelfLoopDist, 623
                                           hopﬁeldDemo, 670
                                           huberLossDemo, 223, 497
demard, 580
depnetFit, 909
dirichlet3dPlot, 48                        icaBasisDemo, 471
dirichletHistogramDemo, 48                 icaDemo, 408
discreteProbDistFig, 28                    icaDemoUniform, 409
discrimAnalysisDboundariesDemo, 103, 105   IPFdemo2x2, 683
discrimAnalysisFit, 106                    isingImageDenoiseDemo, 739, 839
discrimAnalysisHeightWeightDemo, 145
discrimAnalysisPredict, 106                kalmanFilter, 641
dpmGauss2dDemo, 888                        kalmanTrackingDemo, 632
dpmSampleDemo, 881                         kernelBinaryClassifDemo, 489
dtﬁt, 545                                  kernelRegrDemo, 490, 491
dtreeDemoIris, 549, 550                    kernelRegressionDemo, 510
                                           KLfwdReverseMixGauss, 734
elasticDistortionsDemo, 567                KLpqGauss, 734
emLogLikelihoodMax, 365                    kmeansHeightWeight, 10
                                           kmeansModelSel1d, 371
                                           kmeansYeastDemo, 341
faBiplotDemo, 383                          knnClassifyDemo, 17, 23–25
ﬁsherDiscrimVowelDemo, 274                 knnVoronoi, 16
ﬁsheririsDemo, 6                           kpcaDemo2, 495
ﬁsherLDAdemo, 272                          kpcaScholkopf, 493
fmGibbs, 843
                                           lassoPathProstate, 437, 438
gammaPlotDemo, 41, 150                     LassoShooting, 441
gammaRainfallDemo, 41                      leastSquaresProjection, 221
gampdf, 41                                 linregAllsubsetsGraycodeDemo, 423
gaussCondition2Ddemo2, 112                 linregBayesCaterpillar, 237, 238
gaussHeightWeight, 102                     linregCensoredSchmeeHahnDemo, 379
gaussImputationDemo, 115, 375
1048                                                                             INDEXES


linregDemo1, 241                          pcaDemoHeightWeight, 389
linregEbModelSelVsN, 158, 159, 749        pcaEmStepByStep, 397
linregFitL1Test, 447                      pcaImageDemo, 12, 389
linregOnlineDemoKalman, 636               pcaOverﬁtDemo, 400–402
linregPolyLassoDemo, 436                  pcaPmtk, 393
linregPolyVsDegree, 9, 20, 436            pfColorTrackerDemo, 830
linregPolyVsN, 231                        poissonPlotDemo, 37
linregPolyVsRegDemo, 208, 225, 226, 239   postDensityIntervals, 154
linregPostPredDemo, 235                   ppcaDemo2d, 388
linregRbfDemo, 487                        PRhand, 182
linregRobustDemoCombined, 223             probitPlot, 259
linregWedgeDemo2, 19                      probitRegDemo, 259, 294, 363
LMSdemo, 265                              prostateComparison, 436
logregFit, 254                            prostateSubsets, 427
logregLaplaceGirolamiDemo, 257, 258
logregMultinomKernelDemo, 269             quantileDemo, 33
logregSATdemo, 21
logregSATdemoBayes, 259
logregSatMhDemo, 852                      randomWalk0to20Demo, 856
logregXorDemo, 486                        rbpfManeuverDemo, 834, 835
logsumexp, 86                             rbpfSlamDemo, 835
lossFunctionFig, 179                      rdaFit, 108
lsiCode, 419                              regtreeSurfaceDemo, 545
                                          rejectionSamplingDemo, 818
                                          relevanceNetworkNewsgroupDemo, 908
marsDemo, 554                             residualsDemo, 219
mcAccuracyDemo, 55                        ridgePathProstate, 437
mcEstimatePi, 54                          riskFnGauss, 198
mcmcGmmDemo, 851, 860, 861                robustDemo, 40
mcQuantileDemo, 153                       robustPriorDemo, 168
mcStatDist, 598
miMixedDemo, 59
mixBerMnistEM, 341                        saDemoPeaks, 869, 870
mixBetaDemo, 170                          sampleCdf, 816
mixexpDemo, 343                           samplingDistGaussShrinkage, 203
mixexpDemoOneToMany, 344                  sensorFusion2d, 123
mixGaussDemoFaithful, 353                 sensorFusionUnknownPrec, 141
mixGaussLikSurfaceDemo, 346               seqlogoDemo, 36
mixGaussMLvsMAP, 356                      shrinkageDemoBaseball, 175
mixGaussOverRelaxedEmDemo, 369            shrinkcov, 130
mixGaussPlotDemo, 339                     shrinkcovDemo, 129
mixGaussSingularity, 356                  shrunkenCentroidsFit, 109
mixGaussVbDemoFaithful, 753, 755          shrunkenCentroidsSRBCTdemo, 109, 110
mixPpcaDemoNetlab, 386                    shuffledDigitsDemo, 7, 25
mixStudentBankruptcyDemo, 361             sigmoidLowerBounds, 761
mlpPriorsDemo, 574                        sigmoidPlot, 21
mlpRegEvidenceDemo, 579                   sigmoidplot2D, 246
mlpRegHmcDemo, 579                        simpsonsParadoxGraph, 933
mnist1NNdemo, 25, 1002                    sliceSamplingDemo1d, 865
multilevelLinregDemo, 844                 sliceSamplingDemo2d, 865
mutualInfoAllPairsMixed, 59               smoothingKernelPlot, 507
                                          softmaxDemo2, 103
                                          SpaRSA, 445
naiveBayesBowDemo, 84, 88                 sparseDictDemo, 471
naiveBayesFit, 83, 277                    sparseNnetDemo, 575
naiveBayesPredict, 86, 277                sparsePostPlot, 459
netﬂixResultsPlot, 981                    sparseSensingDemo, 438
newsgroupsVisualize, 5                    spectralClusteringDemo, 893
newtonsMethodMinQuad, 250                 splineBasisDemo, 125
newtonsMethodNonConvex, 250               ssmTimeSeriesSimple, 638, 639
ngramPlot, 592                            steepestDescentDemo, 247, 248
NIXdemo2, 135                             stickBreakingDemo, 883
normalGammaPenaltyPlotDemo, 460           studentLaplacePdfPlot, 40
normalGammaThresholdPlotDemo, 461         subgradientPlot, 432
numbersGame, 69–71                        subSuperGaussPlot, 412
                                          surfaceFitDemo, 218
pagerankDemo, 600, 603                    svdImageDemo, 394
pagerankDemoPmtk, 602                     svmCgammaDemo, 504
paretoPlot, 44
parzenWindowDemo2, 509
pcaDemo2d, 388                            tanhPlot, 570
pcaDemo3d, 11                             trueskillDemo, 798
INDEX TO CODE                1049


trueskillPlot, 797

unigaussVbDemo, 745

varEMbound, 368
variableElimination, 717
visDirichletGui, 48
visualizeAlarmNetwork, 314
vqDemo, 354

wiPlotDemo, 127
Index to keywords

#P-hard, 727                                  ARMA, 639, 674
0-1 loss, 177                                 array CGH, 454
3-SAT, 727                                    association rules, 15
                                              associative, 931
A star search, 887                            associative Markov network, 668
absorbing state, 598                          associative memory, 568, 669, 997
accept, 848                                   associative MRF, 802
action, 176                                   assumed density ﬁlter, 267
action nodes, 328                             assumed density ﬁltering, 653, 787
action space, 176                             asymptotically normal, 194
actions, 176                                  asymptotically optimal, 201
activation, 563                               asynchronous updates, 774
active learning, 230, 234, 938                atom, 469
Active set, 441                               atomic bomb, 52
active set, 442                               attractive MRF, 802
Activity recognition, 605                     attributes, 2, 3
Adaboost.M1, 559                              AUC, 181
adagrad, 263                                  audio-visual speech recognition, 628
adaline, 569                                  augmented DAG, 932
adaptive basis-function model, 543            auto-encoder, 1000
adaptive importance sampling, 821             auto-encoders, 990
adaptive lasso, 460                           auto-regressive HMM, 626
adaptive MCMC, 853                            autoclass, 11
adaptive rejection Metropolis sampling, 820   autocorrelation function, 862
adaptive rejection sampling, 820              automatic relevance determination, 463
add-one smoothing, 77, 593                    automatic relevancy determination, 238, 398, 580, 747
ADF, 653, 983                                 Automatic speech recognition, 605
adjacency matrix, 309, 970                    automatic speech recognition, 624
adjust for, 934                               auxiliary function, 350
adjusted Rand index, 878                      auxiliary variables, 863, 868
admissible, 197                               average link clustering, 897
admixture mixture, 950                        average precision, 303
AdSense, 928                                  average precision at K, 183
AdWords, 928                                  axis aligned, 47
affinity propagation, 887                     axis parallel splits, 544
agglomerative clustering, 893
agglomerative hierarchical clustering, 927    back-propagation, 999
aha, 68                                       backdoor path, 934
AI, 1007                                      backﬁtting, 552, 563, 998
AIC, 162, 557                                 background knowledge, 68
Akaike information criterion, 162             backoff smoothing, 594
alarm network, 313                            backpropagation, 570, 970
alignment, 701                                backpropagation algorithm, 569
all pairs, 503                                backslash operator, 228
alleles, 317                                  Backwards selection, 428
alpha divergence, 735                         bag of words, 5, 81, 945
alpha expansion, 803                          bag-of-characters, 483
alpha-beta swap, 804                          bag-of-words, 483
alternative hypothesis, 163                   bagging, 551
analysis view, 390                            bandwidth, 480, 507
analysis-synthesis, 470                       barren node removal, 334, 714
ancestors, 309                                BART, 551, 586
ancestral graph, 664                          Barzilai-Borwein, 445
ancestral sampling, 822                       base distribution, 338
and-or graphs, 1007                           base learner, 554
annealed importance sampling, 871, 923        base measure, 882
annealing, 853                                base rate fallacy, 30
annealing importance sampling, 992            basic feasible solution, 468
ANOVA, 553                                    basis function expansion, 20, 217
anti-ferromagnets, 668                        basis functions, 421
aperiodic, 598                                basis pursuit denoising, 430
approximate inference, 727                    batch, 261
approximation error, 230                      Baum-Welch, 618
ARD, 238, 463, 520, 580                       Bayes ball algorithm, 324
ARD kernel, 480                               Bayes decision rule, 177, 195
area under the curve, 181                     Bayes estimator, 177, 195
INDEX TO KEYWORDS                                                                            1051


Bayes factor, 137, 163, 921                Blackwell-MacQueen, 884
Bayes model averaging, 71, 581             blank slate, 165
Bayes point, 257                           blind signal separation, 407
Bayes risk, 195                            blind source separation, 407
Bayes rule, 29, 340                        blocked Gibbs sampling, 848
Bayes Theorem, 29                          blocking Gibbs sampling, 848
Bayesian, xxvii, 27                        bloodtype, 317
Bayesian adaptive regression trees, 551    BN2O, 315
Bayesian factor regression, 405            bolasso, 439
Bayesian hierarchical clustering, 899      Boltzmann distribution, 104, 869
Bayesian information criterion, 161        Boltzmann machine, 568, 669, 983
Bayesian IPF, 683                          bond variables, 866
Bayesian lasso, 448                        Boosting, 554
Bayesian model selection, 156              boosting, 553, 742
Bayesian network structure learning, 914   bootstrap, 192
Bayesian networks, 310                     bootstrap ﬁlter, 827
Bayesian Occam’s razor, 156                bootstrap lasso, 439
Bayesian statistics, 149, 191              bootstrap resampling, 439
BDe, 917                                   borrow statistical strength, 171, 231, 296, 845
BDeu, 918                                  bottleneck, 205, 337, 1000
beam search, 428, 887                      bottleneck layer, 970
belief networks, 310                       bound optimization, 369
belief propagation, 611, 707, 767          box constraints, 444
belief state, 71, 332, 607, 609            Box-Muller, 817
belief state MDP, 332                      boxcar kernel, 508, 508
belief updating, 709                       Boyen-Koller, 654
bell curve, 20, 38                         BP, 707
Berkson’s paradox, 326                     BPDN, 430
Bernoulli, 21, 34                          Bradley Terry, 795
Bernoulli product model, 88                branch and bound, 811
Bernoulli-Gaussian, 426                    branching factor, 954
Bessel function, 483                       bridge regression, 458
beta distribution, 42, 74                  Brownian motion, 483
beta function, 42                          bucket elimination, 715
beta process, 470                          BUGS, 756, 847
beta-binomial, 78                          Buried Markov models, 627
Bethe, 781                                 burn-in phase, 856
Bethe energy functional, 781               burned in, 838
Bethe free energy, 781                     burstiness, 88
BFGS, 251                                  bursty, 480
Bhattacharya distance, 828
bi-directed graph, 674                     C4.5, 545
bias, 20, 200, 457                         calculus of variations, 289
bias term, 669                             calibration, 724
bias-variance tradeoff, 202                Candidate method, 872
BIC, 161, 256, 557, 920                    Canonical correlation analysis, 407
biclustering, 903                          canonical form, 282
big data, 1                                canonical link function, 291
bigram model, 591                          canonical parameters, 115, 282
binary classiﬁcation, 3, 65                Cardinality constraints, 810
binary entropy function, 57                CART, 544, 545
binary independence model, 88              Cartesian, 51
binary mask, 426, 470                      cascade, 776
binary tree, 895                           case analysis, 260
Bing, 302, 799, 983                        categorical, 2, 35
binomial, 34                               categorical PCA, 402, 947, 961
binomial coefficient, 34                   categorical variables, 876
binomial distribution, 74                  Cauchy, 40
binomial regression, 292                   causal Markov assumption, 931
BinomialBoost, 561                         Causal models, 931
BIO, 687                                   causal MRF, 661
biosequence analysis, 36, 170              causal networks, 310
bipartite graph, 313                       causal sufficiency, 931
biplot, 383                                causality, 919, 929
birth moves, 370                           CCA, 407
bisecting K-means, 898                     CCCP, 702
bits, 56                                   CD, 989
bits-back, 733                             cdf, 32, 38
black swan paradox, 77, 84                 Censored regression, 379
black-box, 340, 585                        censored regression, 380
1052                                                                                          INDEXES


centering matrix, 494                            compelled edges, 915
central composite design, 523                    complementary prior, 997
central interval, 152                            complete, 322
central limit theorem, 38, 51, 255               complete data, 270, 349
central moment, 413                              complete data assumption, 914
central-limit theorem, 55                        complete data log likelihood, 348, 350
centroid, 341                                    complete link clustering, 897
centroids, 486                                   completing the square, 143
certainty factors, 675                           composite likelihood, 678
chain graph, 671                                 compressed sensing, 472
chain rule, 29, 307                              compressive sensing, 472
chance nodes, 328                                computation tree, 772
change of variables, 50                          computational learning theory, 210
channel coding, 56                               computationalism, 569
Chapman-Kolmogorov, 590                          concave, 222, 286
characteristic length scale, 480                 concave-convex procedure, 702
Cheeseman-Stutz approximation, 923               concentration matrix, 46
Chi-squared distribution, 42                     concentration parameter, 882
chi-squared statistic, 163, 213                  concept, 65
children, 309, 310                               concept learning, 65
Chinese restaurant process, 884                  condensation, 827
chip-Seq, 622                                    conditional entropy, 59
Cholesky decomposition, 227, 817                 conditional Gamma Poisson, 949
Chomsky normal form, 689                         conditional Gaussian, 920
chordal, 665                                     conditional independence, 308
chordal graph, 720                               conditional likelihood, 620
Chow-Liu algorithm, 312, 912                     conditional logit model, 252
CI, 308                                          conditional probability, 29
circuit complexity, 944                          conditional probability distribution, 308
city block distance, 876                         conditional probability tables, 308
clamped phase, 987                               conditional random ﬁeld, 684
clamped term, 677                                conditional random ﬁelds, 606, 661
clamping, 319                                    conditional topic random ﬁeld, 969
class imbalance, 503                             conditionally conjugate, 132
class-conditional density, 30, 65                conditionally independent, 31, 82
classical, 149                                   conditioning, 319
classical statistics, 191                        conditioning case, 322
classiﬁcation, 2, 3                              conductance, 858
Classiﬁcation and regression trees, 544          conﬁdence interval, 212
clausal form, 675                                conﬁdence intervals, 153
clause, 727                                      confounder, 674
click-through rate, 4                            confounders, 931
clique, 310                                      confounding variable, 934
cliques, 719, 722                                confusion matrix, 181
closing the loop, 635                            conjoint analysis, 297
closure, 662                                     conjugate gradients, 249, 524
cluster variational method, 783                  conjugate prior, 74
Clustering, 875                                  conjugate priors, 281, 287
clustering, 10, 340                              conjunctive normal form, 675
clusters, 487                                    connectionism, 569
clutter problem, 788                             consensus sequence, 36, 606
co-clustering, 979                               conservation of probability mass, 157
co-occurrence matrix, 5                          consistent, 200
co-parents, 327                                  consistent estimator, 233
coarse-to-ﬁne grid, 775                          consistent estimators, 70
cocktail party problem, 407                      constant symbols, 676
coclustering, 903                                constraint satisfaction problems, 717, 726
codebook, 354                                    constraint-based approach, 924
collaborative ﬁltering, 14, 300, 387, 903, 979   content addressable memory, 669
collapsed Gibbs sampler, 841                     context free grammar, 689
collapsed Gibbs sampling, 956                    context speciﬁc independence, 321
collapsed particles, 831                         context-speciﬁc independence, 944
collect evidence, 707                            contextual bandit, 184, 254
collect-to-root, 723                             contingency table, 682
collider, 324                                    continuation method, 442, 869
COLT, 210                                        contrastive divergence, 569, 989
committee method, 580                            contrastive term, 677
commutative semi-ring, 717                       control signal, 625, 631
commutative semiring, 726                        converge, 857
compactness, 897                                 convex, 58, 221, 247, 285, 677
INDEX TO KEYWORDS                                                                        1053


convex belief propagation, 785, 943         decision boundary, 22
convex combination, 76, 130, 338            decision diagram, 328
convex hull, 777                            decision nodes, 328
convolutional DBNs, 1004                    decision problem, 176
convolutional neural nets, 1004             decision procedure, 177
convolutional neural network, 565           decision rule, 22
cooling schedule, 870                       decision trees, 544
corpus, 953                                 decoding, 693
correlated topic model, 757, 961            decomposable, 665, 722, 941
correlation coefficient, 45, 876            decomposable graphs, 682
correlation matrix, 45                      decomposes, 322, 917
correspondence, 658                         DeeBN, 628
cosine similarity, 480                      DeeBNs, 997
cost-beneﬁt analysis, 186                   deep, 929
coupled HMM, 628                            deep auto-encoders, 1000
covariance, 44                              deep belief network, 997
covariance graph, 674, 908                  deep Boltzmann machine, 996
covariance matrix, 45, 46                   deep directed networks, 996
covariance selection, 938                   deep learning, 479, 995
covariates, 2                               deep networks, 569
CPD, 308                                    defender’s fallacy, 61
CPTs, 308                                   deﬂated matrix, 418
Cramer-Rao inequality, 201                  degeneracy problem, 825
Cramer-Rao lower bound, 201                 degenerate, 532, 535
credible interval, 137, 152, 212            degree, 310
CRF, 661, 684                               degrees of freedom, 39, 161, 206, 229, 534
critical temperature, 868                   deleted interpolation, 593
critical value, 671                         delta rule, 265
cross entropy, 57, 571                      dendrogram, 895
cross over rate, 181                        denoising auto-encoder, 1001
cross validation, 24, 206                   dense stereo reconstruction, 690
cross-entropy, 246, 953                     density estimation, 9
cross-language information retrieval, 963   dependency network, 909
crosscat, 904                               dependency networks, 679
crowd sourcing, 10, 995                     derivative free ﬁlter, 651
CRP, 884                                    descendants, 309
CTR, 4                                      descriptive, 2
cubic spline, 537                           design matrix, 3, 875
cumulant function, 282, 284                 detailed balance, 854
cumulants, 284                              detailed balance equations, 599
cumulative distribution function, 32, 38    determinism, 944
curse of dimensionality, 18, 487            deterministic annealing, 367, 620
curved exponential family, 282              deviance, 547
cutting plane, 698                          DGM, 310
CV, 24                                      diagonal, 46
cycle, 310                                  diagonal covariance LDA, 107
cyclic permutation property, 99             diagonal LDA, 108
                                            diameter, 710, 897
d-prime, 106                                dictionary, 469
d-separated, 324                            digamma, 361, 752, 958
DACE, 518                                   digital cameras, 8
DAG, 310                                    dimensionality reduction, 11, 1000
damped updates, 739                         Dirac delta function, 39
damping, 773                                Dirac measure, 37, 68
Dasher, 591                                 Dirchlet process, 903
data association, 658, 810                  direct posterior probability approach, 184
data augmentation, 362, 847                 directed, 309
data compression, 56                        directed acyclic graph, 310
data fragmentation, 546                     directed graphical model, 310
data fusion, 404                            directed local Markov property, 327
data overwhelms the prior, 69               directed mixed graph, 929
data-driven MCMC, 853                       directed mixed graphical model, 674
data-driven proposals, 828                  Dirichlet, 79
DBM, 996                                    Dirichlet Compound Multinomial, 89
DBN, 628, 997                               Dirichlet distribution, 47
DCM, 89                                     Dirichlet multinomial regression LDA, 969
DCT, 469                                    Dirichlet process, 596, 879, 882, 973, 976
death moves, 370                            Dirichlet process mixture models, 508, 755
debiasing, 439                              discontinuity preserving, 691
decision, 176                               discounted cumulative gain, 303
1054                                                                              INDEXES


discrete, 35                           eigenfaces, 12
discrete AdaBoost, 559                 eigengap, 857
discrete choice modeling, 296          eigenvalue spectrum, 130
discrete random variable, 28           EKF, 648
discrete with probability one, 884     elastic net, 438, 456, 936
discretize, 59, 691                    elimination order, 718
discriminability, 106                  EM, 271, 349, 618, 749
discriminant analysis, 101             email spam ﬁltering, 5
discriminant function, 500             embedding, 575
discriminative, 245                    empirical Bayes, 157, 162, 173, 300, 746
discriminative classiﬁer, 30           empirical distribution, 37, 205
discriminative LDA, 968                empirical measure, 37
discriminative random ﬁeld, 684        empirical risk, 205, 697
disease mapping, 531                   empirical risk minimization, 205, 261
disease transmission, 970              end effector, 344
disparity, 691                         energy based models, 666
dispersion parameter, 290              energy function, 255
dissimilarity analysis, 898            energy functional, 732, 778
dissimilarity matrix, 875              ensemble, 980
distance matrix, 875                   Ensemble learning, 580
distance transform, 775                ensemble learning, 742
distorted, 566                         entanglement, 629
distortion, 354                        entanglement problem, 635, 653
distribute evidence, 707               Entropy, 547
distribute-from-root, 724              entropy, 56
distributed encoding, 984              EP, 983
distributed representation, 569, 627   Epanechnikov kernel, 508
distributional particles, 831          ePCA, 947
distributive law, 717                  epigraph, 222
divisive clustering, 893               epistemological uncertainty, 973
DNA sequences, 36                      epoch, 264, 566
do calculus, 932                       epsilon insensitive loss function, 497
Document classiﬁcation, 87             EPSR, 859
document classiﬁcation, 5              equal error rate, 181
Domain adaptation, 297                 equilibrium distribution, 597
domain adaptation, 297                 equivalence class, 915
dominates, 197                         equivalent kernel, 512, 533
double loop algorithms, 773            equivalent sample size, 76, 917
double Pareto distribution, 461        erf, 38
double sided exponential, 41           ergodic, 599
dRUM, 294                              Erlang distribution, 42
dual decomposition, 808                ERM, 205, 261
dual variables, 492, 499               error bar, 76
dummy encoding, 35                     error correcting codes, 768
dyadic, 976                            error correction, 56
DyBN, 628                              error function, 38
DyBNs, 997                             error signal, 265
dynamic Bayes net, 653                 error-correcting output codes, 503, 581
dynamic Bayesian network, 628          ESS, 862
dynamic linear model, 636              essential graph, 915
dynamic programming, 331, 920          estimated potential scale reduction, 859
dynamic topic model, 962               estimator, 191
                                       Euclidean distance, 18
E step, 350                            evidence, 156, 173
e-commerce, 11                         evidence procedure, 173, 238, 746
early stopping, 263, 557, 572          evolutionary MCMC, 429
EB, 173                                exchangeable, 321, 963
ECM, 369, 387                          exclusive or, 486
ECME, 369                              expectation correction, 658
ECOC, 581                              expectation maximization, 349
econometric forecasting, 660           expectation proagation, 735
economy sized SVD, 392                 Expectation propagation, 787
edge appearance probability, 786       expectation propagation, 525
edges, 309                             expected complete data log likelihood, 350, 351
edit distance, 479                     expected proﬁt, 330
EER, 181                               expected sufficient statistics, 350, 359, 619
effective sample size, 75, 825, 862    expected value, 33
efficient IPF, 683                     explaining away, 326
efficiently PAC-learnable, 210         explicit duration HMM, 622
eigendecomposition, 98                 exploration-exploitation, 184
INDEX TO KEYWORDS                                                                                  1055


exploratory data analysis, 7                          Fisher’s linear discriminant analysis, 271
exponential cooling schedule, 870                     FISTA, 446
Exponential distribution, 42                          ﬁt-predict cycle, 206
exponential family, 115, 253, 281, 282, 290, 347      ﬁxed effect, 298
exponential family harmonium, 985                     Fixed lag smoothing, 608
exponential family PCA, 947                           ﬁxed point, 139
exponential loss, 556                                 ﬂat clustering, 875
exponential power distribution, 458                   FLDA, 271
extended Kalman ﬁlter, 648                            ﬂow cytometry, 936
extension, 67                                         folds, 24
external ﬁeld, 668                                    forest, 310, 912
                                                      forward stagewise additive modeling, 557
F score, 183                                          forward stagewise linear regression, 562
F1 score, 183, 699                                    forwards KL, 733
FA, 381                                               forwards model, 345
face detection, 8                                     forwards selection, 428
face detector, 555                                    forwards-backwards, 644, 688, 707, 720
face recognition, 8                                   forwards-backwards algorithm, 428, 611
Facebook, 974                                         founder model, 317
factor, 665                                           founder variables, 385
factor analysis, 381, 402, 931, 947                   Fourier basis, 472
factor analysis distance, 520                         fraction of variance explained, 400
factor graph, 769, 769, 771, 888                      free energy, 988
factor loading matrix, 381                            free-form optimization, 737
factorial HMM, 628                                    frequent itemset mining, 15
factorial prior, 463                                  frequentist, 27, 149
factors, 382                                          frequentist statistics, 191
faithful, 936                                         Frobenius norm, 388
false alarm, 30, 180                                  frustrated, 868
false alarm rate, 181                                 frustrated system, 668
false discovery rate, 184                             full, 46
false negative, 180                                   full conditional, 328, 838
false positive, 30, 180                               function approximation, 3
false positive rate, 181                              functional data analysis, 124
family, 309                                           functional gradient descent, 561
family marginal, 359                                  furthest neighbor clustering, 897
fan-in, 313                                           fused lasso, 454
fantasy data, 990                                     fuzzy clustering, 973
farthest point clustering, 355                        fuzzy set theory, 65
fast Fourier transform, 717, 775
fast Gauss transform, 524                             g-prior, 236, 425
fast ICA, 411                                         game against nature, 176
fast iterative shrinkage thesholding algorithm, 446   game theory, 176
FastSLAM, 635, 835                                    Gamma, 623
fat hand, 933                                         gamma distribution, 41
fault diagnosis, 659                                  gamma function, 42
feature construction, 564                             GaP, 949
feature extraction, 6, 564                            gap statistic, 372
feature function, 667                                 gating function, 342
feature induction, 680                                Gauss-Seidel, 710
feature maps, 565                                     Gaussian, 20, 38
feature matrix, 875                                   Gaussian approximation, 255, 731
feature selection, 86                                 Gaussian Bayes net, 318
feature-based clustering, 875                         Gaussian copulas, 942
features, 2, 3, 412                                   Gaussian graphical models, 725
feedback loops, 929                                   Gaussian kernel, 480, 507, 517
feedforward neural network, 563                       Gaussian mixture model, 339
ferro-magnets, 668                                    Gaussian MRF, 672
FFT, 775                                              Gaussian process, 483, 505, 509, 512, 882
ﬁelds of experts, 473                                 Gaussian processes, 515
ﬁll-in edges, 719                                     Gaussian random ﬁelds, 938
Filtering, 607                                        Gaussian RBM, 986
ﬁltering, 87                                          Gaussian scale mixture, 359, 447, 505
ﬁnite difference matrix, 113                          Gaussian sum ﬁlter, 656
ﬁnite mixture model, 879                              GDA, 101
ﬁrst-order logic, 674                                 GEE, 300
Fisher information, 166                               GEM, 369
Fisher information matrix, 152, 193, 293              Gene ﬁnding, 606
Fisher kernel, 485                                    gene ﬁnding, 622
Fisher scoring method, 293                            gene knockout experiment, 931
1056                                                                                              INDEXES


gene microarrays, 421                                 Gumbel, 295
generalization, 3
generalization error, 23, 180                         Hadamard product, 609
generalization gradient, 66                           Haldane prior, 166
generalize, 3                                         ham, 5
generalized additive model, 552                       Hamiltonian MCMC, 868
generalized belief propagation, 785                   Hammersley-Clifford, 666
generalized cross validation, 207                     hamming distance, 876
generalized eigenvalue, 274                           handwriting recognition, 7
generalized EM, 361, 369                              haplotype, 317
generalized estimating equations, 300                 hard clustering, 340
generalized linear mixed effects model, 298           hard EM, 352
generalized linear model, 281, 290                    hard thresholding, 434, 435
generalized linear models, 281                        harmonic mean, 183
generalized pseudo Bayes ﬁlter, 657                   harmonium, 983
generalized t distribution, 461                       Hastings correction, 849
generate and test, 853                                hat matrix, 221
generative approach, 245                              HDI, 154
generative classiﬁer, 30                              heat bath, 838
generative pre-training, 999                          heavy ball method, 249
generative weights, 410, 986                          heavy tails, 43, 223
genetic algorithms, 348, 720, 921                     Hellinger distance, 735
genetic linkage analysis, 315, 318                    Helmholtz free energy, 733
genome, 318                                           Hessian, 193, 852
genotype, 317                                         heteroscedastic LDA, 275
geometric distribution, 622                           heuristics, 727
Gibbs distribution, 290, 666                          hidden, 10, 349
Gibbs sampler, 672                                    hidden layer, 563
Gibbs sampling, 328, 669, 736, 838                    hidden Markov model, 312, 603, 963
Gini index, 548                                       hidden nodes, 313
gist, 963                                             hidden semi-Markov model, 622
Gittins Indices, 184                                  hidden units, 564
Glasso, 940                                           hidden variable, 312, 924
Glauber dynamics, 838                                 hidden variables, 319, 914
GLM, 290, 654                                         hierarchical adaptive lasso, 458
GLMM, 298                                             hierarchical Bayesian model, 171
glmnet, 442                                           hierarchical Bayesian models, 347
global balance equations, 597                         hierarchical clustering, 875, 893
global convergence, 248                               hierarchical Dirichlet process, 621
global localization, 828                              hierarchical HMM, 624
global Markov property, 661                           hierarchical latent class model, 926
global minimum, 222                                   hierarchical mixture of experts, 344, 551
global prior parameter independence, 916              high throughput, 184, 421
globally normalized, 686                              high variance estimators, 550
GM, 308                                               highest density interval, 154
GMM, 339                                              highest posterior density, 153
GP-LVM, 540                                           hill climbing, 920
GPs, 515                                              hindsight, 607
GPUs, 1006                                            hinge loss, 211, 477, 499
gradient boosting, 560                                Hinton diagram, 592
gradient descent, 247, 445                            Hinton diagrams, 399
Gram matrix, 481                                      histogram, 508
grammars, 689, 1007                                   hit rate, 181
grandmother cells, 984, 1005                          HMM, 312, 603
graph, 309                                            HMM ﬁlter, 640
graph cuts, 890                                       HMMs, 685
graph Laplacian, 891                                  Hoeffding’s inequality, 209
graph surgery, 932                                    homogeneous, 589
graph-guided fused lasso, 454                         homotopy, 442
graphcuts, 801                                        Hopﬁeld network, 568, 669
graphical lasso, 940                                  horizon, 608
graphical model, 308, 311                             Horn clauses, 676
graphical models, xxviii, 13, 31, 32, 308, 337, 909   HPD, 153
Gray code, 422                                        HSMM, 622
greatest common divisor, 598                          Huber loss, 224, 561
greedy equivalence search, 936                        Hugin, 722
ground network, 676                                   Hungarian algorithm, 659, 810
ground states, 668                                    hybrid MCMC, 868
group lasso, 450, 579, 942                            hybrid Monte Carlo, 584
grouping effect, 456                                  hybrid systems, 655
INDEX TO KEYWORDS                                                                              1057


hyper-parameters, 74                          interest point detector, 484
hypothesis space, 66                          interpolate, 112
                                              interpolated Kneser-Ney, 595
I-map, 324                                    interpolator, 517
I-projection, 733                             interval censored, 379
ICA, 385, 409                                 interventional data, 936
ID3, 545                                      interventions, 931
IDA, 936                                      intrinsic Gaussian random ﬁeld, 113
identiﬁable, 346                              invariant, 8, 854
identiﬁable in the limit, 70                  invariant distribution, 597
iff, 68                                       invariant features, 1004
iid, 51, 218, 320                             inverse chi-squared distribution, 131
ill-conditioned, 106, 129                     inverse Gamma, 130
image classiﬁcation, 7                        inverse gamma, 42
image compression, 355                        inverse Gaussian, 448
image denoising, 473                          inverse probability transform, 815
image inpainting, 14, 473                     inverse problem, 317
image segmentation, 671                       inverse problems, 344
image tagging, 968                            inverse reinforcement learning, 186
IMM, 658                                      inverse Wishart, 126, 128
implicit feedback, 983                        inverted index, 600
importance sampling, 820                      inverted indices, 1004
importance weights, 821                       IP, 847
impression log, 983                           IPF, 682
improper prior, 166, 168                      iris, 6, 548
imputation, 14                                IRLS, 251
Imputation Posterior, 847                     IRM, 976
in-degree, 310                                irreducible, 598
inclusion probabilities, 423                  Ising model, 668
incremental EM, 365, 366                      isotropic, 46
independence sampler, 848                     iterated EKF, 650
independent and identically distributed, 51   iterative conditional modes, 669, 804, 929
independent component analysis, 409           iterative proportional ﬁtting, 682, 939
indicator function, 17, 28, 976               iterative scaling, 683
induced width, 719                            iterative shrinkage and thresholding algorithm, 445
induction, 66, 77                             iterative soft thresholding, 445
inductive bias, 19, 582                       iteratively reweighted least squares, 251
infer.net, 799
inference, 320                                Jacobi, 710, 773
inﬁnite hidden relational model, 977          Jacobian, 151, 648, 649
inﬁnite HMM, 621                              Jacobian matrix, 50
inﬁnite mixture models, 841, 879              JAGS, 847
inﬁnite relational model, 903, 973, 976       JamBayes, 13
inﬂuence diagram, 328, 932                    James Stein estimator, 174
inﬂuence model, 628                           James-Stein estimator, 173, 199
infomax, 416                                  JC Penney, 603
information, 27                               Jeffreys prior, 166
information arc, 329, 331                     Jeffreys-Lindley paradox, 165
information bottleneck, 405                   Jensen’s inequality, 58, 363
information extraction, 688                   Jensen-Shannon divergence, 57
information ﬁlter, 642                        Jeopardy, 4
information form, 115, 305, 672, 711, 725     jittered, 486
information gain, 547                         JJ bound, 761
Information inequality, 58                    joint distribution, 29, 307
information projection, 733                   joint probability distribution, 44
information retrieval, 183, 300, 953          JTA, 720
information theory, 56                        jump Markov linear system, 655
inheritance model, 317                        junction tree, 722
inner approximation, 779                      junction tree algorithm, 720, 731
innovation, 641                               junction trees, 635
inside outside, 624
inside-outside algorithm, 689                 K-centers, 887
instance-based learning, 17                   K-means algorithm, 352
integrate out, 156                            k-means++, 355
integrated likelihood, 156                    K-medoids algorothm, 490
integrated risk, 195                          k-spectrum kernel, 484
intensive care unit, 313                      K2 algorithm, 920
inter-causal reasoning, 326                   Kalman ﬁlter, 122, 267, 632, 633, 640, 643
interaction effects, 421                      Kalman gain matrix, 637, 641
interactive multiple models, 658              Kalman smoother, 633, 707
1058                                                                          INDEXES


Kalman smoothing, 644, 712, 963       latent class model, 926
Karhunen Loeve, 387                   latent CRF, 701
Karl Popper, 77                       latent Dirichlet allocation, 949, 950
KDE, 508, 510                         latent factors, 11
Kendall’s τ , 304                     latent semantic analysis, 12, 947
kernel, 565, 600, 848                 latent semantic indexing, 418, 947
kernel density estimation, 127, 510   latent SVMs, 702
kernel density estimator, 508         latent variable models, 337
kernel function, 479, 515             lattice, 668
kernel machine, 486                   Lauritzen-Spiegelhalter, 722
kernel PCA, 494, 540, 892             LBP, 767
kernel regression, 511                LDA, 104, 927, 949, 950
kernel smoothing, 511                 LDA-HMM, 963
kernel trick, 488                     LDPC, 768
kernelised feature vector, 486        LDS, 631
Kikuchi free energy, 784              leaf, 309
kinect, 551                           leak node, 315
kinematic tracking, 344               leapfrog steps, 868
kink, 372                             learning, 320
KL divergence, 57, 732                learning curve, 230
Kleene star, 483                      learning rate, 247
knee, 372                             learning to learn, 296
KNN, 16                               learning to rank, 300
knots, 537                            least favorable prior, 197
knowledge base, 676                   least mean squares, 265, 637
knowledge discovery, 2, 9             least squares, 219
knowledge engineering, 313            least squares boosting, 428, 442, 558
Kolmogorov Smirnov, 864               leave one out cross validation, 207
kriging, 516                          leave-one out cross validation, 24
kronecker product, 253, 760           leaves, 895
Kruskal’s algorithm, 912              left censored, 379
Kullback-Leibler divergence, 57       left-to-right, 612
kurtosis, 413, 415                    left-to-right transition matrix, 590
                                      LeNet5, 566
L-BFGS, 252                           leptokurtic, 413
0 pseudo-norm, 424                   LETOR, 300
0 regularization, 426                level sets, 47
1 loss, 179                          Levenberg Marquardt, 250
1 regularization, 430                Levinson-Durbin, 627
L1-Adaboost, 563                      LG-SSM, 631
L1VM, 488, 505                        likelihood, 319
2 loss, 179                          likelihood equivalence, 917
2 norm, 218                          likelihood equivalent, 200
2 regularization, 226                likelihood principle, 214
L2boosting, 558                       likelihood ratio, 67, 163
L2VM, 488                             likelihood weighting, 822
label, 176                            limited memory BFGS, 252
label bias, 685                       limiting distribution, 598
label switching, 341, 841             line minimization, 248
label taxonomy, 689                   line search, 248
labeled LDA, 953, 969                 linear discriminant analysis, 104
lag, 608                              linear dynamical system, 631
Lagrange multiplier, 80               linear Gaussian, 318
Lagrange multipliers, 289             linear Gaussian system, 119
Lagrangian, 80, 289                   linear kernel, 482
Lagrangian relaxation, 808            linear program, 224
Lanczos algorithm, 398                linear programming relaxtion, 800
language model, 300, 953              linear regression, 19
language modeling, 81, 568            linear smoother, 533
language models, 591                  linear threshold unit, 252
Laplace, 223, 413, 429                linear trend, 660
Laplace approximation, 255, 468       linear-Gaussian CPD, 673
Laplace distribution, 41              linear-Gaussian SSM, 631
Laplace’s rule of succession, 77      linearity of expectation, 49
LAR, 442, 562                         linearly separable, 22, 252, 266
large margin classiﬁer, 501           link farms, 601
large margin principle, 259           link function, 291
LARS, 437, 442, 558, 562              LISREL, 930
lasso, 431, 470, 562, 936             ListNet, 302
latent, 11                            LMS, 265, 637
INDEX TO KEYWORDS                                                                     1059


local consistency, 780                    Markov decision process, 331
local evidence, 317, 671                  Markov equivalence, 936
local level model, 637                    Markov equivalent, 915, 917
local prior parameter independence, 917   Markov logic network, 675
local variational approximation, 756      Markov mesh, 661
localist encoding, 984                    Markov model, 589
locally decodable, 811                    Markov models, 32
locally normalized, 686, 715              Markov network, 661
locally weighted regression, 512          Markov random ﬁeld, 661
LOESS, 512                                Markov switching models, 604
log partition function, 282               MARS, 538, 553, 562
log-linear, 667                           MART, 562
log-loss, 210                             master, 810
log-odds ratio, 283                       matching pursuit, 562
log-sum-exp, 86, 757                      matching pursuits, 428
logic sampling, 822                       Matern kernel, 482
logical reasoning problems, 726           MATLAB, xxviii
logistic, 21, 295                         matrix completion, 14, 939
logistic distribution, 413, 863           matrix determinant lemma, 118
logistic normal, 402, 961                 matrix factorization, 948
logistic regression, 21, 106              matrix inversion lemma, 118, 144, 641
logit, 21                                 matrix permanent, 669
logitBoost, 560                           matrix tree theorem, 914
long tail, 2, 296                         max ﬂow/min cut, 801
long tails, 43                            max margin Markov networks, 693
LOOCV, 24, 207                            max pooling, 1005
look-ahead RBPF, 832                      max product linear programming, 810
loop, 310                                 max-product, 614, 713
loopy belief propagation, 691, 767, 889   max-product belief propagation, 800
Lorentz, 40                               maxent, 289
loss, 176                                 maximal branching, 913
loss function, 261                        maximal clique, 310
loss matrix, 185                          maximal information coefficient, 60
loss-augmented decoding, 699              maximal weight bipartite matching, 659
loss-calibrated inference, 694            maximizer of the posterior marginals, 612
lossy compression, 354                    maximum a posteriori, 4
low density parity check, 768             maximum entropy, 39, 104, 289, 667
Low-level vision, 690                     maximum entropy classiﬁer, 252
LOWESS, 512                               maximum entropy Markov model, 685
LSA, 947, 1003                            maximum expected utility principle, 177
lse, 757                                  maximum likelihood estimate, 69
LSI, 947                                  maximum risk, 196
LVM, 337                                  maximum weight spanning tree, 912
                                          MCAR, 270
M step, 350                               MCEM, 368
M-projection, 733                         MCMC, 52, 596, 600, 815, 837
M3nets, 693                               MDL, 162
machine learning, 1                       MDP, 331
macro-averaged F1, 183                    MDS, 496
Mahalanobis distance, 98                  mean, 33
mammogram, 29                             mean absolute deviation, 511
maneuvering target tracking, 832          mean average precision, 303
manifest, 930                             mean ﬁeld, 735, 756, 767, 989
MAP estimate, 4, 178                      mean ﬁeld energy functional, 779
MAR, 270                                  mean function, 291
margin, 563                               mean precision, 182
margin re-rescaling), 696                 mean reciprocal rank, 303
marginal distribution, 29                 mean squared error, 205, 218
marginal likelihood, 156, 169             Mechanical Turk, 10, 995
marginal polytope, 777                    median, 33
marginalizing out, 320                    median model, 423
marginally independent, 30                MEMM, 685
marker, 317                               memory-based learning, 17
market basket analysis, 15                Mendelian inheritance, 317
Markov, 324                               Mercer kernel, 481
Markov assumption, 308                    Mercer’s theorem, 481, 539
Markov blanket, 327, 662, 736, 838        message passing, 644, 800
Markov chain, 308, 589                    metric, 691, 691, 803
Markov Chain Monte Carlo, 815             metric CRF, 691
Markov chain Monte Carlo, 52, 600, 837    metric MRF, 803
1060                                                                                       INDEXES


Metropolis Hastings, 848, 922                  MPE, 614
Metropolis-Hastings algorithm, 869             MPM, 612
MFCC, 1005                                     MRF, 661
MH, 848                                        MSE, 218
MI, 59                                         multi label classiﬁcation, 970
micro-averaged F1, 183                         multi net, 627
Microsoft, 983                                 multi-armed bandit, 184
mini-batch, 264, 571                           multi-class logistic regression, 104
minimal, 282                                   multi-clust, 904
minimal I-map, 324                             multi-grid techniques, 775
minimax rule, 196                              multi-information, 415
minimum description length, 162                multi-label classiﬁcation, 3, 405
minimum entropy prior, 621                     multi-layer perceptron, 563, 999
minimum mean squared error, 179                multi-level model, 171
minimum spanning tree, 897                     multi-level modeling, 844
minorize-maximize, 369                         multi-stage, 186
misclassiﬁcation loss, 176                     multi-target tracking, 659
Misclassiﬁcation rate, 547                     multi-task feature selection, 297
misclassiﬁcation rate, 22, 205                 multi-task learning, 172, 231, 296, 449, 757
missed detection, 180                          multiclass classiﬁcation, 3
missing, 15                                    multidimensional scaling, 496
missing at random, 270, 372, 982               multinomial, 35
missing completely at random, 270              multinomial coefficient, 35
missing data, 14, 914, 974                     multinomial logistic regression, 104, 252
missing data problem, 269                      multinomial PCA, 948, 951
mixed directed graphs, 931                     multinomial probit, 295
mixed membership model, 950                    multinomial regression LDA, 968
mixed membership stochastic block model, 973   multinomial resampling, 826
mixed model, 298                               multinoulli distribution, 35
mixing matrix, 408                             multiple hypothesis testing, 184
mixing time, 857                               multiple hypothesis tracking, 656
mixing weights, 169, 338                       multiple imputation, 115
mixture, 72                                    multiple kernel learning, 524, 543
mixture density network, 344                   multiple LDA, 276
mixture model, 164, 338                        multiple output model, 3
mixture of conjugate priors, 169               multiple random restarts, 348, 921
mixture of experts, 342, 563, 973, 984         multiple restarts, 620
mixture of factor analysers, 386               multivariate adaptive regression splines, 553
mixture of Gaussians, 339                      multivariate Bernoulli naive Bayes, 82
mixture of Kalman ﬁlters, 831                  multivariate delta method, 763
mixture of trees, 914                          multivariate Gamma function, 133
mixture proposal, 853                          multivariate gamma function, 126
MLE, 69                                        multivariate Gaussian, 46, 97, 339
MLP, 563                                       multivariate normal, 46, 97
MM, 369                                        multivariate probit, 295
MMSE, 179                                      multivariate Student t, 46
MNIST, 7, 341                                  mutual information, 46, 59, 87, 547, 912
Mobious numbers, 784                           mutual inhibition, 564
mode, 4                                        mutually independent, 62
model based clustering, 11                     MVN, 46, 97
model selection, 10, 24, 156
model selection consistent, 439                N-best list, 616
model-based approach, xxvii                    n-gram, 568
model-based clustering, 879                    n-gram models, 591
moderated output, 260                          Nadaraya-Watson, 511
modularity, xxviii                             naive Bayes classiﬁer, 82, 88, 311
MoE, 342                                       naive Bayes classiﬁers, 32
moment matching, 176, 287, 653, 658, 677       named entity extraction, 688
moment parameters, 115                         NaN, 14
moment projection, 733                         nats, 56
momentum, 248                                  natural exponential family, 282
monks, 974                                     natural gradient, 411
Monte Carlo, 52, 151, 192, 258, 815            natural parameters, 115, 282
Monte Carlo EM, 368                            NDCG, 304
Monte Carlo integration, 53                    nearest centroids classiﬁer, 102
Monte Carlo localization, 828                  nearest medoid classiﬁcation, 491
moralization, 663, 715                         nearest neighbor, 16
motes, 218                                     nearest neighbor clustering, 897
motif, 36                                      nearest neighbor data association, 658
mPCA, 948                                      nearest shrunken centroids, 109
INDEX TO KEYWORDS                                                                            1061


negative binomial, 624                              observed information matrix, 193
negative binomial distribution, 214                 Occam factor, 255
negative examples, 65                               Occam’s razor, 67, 156, 399, 400
negative log likelihood, 218, 349                   occasionally dishonest casino, 606
negative transfer, 297                              occupancy grid, 828
negentropy, 415                                     Octave, xxviii
neighbors, 309                                      offline, 261
neocognitron, 566                                   oil wild-catter, 328
nested plate, 321                                   OLS, 220
Nesterov’s method, 446                              OMP, 428
Netﬂix, 15, 580, 979, 981, 987, 993                 one-armed bandit, 184
NETtalk, 569                                        one-hot encoding, 35
neural network, 302, 969                            one-of-C encoding, 252
neural networks, 344, 535                           one-shot decision problem, 186
neutral process, 882                                one-standard error rule, 208
Newton’s algorithm, 249, 251                        one-step-ahead predictive density, 609
NHST, 213                                           one-versus-one, 503
NIW, 133                                            one-versus-the-rest, 503
NIX, 136                                            one-vs-all, 503
NLL, 218, 349                                       online EM, 365
NMAR, 270                                           online gradient descent, 262
NMF, 470, 949                                       online learning, 75, 241, 261
no forgetting, 331                                  ontological uncertainty, 973
no free lunch theorem, 24, 582                      ontology, 977
nodes, 309                                          open class, 596, 688
nodes that ﬁre together should wire together, 929   Open Directory Project, 600, 689
noise ﬂoor, 230                                     open universe, 676
noisy-OR, 313, 928                                  optimal action, 177
nominal, 2                                          optimism of the training error, 206
non-descendants, 327                                optimization, 218
non-factorial, 466                                  ordered Markov property, 310, 327
non-informative, 165                                ordinal, 295
non-negative matrix factorization, 470, 949         ordinal regression, 2, 295, 301
non-negative sparse coding, 470                     ordinal variables, 876
non-null recurrent, 599                             ordinary least squares, 220
non-parametric Bayes, 879                           Ornstein-Uhlenbeck process, 483
non-parametric bootstrap, 192                       orthodox statistics, 191
non-parametric BP, 712                              orthogonal least squares, 427
non-parametric model, 16                            orthogonal matching pursuits, 428
non-parametric prior, 879                           orthogonal projection, 221
non-serial dynamic programming, 717                 out-degree, 310
non-smooth, 432                                     out-of-clique query, 722
non-terminals, 689                                  outer approximation, 780
nonparanormal, 942                                  outliers, 179, 223
norm of a function, 539                             over-complete, 282, 1001
normal, 20, 38                                      overcomplete, 469
normal equation, 220                                overcounting number, 784
normal Gamma, 476                                   overdispersed, 859
normal inverse chi-squared, 136                     overﬁt, 22
Normal-inverse-wishart, 133                         overﬁtting, 72
normalized cut, 891                                 overrelaxed EM algorithm, 369
normalized discounted cumulative gain, 304
normalized mutual information, 879                  p-value, 138, 163, 163, 213
not missing at random, 270                          PAC, 210
noun phrase chunking, 687                           PageRank, 301, 596, 600, 601
NP-complete, 920                                    paired t-test, 137
NP-hard, 726                                        pairwise independent, 62
ν-SVM classiﬁer, 502                                pairwise Markov property, 662
nuisance variables, 320                             pairwise MRF, 666
null hypothesis, 163, 213                           parallel tempering, 858, 871, 922
null hypothesis signiﬁcance testing, 213            parameter, 176
number game, 65                                     parameter expansion, 736
numerical underﬂow, 86                              parameter modularity, 918
                                                    parameter sharing, 107
object detection, 8                                 parameter tying, 107, 171, 589
object localization, 8                              parametric bootstrap, 192
observation, 603                                    parametric model, 16, 19
observation model, 312, 631                         parents, 309, 310
observed data log likelihood, 348                   Pareto distribution, 43
observed information, 167                           part of speech, 605, 966
1062                                                                                         INDEXES


Part of speech tagging, 605                       point estimate, 149, 150
partial dependence plot, 586                      pointwise approach, 301
partial least squares, 406, 975                   pointwise marginal credibility intervals, 114
partially directed acyclic graph, 915             pointwise mutual information, 59
partially labeled LDA, 969                        Poisson, 37
partially observed Markov decision process, 331   poisson regression, 292
partially observed MRF, 672                       polar, 51
Particle ﬁltering, 823                            policy, 177
particle ﬁltering, 267, 648, 823, 887             Polya urn, 89, 884
partition function, 282, 666                      Polyak-Ruppert averaging, 263
partitional clustering, 875                       polynomial kernel, 481
partitioned inverse formula, 116                  polynomial regression, 20
partitioning, 841                                 polynomial time approximation schemes, 728
partitions of the integers, 885                   polysemy, 951
Parzen window density estimator, 508              polytree, 310
passing a ﬂow, 724                                POMDP, 331
path, 310                                         pooled, 171
path diagrams, 929                                pooled empirical variance, 108
pathologies, 211                                  population minimizer, 556
pattern, 915                                      positive deﬁnite, 125, 222
pattern completion, 669                           positive deﬁnite kernel, 481
pattern recognition, 2                            positive examples, 65
pattern search, 736, 783                          posterior expected loss, 177
PCA, 12, 387, 493, 947                            posterior mean, 179
PCFG, 689                                         posterior median, 179
PDAG, 936                                         posterior mode, 178
pdf, 32                                           posterior predictive density, 608
pedigree graph, 315                               posterior predictive distribution, 66, 71, 234
peeling algorithm, 715                            potential function, 665
Pegasos, 701                                      Potts model, 671, 856
penalized least squares, 226                      power law, 43
penalized log likelihood, 161                     power method, 603
penalized splines, 537                            PPCA, 381, 387
penetrance model, 317                             precision, 38, 182
perception-action, 331                            precision at k, 303, 702
perceptron, 569                                   precision matrix, 46, 100
perceptron algorithm, 266                         precision recall curve, 182
perceptual aliasing, 828                          predict-update cycle, 609
perfect intervention, 931                         predict-update-project, 653
perfect map, 664                                  predictive, 2
period, 598                                       preferences, 185
permanent, 942                                    preposterior risk, 195
perplexity, 953, 953, 992                         prevalence, 183
persistent CD, 991                                Prim’s algorithm, 912
persistent contrastive divergence, 680            primal variables, 492, 499
personalized recommendation, 77                   principal component, 388
personalized spam ﬁltering, 296                   principal components, 1000
perturbation theory, 892                          principal components analysis, 12, 387
phase, 317                                        principal components regression, 230
phase transition, 671, 857                        principle of insufficient reason, 58
phenotypes, 317                                   probabilistic decision tree, 551
phone, 624                                        probabilistic expert system, 313
phonemes, 1005                                    probabilistic inference, 319
phylogenetic HMM, 317                             probabilistic latent semantic indexing, 949
phylogenetic tree, 925                            probabilistic matrix factorization, 337, 980
piecewise polynomial, 537                         probabilistic PCA, 387
pilot runs, 851                                   probabilistic principal components analysis, 381
pipeline, 687                                     probabilistic relational modeling, 675, 976
Pitman-Koopman-Darmois theorem, 286               probability density function, 32
Pitman-Yor process, 885                           probability mass function, 28
Plackett-Luce, 302                                probability of the evidence, 319, 609, 717
plates, 321                                       probability product kernel, 485
platykurtic, 413                                  probability simplex, 47, 79
PLS, 406                                          probability theory, xxvii, 1
PLSI, 949                                         probably approximately correct, 210
plug-in, 147                                      probe, 583
plug-in approximation, 72                         probit, 260, 655
plutocracies, 43                                  probit regression, 293, 362, 380, 795, 864
pmf, 28                                           product of experts, 983
PMTK, xxviii                                      product rule, 29
INDEX TO KEYWORDS                                                                             1063


production rules, 689                       recall, 181, 182
proﬁle HMM, 606                             receiver operating characteristic, 181
proﬁle log likelihood, 401                  receptive ﬁelds, 565
projected gradient descent, 444, 445        recognition weights, 410, 986
projection, 262                             recombination model, 317
projection pursuit, 415                     reconstruction error, 354, 387
Prolog, 676                                 recurrent, 599
proposal distribution, 817, 848, 869        recurrent neural network, 568, 669
propose, 848                                recurrent neural networks, 591
prosecutor’s fallacy, 61                    recursive, 929
Protein sequence alignment, 606             recursive least squares, 265, 636
protein-protein interaction networks, 970   reﬂecting pair, 553
prototype, 341                              regime switching, 660
proximal operator, 443                      regime switching Markov model, 626
pruning, 549                                regression, 2
pseudo counts, 75                           regression spline, 537
pseudo likelihood, 678                      regret, 262
pseudo marginals, 780                       regular, 598
pseudo random number generator, 816         regularization, 227
pseudo-likelihood, 943                      regularization path, 436, 442, 562
pure, 546, 548                              regularized discriminant analysis, 107
purity, 877                                 regularized estimation, 130
pushing sums inside products, 715           regularized particle ﬁlter, 827
pyramid match kernel, 484                   regularized risk minimization, 206
                                            reinforcement learning, 2, 186
QALY, 186                                   reject action, 178
QMR, 313                                    rejection sampling, 817
QP, 431                                     rejuvenation, 825
qq-plot, 260                                relation, 975
QR decomposition, 228                       relational probabilistic models, 676
quadratic discriminant analysis, 102        relational topic model, 974
quadratic loss, 179                         relative entropy, 57
quadratic program, 431, 498, 499            relative importance of predictor variables, 586
quantile, 33                                relative risk, 531
quantize, 59                                relevance network, 908
quartiles, 33                               relevance vector machine, 463, 488
Quasi-Newton, 251                           Rephil, 928
query logs, 301                             replicated softmax model, 992
query variables, 320                        representer theorem, 539
quick medical reference, 313                reproducing kernel Hilbert space, 539
                                            reproducing property, 539
                                            rerank, 616
radar, 658                                  resample-move, 827
radial basis function, 480                  residual, 641
Rand index, 878                             residual analysis, 260
random accelerations model, 633             residual belief propagation, 774
random effects, 298                         residual error, 19
random effects mixture of experts, 969      residual resampling, 826
random forests, 551, 554                    residual sum of squares, 218
random probability measure, 880             response variable, 2
random utility model, 294                   responsibility, 340, 351
random walk Metropolis algorithm, 848       restricted Boltzmann machine, 983
random walk on the integers, 599            reverse KL, 733
random walk proposal, 869                   reversible jump MCMC, 370, 399, 855
Rank correlation, 304                       reward, 2
rank one update, 118                        Ricatti equations, 642
ranking, 87, 601, 702                       rich get richer, 755, 885
RankNet, 302                                ridge regression, 203, 226
Rao-Blackwell, 841                          right censored, 379
Rao-Blackwellisation, 841                   risk, 195, 261
Rao-Blackwellised particle ﬁltering, 831    risk averse, 4, 178
Rao-Blackwellized particle ﬁltering, 659    RJMCMC, 855
rare event, 182, 820                        RKHS, 539
rate, 355                                   RLS, 636
rational behavior, 177                      Robbins-Monro, 263, 366, 701
RBF, 480                                    robust, 179
RBF kernel, 517                             robust priors, 168
RBF network, 486                            robustness, 223
RBM, 983, 996                               ROC, 181
RBPF, 831                                   rocking, 261
real AdaBoost, 559
1064                                                                              INDEXES


root, 309, 895                           shrinkage, 122, 174, 230, 557
root mean square error, 979              shrinkage estimation, 130
Rosenblatt, 266                          shrinkage factor, 437
rotamers, 690                            side chains, 690
RTS smoother, 644                        side information, 982
rule of iterated expectation, 141        SIFT, 484
rule of total probability, 29            sifting property, 39
rules, 550                               sigma points, 650, 651
RUM, 294                                 sigmoid, 21, 105
running intersection property, 722       sigmoid belief net, 313, 996
RVM, 488, 505                            sigmoid belief nets, 763
                                         sigmoid kernel, 482
saddle point approximation, 255          signal detection theory, 106
sample impoverishment, 826               signal processing, 421
sample standard deviation, 136           signal-to-noise ratio, 122
samples, 52                              signal-to-symbol, 1007
sampling distribution, 191, 191          similar, 66, 875
sampling importance resampling, 823      similarity-based clustering, 875
sampling period, 633                     simple cells, 413
satisfying assignment, 727               Simple linear regression, 241
saturated model, 428                     simplex factor model, 949
SBL, 463                                 Simpon’s paradox, 933
scalar product, 19                       Simulated annealing, 869
scale invariant prior, 168               simulated annealing, 262, 348, 853, 921
scale of evidence, 163                   simulation based, 823
scatter plot, 6                          simultaneous localization and mapping, 635
SCFGs, 624                               single best replacement, 427
schedule, 263                            single link clustering, 897
Schur complement, 116                    single site updating, 847
scientiﬁc method, 71                     singular value decomposition, 392
scope, 328                               singular values, 392
score function, 167, 193                 SIR, 823
score matching, 1001                     size principle, 67
score vector, 485                        skewness, 413
scores, 382                              skip arcs, 568
scree plot, 400                          skip-chain CRF, 688
screening, 87                            slack re-scaling, 696
search engine optimization, 603          slack variables, 498
second order, 249                        SLAM, 635, 834
second order Markov chain, 312           slaves, 810
second-order Markov model, 591           slice sampling, 865
self loops, 309                          sliding window detector, 8
semantic hashing, 1003                   slippage, 635
semantic network, 977                    slot machine, 184
semantic role labeling, 576              small N , large D, 421
semi-conjugate, 132                      SmartASS, 4
semi-continuous HMM, 630                 SML, 680
semi-Markov model, 622                   SMO, 499
semi-metric, 691                         Smoothing, 607
semi-parametric model, 298, 524          smoothing kernel, 507, 507
semi-supervised, 405                     Smoothing splines, 536
semi-supervised embedding, 576           social networks, 970
semi-supervised learning, 268, 270       soft clustering, 340, 973
sensible PCA, 387                        soft margin constraints, 501
sensitivity, 29, 181                     soft thresholding, 434, 435
sensitivity analysis, 166                soft weight sharing, 575
sensor fusion, 122                       softmax, 104, 283
sentiment analysis, 967                  source coding, 56
separating set, 723                      SpAM, 553
separation oracle, 699                   spam, 5
sequence logo, 36                        spanning tree polytope, 786
sequential, 186                          SpaRSA, 445
sequential minimal optimization, 499     sparse, 15, 421, 621, 945, 979
sequential TRBP, 801                     sparse Bayesian learning, 463
SGD, 262                                 sparse boosting, 562
Shafer-Shenoy, 722                       sparse coding, 469
shallow parsing, 687                     sparse data problem, 77
shared, 103                              sparse kernel machine, 421
Sherman-Morrison-Woodbury formula, 118   sparse matrix factorization, 469, 470
shooting, 441, 940                       sparse PCA, 469
INDEX TO KEYWORDS                                                                                      1065


sparse representation, 421                             stochastic volatility, 831
sparse vector machine, 488                             stop words, 81, 480, 952
sparsity, 41                                           stopping rule, 214
sparsity-promoting prior, 297                          stratiﬁed CV, 206
spectral, 445                                          stratiﬁed sampling, 826
spectral clustering, 891                               streaming data, 261
spectral graph theory, 891                             StreetView, 8
speech recognition, 590, 1005                          strict, 197
sphereing, 142                                         strictly convex, 222
spherical, 46                                          string kernel, 483
spike and slab, 424                                    strong local optimum, 804
spin, 668                                              strong sampling assumption, 67
spline, 298                                            structural EM, 925
split merge, 621                                       structural equation model, 929
split variable, 224                                    structural equation models, 674
square root ﬁlter, 642                                 structural error, 230
squared error, 179                                     structural risk minimization, 206
squared exponential kernel, 480, 517                   structural signatures, 926
squared loss, 176                                      structural support vector machines, 693
squashing function, 21                                 structural time series, 637
SSM, 631                                               structural zeros, 672
SSVMs, 693                                             structure learning, 621, 681
stability selection, 439                               structured mean ﬁeld, 740
stable, 936                                            structured output, 684
stacked denoising auto-encoder, 1001                   structured perceptron algorithm, 700
stacking, 580                                          structured-output classiﬁcation problems, 266
standard deviation, 34                                 Student t, 359
standard error, 56                                     Student t distribution, 39
standard error of the mean, 137, 208                   sub-Gaussian, 413
standard errors, 194                                   subderivative, 432
standard model, 995                                    subdifferential, 432
standard normal, 38                                    subgradient, 432, 432
standard overcomplete representation, 776              subgraph, 310
standardized, 352                                      subjective, 67
Standardizing, 142                                     subjective probability, 310
state, 176                                             submodular, 802
state estimation, 313                                  subsampling, 566
state space, 28                                        subspace method, 647
state space model, 631                                 sufficiency principle, 214
state transition diagram, 590, 606                     sufficient statistics, 74, 79, 281, 282, 348
state transition matrix, 308                           suffix trees, 483
stationary, 589, 631                                   sum of squared errors, 218
stationary distribution, 596, 597                      sum of squares, 220
statistical learning theory, 209                       sum rule, 29
statistical relational AI, 675                         sum-product, 614, 709
statistical relational learning, 976                   sum-product algorithm, 707
statistically signiﬁcant, 213                          super efficient, 820
steepest descent, 247, 264                             super-Gaussian, 413
Stein’s paradox, 199                                   supermodular, 802
stemming, 81                                           supervised LDA, 967
step size, 247                                         supervised learning, 2
stepping out, 866                                      supervised PCA, 405
stepwise EM, 365                                       support, 426
stick-breaking construction, 883                       support vector machine, 488, 496, 569
sticky, 850                                            support vector machines, 211
stochastic algorithm, 869                              support vectors, 496, 498, 499
stochastic approximation, 368                          surrogate loss, 304
stochastic approximation EM, 368                       surrogate loss function, 211
stochastic automaton, 590                              surrogate splits, 550
stochastic block model, 972                            survival of the ﬁttest, 825
stochastic context free grammars, 624                  suspicious coincidence, 164
stochastic EM, 368                                     suspicious coincidences, 67
stochastic gradient boosting, 584                      SVD, 107, 228, 392, 980
stochastic gradient descent, 262, 570, 868, 981, 987   SVM, 211, 488, 496
stochastic matrix, 307, 589                            SVMstruct, 698, 700
stochastic maximum likelihood, 680, 990                Swendsen Wang, 866
stochastic optimization, 262                           switching linear dynamical system, 655, 831
stochastic process, 953                                switching state space model, 655
stochastic processes, 589                              symbol grounding, 1007
stochastic search, 429                                 symmetric, 849
1066                                                                                INDEXES


synchronous updates, 773                    treewidth, 320, 719, 800
syntactic sugar, 321                        trellis, 614
synthesis view, 387                         trellis diagram, 612
systematic resampling, 826                  tri-cube kernel, 508
systems biology, 13                         triangle inequality, 352, 875
systems identiﬁcation, 646                  triangulated, 722
systolic array, 710                         tridiagonal, 114
                                            trigram model, 591
t statistic, 137                            true positive rate, 181
t-test, 137                                 TrueSkill, 654, 793
tabula rasa, 165                            truncated Gaussian, 362
tail area probabilities, 33                 truncated Gaussian potential, 691
tail area probability, 213                  truncated Newton, 250
TAN, 312, 914                               truncated SVD, 393
TASA, 951                                   TRW, 787
Taylor series, 255                          TRW-S, 801
Taylor series expansion, 648                tube, 497
Taylor’s theorem, 248                       tuples, 975
temperature, 104                            turbo codes, 768
template, 676                               two-ﬁlter smoothing, 646
template matching, 543                      two-slice marginal, 611
tensor product, 553                         type I, 213
tensor product basis, 538                   type I error rate, 181
terminals, 689                              type II maximum likelihood, 157
test statistic, 163, 213                    type-II maximum likelihood, 173
TF-IDF, 480
thin junction tree ﬁlter, 635               U-shaped curve, 23
thin junction trees, 944                    UCB, 185
thin plate spline, 538                      UGM, 661
thin SVD, 392                               UKF, 650
thinning, 862                               unbiased, 200
Thompson sampling, 185                      uncertainty, 27
tied, 103, 565, 997                         unclamped phase, 988
tied-mixture HMM, 630                       unclamped term, 677
Tikhonov regularization, 124                unconditionally independent, 30
time reversible, 599                        underﬁts, 23
time-invariant, 589                         undirected, 309
time-series forecasting, 637, 673           undirected graphical model, 661
Tobit model, 379                            undirected local Markov property, 662
Toeplitz, 627                               unfaithful, 663
tokens, 945                                 unidentiﬁable, 200, 278, 841
topic, 946, 951                             Uniﬁed Medical Language System, 977
topic model, 757                            uniform distribution, 32
topological ordering, 310, 310              unigram statistics, 591
total ordering, 310                         unigrams, 953
trace, 99                                   uninformative, 165
trace plot, 859                             union bound, 209
trace trick, 99                             unit information prior, 236
traceback, 614, 717                         universal approximator, 564
tracking, 823                               unk, 81, 596
tracking by detection, 830                  unknown, 15, 81
tractable substructure, 739                 unrolled, 321
trail, 310                                  unscented Kalman ﬁlter, 523, 650
training set, 2                             unscented particle ﬁlter, 828
trans-dimensional MCMC, 855                 unscented transform, 650
transfer function, 563, 570                 unstable, 550
transfer learning, 296                      unsupervised learning, 2, 9, 337
transient, 599                              up-down, 998
transition matrix, 589, 590                 user rating proﬁle, 949
transition model, 312, 631                  utilities, 294
translation invariance, 565, 1004           utility function, 177
translation invariant, 472                  utility nodes, 328
translation invariant prior, 167
TRBP, 787                                   v-structure, 324, 326
TRBP-S, 801                                 validation set, 23
tree, 310                                   value nodes, 328
tree EP, 793                                value of perfect information, 331
tree reparameterization, 774                vanishing gradient, 999
tree reweighted belief propagation, 786     Vapnik-Chervonenkis, 210
tree-augmented naive Bayes classiﬁer, 312   VAR, 673
INDEX TO KEYWORDS                                          1067


variable duration HMM, 622                Zipf’s law, 43
variable elimination, 318, 331, 715
variance, 33
variance stabilizing transform, 175
variation of information, 879
variational Bayes, 742
variational Bayes EM, 620, 750, 923
variational EM, 368
variational free energy, 733
variational inference, 281, 318, 731
variational message passing, 756
varimax, 385, 410
VB, 742
VBEM, 750
VC, 210
VC dimension, 206
vector auto-regressive, 673
vector quantization, 354
version space, 67
vertices, 309
VIBES, 756
views, 904
visible, 349
visible nodes, 313
visible variables, 319
visual words, 1007
visualizing, 12
Viterbi, 612, 701
Viterbi decoding, 608
Viterbi training, 620
VMP, 756
Voronoi tessellation, 18
VQ, 354

Wald, 448
Wald interval, 212
warm starting, 442
WARP, 304
Watson, 4
wavelet, 469
wavelet transforms, 413
weak conditionality, 215
weak learner, 554
weak marginalization, 658
web crawling, 600
web spam, 603
weight decay, 226, 572, 987
weight function, 533
weight vector, 19
weighted approximate-rank pairwise, 304
weighted average, 71
weighted least squares, 358
weighted least squares problem, 251
Whitening, 142
whitening, 410
Widrow-Hoff rule, 265
Wishart, 125
working response, 250
World Health Organization, 60
wrapper method, 427

Xbox, 654, 795
xor, 486

Zellner’s g-prior, 405
zero avoiding, 733
zero count problem, 77
zero forcing, 733
zero temperature limit, 800
zig-zag, 248
